var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.186,1,2.308]],["body/classes/Admin.html",[0,0.294,1,4.207,2,1.464,3,0.16,4,0.145,5,0.131,6,6.211,7,0.189,8,0.008,9,0.008,10,0.008]],["title/controllers/AdminController.html",[11,1.583,12,3.346]],["body/controllers/AdminController.html",[0,0.234,1,2.901,3,0.128,4,0.116,5,0.104,7,0.151,8,0.009,9,0.007,10,0.007,11,1.99,12,5.322,13,2.041,14,4.957,15,2.711,16,0.309,17,0.929,18,4.496,19,4.114,20,4.496,21,4.114,22,4.293,23,4.293,24,4.293,25,4.114,26,3.007,27,4.114,28,4.496,29,1.307,30,3.95,31,2.802,32,2.208,33,4.206,34,4.527,35,4.957,36,2.498,37,3.554,38,3.554,39,3.394,40,0.505,41,2.546,42,3.394,43,3.394,44,3.251,45,3.251,46,3.251,47,3.251,48,4.957,49,4.957]],["title/modules/AdminModule.html",[50,1.435,51,3.142]],["body/modules/AdminModule.html",[0,0.241,1,2.981,3,0.131,4,0.119,5,0.107,7,0.155,8,0.009,9,0.007,10,0.007,12,5.911,13,2.627,16,0.322,17,0.954,50,2.321,51,6.271,52,2.616,53,3.489,54,5.094,55,5.094,56,5.094,57,5.032,58,6.112,59,3.871,60,2.981,61,2.88,62,5.765,63,3.607,64,5.911,65,4.185,66,5.765,67,5.765,68,4.323,69,5.094]],["title/injectables/AdminService.html",[58,3.142,70,0.756]],["body/injectables/AdminService.html",[0,0.268,3,0.146,4,0.133,5,0.12,7,0.173,8,0.009,9,0.007,10,0.007,16,0.292,17,1.063,40,0.578,58,5.432,70,1.307,71,2.115,72,5.675,73,2.67,74,4.277,75,4.607,76,0.832,77,6.423,78,1.221,79,0.92,80,0.99,81,5.183,82,2.747]],["title/controllers/AdminUsersController.html",[11,1.583,64,3.346]],["body/controllers/AdminUsersController.html",[0,0.115,1,1.419,3,0.062,4,0.057,5,0.051,7,0.074,8,0.009,9,0.004,10,0.004,11,0.973,13,0.998,15,1.326,16,0.292,17,0.454,18,4.068,19,2.477,20,2.707,21,2.477,22,2.586,23,2.586,24,2.586,25,2.477,26,1.471,27,2.477,28,2.707,29,0.639,30,1.932,31,1.371,32,1.08,33,2.058,34,2.215,35,2.425,36,2.31,37,1.738,38,1.738,39,1.66,40,0.639,41,1.245,42,1.66,43,1.66,44,1.591,45,1.591,46,1.591,47,1.591,48,2.425,49,2.425,64,3.205,76,0.882,78,1.294,79,0.975,80,1.049,82,1.174,83,6.276,84,2.425,85,0.278,86,0.795,87,2.422,88,3.777,89,3.777,90,4.237,91,4.374,92,4.237,93,4.237,94,2.425,95,1.468,96,2.539,97,2.744,98,3.696,99,2.903,100,3.777,101,2.829,102,2.744,103,3.036,104,1.236,105,2.98,106,2.425,107,4.172,108,2.744,109,2.477,110,2.915,111,2.744,112,2.744,113,4.232,114,2.215,115,2.744,116,3.496,117,2.744,118,2.744,119,3.585,120,2.744,121,2.744,122,3.009,123,2.744,124,2.215,125,3.585,126,2.744,127,1.94,128,4.274,129,2.744,130,2.215,131,3.585,132,2.744,133,2.477,134,2.744,135,4.172,136,2.215,137,1.591,138,1.528,139,1.66,140,3.496,141,2.058,142,2.058,143,2.058,144,4.296,145,3.954,146,2.425,147,1.528,148,1.738,149,2.058,150,2.744,151,2.425,152,2.215,153,2.215,154,2.215,155,2.215,156,2.744,157,3.176,158,2.425,159,2.847,160,2.058,161,1.528,162,2.744,163,3.646,164,1.66,165,3.942,166,3.885,167,2.744,168,1.449,169,2.744,170,2.744,171,1.516,172,3.777,173,2.425,174,2.744,175,2.425,176,2.744,177,2.847,178,2.425,179,2.744,180,2.425,181,2.744,182,2.744,183,2.744]],["title/interfaces/Alert.html",[184,1.856,185,3.142]],["body/interfaces/Alert.html",[3,0.167,4,0.088,5,0.079,7,0.198,8,0.009,9,0.006,10,0.006,16,0.223,40,0.611,41,2.682,85,0.689,95,1.551,122,4.161,171,2.9,184,2.457,185,4.779,186,2.282,187,2.998,188,1.409,189,5.87,190,1.995,191,3.296,192,3.762,193,3.762,194,3.762,195,3.436,196,4.521,197,5.09,198,4.431,199,3.436,200,4.77,201,2.856,202,4.77,203,4.431,204,1.875,205,3.51,206,5.498,207,2.002,208,4.431,209,2.282,210,1.676,211,3.436,212,3.192,213,3.436,214,3.436,215,3.192,216,3.436,217,3.436,218,6.549,219,3.436,220,4.77,221,3.436,222,3.436,223,3.436,224,5.918,225,3.192,226,3.436,227,3.436,228,3.436,229,3.436,230,3.436,231,2.766,232,3.436,233,5.223,234,3.762]],["title/interfaces/AlertOptions.html",[184,1.856,189,3.142]],["body/interfaces/AlertOptions.html",[3,0.164,4,0.084,5,0.076,7,0.194,8,0.009,9,0.005,10,0.005,16,0.217,40,0.682,41,2.601,80,1.271,85,0.673,95,1.464,122,4.035,171,2.552,184,2.383,185,4.035,186,2.184,187,2.869,188,0.971,189,5.806,190,1.934,191,2.452,192,3.601,193,3.601,194,3.601,195,3.288,196,4.416,197,5.684,198,4.297,199,3.288,200,6.118,201,3.8,202,6.118,203,5.684,204,2.92,205,3.428,206,6.056,207,1.964,208,4.297,209,2.184,210,1.604,211,3.288,212,3.055,213,3.288,214,3.288,215,3.055,216,3.288,217,3.288,218,6.5,219,3.288,220,4.625,221,3.288,222,3.288,223,3.288,224,5.806,225,3.055,226,3.288,227,3.288,228,3.288,229,3.288,230,3.288,231,2.683,232,3.288,233,5.065,234,3.601]],["title/classes/AllExceptionsFilter.html",[0,0.186,235,3.346]],["body/classes/AllExceptionsFilter.html",[0,0.124,2,0.618,3,0.067,4,0.061,5,0.055,7,0.08,8,0.009,9,0.004,10,0.004,16,0.252,17,0.491,40,0.556,41,3.81,73,1.234,76,0.947,78,1.175,79,0.885,80,0.952,82,1.269,85,0.301,86,0.844,95,0.979,104,1.002,138,2.527,168,0.632,190,1.532,191,2.642,207,2.108,235,3.404,236,2.622,237,1.786,238,3.882,239,4.501,240,5.724,241,5.514,242,5.514,243,5.514,244,4.984,245,4.54,246,5.514,247,2.622,248,3.912,249,2.967,250,3.023,251,3.672,252,2.851,253,2.967,254,2.967,255,2.967,256,3.663,257,7.273,258,4.872,259,5.458,260,2.967,261,5.592,262,4.234,263,4.54,264,2.967,265,2.967,266,3.894,267,4.004,268,2.967,269,4.54,270,2.967,271,2.967,272,1.482,273,3.882,274,2.089,275,2.967,276,2.967,277,4.54,278,2.622,279,2.622,280,2.622,281,2.622,282,2.967,283,2.967,284,4.011,285,3.023,286,5.882,287,2.967,288,4.54,289,2.967,290,5.514,291,2.967,292,2.967,293,5.791,294,4.54,295,6.656,296,2.967,297,2.622,298,2.967,299,2.967,300,2.967,301,6.656,302,2.967,303,2.967,304,2.967,305,4.54,306,1.72,307,2.622,308,3.912,309,2.967,310,2.225,311,1.052,312,1.72,313,1.72,314,2.875,315,2.225,316,2.967,317,2.967,318,2.967,319,2.967,320,2.967,321,2.967,322,4.134,323,1.59]],["title/controllers/AppController.html",[11,1.583,324,3.346]],["body/controllers/AppController.html",[0,0.165,3,0.09,4,0.082,5,0.074,7,0.106,8,0.009,9,0.005,10,0.005,11,1.989,13,1.437,16,0.303,17,0.654,26,2.118,29,0.921,36,1.982,40,0.587,76,0.971,78,1.24,79,0.934,80,1.005,82,1.69,85,0.401,86,1.042,87,1.863,95,1.157,96,2.649,104,1.361,105,2.093,109,3.25,110,2.545,137,2.29,138,2.2,145,3.122,161,2.2,163,2.118,164,3.392,165,2.29,168,1.511,251,3.735,252,2.043,262,2.29,266,3.644,267,3.999,272,1.974,285,3.735,306,2.29,324,4.205,325,3.491,326,7.096,327,7.096,328,4.956,329,5.608,330,5.608,331,3.951,332,3.951,333,3.951,334,3.491,335,5.261,336,3.951,337,3.948,338,3.951,339,4.956,340,3.951,341,5.608,342,3.948,343,3.951,344,4.13,345,3.951,346,5.608,347,3.951,348,3.951,349,5.608,350,3.951,351,2.39,352,2.962,353,3.189,354,4.956,355,6.52,356,4.956,357,2.632,358,4.342,359,3.491,360,2.962,361,3.951,362,3.951,363,3.491,364,3.951,365,3.951,366,2.632,367,3.951,368,5.608,369,4.956,370,4.956,371,3.491,372,3.951,373,3.491,374,3.948,375,3.951,376,3.951,377,3.951,378,3.951,379,5.608,380,3.951,381,5.761,382,5.608,383,3.491,384,3.951,385,3.951,386,3.951,387,2.962]],["title/modules/AppModule.html",[50,1.435,388,3.346]],["body/modules/AppModule.html",[0,0.119,3,0.065,4,0.059,5,0.053,7,0.077,8,0.009,9,0.004,10,0.005,13,1.603,16,0.331,17,0.472,40,0.257,50,1.416,51,4.866,52,1.295,53,2.129,57,4.006,59,2.361,60,1.475,61,1.425,63,2.201,65,3.119,76,0.571,78,0.543,79,0.409,80,0.44,86,0.53,99,1.562,104,0.518,110,1.999,139,1.726,159,1.9,164,2.665,210,2.118,235,2.139,237,1.123,240,2.009,262,2.553,266,2.062,306,3.119,308,3.408,311,1.012,324,4.034,357,1.9,358,4.603,359,2.521,388,6.673,389,2.521,390,2.521,391,2.521,392,4.378,393,4.866,394,4.866,395,4.866,396,4.866,397,4.866,398,4.866,399,4.866,400,4.006,401,2.853,402,2.521,403,3.893,404,5.347,405,2.853,406,2.521,407,3.303,408,2.853,409,4.405,410,4.405,411,6.051,412,3.893,413,2.009,414,2.853,415,2.853,416,3.303,417,2.853,418,2.303,419,2.853,420,2.853,421,3.555,422,3.584,423,1.9,424,4.405,425,2.303,426,2.853,427,2.139,428,2.853,429,2.853,430,2.853,431,2.853,432,2.853,433,2.139,434,2.853,435,2.853,436,2.521,437,2.853,438,3.102,439,2.853,440,2.853,441,2.853,442,3.555,443,2.853,444,2.853,445,2.521,446,1.9,447,3.893,448,2.853,449,2.139,450,2.853,451,2.853,452,2.521,453,2.521,454,2.853,455,2.201,456,4.405,457,4.405,458,3.893,459,2.853,460,2.853,461,2.853,462,2.853,463,2.853,464,2.853,465,2.853,466,2.853,467,4.405,468,2.853,469,1.9,470,2.853,471,2.853,472,4.405,473,3.893,474,2.853,475,2.853,476,2.853,477,4.405,478,2.853,479,2.853,480,2.853,481,2.853,482,4.405,483,2.139,484,5.778,485,5.778,486,2.521,487,2.853,488,2.853,489,2.303,490,2.853,491,2.853,492,3.893,493,2.853,494,2.853,495,3.893,496,3.303,497,4.405,498,3.555,499,2.853,500,4.405,501,2.853,502,2.853,503,1.589]],["title/injectables/AppService.html",[70,0.756,358,2.973]],["body/injectables/AppService.html",[0,0.2,3,0.109,4,0.099,5,0.089,7,0.129,8,0.009,9,0.006,10,0.006,16,0.291,17,0.792,40,0.576,50,1.539,60,2.475,70,1.085,71,1.576,73,2.661,76,0.829,78,1.217,79,0.917,80,0.987,85,0.486,86,1.19,87,2.061,101,2.108,104,0.869,105,2.389,136,3.862,139,2.895,159,5.616,160,3.588,168,1.019,191,2.047,207,1.747,231,2.996,239,3.431,247,4.229,248,4.877,250,4.803,328,5.656,334,5.656,335,5.82,337,3.369,339,4.229,344,3.031,358,4.263,407,3.588,504,4.229,505,6.372,506,4.786,507,4.786,508,4.229,509,4.786,510,4.786,511,4.229,512,4.786,513,4.229,514,4.786,515,5.656,516,7.699,517,3.273,518,7.699,519,4.786,520,6.4,521,3.187,522,6.4,523,3.862,524,4.786,525,3.862,526,4.786,527,3.588,528,4.786,529,4.229,530,4.786,531,4.786,532,4.786,533,4.786,534,4.786,535,4.786,536,4.786]],["title/injectables/AtGuard.html",[70,0.756,416,3.346]],["body/injectables/AtGuard.html",[0,0.208,3,0.178,4,0.103,5,0.093,7,0.134,8,0.009,9,0.006,10,0.006,16,0.295,17,0.822,32,1.955,40,0.591,70,1.112,71,1.636,73,2.066,76,0.952,78,1.397,79,1.053,80,1.132,82,2.125,85,0.504,86,1.22,99,2.882,104,1.192,110,3.334,168,1.565,188,1.184,207,1.356,210,2.582,311,1.762,322,5.508,323,2.663,413,3.498,416,4.92,489,6.735,537,4.39,538,5.798,539,5.798,540,4.39,541,4.968,542,5.798,543,4.189,544,4.968,545,2.569,546,6.561,547,4.968,548,5.798,549,4.009,550,2.879,551,3.147,552,4.968,553,3.147,554,4.968,555,4.009,556,3.147,557,4.968,558,4.968,559,6.561,560,4.39,561,4.968,562,4.39,563,4.39,564,4.968]],["title/injectables/AtStrategy.html",[70,0.756,565,3.142]],["body/injectables/AtStrategy.html",[0,0.221,3,0.12,4,0.109,5,0.098,7,0.142,8,0.009,9,0.006,10,0.006,16,0.321,17,0.875,32,2.079,40,0.615,70,1.157,71,1.74,73,2.197,76,0.885,78,1.299,79,0.979,80,1.053,85,0.536,86,1.27,87,2.163,104,0.96,105,2.55,139,3.196,168,1.125,188,1.259,205,3.532,239,2.832,422,5.329,423,3.519,446,4.549,550,3.062,551,3.346,553,3.346,565,4.809,566,4.668,567,3.532,568,4.668,569,5.283,570,6.83,571,8.002,572,5.283,573,4.809,574,3.961,575,4.668,576,3.72,577,3.196,578,3.346,579,3.346,580,5.283,581,5.283,582,5.283,583,4.668,584,4.668,585,6.036,586,4.668,587,4.668,588,5.283,589,4.668]],["title/controllers/AuthController.html",[11,1.583,590,3.346]],["body/controllers/AuthController.html",[0,0.115,3,0.062,4,0.057,5,0.051,7,0.074,8,0.009,9,0.004,10,0.004,11,0.973,13,0.998,15,1.326,16,0.285,17,0.454,18,3.754,19,2.477,20,2.707,21,2.477,22,2.586,23,2.586,24,2.586,25,2.477,26,1.471,27,2.477,28,2.707,29,0.639,31,1.371,32,1.08,36,2.331,37,1.738,38,1.738,39,1.66,40,0.679,41,1.245,42,1.66,43,1.66,44,1.591,45,1.591,46,1.591,47,1.591,76,0.882,78,1.294,79,0.975,80,1.049,82,1.174,85,0.278,86,0.795,87,2.422,91,2.477,95,1.34,96,2.651,99,2.831,101,1.882,103,2.332,104,1.236,105,2.98,110,2.382,113,3.798,135,1.932,137,1.591,138,1.528,142,2.058,144,4.296,145,3.954,147,1.528,148,3.325,161,1.528,163,3.646,165,3.722,166,4.115,168,1.449,207,0.749,267,2.96,272,1.371,311,1.516,352,4.815,353,2.215,387,4.815,407,2.058,469,1.828,496,2.058,508,2.425,511,2.425,517,1.94,579,1.738,590,3.205,591,2.425,592,6.276,593,5,594,3.777,595,3.777,596,3.777,597,3.777,598,2.425,599,2.744,600,4.639,601,4.116,602,2.744,603,2.425,604,2.744,605,2.744,606,4.274,607,2.744,608,2.425,609,3.585,610,2.744,611,4.172,612,2.744,613,2.425,614,4.172,615,2.744,616,2.744,617,2.744,618,2.425,619,4.53,620,2.744,621,2.066,622,2.744,623,2.425,624,2.744,625,2.425,626,4.172,627,2.744,628,2.21,629,2.744,630,1.471,631,3.205,632,3.754,633,2.425,634,2.215,635,2.058,636,2.425,637,1.828,638,2.425,639,1.828,640,2.744,641,2.744,642,2.744,643,2.744,644,2.058,645,2.425,646,2.744,647,2.744,648,2.744,649,2.744,650,2.744,651,4.274,652,2.744,653,2.744,654,2.744,655,1.828,656,2.744,657,2.744,658,2.744,659,2.425,660,2.744,661,2.744,662,2.744,663,2.744,664,2.744,665,2.744,666,2.744,667,2.744,668,2.744]],["title/modules/AuthModule.html",[50,1.435,392,2.827]],["body/modules/AuthModule.html",[0,0.199,3,0.108,4,0.098,5,0.089,7,0.128,8,0.009,9,0.006,10,0.006,13,2.321,16,0.323,17,0.789,34,3.845,50,2.051,52,2.162,53,3.084,59,3.42,60,2.463,61,2.38,63,3.187,65,4.17,87,1.362,139,2.882,210,1.875,344,3.018,392,5.67,400,4.779,421,3.845,422,4.792,438,4.492,445,4.21,550,2.761,565,5.806,590,5.394,632,5.635,633,4.21,669,4.21,670,4.764,671,4.21,672,4.21,673,5.806,674,4.764,675,4.492,676,4.21,677,4.764,678,4.764,679,6.381,680,3.845,681,4.764,682,4.764,683,4.764,684,4.21,685,4.764,686,4.764,687,4.21,688,4.764]],["title/injectables/AuthService.html",[70,0.756,632,2.827]],["body/injectables/AuthService.html",[0,0.088,3,0.048,4,0.043,5,0.039,7,0.056,8,0.009,9,0.003,10,0.003,16,0.268,17,0.347,31,1.047,32,0.825,40,0.668,70,0.584,71,0.69,73,1.432,75,3.295,76,0.943,78,1.383,79,1.042,80,1.121,85,0.213,86,0.64,87,2.424,95,1.525,99,1.99,103,2.793,104,1.289,105,2.906,110,1.99,113,2.901,136,1.691,139,1.268,159,3.736,160,1.571,168,1.357,171,1.555,207,2.216,239,2.722,267,1.047,311,2.445,323,3.568,422,4.017,423,1.396,469,1.396,505,3.875,513,1.852,517,3.883,579,1.328,592,3.044,593,4.487,594,3.044,595,3.044,596,3.044,597,3.044,598,3.044,603,3.044,608,3.044,609,3.072,613,1.852,614,3.087,618,3.044,619,3.382,625,3.044,626,3.575,628,2.626,632,2.182,637,1.396,638,1.852,655,2.92,680,1.691,684,3.875,687,3.044,689,1.852,690,3.444,691,4.385,692,3.444,693,4.385,694,2.096,695,6.373,696,2.096,697,3.444,698,2.096,699,2.096,700,2.096,701,3.971,702,4.779,703,2.096,704,2.096,705,2.096,706,2.096,707,2.096,708,2.096,709,2.096,710,3.444,711,5.61,712,2.096,713,2.096,714,2.096,715,1.571,716,2.096,717,1.691,718,1.571,719,2.096,720,2.096,721,1.476,722,1.476,723,3.807,724,1.691,725,1.852,726,2.78,727,1.852,728,2.096,729,3.444,730,3.444,731,3.444,732,2.096,733,2.096,734,1.691,735,4.098,736,2.096,737,3.044,738,2.454,739,4.385,740,2.096,741,1.852,742,1.691,743,5.61,744,1.918,745,3.444,746,2.096,747,1.124,748,2.096,749,2.096,750,2.096,751,6.092,752,2.096,753,2.096,754,2.096,755,2.096,756,2.096,757,5.078,758,3.288,759,4.957,760,5.61,761,1.852,762,3.044,763,4.385,764,4.385,765,4.385,766,4.385,767,2.096,768,3.444,769,3.044,770,2.096,771,2.096,772,2.096,773,1.852,774,2.096,775,2.096,776,2.096,777,2.096,778,1.328,779,2.096,780,2.096,781,1.691,782,2.096,783,2.096,784,2.096,785,2.096,786,2.096,787,2.096,788,2.096,789,2.182,790,3.444,791,3.444,792,3.444,793,2.096,794,2.096,795,2.096,796,2.096,797,2.096,798,2.096]],["title/classes/CommentEntity.html",[0,0.186,799,2.973]],["body/classes/CommentEntity.html",[0,0.205,2,0.683,3,0.075,4,0.068,5,0.061,7,0.088,8,0.009,9,0.005,10,0.005,16,0.185,29,0.764,36,1.942,40,0.809,76,0.98,85,0.333,95,1.575,96,2.821,99,1.163,101,2.157,103,2.306,171,3.178,177,3.261,190,1.653,191,3.628,204,2.157,209,4.455,455,4.039,521,2.184,630,4.052,778,3.102,799,3.261,800,2.898,801,3.396,802,6.679,803,5.86,804,4.1,805,5.214,806,6.499,807,3.931,808,4.328,809,4.328,810,4.327,811,3.671,812,3.28,813,5.86,814,3.903,815,3.28,816,3.28,817,2.898,818,3.28,819,3.28,820,4.873,821,4.897,822,3.28,823,3.28,824,3.28,825,4.327,826,4.327,827,3.28,828,5.136,829,3.28,830,4.228,831,3.448,832,4.897,833,4.326,834,3.91,835,1.364,836,1.826]],["title/classes/ConversationEntity.html",[0,0.186,837,2.308]],["body/classes/ConversationEntity.html",[0,0.193,2,0.634,3,0.069,4,0.063,5,0.057,7,0.082,8,0.009,9,0.004,10,0.004,16,0.212,29,0.71,36,2.407,40,0.794,76,1.008,79,1.156,80,0.714,85,0.309,91,2.684,95,1.539,96,2.904,101,2.467,103,1.198,109,3.628,127,3.345,171,2.614,188,0.726,190,1.563,191,3.034,205,2.394,209,2.482,210,1.198,231,2.93,312,4.599,455,4.305,621,2.238,789,2.933,805,5.695,807,4.8,808,5.447,809,5.285,830,4.51,831,3.945,833,3.485,834,3.356,835,1.266,836,2.578,837,2.394,838,2.691,839,4.265,840,3.731,841,4.104,842,3.903,843,3.945,844,6.134,845,3.045,846,3.045,847,5.052,848,6.26,849,6.26,850,3.045,851,3.045,852,3.045,853,3.045,854,3.737,855,3.045,856,3.045,857,4.693,858,5.603,859,5.049,860,3.045,861,3.045,862,3.045,863,3.045,864,3.045,865,3.045,866,3.045,867,4.63,868,3.045,869,4.951,870,3.045,871,3.045,872,3.737,873,1.198,874,3.737,875,2.457,876,2.457,877,2.457,878,2.144,879,2.691,880,2.691,881,3.045,882,3.045,883,3.045,884,3.045,885,3.045,886,3.045,887,3.045,888,3.045,889,3.045]],["title/controllers/ConversationsController.html",[11,1.583,890,3.346]],["body/controllers/ConversationsController.html",[0,0.095,1,1.907,3,0.052,4,0.047,5,0.042,7,0.061,8,0.009,9,0.003,10,0.003,11,0.808,13,0.829,15,1.101,16,0.25,17,0.377,18,2.336,19,2.138,20,2.336,21,2.138,22,2.231,23,2.231,24,2.231,25,2.138,26,1.222,27,2.138,28,2.336,29,0.531,31,1.139,32,0.897,36,2.337,37,1.444,38,1.444,39,1.379,40,0.685,41,1.034,42,1.379,43,1.379,44,1.321,45,1.321,46,1.321,47,1.321,76,0.891,78,1.308,79,0.985,80,1.06,82,0.975,85,0.231,86,0.686,87,2.392,91,3.094,95,1.486,96,2.567,98,4.128,99,2.782,101,2.909,103,1.451,104,1.249,109,2.138,113,4.459,135,4.65,137,1.321,138,1.269,140,1.518,141,1.709,144,4.297,145,3.955,147,1.269,148,1.444,149,1.709,161,1.269,163,3.686,165,3.828,166,4.159,168,1.464,171,2.225,210,1.451,311,1.893,313,3.828,517,1.034,621,1.782,630,1.977,631,2.765,644,1.709,831,2.597,837,3.415,841,3.493,842,2.138,844,5.928,890,2.765,891,2.014,892,3.749,893,3.259,894,4.105,895,4.105,896,3.259,897,4.105,898,4.105,899,4.105,900,4.105,901,2.014,902,3.094,903,2.279,904,6.273,905,2.279,906,3.259,907,2.279,908,2.014,909,3.758,910,2.279,911,4.841,912,2.279,913,2.014,914,3.229,915,2.279,916,5.355,917,2.279,918,5.001,919,2.014,920,2.279,921,3.688,922,2.279,923,2.014,924,3.555,925,2.279,926,4.308,927,2.279,928,2.014,929,3.229,930,2.279,931,2.279,932,2.014,933,3.229,934,2.279,935,2.279,936,2.014,937,3.229,938,2.279,939,2.976,940,2.765,941,3.259,942,2.279,943,3.555,944,2.014,945,1.605,946,1.321,947,2.279,948,2.279,949,2.279,950,2.279,951,2.279,952,2.279,953,2.279,954,2.279,955,2.279,956,4.645,957,2.279,958,2.279,959,2.279,960,2.279,961,2.279,962,2.279,963,4.645,964,2.279,965,2.279,966,2.279,967,2.279,968,2.279]],["title/modules/ConversationsModule.html",[50,1.435,393,3.142]],["body/modules/ConversationsModule.html",[0,0.238,3,0.129,4,0.118,5,0.106,7,0.153,8,0.009,9,0.007,10,0.007,13,2.604,16,0.32,17,0.941,50,2.301,52,2.581,53,3.459,57,5.014,59,3.837,60,2.94,61,2.841,63,3.576,65,4.149,68,4.264,393,6.356,400,5.014,418,4.589,890,5.874,943,5.762,944,5.025,969,5.025,970,5.025,971,5.687,972,5.687,973,5.687]],["title/injectables/ConversationsService.html",[70,0.756,943,2.973]],["body/injectables/ConversationsService.html",[0,0.103,1,2.027,3,0.056,4,0.051,5,0.046,7,0.066,8,0.009,9,0.004,10,0.004,16,0.23,17,0.407,32,0.968,36,1.095,40,0.673,70,0.664,71,0.81,73,1.023,74,1.638,75,3.357,76,0.945,78,1.386,79,1.113,80,1.123,81,1.985,82,1.052,85,0.25,86,0.729,87,2.423,95,1.505,103,2.397,104,1.285,109,3.947,113,4.357,127,2.219,168,1.625,171,2.946,195,1.985,196,3.256,205,1.272,207,2.04,210,2.68,231,1.151,313,3.947,517,3.391,738,2.944,747,2.102,804,1.229,839,3.859,840,1.638,841,3.392,842,3.762,843,1.732,893,3.464,894,3.464,895,4.32,896,3.464,897,3.464,898,3.464,899,4.32,900,4.32,901,3.464,902,3.232,908,3.464,909,3.927,913,2.173,914,3.374,918,5.371,919,3.464,923,3.464,924,3.714,928,3.464,929,3.374,932,2.173,933,3.374,936,2.173,937,3.374,943,2.611,974,2.173,975,2.459,976,2.459,977,2.459,978,2.459,979,2.459,980,2.459,981,2.459,982,2.459,983,2.459,984,1.985,985,3.921,986,2.459,987,3.921,988,3.464,989,5.577,990,3.921,991,4.889,992,5.577,993,2.76,994,1.638,995,2.173,996,1.985,997,1.985,998,1.732,999,6.092,1000,6.44,1001,5.577,1002,2.459,1003,2.173,1004,2.459,1005,2.459,1006,3.464,1007,3.921,1008,2.459]],["title/classes/CreateCommentDto.html",[0,0.186,1009,3.142]],["body/classes/CreateCommentDto.html",[0,0.277,2,1.38,3,0.151,4,0.137,5,0.123,7,0.179,8,0.009,9,0.007,10,0.007,16,0.297,29,1.544,40,0.596,188,1.579,799,4.413,801,3.841,804,3.31,873,2.608,1009,5.534,1010,5.856,1011,4.968,1012,5.348,1013,5.348]],["title/classes/CreateConversationDto.html",[0,0.186,902,2.587]],["body/classes/CreateConversationDto.html",[0,0.279,2,1.389,3,0.152,4,0.138,5,0.124,7,0.18,8,0.009,9,0.007,10,0.007,16,0.298,29,1.554,171,2.365,188,1.589,837,3.448,902,4.573,946,3.865,1014,5.893,1015,3.865,1016,5.382,1017,6.669]],["title/classes/CreateMessageDto.html",[0,0.186,1018,3.142]],["body/classes/CreateMessageDto.html",[0,0.279,2,1.389,3,0.152,4,0.138,5,0.124,7,0.18,8,0.009,9,0.007,10,0.007,16,0.298,29,1.554,171,2.365,188,1.589,1016,5.382,1018,5.555,1019,5.893,1020,5.382,1021,7.89,1022,4.695,1023,5.893,1024,5.893]],["title/classes/CreatePostDto.html",[0,0.186,1025,3.142]],["body/classes/CreatePostDto.html",[0,0.277,2,1.38,3,0.151,4,0.137,5,0.123,7,0.179,8,0.009,9,0.007,10,0.007,16,0.297,29,1.544,36,1.851,188,1.579,873,2.608,1025,5.534,1026,5.856,1027,4.666,1028,4.413,1029,5.348,1030,5.348,1031,4.666,1032,3.552]],["title/classes/CustomDto.html",[0,0.186,878,3.142]],["body/classes/CustomDto.html",[0,0.273,2,1.027,3,0.112,4,0.102,5,0.092,7,0.133,8,0.009,9,0.006,10,0.006,16,0.247,29,1.149,36,2.177,40,0.701,76,0.846,80,1.201,85,0.501,95,1.588,96,2.438,99,3.059,103,2.881,171,3.232,190,2.204,191,3.333,209,3.501,455,3.893,807,4.714,808,5.19,809,4.349,811,4.896,830,4.243,833,4.076,834,3.924,835,2.051,878,4.598,998,5.154,1033,4.359,1034,4.349,1035,8.626,1036,5.771,1037,4.933,1038,4.933]],["title/interfaces/CustomHttpExceptionResponse.html",[184,1.856,273,3.142]],["body/interfaces/CustomHttpExceptionResponse.html",[3,0.138,4,0.126,5,0.113,7,0.201,8,0.009,9,0.007,10,0.007,40,0.727,41,2.762,85,0.617,95,1.582,184,3.104,186,3.262,188,1.779,190,2.52,204,2.68,261,4.053,273,5.257,274,5.687,293,4.562,306,4.881,308,5.335,310,6.315,312,4.681,1039,4.911,1040,4.911]],["title/classes/DefaultDto.html",[0,0.186,1041,3.602]],["body/classes/DefaultDto.html",[0,0.27,2,1.346,3,0.147,4,0.134,5,0.12,7,0.174,8,0.008,9,0.007,10,0.007,40,0.697,76,1.004,80,1.325,85,0.656,190,2.613,312,4.982,840,5.522,843,5.838,1041,6.249,1042,5.71,1043,6.462,1044,6.462]],["title/classes/DeleteCommentDto.html",[0,0.186,1045,3.142]],["body/classes/DeleteCommentDto.html",[0,0.278,2,1.384,3,0.151,4,0.137,5,0.124,7,0.179,8,0.009,9,0.007,10,0.007,16,0.298,29,1.549,171,2.358,188,1.584,799,4.428,801,3.853,873,2.616,1011,4.984,1012,5.365,1013,5.365,1045,5.545,1046,5.874]],["title/classes/DeleteConversationDto.html",[0,0.186,909,3.142]],["body/classes/DeleteConversationDto.html",[0,0.279,2,1.389,3,0.152,4,0.138,5,0.124,7,0.18,8,0.009,9,0.007,10,0.007,16,0.298,29,1.554,103,2.625,188,1.589,837,3.448,873,2.625,909,5.555,946,3.865,1015,3.865,1047,5.893,1048,4.224]],["title/classes/DeleteMessageDto.html",[0,0.186,1049,3.142]],["body/classes/DeleteMessageDto.html",[0,0.278,2,1.384,3,0.151,4,0.137,5,0.124,7,0.179,8,0.009,9,0.007,10,0.007,16,0.298,29,1.549,40,0.598,188,1.584,804,3.321,1016,5.365,1020,5.365,1022,4.68,1023,5.874,1024,5.874,1049,5.545,1050,5.874]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.186,914,2.7]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.348,2,1.228,3,0.134,4,0.122,5,0.11,7,0.224,8,0.009,9,0.007,10,0.007,16,0.301,29,1.374,36,1.647,79,0.845,95,1.414,103,2.32,127,2.676,188,1.985,621,2.849,837,3.048,839,3.734,841,4.077,842,4.244,873,3.134,902,4.616,914,4.429,929,3.566,933,3.566,937,3.566,946,3.417,1015,3.417,1048,3.734,1051,4.151,1052,4.42,1053,4.42,1054,4.42]],["title/classes/DeleteOnePost.html",[0,0.186,1055,3.142]],["body/classes/DeleteOnePost.html",[0,0.323,2,1.342,3,0.147,4,0.133,5,0.12,7,0.174,8,0.009,9,0.007,10,0.007,16,0.243,40,0.58,76,0.835,85,0.654,95,1.372,96,2.405,190,2.608,801,4.799,833,4.303,834,4.143,835,2.679,1027,4.536,1055,5.442,1056,6.83,1057,6.442,1058,6.442]],["title/injectables/ErrorsInterceptor.html",[70,0.756,1059,3.346]],["body/injectables/ErrorsInterceptor.html",[0,0.24,3,0.13,4,0.119,5,0.107,7,0.154,8,0.009,9,0.007,10,0.007,16,0.297,17,0.949,40,0.516,70,1.219,71,1.888,76,0.743,78,1.09,79,0.822,80,0.884,85,0.582,86,1.338,104,1.042,168,1.221,237,2.256,266,2.684,311,2.034,543,4.421,545,2.965,1059,5.395,1060,5.066,1061,4.792,1062,5.066,1063,4.989,1064,5.493,1065,5.734,1066,4.558,1067,4.792,1068,5.734,1069,5.807,1070,3.192,1071,5.066,1072,3.819,1073,4.299,1074,5.734,1075,5.066,1076,5.734]],["title/classes/ExceptionFilter.html",[0,0.186,238,3.142]],["body/classes/ExceptionFilter.html",[0,0.249,2,1.242,3,0.136,4,0.123,5,0.111,7,0.161,8,0.009,9,0.007,10,0.007,16,0.303,17,0.987,40,0.537,76,0.773,78,1.134,79,0.855,80,0.919,85,0.605,86,1.371,104,1.083,168,1.27,237,2.902,238,5.192,244,6.46,256,5.951,261,3.972,1066,4.64,1069,5.951,1070,3.32,1077,6.516,1078,5.269,1079,8.005,1080,8.363,1081,5.963,1082,3.972,1083,5.963,1084,5.963]],["title/injectables/ExcludeNullInterceptor.html",[70,0.756,1085,3.346]],["body/injectables/ExcludeNullInterceptor.html",[0,0.242,3,0.132,4,0.12,5,0.108,7,0.156,8,0.009,9,0.007,10,0.007,16,0.298,17,0.957,40,0.52,70,1.226,71,1.904,76,0.749,78,1.1,79,0.828,80,0.891,85,0.587,86,1.345,104,1.05,168,1.231,237,2.275,252,3.74,543,4.434,545,2.989,789,3.662,1061,4.817,1062,5.093,1063,5.004,1064,5.509,1066,4.575,1067,4.817,1070,3.219,1072,3.85,1073,4.335,1085,5.423,1086,5.109,1087,5.781,1088,4.666,1089,5.781]],["title/injectables/ExistedUserMiddleware.html",[70,0.756,1090,3.346]],["body/injectables/ExistedUserMiddleware.html",[0,0.21,3,0.114,4,0.104,5,0.094,7,0.135,8,0.009,9,0.006,10,0.006,16,0.279,17,0.832,40,0.595,70,1.121,71,1.656,73,2.091,74,3.349,75,4.33,76,0.857,78,1.258,79,0.948,80,1.019,82,2.151,85,0.51,86,1.229,87,2.112,101,2.215,103,2.603,104,0.913,171,2.346,207,1.805,210,1.979,237,1.979,266,3.675,267,3.922,272,2.512,311,1.783,323,2.695,342,3.54,351,3.042,352,5.541,517,2.282,718,3.77,741,6.53,758,3.77,789,3.185,993,3.54,1063,4.749,1090,4.959,1091,5.964,1092,4.443,1093,4.959,1094,5.028,1095,5.844,1096,7.851,1097,5.028,1098,5.844,1099,3.77,1100,5.028,1101,5.028,1102,5.028]],["title/injectables/FacebookStrategy.html",[70,0.756,1103,3.142]],["body/injectables/FacebookStrategy.html",[0,0.204,3,0.147,4,0.101,5,0.091,7,0.131,8,0.009,9,0.006,10,0.006,16,0.293,17,0.807,32,1.919,40,0.439,70,1.098,71,1.606,73,3.026,76,0.84,78,0.927,79,1.043,80,0.752,85,0.495,86,1.205,87,2.08,95,1.474,99,2.581,104,0.886,105,2.419,116,5.73,188,1.162,207,1.987,262,3.756,322,4.858,550,2.826,551,3.088,553,3.088,567,3.763,573,4.562,574,4.858,576,4.562,577,2.949,593,5.124,701,3.35,734,5.874,1103,4.562,1104,4.308,1105,4.875,1106,4.308,1107,6.431,1108,4.875,1109,4.875,1110,4.875,1111,3.247,1112,3.088,1113,4.875,1114,3.934,1115,4.875,1116,4.308,1117,4.875,1118,4.308,1119,4.875,1120,3.934,1121,4.875,1122,5.726,1123,4.308,1124,4.308,1125,4.308,1126,4.308,1127,4.308,1128,4.308]],["title/controllers/FileController.html",[11,1.583,1129,3.346]],["body/controllers/FileController.html",[0,0.128,3,0.07,4,0.063,5,0.145,7,0.082,8,0.009,9,0.004,10,0.004,11,1.085,13,1.113,15,1.478,16,0.287,17,0.506,18,2.943,19,2.693,20,2.943,21,2.693,22,2.81,23,2.81,24,2.81,25,2.693,26,1.639,27,2.693,28,2.943,29,0.713,31,1.528,32,1.204,36,2.358,37,1.937,38,1.937,39,1.85,40,0.607,41,1.388,42,1.85,43,1.85,44,1.773,45,1.773,46,1.773,47,1.773,76,0.813,78,1.193,79,1.116,80,0.967,82,1.308,85,0.31,86,0.864,87,2.34,96,2.518,99,1.648,101,2.971,104,1.14,105,2.839,127,2.108,133,2.693,137,1.773,138,1.703,144,4.081,145,3.756,147,1.703,161,1.703,163,3.363,165,3.636,166,3.795,168,1.336,186,1.639,209,1.639,210,1.828,231,3.158,272,2.806,630,3.011,738,3.433,781,5.733,836,3.128,1032,3.617,1129,3.483,1130,2.703,1131,4.533,1132,4.533,1133,4.964,1134,4.964,1135,2.703,1136,6.884,1137,3.058,1138,6.722,1139,3.058,1140,3.058,1141,3.058,1142,2.703,1143,3.058,1144,2.703,1145,3.058,1146,3.058,1147,2.703,1148,3.058,1149,5.544,1150,4.105,1151,4.105,1152,3.058,1153,4.646,1154,3.058,1155,2.703,1156,3.058,1157,4.646,1158,3.058,1159,3.094,1160,4.646,1161,3.058,1162,5.618,1163,5.618,1164,2.703,1165,4.105,1166,4.105,1167,2.468,1168,2.468,1169,3.749,1170,3.094,1171,2.703,1172,2.703,1173,2.703,1174,3.058,1175,2.703,1176,2.703,1177,3.058,1178,2.293,1179,3.058,1180,3.058,1181,3.058,1182,3.058,1183,3.058,1184,3.058,1185,3.058,1186,3.058,1187,3.058,1188,3.058,1189,3.058,1190,5.962,1191,3.058,1192,3.058,1193,3.058,1194,3.058,1195,3.058]],["title/classes/FileService.html",[0,0.186,1178,3.346]],["body/classes/FileService.html",[0,0.192,2,0.957,3,0.105,4,0.095,5,0.086,7,0.124,8,0.009,9,0.006,10,0.006,16,0.235,40,0.751,76,0.916,78,1.344,79,1.012,80,1.089,85,0.466,86,1.158,104,1.283,113,2.376,168,1.505,207,2.278,311,2.506,314,4.475,738,4.159,769,7.604,778,4.475,1032,2.464,1131,5.026,1132,5.026,1178,4.67,1196,3.709,1197,6.228,1198,6.228,1199,6.692,1200,8.847,1201,4.596,1202,6.228,1203,6.692,1204,4.596,1205,6.228,1206,6.692,1207,4.596,1208,3.709,1209,4.596,1210,3.709,1211,4.596,1212,6.228,1213,7.065,1214,5.701,1215,7.065,1216,4.596,1217,4.596,1218,4.596]],["title/modules/FilesModule.html",[50,1.435,394,3.142]],["body/modules/FilesModule.html",[0,0.256,3,0.14,4,0.127,5,0.114,7,0.165,8,0.009,9,0.007,10,0.007,13,2.731,16,0.306,17,1.016,50,2.413,52,2.786,53,3.628,59,4.024,60,3.174,61,3.067,63,3.067,65,4.351,394,6.207,1129,6.08,1170,5.946,1171,5.425,1219,5.425,1220,5.425,1221,6.139,1222,6.139]],["title/classes/FilesService.html",[0,0.186,1170,2.973]],["body/classes/FilesService.html",[0,0.197,2,0.981,3,0.107,4,0.097,5,0.133,7,0.127,8,0.009,9,0.006,10,0.006,16,0.178,40,0.689,76,0.991,78,1.455,79,1.096,80,1.179,85,0.478,86,1.177,87,2.538,104,1.39,105,3.187,168,1.7,186,2.525,836,3.983,1032,4.279,1131,5.11,1132,5.11,1133,5.595,1134,5.595,1135,5.595,1136,7.643,1142,5.595,1147,5.595,1155,5.595,1170,4.217,1172,4.162,1173,4.162,1223,4.162,1224,4.71,1225,4.71,1226,4.71,1227,4.71,1228,7.153,1229,7.153,1230,7.153,1231,7.153,1232,7.153,1233,7.153,1234,4.71]],["title/classes/GetAllConversationDto.html",[0,0.186,945,3.142]],["body/classes/GetAllConversationDto.html",[0,0.324,2,1.35,3,0.147,4,0.134,5,0.121,7,0.209,8,0.009,9,0.007,10,0.007,16,0.293,29,1.511,103,3.053,188,1.849,837,3.352,873,2.551,924,4.317,945,5.462,946,3.757,1015,3.757,1048,4.914,1235,5.231]],["title/classes/GetOneConversationDto.html",[0,0.186,924,2.973]],["body/classes/GetOneConversationDto.html",[0,0.324,2,1.35,3,0.147,4,0.134,5,0.121,7,0.209,8,0.009,9,0.007,10,0.007,16,0.293,29,1.511,103,3.053,188,1.849,837,3.352,873,2.551,924,5.167,945,4.564,946,3.757,1015,3.757,1048,4.914,1235,5.231]],["title/injectables/GoogleStrategy.html",[70,0.756,1236,3.142]],["body/injectables/GoogleStrategy.html",[0,0.208,3,0.113,4,0.103,5,0.093,7,0.134,8,0.009,9,0.006,10,0.006,16,0.307,17,0.822,32,1.955,40,0.447,70,1.112,71,1.636,73,3.055,76,0.85,78,0.945,79,0.94,80,0.766,85,0.504,86,1.22,87,2.1,95,1.482,99,2.327,104,0.903,105,2.449,116,5.411,188,1.184,207,1.791,446,4.37,550,2.879,551,3.147,553,3.147,567,3.799,574,4.92,576,4.62,577,3.005,593,5.173,701,3.393,734,5.929,1106,4.39,1107,6.492,1114,4.009,1116,4.39,1118,4.39,1120,4.009,1122,4.39,1123,4.39,1124,4.39,1125,4.39,1126,4.39,1127,4.39,1128,4.39,1236,4.62,1237,4.39,1238,4.968,1239,7.814,1240,4.968,1241,3.005,1242,4.39,1243,4.968,1244,4.968,1245,4.968,1246,4.968,1247,4.968,1248,4.968,1249,4.968,1250,4.968]],["title/controllers/HealthController.html",[11,1.583,1251,3.602]],["body/controllers/HealthController.html",[0,0.214,3,0.116,4,0.106,5,0.095,7,0.138,8,0.009,9,0.006,10,0.006,11,1.814,13,1.861,15,2.472,16,0.299,17,0.847,26,2.742,29,1.192,73,2.127,76,0.663,85,0.519,86,1.243,87,2.405,96,1.909,104,0.929,105,2.496,110,3.035,145,3.724,163,2.742,168,1.089,239,3.995,285,4.454,306,2.964,363,4.519,366,3.406,425,4.128,517,3.587,1251,5.397,1252,4.519,1253,7.903,1254,7.903,1255,5.115,1256,5.397,1257,5.115,1258,5.115,1259,6.688,1260,6.688,1261,5.115,1262,6.688,1263,6.688,1264,5.115,1265,5.115,1266,5.115,1267,5.115,1268,4.128,1269,5.115,1270,5.115,1271,5.115,1272,3.835,1273,5.115,1274,4.128,1275,6.688,1276,5.115,1277,5.115,1278,5.115]],["title/injectables/HttpCacheInterceptor.html",[70,0.756,1279,3.602]],["body/injectables/HttpCacheInterceptor.html",[0,0.234,3,0.128,4,0.116,5,0.104,7,0.151,8,0.009,9,0.007,10,0.007,16,0.212,17,0.929,40,0.505,70,1.203,71,1.848,76,0.727,78,1.067,79,0.804,80,0.865,85,0.569,86,1.319,95,1.26,101,3.429,104,1.019,168,1.512,188,1.691,207,2.234,266,2.626,407,5.838,543,4.386,545,2.901,1279,5.728,1280,6.272,1281,4.957,1282,7.098,1283,7.098,1284,5.61,1285,4.957,1286,5.61,1287,5.61,1288,7.786,1289,5.61,1290,5.61,1291,5.61,1292,5.61]],["title/classes/HttpExceptionFilter.html",[0,0.186,1293,3.602]],["body/classes/HttpExceptionFilter.html",[0,0.235,2,1.171,3,0.128,4,0.116,5,0.105,7,0.152,8,0.009,9,0.007,10,0.007,16,0.269,17,0.931,40,0.506,76,0.729,78,1.07,79,0.806,80,0.867,85,0.571,86,1.322,104,1.022,207,2.236,237,2.798,238,5.488,244,6.291,256,5.738,257,7.238,258,6.888,259,7.238,261,3.746,262,3.26,266,3.328,267,3.552,272,2.81,278,4.971,279,4.971,280,4.971,281,4.971,293,4.218,297,4.971,306,3.26,307,4.971,310,4.218,311,1.995,374,5.006,1293,5.738,1294,4.971,1295,5.625,1296,5.625,1297,5.625,1298,5.625]],["title/interfaces/HttpExceptionResponse.html",[184,1.856,274,3.142]],["body/interfaces/HttpExceptionResponse.html",[3,0.142,4,0.129,5,0.116,7,0.204,8,0.009,9,0.007,10,0.007,40,0.683,41,3.857,85,0.634,95,1.546,184,3.155,186,3.35,188,1.489,190,2.561,204,3.599,261,4.162,273,4.4,274,5.754,293,6.373,306,3.622,308,3.958,310,4.685,312,3.622,1039,5.043,1040,5.043]],["title/interfaces/IApp.html",[184,1.856,1299,3.602]],["body/interfaces/IApp.html",[3,0.116,4,0.105,5,0.095,7,0.18,8,0.009,9,0.006,10,0.006,16,0.192,40,0.71,79,1.227,85,0.516,95,1.454,101,2.242,168,1.084,184,2.116,186,2.728,190,2.25,207,2.029,311,1.805,342,3.583,521,3.39,828,5.765,994,3.39,1073,3.816,1111,3.39,1299,5.999,1300,4.107,1301,4.998,1302,6.366,1303,5.09,1304,6.666,1305,4.107,1306,5.574,1307,5.09,1308,3.583,1309,4.497,1310,4.497,1311,5.09,1312,5.09,1313,5.09,1314,4.497,1315,5.09,1316,4.497,1317,5.09,1318,6.666,1319,3.816,1320,4.107,1321,5.09,1322,6.366,1323,4.107,1324,5.09,1325,5.09,1326,3.583,1327,5.09,1328,5.09,1329,5.09,1330,5.09,1331,5.09,1332,5.09,1333,5.09]],["title/interfaces/ISwaggerOptions.html",[184,1.856,1334,3.346]],["body/interfaces/ISwaggerOptions.html",[3,0.104,4,0.094,5,0.085,7,0.123,8,0.009,9,0.006,10,0.006,15,2.992,40,0.71,52,3.694,80,1.339,85,0.462,95,1.249,109,3.588,184,1.894,186,2.442,190,2.089,201,3.933,210,2.969,251,4.123,252,2.356,308,3.922,1111,5.643,1334,4.642,1335,4.026,1336,7.546,1337,7.546,1338,7.546,1339,7.487,1340,7.192,1341,6.668,1342,6.191,1343,5.471,1344,6.191,1345,6.191,1346,6.191,1347,6.191,1348,6.191,1349,5.471,1350,7.546,1351,6.191,1352,5.471,1353,5.471,1354,5.471,1355,6.191,1356,6.191,1357,6.191,1358,4.996,1359,4.996,1360,6.191,1361,4.996,1362,6.215,1363,6.215]],["title/modules/InterceptorModule.html",[50,1.435,395,3.142]],["body/modules/InterceptorModule.html",[0,0.238,3,0.129,4,0.118,5,0.106,7,0.153,8,0.009,9,0.007,10,0.007,16,0.332,17,0.941,50,2.301,52,2.581,63,2.841,395,5.04,412,7.645,413,4.004,484,7.489,485,7.489,1059,5.367,1085,5.367,1364,5.687,1365,5.367,1366,5.687,1367,5.04,1368,5.687,1369,5.687,1370,5.687,1371,5.367,1372,5.687]],["title/injectables/LoggerContextMiddleware.html",[70,0.756,427,3.346]],["body/injectables/LoggerContextMiddleware.html",[0,0.242,3,0.132,4,0.12,5,0.108,7,0.156,8,0.009,9,0.007,10,0.007,16,0.273,17,0.957,40,0.52,70,1.226,71,1.904,76,0.749,78,1.1,79,0.828,80,0.891,85,0.587,86,1.345,104,1.05,168,1.231,237,2.275,262,4.794,266,3.872,267,4.132,272,2.888,351,4.375,352,6.202,427,5.423,1063,5.004,1093,5.423,1095,6.392,1098,6.392,1111,3.85,1373,6.392,1374,5.109,1375,5.781,1376,5.781,1377,5.781]],["title/classes/LoggerModule.html",[0,0.186,433,3.346]],["body/classes/LoggerModule.html",[0,0.252,2,1.256,3,0.137,4,0.125,5,0.112,7,0.163,8,0.009,9,0.007,10,0.007,16,0.304,17,0.999,50,1.939,63,3.013,76,0.782,85,0.612,86,1.38,104,1.096,168,1.285,207,1.647,240,5.665,248,5.097,433,6.033,675,4.247,1378,5.33,1379,8.397,1380,6.032,1381,8.046,1382,5.993,1383,6.032,1384,6.032,1385,8.046]],["title/injectables/LoggerService.html",[70,0.756,248,2.827]],["body/injectables/LoggerService.html",[0,0.172,3,0.094,4,0.085,5,0.077,7,0.111,8,0.009,9,0.005,10,0.005,15,4.43,16,0.156,17,0.683,40,0.729,41,2.623,70,0.979,71,1.358,76,1.05,78,1.501,79,1.131,80,1.275,85,0.418,86,1.074,95,1.631,104,1.434,188,1.377,190,1.95,191,3.467,225,4.333,239,3.577,248,3.661,250,4.444,262,4.574,1120,4.664,1386,3.643,1387,5.779,1388,4.664,1389,5.779,1390,5.779,1391,5.779,1392,5.779,1393,4.123,1394,7.893,1395,7.232,1396,4.123,1397,5.779,1398,4.123,1399,5.779,1400,4.123,1401,5.779,1402,4.123,1403,5.779,1404,4.123,1405,4.123,1406,4.123,1407,6.673,1408,5.779,1409,4.123,1410,4.123,1411,4.123,1412,4.123,1413,4.123]],["title/injectables/LoggingInterceptor.html",[70,0.756,1365,3.346]],["body/injectables/LoggingInterceptor.html",[0,0.238,3,0.13,4,0.118,5,0.106,7,0.154,8,0.009,9,0.007,10,0.007,16,0.296,17,0.944,40,0.513,70,1.215,71,1.878,76,0.739,78,1.084,79,0.817,80,0.879,85,0.579,86,1.333,104,1.036,168,1.214,207,1.557,237,2.244,543,4.412,545,2.948,1061,4.776,1062,5.049,1063,4.979,1064,5.482,1066,4.546,1067,4.776,1070,3.175,1072,3.798,1073,4.275,1365,5.377,1414,5.039,1415,5.702,1416,5.702,1417,5.702,1418,5.702,1419,5.702,1420,6.337,1421,5.702,1422,5.702,1423,5.039,1424,5.702]],["title/classes/LoginDto.html",[0,0.186,609,2.7]],["body/classes/LoginDto.html",[0,0.28,2,1.398,3,0.153,4,0.139,5,0.125,7,0.181,8,0.009,9,0.007,10,0.007,16,0.299,29,1.564,188,1.6,609,4.791,628,3.471,701,3.471,873,2.641,1425,5.931,1426,4.47,1427,5.931,1428,5.417]],["title/controllers/MathController.html",[11,1.583,1429,3.346]],["body/controllers/MathController.html",[0,0.189,3,0.103,4,0.094,5,0.084,7,0.122,8,0.009,9,0.006,10,0.006,11,1.605,13,1.646,15,2.187,16,0.314,17,0.749,19,3.572,21,3.572,25,3.572,26,2.426,27,3.572,29,1.055,31,2.261,32,1.781,36,2.199,40,0.407,44,2.623,45,2.623,46,2.623,47,2.623,76,0.799,78,0.861,79,0.649,80,0.698,85,0.459,86,1.146,96,2.301,104,1.12,110,2.797,137,2.623,138,2.52,139,2.738,144,3.728,145,3.432,147,2.52,161,2.52,163,2.426,165,2.623,166,2.738,168,1.313,204,3.467,207,1.683,231,2.118,239,2.426,366,3.014,503,3.903,600,3.999,738,3.637,1066,4.062,1070,2.52,1082,3.014,1256,4.974,1308,3.187,1320,6.073,1429,4.621,1430,3.999,1431,4.526,1432,8.312,1433,4.526,1434,6.164,1435,4.526,1436,6.164,1437,4.526,1438,4.526,1439,6.164,1440,6.164,1441,3.999,1442,3.393,1443,3.999,1444,4.526,1445,4.526,1446,4.526,1447,2.738,1448,6.164,1449,4.526,1450,4.526,1451,4.526,1452,4.526,1453,4.974]],["title/modules/MathModule.html",[50,1.435,396,3.142]],["body/modules/MathModule.html",[0,0.26,3,0.142,4,0.129,5,0.116,7,0.168,8,0.009,9,0.007,10,0.007,13,2.756,16,0.321,17,1.031,50,2.435,52,2.828,65,3.611,79,0.893,396,5.333,1082,4.15,1429,6.119,1442,5.679,1443,5.506,1454,6.231,1455,6.231,1456,7.575,1457,6.231,1458,6.231,1459,6.231]],["title/classes/MessageEntity.html",[0,0.186,1022,3.142]],["body/classes/MessageEntity.html",[0,0.254,2,0.924,3,0.101,4,0.092,5,0.083,7,0.12,8,0.009,9,0.006,10,0.006,16,0.23,29,1.034,36,2.414,40,0.778,76,1.013,85,0.45,95,1.534,96,2.919,99,2.647,171,3.12,177,4.051,190,2.053,191,3.455,455,3.906,515,5.375,527,4.561,804,4.207,807,4.885,808,5.379,809,5.379,825,5.375,826,3.923,830,4.681,833,4.497,834,4.329,835,1.846,844,5.256,918,4.886,998,4.886,1022,4.283,1460,3.923,1461,6.311,1462,6.939,1463,4.439,1464,4.439,1465,4.439,1466,4.439,1467,4.439,1468,4.439,1469,4.439]],["title/controllers/MessagesGateway.html",[11,1.583,1470,3.346]],["body/controllers/MessagesGateway.html",[0,0.159,3,0.087,4,0.079,5,0.071,7,0.103,8,0.009,9,0.005,10,0.005,11,1.353,13,1.387,15,1.843,16,0.306,17,0.631,40,0.629,76,0.905,78,1.328,79,1.102,80,1.076,82,1.631,85,0.387,86,1.017,87,2.448,95,1.366,96,2.607,104,1.269,105,3.026,113,3.823,161,2.123,168,1.362,191,2.735,201,3.089,207,1.745,285,4.258,356,4.832,357,2.54,517,2.901,579,2.416,637,2.54,918,3.85,994,2.54,998,4.501,1018,4.917,1049,4.917,1447,4.654,1470,4.1,1471,3.37,1472,5.649,1473,5.649,1474,5.649,1475,6.393,1476,3.37,1477,6.395,1478,5.468,1479,3.814,1480,3.37,1481,5.468,1482,3.814,1483,3.37,1484,5.468,1485,3.814,1486,3.814,1487,6.983,1488,5.468,1489,3.814,1490,5.468,1491,3.814,1492,6.393,1493,5.468,1494,6.393,1495,3.37,1496,4.258,1497,3.37,1498,3.078,1499,3.37,1500,3.37,1501,3.37,1502,3.814,1503,3.814,1504,3.078,1505,3.37,1506,3.814,1507,3.814,1508,3.814,1509,3.814,1510,3.814,1511,3.814,1512,3.814,1513,3.814,1514,3.814,1515,5.649,1516,3.814,1517,3.814]],["title/modules/MessagesModule.html",[50,1.435,397,3.142]],["body/modules/MessagesModule.html",[0,0.257,3,0.14,4,0.127,5,0.115,7,0.166,8,0.009,9,0.007,10,0.007,13,2.736,16,0.307,17,1.019,50,2.418,52,2.794,53,3.634,59,4.031,60,3.184,61,3.076,63,3.757,397,6.211,1470,6.34,1496,5.876,1497,5.441,1518,5.441,1519,5.441,1520,6.157,1521,6.157]],["title/injectables/MessagesService.html",[70,0.756,1496,2.973]],["body/injectables/MessagesService.html",[0,0.166,3,0.09,4,0.082,5,0.074,7,0.107,8,0.009,9,0.005,10,0.005,16,0.269,17,0.658,36,1.11,40,0.702,70,0.954,71,1.309,73,1.652,74,2.647,75,4.033,76,0.973,78,1.428,79,1.118,80,1.158,82,1.7,85,0.403,86,1.047,87,2.467,95,1.48,99,1.409,104,1.292,105,3.058,113,3.382,127,1.803,168,1.515,171,2.523,207,1.785,210,3.325,517,3.539,579,2.517,637,2.647,718,2.979,738,1.92,744,2.213,758,2.979,804,1.985,839,2.517,840,2.647,841,2.213,842,2.303,918,4.605,993,3.964,994,2.647,998,2.798,1003,3.511,1018,5.009,1049,5.009,1114,6.061,1472,5.779,1473,4.976,1474,4.976,1476,3.511,1480,4.976,1483,4.976,1496,3.75,1500,3.511,1501,3.511,1522,3.511,1523,5.631,1524,3.974,1525,3.974,1526,3.974,1527,5.631,1528,3.974,1529,3.974,1530,4.222,1531,3.974,1532,3.974,1533,3.974,1534,3.974,1535,3.511,1536,3.511,1537,3.974,1538,3.974,1539,5.631,1540,3.974,1541,3.511]],["title/classes/NatsStrategy.html",[0,0.186,1542,3.346]],["body/classes/NatsStrategy.html",[0,0.235,2,1.171,3,0.128,4,0.116,5,0.105,7,0.192,8,0.009,9,0.007,10,0.007,16,0.213,40,0.506,76,0.729,78,1.07,79,0.806,80,0.867,85,0.571,86,1.322,95,1.384,104,1.022,184,2.339,188,1.694,207,1.941,252,4.031,262,3.26,503,3.132,1082,3.746,1447,3.403,1542,5.331,1543,4.54,1544,6.888,1545,7.11,1546,6.283,1547,5.625,1548,5.331,1549,5.845,1550,6.283,1551,4.971,1552,4.971,1553,4.971,1554,4.971,1555,4.971,1556,4.971,1557,4.971,1558,4.971,1559,4.971,1560,4.971,1561,4.971]],["title/interfaces/NatsSubscriber.html",[184,1.856,1548,3.346]],["body/interfaces/NatsSubscriber.html",[0,0.235,3,0.128,4,0.116,5,0.105,7,0.192,8,0.009,9,0.007,10,0.007,16,0.213,40,0.737,85,0.571,95,1.5,184,2.339,186,3.015,188,1.341,190,2.399,207,1.941,252,4.461,503,3.132,1082,3.746,1301,5.331,1542,4.218,1543,4.54,1544,6.283,1546,4.971,1548,5.845,1549,6.469,1550,6.283,1551,4.971,1552,4.971,1553,4.971,1554,4.971,1555,4.971,1556,4.971,1557,4.971,1558,4.971,1559,4.971,1560,4.971,1561,4.971]],["title/controllers/OauthController.html",[11,1.583,1562,3.346]],["body/controllers/OauthController.html",[0,0.132,3,0.072,4,0.066,5,0.059,7,0.085,8,0.009,9,0.005,10,0.005,11,1.124,13,1.153,15,1.532,16,0.282,17,0.525,19,2.767,21,2.767,22,2.887,23,2.887,24,2.887,25,2.767,26,1.699,27,2.767,29,0.739,31,1.584,32,1.248,36,2.305,39,1.918,40,0.617,41,1.439,42,1.918,43,1.918,44,1.837,45,1.837,46,1.837,47,1.837,76,0.888,78,1.215,79,0.916,80,0.985,82,1.356,85,0.322,86,0.887,87,2.429,95,1.019,96,2.558,101,3.018,104,1.245,105,2.871,110,2.166,137,1.837,138,1.765,143,2.377,144,3.473,145,4.01,147,1.765,149,2.377,161,1.765,163,3.674,165,2.767,166,2.887,168,1.46,266,3.753,272,1.584,313,1.837,351,4.85,353,2.558,549,2.558,550,1.837,601,4.647,611,5.071,621,3.48,631,4.79,639,2.111,644,4.305,645,5.073,1112,4.047,1241,3.865,1320,6.47,1326,4.825,1562,3.579,1563,2.801,1564,2.558,1565,6.389,1566,4.218,1567,4.218,1568,4.773,1569,4.218,1570,3.17,1571,5.156,1572,7.085,1573,4.773,1574,3.17,1575,2.801,1576,3.17,1577,6.364,1578,5.741,1579,3.17,1580,2.801,1581,3.17,1582,3.179,1583,3.17,1584,3.17,1585,3.17,1586,3.17,1587,2.801,1588,3.17,1589,3.17,1590,3.824,1591,2.801,1592,3.17,1593,3.17,1594,3.17,1595,4.773,1596,3.17,1597,3.17,1598,3.17,1599,3.17,1600,3.17,1601,4.773,1602,3.17,1603,3.17,1604,3.17,1605,3.17,1606,3.17,1607,3.17,1608,3.17]],["title/modules/OauthModule.html",[50,1.435,398,3.142]],["body/modules/OauthModule.html",[0,0.216,3,0.117,4,0.107,5,0.096,7,0.139,8,0.009,9,0.006,10,0.006,13,2.449,16,0.325,17,0.855,50,2.164,52,2.344,53,3.253,57,4.889,59,3.608,60,2.671,61,2.58,63,3.362,65,3.901,68,3.873,392,5.343,398,6.428,675,4.739,1103,5.939,1236,5.939,1562,5.614,1590,5.998,1591,4.564,1609,4.564,1610,4.564,1611,4.564,1612,5.165,1613,5.165,1614,5.165,1615,5.165,1616,5.165,1617,5.165]],["title/injectables/OauthService.html",[70,0.756,1590,2.973]],["body/injectables/OauthService.html",[0,0.146,3,0.079,4,0.072,5,0.065,7,0.094,8,0.009,9,0.005,10,0.005,16,0.282,17,0.577,40,0.642,70,0.869,71,1.149,73,2.131,76,0.925,78,1.357,79,1.022,80,1.1,85,0.354,86,0.953,87,2.406,95,1.324,99,2.155,104,1.217,110,1.583,157,4.664,158,3.082,161,2.854,168,1.748,207,2.204,239,2.748,266,1.633,311,1.237,313,3.881,314,2.21,323,1.87,342,4.278,351,4.051,517,3.82,556,3.849,573,4.278,601,2.022,619,4.46,628,3.142,630,1.87,632,4.725,659,3.082,701,3.463,725,3.082,738,2.477,744,3.383,1099,3.843,1112,2.21,1241,2.11,1447,2.11,1530,5.593,1566,4.529,1567,4.529,1569,4.529,1575,4.529,1580,4.529,1582,2.323,1587,4.529,1590,3.414,1618,3.082,1619,5.126,1620,3.488,1621,3.488,1622,3.488,1623,3.488,1624,5.126,1625,3.488,1626,3.488,1627,4.136,1628,2.815,1629,3.488,1630,3.488,1631,3.488,1632,5.126,1633,3.488,1634,3.488,1635,6.076,1636,6.076,1637,6.076,1638,6.076,1639,3.488,1640,3.488,1641,3.488,1642,3.488,1643,3.488,1644,3.488,1645,2.815,1646,3.082,1647,3.488,1648,3.488,1649,3.488,1650,3.488,1651,3.488,1652,3.488,1653,3.488,1654,2.815,1655,3.082,1656,3.082,1657,3.488]],["title/classes/PaginationDto.html",[0,0.186,107,3.142]],["body/classes/PaginationDto.html",[0,0.258,2,0.748,3,0.082,4,0.074,5,0.067,7,0.097,8,0.009,9,0.005,10,0.005,16,0.257,29,0.837,32,1.413,36,2.105,40,0.732,76,0.935,80,1.338,85,0.364,95,1.486,96,2.534,107,3.686,161,3.44,168,0.765,190,1.767,191,3.328,204,3.687,210,2.966,215,3.925,231,3.919,251,5.416,252,3.194,449,5.833,455,3.764,469,2.391,525,7.09,834,3.64,835,1.493,854,6.082,869,4.626,872,5.826,874,5.826,916,5.478,996,5.479,997,5.826,1159,4.808,1658,3.173,1659,7.78,1660,5.235,1661,5.459,1662,4.986,1663,6.178,1664,3.59,1665,4.986,1666,3.59,1667,5.235,1668,3.59,1669,3.59,1670,5.459,1671,4.626,1672,5.235,1673,4.986,1674,3.59,1675,3.59,1676,3.59,1677,3.59,1678,4.225,1679,3.59,1680,3.59,1681,3.59,1682,3.59,1683,2.528,1684,3.59,1685,5.235,1686,3.173,1687,3.59,1688,3.59,1689,3.59,1690,3.59,1691,3.59]],["title/injectables/ParseIntPipe.html",[70,0.756,1692,3.602]],["body/injectables/ParseIntPipe.html",[0,0.244,3,0.133,4,0.121,5,0.109,7,0.158,8,0.009,9,0.007,10,0.007,16,0.221,17,0.968,40,0.526,70,1.234,71,1.925,76,0.758,78,1.112,79,0.838,80,0.901,85,0.593,86,1.354,87,2.268,95,1.409,104,1.062,168,1.245,207,1.596,237,2.301,252,3.023,311,2.073,313,3.388,323,3.134,715,4.383,820,5.949,1159,3.894,1319,4.383,1692,5.878,1693,6.436,1694,5.166,1695,5.878,1696,6.436,1697,7.338,1698,5.846,1699,6.436,1700,7.284,1701,5.846,1702,5.846,1703,5.166]],["title/classes/PostEntity.html",[0,0.186,1028,2.973]],["body/classes/PostEntity.html",[0,0.175,2,0.558,3,0.061,4,0.055,5,0.096,7,0.072,8,0.009,9,0.004,10,0.004,16,0.195,29,0.624,36,2.4,40,0.777,76,0.971,85,0.272,95,1.589,96,2.795,101,1.179,103,1.054,171,3.16,188,0.638,190,1.415,191,3.582,201,3.068,204,2.575,209,4.313,210,1.054,374,4.74,455,4.214,630,4.911,747,1.435,778,4.614,801,2.995,807,4.53,808,5.102,809,4.228,811,2.007,814,4.228,817,2.366,828,5.129,830,4.44,831,2.952,833,4.265,834,3.772,835,1.113,836,2.334,873,1.054,878,1.885,879,2.366,880,2.366,1028,2.792,1031,5.497,1032,4.014,1034,4.988,1036,2.366,1704,2.366,1705,3.874,1706,4.17,1707,3.874,1708,4.17,1709,5.167,1710,2.677,1711,4.193,1712,4.719,1713,2.677,1714,7.284,1715,2.677,1716,6.733,1717,2.677,1718,2.677,1719,2.677,1720,2.677,1721,2.677,1722,5.167,1723,2.677,1724,2.677,1725,5.167,1726,2.677,1727,2.677,1728,2.677,1729,4.193,1730,3.705,1731,4.193,1732,2.677,1733,2.677]],["title/controllers/PostsController.html",[11,1.583,1734,3.346]],["body/controllers/PostsController.html",[0,0.085,3,0.046,4,0.042,5,0.038,7,0.055,8,0.009,9,0.003,10,0.003,11,0.721,13,0.739,15,0.982,16,0.258,17,0.336,18,4.318,19,1.946,20,2.127,21,1.946,22,2.031,23,2.031,24,2.031,25,1.946,26,1.09,27,1.946,28,2.127,29,0.474,31,1.015,32,0.8,36,2.319,37,1.287,38,1.287,39,1.229,40,0.662,41,0.922,42,1.229,43,1.229,44,1.178,45,1.178,46,1.178,47,1.178,76,0.933,78,1.37,79,1.032,80,1.11,82,0.869,85,0.206,86,0.624,87,2.479,91,2.888,95,1.455,96,2.688,98,3.885,99,2.702,101,3.093,103,2.764,104,1.308,105,3.08,110,2.984,113,4.205,135,3.885,137,1.178,138,1.132,140,1.354,141,1.524,142,1.524,144,4.451,145,4.097,147,1.132,148,3.495,149,1.524,163,3.861,165,1.946,166,4.357,168,1.534,171,1.191,172,1.796,239,1.8,311,2.23,621,1.623,623,1.796,630,4.241,631,2.518,644,1.524,789,3.157,801,2.888,806,4.184,911,4.184,1009,3.509,1025,3.509,1045,3.509,1055,3.509,1165,2.968,1166,2.968,1175,1.796,1176,1.796,1734,2.518,1735,1.796,1736,4.427,1737,3.792,1738,3.792,1739,2.968,1740,3.792,1741,3.792,1742,3.792,1743,3.792,1744,3.792,1745,2.968,1746,3.792,1747,2.968,1748,1.796,1749,2.033,1750,2.968,1751,5.943,1752,2.033,1753,1.796,1754,2.033,1755,3.358,1756,3.358,1757,2.033,1758,1.796,1759,2.033,1760,4.291,1761,2.033,1762,1.796,1763,2.033,1764,2.033,1765,1.796,1766,2.033,1767,2.71,1768,2.033,1769,1.796,1770,2.033,1771,2.033,1772,1.796,1773,2.033,1774,2.033,1775,1.796,1776,2.033,1777,2.033,1778,1.796,1779,3.319,1780,2.033,1781,3.358,1782,2.033,1783,1.796,1784,3.509,1785,2.033,1786,2.033,1787,1.796,1788,3.319,1789,2.033,1790,2.033,1791,4.984,1792,2.858,1793,1.796,1794,1.796,1795,1.796,1796,1.796,1797,1.796,1798,1.796,1799,1.796,1800,1.796,1801,1.796,1802,1.796,1803,1.796,1804,1.796,1805,1.796,1806,2.033,1807,2.033,1808,2.033,1809,2.033,1810,2.033,1811,2.033,1812,2.033,1813,2.033,1814,3.358,1815,2.033,1816,2.033,1817,2.033,1818,2.033,1819,2.033,1820,2.033,1821,2.033,1822,2.033,1823,2.033,1824,2.033,1825,2.033,1826,2.033,1827,2.033,1828,2.033,1829,2.033,1830,2.033,1831,2.033,1832,2.033,1833,2.033]],["title/modules/PostsModule.html",[50,1.435,399,3.142]],["body/modules/PostsModule.html",[0,0.238,3,0.129,4,0.118,5,0.106,7,0.153,8,0.009,9,0.007,10,0.007,13,2.604,16,0.32,17,0.941,50,2.301,52,2.581,53,3.459,57,5.014,59,3.837,60,2.94,61,2.841,63,3.576,65,4.149,68,4.264,399,6.356,400,5.014,418,4.589,1734,5.874,1792,5.762,1793,5.025,1834,5.025,1835,5.687,1836,5.025,1837,5.687,1838,5.687]],["title/injectables/PostsService.html",[70,0.756,1792,2.973]],["body/injectables/PostsService.html",[0,0.082,3,0.045,4,0.041,5,0.037,7,0.053,8,0.009,9,0.003,10,0.003,16,0.234,17,0.326,32,0.776,36,1.732,40,0.68,70,0.555,71,0.649,73,0.82,74,1.313,75,3.027,76,0.945,78,1.386,79,1.065,80,1.124,81,1.591,82,0.843,85,0.2,86,0.609,87,2.469,95,1.446,103,2.973,104,1.295,105,3.062,109,2.834,113,3.842,168,1.519,171,2.754,196,1.313,207,1.598,210,3.478,311,2.464,312,1.142,323,3.481,517,3.524,621,1.582,630,2.621,639,1.313,715,1.478,717,1.591,722,1.388,738,2.622,742,1.591,747,1.755,789,3.098,801,3.595,802,4.321,804,2.098,840,3.257,843,2.305,988,2.893,993,5.02,1006,1.742,1009,3.443,1025,3.443,1031,4.367,1032,3.325,1045,3.443,1055,3.443,1099,1.478,1530,2.455,1535,1.742,1536,2.893,1541,2.893,1705,5.052,1707,4.389,1737,3.711,1738,2.893,1739,2.893,1740,2.893,1741,2.893,1742,2.893,1743,2.893,1744,2.893,1745,2.893,1746,2.893,1747,2.893,1748,1.742,1753,2.893,1758,2.893,1762,2.893,1765,2.893,1767,1.591,1769,2.893,1772,2.893,1775,2.893,1778,2.893,1779,3.257,1783,2.893,1784,3.443,1787,2.893,1788,3.257,1792,2.18,1794,1.742,1795,1.742,1796,1.742,1797,1.742,1798,1.742,1799,1.742,1800,1.742,1801,1.742,1802,1.742,1803,1.742,1804,1.742,1805,1.742,1839,1.742,1840,1.971,1841,1.971,1842,1.971,1843,1.971,1844,1.971,1845,1.971,1846,1.971,1847,1.971,1848,1.971,1849,1.971,1850,1.971,1851,1.971,1852,1.591,1853,1.971,1854,3.274,1855,3.274,1856,1.971,1857,1.971,1858,2.893,1859,3.274,1860,1.971,1861,1.742,1862,1.971,1863,5.426,1864,1.971,1865,4.199,1866,1.971,1867,1.971,1868,3.274,1869,1.971,1870,6.493,1871,1.971,1872,1.971,1873,1.971,1874,1.742,1875,1.971,1876,1.971,1877,3.274,1878,1.971,1879,1.971,1880,1.742,1881,1.971,1882,1.971,1883,1.971,1884,3.274,1885,1.971,1886,1.971,1887,1.971,1888,1.971]],["title/modules/PrismaModule.html",[50,1.435,400,2.587]],["body/modules/PrismaModule.html",[0,0.251,3,0.136,4,0.124,5,0.112,7,0.162,8,0.009,9,0.007,10,0.007,16,0.303,17,0.993,50,2.379,52,2.722,53,3.576,59,3.967,60,3.101,61,2.996,63,3.697,75,4.752,400,5.149,421,5.972,423,3.994,675,5.21,1352,6.539,1889,5.3,1890,5.3,1891,5.3,1892,5.998,1893,5.998]],["title/injectables/PrismaService.html",[70,0.756,75,2.308]],["body/injectables/PrismaService.html",[0,0.215,3,0.117,4,0.106,5,0.096,7,0.138,8,0.009,9,0.006,10,0.006,16,0.254,17,0.851,40,0.463,70,1.137,71,1.693,73,3.106,75,3.469,76,1.026,78,0.978,79,0.737,80,0.792,85,0.522,86,1.247,87,2.538,104,1.357,105,2.956,188,1.599,237,2.023,314,4.25,517,3.39,553,3.256,1306,3.854,1894,4.542,1895,6.601,1896,6.709,1897,8.424,1898,8.424,1899,5.14,1900,6.709,1901,6.39,1902,5.14,1903,5.14,1904,5.14,1905,4.148,1906,5.14,1907,4.542,1908,5.14,1909,5.14,1910,5.14,1911,5.14,1912,5.14,1913,5.14]],["title/classes/ProfileEntity.html",[0,0.186,1914,2.973]],["body/classes/ProfileEntity.html",[0,0.188,2,0.453,3,0.05,4,0.045,5,0.041,7,0.059,8,0.009,9,0.003,10,0.003,16,0.216,29,0.507,32,0.857,36,2.302,40,0.771,76,0.954,79,1.076,80,1.108,85,0.221,95,1.569,96,2.747,99,2.549,101,1.565,127,3.34,133,4.265,190,1.199,191,3.772,204,3.63,209,1.167,231,3.032,312,4.265,314,3.291,366,2.366,374,4.324,455,4.242,469,1.45,527,3.895,567,1.126,601,2.059,747,1.905,807,2.149,814,1.45,830,3.011,831,2.502,833,2.506,834,3.622,835,0.905,836,1.978,847,2.867,857,5.066,859,4.857,872,5.641,874,5.641,875,1.757,876,1.757,877,1.757,1034,2.366,1272,2.664,1274,2.867,1308,2.502,1453,2.867,1461,1.757,1654,6.165,1662,5.452,1665,2.867,1678,2.867,1683,1.533,1686,1.924,1730,3.978,1914,2.366,1915,1.924,1916,5.058,1917,6.75,1918,3.633,1919,3.978,1920,3.978,1921,3.978,1922,3.978,1923,6.165,1924,3.14,1925,3.14,1926,2.867,1927,3.978,1928,4.591,1929,1.924,1930,4.591,1931,2.177,1932,1.924,1933,1.924,1934,2.867,1935,4.591,1936,1.924,1937,3.375,1938,2.177,1939,2.177,1940,4.591,1941,3.633,1942,1.924,1943,2.177,1944,3.14,1945,3.14,1946,4.591,1947,1.924,1948,2.177,1949,2.177,1950,5.389,1951,1.924,1952,1.924,1953,2.867,1954,1.924,1955,3.978,1956,1.924,1957,2.867,1958,2.177,1959,3.14,1960,3.14,1961,1.924,1962,2.177,1963,5.426,1964,1.924,1965,1.924,1966,2.177,1967,3.633,1968,3.895,1969,5.426,1970,2.867,1971,1.924,1972,2.177,1973,3.14,1974,1.924,1975,1.924,1976,2.867,1977,2.177,1978,3.553,1979,1.632,1980,1.632,1981,1.924,1982,1.924,1983,1.924,1984,2.177,1985,2.177,1986,1.924,1987,1.924,1988,2.177,1989,2.177,1990,2.177,1991,1.924,1992,2.177,1993,2.177,1994,2.177,1995,2.177,1996,2.177,1997,2.177,1998,2.177]],["title/classes/ReactionsPost.html",[0,0.186,1779,2.973]],["body/classes/ReactionsPost.html",[0,0.32,2,1.321,3,0.144,4,0.131,5,0.118,7,0.206,8,0.009,9,0.007,10,0.007,16,0.289,29,1.478,36,1.772,188,1.825,801,4.439,873,2.497,1027,4.467,1028,4.225,1029,5.12,1030,6.18,1031,4.467,1032,3.401,1705,4.757,1706,5.12,1707,4.757,1708,5.12,1779,5.1,1788,4.225,1999,5.12]],["title/classes/RecaptchaDto.html",[0,0.186,614,3.142]],["body/classes/RecaptchaDto.html",[0,0.292,2,1.141,3,0.125,4,0.113,5,0.102,7,0.148,8,0.009,9,0.007,10,0.007,16,0.291,29,1.276,36,1.53,40,0.693,76,0.71,85,0.556,95,1.488,96,2.045,188,1.666,190,2.359,191,2.99,455,3.492,556,5.427,609,4.657,614,4.922,655,5.128,805,4.107,814,3.648,830,4.052,833,3.892,834,3.747,835,2.277,1712,5.641,2000,4.84,2001,8.569,2002,6.991,2003,6.991,2004,6.991,2005,6.991,2006,6.991,2007,6.991,2008,6.991,2009,5.477,2010,5.477,2011,5.477,2012,5.477]],["title/interfaces/Response.html",[184,1.856,267,2.23]],["body/interfaces/Response.html",[0,0.248,3,0.135,4,0.123,5,0.111,7,0.198,8,0.009,9,0.007,10,0.007,16,0.302,17,0.984,40,0.535,70,1.247,85,0.603,168,1.266,184,2.472,186,3.187,190,2.484,237,2.34,267,3.677,543,3.946,545,3.075,738,4.149,1061,3.96,1063,3.597,1064,4.902,1066,4.266,1067,4.902,1070,3.311,1072,3.96,1088,4.799,1367,4.186,2013,4.799,2014,7.065,2015,5.254]],["title/guards/RolesGuard.html",[438,3.142,2016,3.346]],["body/guards/RolesGuard.html",[0,0.182,3,0.099,4,0.09,5,0.081,7,0.117,8,0.009,9,0.006,10,0.006,16,0.293,17,0.72,30,5.465,40,0.618,70,1.016,73,1.807,76,0.959,78,1.407,79,1.06,80,1.14,82,1.859,85,0.441,86,1.114,95,1.218,104,1.247,105,2.238,168,1.576,201,3.317,205,2.247,207,1.873,210,2.359,237,1.711,266,2.035,311,1.542,323,2.33,413,3.06,438,4.221,489,6.476,538,6.859,540,3.841,542,3.841,543,3.966,545,3.1,548,3.841,556,2.753,560,3.841,562,3.841,563,3.841,636,3.841,702,3.259,721,3.06,738,2.101,940,5.819,1066,3.978,1070,2.42,2017,3.841,2018,5.995,2019,5.995,2020,4.347,2021,4.347,2022,5.995,2023,4.347,2024,5.995,2025,4.347,2026,4.347,2027,4.838,2028,4.347,2029,5.995,2030,4.347,2031,4.347,2032,4.347,2033,4.347,2034,4.347,2035,4.347,2036,4.347,2037,4.347,2038,4.347,2039,4.347,2040,4.347,2041,4.347,2042,4.347,2043,3.841,2044,4.347,2045,4.347,2046,4.347]],["title/classes/RtGuard.html",[0,0.186,635,3.346]],["body/classes/RtGuard.html",[0,0.274,2,1.367,3,0.149,4,0.136,5,0.122,7,0.177,8,0.009,9,0.007,10,0.007,16,0.295,32,2.583,73,3.47,76,0.851,188,1.564,549,5.297,550,3.804,551,4.158,553,4.158,635,5.86,2047,5.8,2048,6.564,2049,6.564]],["title/injectables/RtStrategy.html",[70,0.756,673,3.142]],["body/injectables/RtStrategy.html",[0,0.213,3,0.116,4,0.105,5,0.095,7,0.137,8,0.009,9,0.006,10,0.006,16,0.318,17,0.843,32,2.003,40,0.6,70,1.13,71,1.676,73,2.772,76,0.864,78,1.268,79,0.955,80,1.028,85,0.516,86,1.239,87,2.125,104,0.925,139,3.079,168,1.084,188,1.213,207,1.389,210,2.003,239,2.728,266,3.692,272,2.542,313,2.95,351,4.033,422,5.254,423,3.39,446,4.44,550,2.95,551,3.224,553,3.224,567,3.447,568,4.497,573,5.554,574,4.998,575,4.497,576,4.694,577,3.079,578,3.224,583,4.497,584,4.497,585,5.891,586,4.497,587,4.497,589,4.497,593,4.694,673,4.694,727,4.497,2050,4.497,2051,5.09,2052,6.666,2053,5.09,2054,5.09,2055,5.09,2056,5.09,2057,5.09]],["title/classes/SignupDto.html",[0,0.186,619,2.973]],["body/classes/SignupDto.html",[0,0.278,2,1.384,3,0.151,4,0.137,5,0.124,7,0.179,8,0.009,9,0.007,10,0.007,16,0.298,29,1.549,188,1.584,619,5.245,628,3.437,701,3.437,744,3.701,873,2.616,1426,4.428,1427,5.874,1428,5.365,2058,5.874]],["title/injectables/ThrottlerBehindProxyGuard.html",[70,0.756,360,3.346]],["body/injectables/ThrottlerBehindProxyGuard.html",[0,0.246,3,0.134,4,0.122,5,0.11,7,0.159,8,0.009,9,0.007,10,0.007,16,0.277,17,0.976,40,0.531,70,1.241,71,1.942,76,0.764,78,1.121,79,0.845,80,0.909,85,0.598,86,1.361,95,1.3,104,1.071,168,1.256,188,1.745,335,6.427,351,3.566,357,3.927,360,5.49,442,6.427,2059,5.909,2060,5.21,2061,7.964,2062,7.322,2063,7.322,2064,5.896,2065,5.896,2066,5.896,2067,5.896,2068,5.896,2069,5.21,2070,5.896,2071,5.896,2072,5.896]],["title/injectables/TimeoutInterceptor.html",[70,0.756,1371,3.346]],["body/injectables/TimeoutInterceptor.html",[0,0.233,3,0.127,4,0.115,5,0.104,7,0.15,8,0.009,9,0.007,10,0.007,16,0.293,17,0.921,40,0.501,70,1.197,71,1.833,76,0.721,78,1.058,79,0.797,80,0.858,85,0.565,86,1.313,104,1.011,168,1.652,203,4.173,237,2.19,286,4.918,311,1.974,322,5.295,543,4.373,545,2.878,1061,4.703,1062,4.972,1063,4.692,1064,5.434,1066,4.496,1067,4.703,1069,6.26,1070,3.099,1071,4.918,1072,3.706,1075,4.918,1371,5.295,2073,4.918,2074,5.565,2075,7.062,2076,7.062,2077,5.565,2078,5.565]],["title/injectables/TransformInterceptor.html",[70,0.756,1367,3.142]],["body/injectables/TransformInterceptor.html",[0,0.24,3,0.13,4,0.119,5,0.107,7,0.194,8,0.009,9,0.007,10,0.007,16,0.297,17,0.949,40,0.516,70,1.219,71,1.888,76,0.743,78,1.09,79,0.822,80,0.884,85,0.582,86,1.338,104,1.042,168,1.221,184,2.384,237,2.256,267,2.864,543,4.421,545,3.721,738,3.477,1061,5.238,1062,4.037,1063,4.757,1064,5.493,1066,4.558,1067,4.792,1070,3.192,1072,3.819,1088,4.627,1367,5.066,2013,4.627,2014,5.066,2015,5.066,2079,5.734]],["title/classes/UpdateCommentTextDto.html",[0,0.186,1784,3.142]],["body/classes/UpdateCommentTextDto.html",[0,0.278,2,1.384,3,0.151,4,0.137,5,0.124,7,0.179,8,0.009,9,0.007,10,0.007,16,0.298,29,1.549,171,2.358,188,1.584,799,4.428,804,3.321,873,2.616,1011,4.984,1012,5.365,1013,5.365,1784,5.545,2080,5.874]],["title/classes/UpdateConversationDto.html",[0,0.186,929,2.7]],["body/classes/UpdateConversationDto.html",[0,0.337,2,1.123,3,0.123,4,0.111,5,0.1,7,0.217,8,0.009,9,0.007,10,0.007,16,0.289,29,1.257,36,2.135,40,0.688,76,0.99,79,1.095,80,1.315,85,0.547,95,1.515,103,2.122,127,3.469,188,1.922,190,2.336,621,2.606,837,2.788,839,3.416,841,3.853,842,4.011,873,3.008,902,4.43,914,3.262,929,4.186,933,3.262,937,3.262,946,3.125,1015,3.125,1048,3.416,1051,5.677,1052,4.043,1053,4.043,1054,4.043,2081,5.392,2082,5.392,2083,5.392]],["title/classes/UpdateMembersConversationDto.html",[0,0.186,933,2.7]],["body/classes/UpdateMembersConversationDto.html",[0,0.348,2,1.228,3,0.134,4,0.122,5,0.11,7,0.224,8,0.009,9,0.007,10,0.007,16,0.301,29,1.374,36,1.647,79,0.845,95,1.414,103,2.32,127,2.676,188,1.985,621,2.849,837,3.048,839,3.734,841,4.077,842,4.244,873,3.134,902,4.616,914,3.566,929,3.566,933,4.429,937,3.566,946,3.417,1015,3.417,1048,3.734,1051,4.151,1052,4.42,1053,4.42,1054,4.42]],["title/classes/UpdatePasswordDto.html",[0,0.186,626,3.142]],["body/classes/UpdatePasswordDto.html",[0,0.291,2,1.132,3,0.124,4,0.112,5,0.101,7,0.146,8,0.009,9,0.007,10,0.007,16,0.29,29,1.266,36,2.259,40,0.728,76,0.901,85,0.551,95,1.563,96,2.596,99,2.868,188,1.295,190,2.347,311,2.467,455,4.04,626,4.897,628,4.182,701,2.81,830,4.446,833,4.271,834,4.112,835,2.26,873,2.139,1034,4.632,1426,3.619,1428,4.386,1937,5.215,2084,4.802,2085,7.671,2086,7.671,2087,6.956,2088,5.435,2089,5.435,2090,5.435,2091,6.146]],["title/classes/UpdatePostDto.html",[0,0.186,1788,2.973]],["body/classes/UpdatePostDto.html",[0,0.32,2,1.321,3,0.144,4,0.131,5,0.118,7,0.206,8,0.009,9,0.007,10,0.007,16,0.289,29,1.478,36,1.772,188,1.825,801,4.439,873,2.497,1027,4.467,1028,4.225,1029,5.12,1030,6.18,1031,4.467,1032,3.401,1705,4.757,1706,5.12,1707,4.757,1708,5.12,1779,4.225,1788,5.1,1999,5.12]],["title/classes/UpdateRolesConversationDto.html",[0,0.186,937,2.7]],["body/classes/UpdateRolesConversationDto.html",[0,0.348,2,1.228,3,0.134,4,0.122,5,0.11,7,0.224,8,0.009,9,0.007,10,0.007,16,0.301,29,1.374,36,1.647,79,0.845,95,1.414,103,2.32,127,2.676,188,1.985,621,2.849,837,3.048,839,3.734,841,4.077,842,4.244,873,3.134,902,4.616,914,3.566,929,3.566,933,3.566,937,4.429,946,3.417,1015,3.417,1048,3.734,1051,4.151,1052,4.42,1053,4.42,1054,4.42]],["title/classes/UpdateUserAvatarDto.html",[0,0.186,125,2.7]],["body/classes/UpdateUserAvatarDto.html",[0,0.346,2,1.342,3,0.147,4,0.133,5,0.12,7,0.223,8,0.009,9,0.007,10,0.007,16,0.292,29,1.501,119,3.897,125,4.675,127,2.924,131,3.897,133,3.734,188,1.973,873,2.535,1914,5.148,2092,4.83,2093,4.83,2094,5.199,2095,6.238]],["title/classes/UpdateUserCoverDto.html",[0,0.186,131,2.7]],["body/classes/UpdateUserCoverDto.html",[0,0.346,2,1.342,3,0.147,4,0.133,5,0.12,7,0.223,8,0.009,9,0.007,10,0.007,16,0.292,29,1.501,119,3.897,125,3.897,127,2.924,131,4.675,133,3.734,188,1.973,873,2.535,1914,5.148,2092,4.83,2093,4.83,2094,5.199,2095,6.238]],["title/classes/UpdateUserProfileDto.html",[0,0.186,119,2.7]],["body/classes/UpdateUserProfileDto.html",[0,0.244,2,0.678,3,0.074,4,0.067,5,0.061,7,0.157,8,0.009,9,0.005,10,0.005,16,0.184,29,0.758,36,2.254,40,0.755,76,1.062,79,1.042,80,0.75,85,0.33,95,1.527,96,3.058,99,1.154,101,2.144,119,2.945,125,1.968,127,3.421,131,1.968,133,4.369,188,1.543,190,1.643,191,3.39,204,3.554,231,2.73,312,4.017,314,3.084,366,2.167,374,4.106,455,4.145,527,3.65,601,1.886,747,1.744,807,1.968,814,2.167,847,2.626,857,4.854,859,3.65,873,1.281,1034,3.242,1272,2.44,1274,2.626,1308,2.291,1453,2.626,1461,2.626,1654,6.084,1662,6.256,1665,3.929,1678,2.626,1914,5.64,1916,5.154,1917,6.662,1918,3.929,1919,4.302,1920,4.302,1921,4.302,1922,4.302,1923,6.084,1924,2.876,1925,2.876,1926,2.626,1927,5.154,1928,5.72,1929,2.876,1930,4.302,1932,2.876,1933,2.876,1934,2.626,1935,4.302,1936,2.876,1937,2.44,1940,4.302,1941,4.707,1942,2.876,1944,2.876,1945,2.876,1946,4.302,1947,2.876,1950,5.196,1951,2.876,1952,2.876,1953,2.626,1954,2.876,1955,2.876,1956,2.876,1957,2.626,1959,2.876,1960,2.876,1961,2.876,1963,5.154,1964,2.876,1965,2.876,1967,2.626,1968,3.65,1969,5.154,1970,2.626,1971,2.876,1973,2.876,1974,2.876,1975,2.876,1976,2.626,2092,2.44,2093,2.44,2094,2.626,2095,3.929,2096,8.193,2097,3.254,2098,3.254,2099,3.254,2100,3.254,2101,3.254,2102,3.254,2103,3.254,2104,3.254,2105,3.254,2106,3.254,2107,3.254]],["title/classes/UserEntity.html",[0,0.186,1426,2.973]],["body/classes/UserEntity.html",[0,0.215,2,0.729,3,0.08,4,0.072,5,0.065,7,0.094,8,0.009,9,0.005,10,0.005,16,0.23,29,0.816,36,2.156,40,0.727,76,0.869,79,0.961,85,0.355,95,1.569,96,2.504,99,2.865,171,2.953,190,1.734,191,3.781,204,2.954,209,4.244,455,3.955,567,1.81,628,4.399,701,3.991,744,4.636,805,2.624,807,3.108,808,3.422,809,3.422,810,3.093,811,3.852,814,2.331,830,4.141,833,3.978,834,3.596,835,1.455,857,5.029,859,5.029,875,2.825,876,2.825,877,2.825,911,5.258,1034,4.055,1272,5.357,1308,3.618,1426,3.422,1941,2.825,1953,5.413,1957,4.147,1976,4.147,1981,3.093,1982,3.093,1983,3.093,1991,4.54,2091,3.093,2108,3.093,2109,6.708,2110,3.5,2111,3.5,2112,3.5,2113,3.5,2114,3.5,2115,3.5,2116,3.5,2117,4.54,2118,5.138,2119,3.5,2120,5.138,2121,5.138,2122,5.138,2123,5.138,2124,5.138,2125,3.5,2126,5.138,2127,3.5,2128,3.5,2129,3.5,2130,3.5,2131,5.138,2132,5.138,2133,2.624,2134,2.624,2135,3.5,2136,3.5,2137,3.5,2138,3.5,2139,3.5,2140,3.5,2141,3.5]],["title/controllers/UsersController.html",[11,1.583,2142,3.346]],["body/controllers/UsersController.html",[0,0.105,3,0.057,4,0.052,5,0.047,7,0.068,8,0.009,9,0.004,10,0.004,11,0.892,13,0.915,15,1.216,16,0.269,17,0.416,18,4.153,19,2.314,20,2.528,21,2.314,22,2.415,23,2.415,24,2.415,25,2.314,26,1.349,27,2.314,28,2.528,29,0.586,31,1.257,32,0.99,36,2.291,37,1.594,38,1.594,39,1.522,40,0.642,41,1.142,42,1.522,43,1.522,44,1.458,45,1.458,46,1.458,47,1.458,76,0.891,78,1.307,79,0.985,80,1.059,82,1.076,85,0.255,86,0.742,87,2.432,90,4.005,91,3.8,92,4.005,93,4.005,95,1.51,96,2.565,98,3.494,99,3.088,100,2.223,101,3.026,103,2.96,104,1.248,105,2.997,110,2.796,113,4.241,114,2.03,116,4.367,119,3.417,124,2.03,125,3.417,127,1.812,130,2.03,131,3.417,133,2.314,135,4.337,137,1.458,138,1.401,140,1.676,141,1.886,142,1.886,143,1.886,144,4.312,145,3.969,147,1.401,148,4.153,152,2.03,153,2.03,154,2.03,155,2.03,157,3.417,163,3.684,164,1.522,165,3.983,166,4.157,168,1.464,171,2.604,173,2.223,175,2.223,177,3.762,178,2.223,180,2.223,579,1.594,601,2.314,609,3.417,628,1.301,637,1.676,701,3.185,744,2.223,1144,3.527,1151,3.527,1441,2.223,2142,2.993,2143,2.223,2144,4.385,2145,4.385,2146,4.385,2147,4.385,2148,2.223,2149,2.516,2150,2.516,2151,2.516,2152,2.223,2153,2.516,2154,2.516,2155,3.527,2156,2.223,2157,2.516,2158,3.527,2159,2.516,2160,2.516,2161,2.516,2162,2.516,2163,2.516,2164,2.516,2165,2.516,2166,2.516,2167,2.223,2168,2.516,2169,2.516,2170,2.223,2171,2.223,2172,2.223,2173,2.516,2174,2.516,2175,2.516,2176,2.516,2177,2.516,2178,2.516,2179,2.516,2180,2.516,2181,2.516,2182,2.516,2183,2.516,2184,2.516,2185,2.516,2186,2.516]],["title/modules/UsersModule.html",[50,1.435,57,2.587]],["body/modules/UsersModule.html",[0,0.207,3,0.113,4,0.102,5,0.092,7,0.134,8,0.009,9,0.006,10,0.006,13,2.383,16,0.315,17,0.82,40,0.446,50,2.106,52,2.249,53,3.166,57,5.153,59,3.512,60,2.563,61,2.476,63,3.273,65,3.797,69,4.38,76,0.642,78,0.943,79,0.71,80,0.764,86,0.921,104,0.9,110,2.973,157,5.415,164,2.998,262,3.797,306,2.873,308,3.139,392,5.283,400,4.834,402,4.38,403,5.789,404,6.899,406,5.789,492,4.38,495,4.38,675,4.612,676,4.38,1090,3.716,1091,4,2142,5.502,2171,4.38,2187,4.38,2188,4.38,2189,4.956,2190,4.38,2191,4.956,2192,4.956,2193,4.956,2194,4.956,2195,4.956,2196,4.956]],["title/injectables/UsersService.html",[70,0.756,157,2.7]],["body/injectables/UsersService.html",[0,0.091,3,0.05,4,0.045,5,0.041,7,0.059,8,0.009,9,0.003,10,0.003,16,0.256,17,0.361,31,1.091,32,0.859,40,0.648,70,0.604,71,0.719,73,0.908,74,1.454,75,3.18,76,0.933,78,1.369,79,1.031,80,1.109,82,0.934,85,0.222,86,0.662,87,2.45,88,3.148,89,3.148,90,2.875,91,2.615,92,3.641,93,3.641,94,3.148,95,1.501,99,1.846,103,3.309,104,1.271,105,3.029,106,3.148,107,3.664,113,4.157,114,2.875,116,4.66,119,3.148,124,1.762,125,3.148,127,0.991,130,1.762,131,3.148,133,1.266,146,1.93,151,1.93,152,1.762,153,1.762,154,1.762,155,1.762,157,2.155,164,2.729,168,1.49,171,2.712,201,1.055,204,0.962,207,2.051,210,3.268,231,1.667,311,2.301,323,3.477,517,3.611,579,1.383,609,3.148,621,1.055,628,1.129,637,1.454,639,1.454,701,3.498,717,1.762,718,1.637,721,1.537,722,1.537,723,2.671,737,3.148,738,1.721,742,2.875,744,3.192,747,1.909,758,4.611,759,3.148,761,1.93,762,1.93,840,3.005,843,1.537,854,1.762,993,4.927,995,3.148,997,1.762,1099,1.637,1159,2.372,1530,3.902,1661,1.93,1670,1.93,1673,1.762,1861,4.599,2144,3.148,2145,3.986,2146,3.148,2147,3.986,2148,3.148,2152,1.93,2155,4.599,2156,3.148,2167,1.93,2170,1.93,2172,1.93,2197,1.93,2198,2.184,2199,2.184,2200,2.184,2201,2.184,2202,2.184,2203,2.184,2204,2.184,2205,2.184,2206,2.184,2207,2.184,2208,2.184,2209,2.184,2210,3.562,2211,2.184,2212,4.511,2213,3.562,2214,3.562,2215,2.184,2216,2.184,2217,2.184,2218,2.184,2219,2.184,2220,2.184,2221,2.184,2222,3.562,2223,2.184,2224,3.562,2225,3.562,2226,3.562,2227,2.184,2228,4.511,2229,2.184,2230,2.184,2231,3.562,2232,2.184]],["title/injectables/ValidationPipe.html",[70,0.756,2233,3.602]],["body/injectables/ValidationPipe.html",[0,0.306,3,0.112,4,0.102,5,0.092,7,0.133,8,0.009,9,0.006,10,0.006,16,0.277,17,0.817,40,0.765,70,1.107,71,1.625,76,0.846,78,1.242,79,0.936,80,1.007,85,0.501,86,1.214,87,2.092,95,0.876,104,1.186,168,1.559,201,3.538,204,2.173,207,2.127,237,1.941,239,3.924,252,4.029,311,1.75,313,2.859,323,2.644,517,2.239,521,4.349,567,2.551,715,3.699,747,2.644,820,5.843,835,2.051,836,2.747,1319,3.699,1683,3.473,1695,5.27,1696,5.771,1697,6.886,1699,5.771,1703,4.359,2233,5.27,2234,4.359,2235,6.531,2236,6.531,2237,4.933,2238,7.792,2239,4.933,2240,4.933,2241,4.933,2242,4.933,2243,3.981,2244,4.933,2245,4.933,2246,3.699,2247,4.933]],["title/injectables/WsThrottlerGuard.html",[70,0.756,2248,3.602]],["body/injectables/WsThrottlerGuard.html",[0,0.223,3,0.121,4,0.11,5,0.099,7,0.144,8,0.009,9,0.006,10,0.006,16,0.26,17,0.884,40,0.48,70,1.165,71,1.758,76,0.692,78,1.015,79,0.765,80,0.823,85,0.542,86,1.278,87,2.174,95,0.948,104,0.97,105,2.566,168,1.137,188,1.638,204,3.748,207,2.193,210,2.1,311,1.893,323,2.861,357,3.555,442,6.138,447,7.098,449,6.023,517,3.12,539,6.721,543,4.306,545,3.555,1447,3.228,1549,4.002,2059,5.548,2069,6.075,2248,5.548,2249,4.716,2250,5.337,2251,5.337,2252,5.337,2253,5.337,2254,5.337,2255,5.337,2256,5.337,2257,5.337,2258,5.337,2259,5.337,2260,3.758,2261,5.337]],["title/changelog.html",[2262,2.79,2263,2.79,2264,3.288]],["body/changelog.html",[1,3.398,4,0.162,5,0.093,8,0.006,9,0.006,10,0.006,36,1.391,50,2.113,91,3.809,140,3.317,159,3.317,171,1.766,190,1.681,315,6.096,344,3.154,449,3.734,453,4.401,498,4.019,545,2.575,556,3.154,576,3.506,577,3.975,601,2.886,611,4.627,621,3.176,630,2.67,655,3.317,701,2.575,744,2.773,806,3.506,940,3.734,994,4.899,1112,3.154,1241,3.013,1359,5.304,1361,4.019,1388,4.019,1447,3.975,1477,4.019,1515,4.401,1564,4.019,1571,4.019,1582,4.377,1736,3.506,2016,4.927,2243,4.019,2260,3.506,2264,5.807,2265,4.98,2266,4.019,2267,4.927,2268,4.98,2269,4.019,2270,4.98,2271,4.98,2272,4.98,2273,4.401,2274,4.401,2275,5.304,2276,6.572,2277,4.98,2278,6.572,2279,4.98,2280,5.936,2281,3.734,2282,4.98,2283,4.401,2284,4.019,2285,4.019,2286,4.98,2287,4.401,2288,4.98,2289,4.401,2290,4.98,2291,4.401,2292,4.401,2293,4.98,2294,4.98,2295,4.019,2296,4.401,2297,4.401,2298,4.98,2299,4.98,2300,4.98,2301,4.401,2302,4.98,2303,4.019,2304,4.98,2305,4.401,2306,4.98,2307,4.98,2308,4.98,2309,4.98,2310,4.98,2311,4.019,2312,4.98,2313,4.98,2314,4.019,2315,6.572,2316,6.572,2317,4.98,2318,4.98,2319,4.019,2320,4.98,2321,4.019,2322,4.401,2323,3.317]],["title/contributing.html",[2262,2.79,2263,2.79,2324,3.288]],["body/contributing.html",[4,0.113,5,0.071,8,0.006,9,0.005,10,0.005,109,2.206,163,2.041,231,1.782,266,3.458,311,1.35,315,5.765,366,2.535,452,4.826,523,3.072,778,2.411,926,3.072,939,3.072,1159,2.535,1256,3.072,1316,4.826,1323,5.962,1326,2.68,1339,3.364,1388,3.072,1582,4.253,1645,3.072,1656,3.364,1736,2.68,2246,2.854,2260,5.201,2266,5.154,2267,4.095,2269,3.072,2281,2.854,2287,5.643,2305,3.364,2314,3.072,2323,2.535,2324,3.364,2325,5.461,2326,3.807,2327,5.461,2328,5.643,2329,6.977,2330,4.826,2331,5.461,2332,3.807,2333,3.807,2334,5.461,2335,7.159,2336,5.154,2337,3.807,2338,3.807,2339,3.807,2340,3.807,2341,3.807,2342,3.807,2343,5.461,2344,5.643,2345,3.807,2346,5.461,2347,3.807,2348,3.364,2349,3.807,2350,3.364,2351,3.807,2352,3.807,2353,3.807,2354,3.807,2355,3.364,2356,3.807,2357,3.364,2358,5.461,2359,3.807,2360,3.364,2361,5.461,2362,5.461,2363,4.826,2364,3.364,2365,4.826,2366,3.364,2367,3.807,2368,3.807,2369,5.643,2370,4.826,2371,3.807,2372,3.807,2373,3.072,2374,3.807,2375,5.461,2376,5.461,2377,3.807,2378,3.807,2379,6.386,2380,3.807,2381,3.807,2382,5.461,2383,5.461,2384,3.807,2385,3.807,2386,3.807,2387,5.643,2388,6.386,2389,3.807,2390,3.807,2391,3.807,2392,3.807,2393,3.807,2394,3.364,2395,3.807,2396,3.807,2397,3.807,2398,3.807,2399,3.807,2400,3.807,2401,3.807,2402,7.388,2403,3.807,2404,3.807,2405,2.535,2406,3.807,2407,5.461,2408,3.807,2409,3.807,2410,3.807,2411,3.807,2412,3.364,2413,3.807,2414,3.807,2415,3.807,2416,3.807,2417,3.364,2418,3.807,2419,3.364,2420,5.461,2421,3.807,2422,5.461,2423,3.807,2424,3.807,2425,3.807,2426,3.807,2427,5.461,2428,3.807,2429,3.807,2430,3.807,2431,3.807,2432,3.807,2433,3.807,2434,3.807,2435,3.807,2436,3.807,2437,3.807,2438,3.807,2439,3.364,2440,3.364,2441,3.807,2442,3.807,2443,3.807,2444,3.807,2445,3.807,2446,3.807,2447,3.807,2448,3.807,2449,3.807,2450,3.807,2451,3.807,2452,3.807,2453,5.461,2454,3.807,2455,3.807,2456,3.807,2457,3.072,2458,3.807,2459,3.807,2460,3.807,2461,3.807,2462,3.807,2463,3.807,2464,3.807,2465,3.807,2466,5.461,2467,4.826,2468,3.807,2469,3.807]],["title/coverage.html",[2470,4.927]],["body/coverage.html",[0,0.367,1,0.827,5,0.03,6,1.413,8,0.009,9,0.003,10,0.003,11,2.412,12,1.199,14,1.413,31,0.799,33,1.199,40,0.144,50,0.514,58,1.126,64,1.199,70,1.379,72,1.413,75,0.827,83,1.413,84,1.413,99,0.567,107,1.126,110,0.726,119,0.967,125,0.967,131,0.967,147,0.89,148,1.013,157,1.66,184,2.464,185,1.126,187,3.009,189,1.126,208,1.199,212,1.199,235,1.199,236,1.413,238,1.126,248,1.013,250,1.065,261,1.827,267,0.799,273,1.126,274,1.126,311,0.567,324,1.199,325,1.413,358,1.065,360,1.199,416,1.199,427,1.199,433,1.199,438,1.126,503,2.379,504,1.413,537,1.413,565,1.126,566,1.413,590,1.199,591,1.413,609,0.967,614,1.126,619,1.065,626,1.126,632,1.738,634,1.29,635,1.199,639,1.065,673,1.126,689,1.413,721,1.126,722,1.126,723,1.199,724,1.29,747,5.018,799,1.065,800,1.413,837,0.827,838,1.413,878,1.126,890,1.199,891,1.413,902,0.927,909,1.126,914,0.967,916,1.932,924,1.065,929,0.967,933,0.967,937,0.967,943,1.827,945,1.126,974,1.413,984,1.29,1009,1.126,1010,1.413,1011,2.702,1014,1.413,1015,3.434,1018,1.126,1019,1.413,1020,2.214,1022,1.126,1025,1.126,1026,1.413,1027,3.009,1028,1.065,1033,1.413,1039,2.214,1040,2.214,1041,1.29,1042,1.413,1045,1.126,1046,1.413,1047,1.413,1049,1.126,1050,1.413,1051,3.009,1055,1.126,1056,1.413,1059,1.199,1060,1.413,1077,1.413,1078,1.413,1085,1.199,1086,1.413,1090,1.199,1091,1.29,1092,1.413,1103,1.126,1104,1.413,1111,4.962,1129,1.199,1130,1.413,1167,1.29,1168,1.29,1169,1.29,1170,1.065,1178,1.199,1196,2.214,1208,1.29,1210,3.882,1223,1.413,1235,2.214,1236,1.126,1237,1.413,1251,1.29,1252,1.413,1279,1.29,1280,1.413,1281,1.413,1293,1.29,1294,1.413,1299,1.29,1300,2.214,1302,1.29,1305,1.29,1334,1.199,1335,1.413,1365,1.199,1367,1.126,1371,1.199,1373,1.413,1374,1.413,1378,1.413,1382,1.29,1386,1.413,1414,1.413,1425,1.413,1426,1.065,1429,1.199,1430,1.413,1442,1.199,1460,1.413,1470,1.199,1471,1.413,1496,1.065,1522,1.413,1542,1.199,1543,2.214,1548,1.199,1562,1.199,1563,1.413,1590,1.065,1618,1.413,1627,1.29,1628,1.29,1658,1.413,1692,1.29,1693,1.413,1694,1.413,1704,1.413,1734,1.199,1735,1.413,1779,1.065,1784,1.126,1788,1.065,1792,1.827,1839,1.413,1852,1.29,1894,1.413,1914,1.065,1915,1.413,1979,1.199,1980,1.199,1999,2.214,2000,1.413,2013,2.214,2016,1.199,2017,1.413,2027,1.29,2047,1.413,2050,1.413,2058,1.413,2059,2.214,2060,1.413,2073,1.413,2080,1.413,2084,1.413,2092,2.702,2093,2.702,2108,1.413,2133,1.199,2134,1.199,2142,1.199,2143,1.413,2197,1.413,2233,1.29,2234,1.413,2248,1.29,2249,1.413,2323,1.065,2470,1.29,2471,1.599,2472,1.599,2473,1.413,2474,1.413,2475,9.099,2476,1.413,2477,8.666,2478,1.413,2479,1.413,2480,1.413,2481,7.715,2482,1.413,2483,1.413,2484,2.057,2485,1.413,2486,2.425,2487,1.413,2488,1.413,2489,2.425,2490,5.249,2491,1.413,2492,2.425,2493,2.744,2494,4.274,2495,2.425,2496,4.81,2497,2.425,2498,3.604,2499,5.926,2500,2.214,2501,1.413,2502,1.199,2503,1.413,2504,7.715,2505,2.425,2506,1.413,2507,1.413,2508,1.599,2509,1.599,2510,1.413,2511,1.29,2512,1.413,2513,1.413,2514,4.962,2515,4.962,2516,1.413,2517,1.413,2518,1.413,2519,3.185,2520,1.413,2521,2.214,2522,1.413,2523,3.185,2524,1.413,2525,1.413,2526,2.425,2527,1.413,2528,1.413,2529,1.413,2530,2.214,2531,2.214,2532,1.29,2533,1.29,2534,2.214,2535,2.214,2536,2.214,2537,4.274,2538,2.425,2539,1.413,2540,1.413,2541,1.413,2542,3.604,2543,1.413,2544,2.908,2545,1.29,2546,1.413,2547,1.599,2548,1.599,2549,2.214,2550,2.425,2551,1.413,2552,2.214,2553,2.425,2554,1.413,2555,1.599,2556,1.599]],["title/dependencies.html",[53,2.596,2557,3.288]],["body/dependencies.html",[0,0.266,8,0.009,9,0.006,10,0.006,17,0.785,29,1.105,53,2.292,159,3.158,160,3.556,196,3.158,240,3.339,272,3.178,344,3.004,357,3.158,387,3.556,413,3.339,423,3.158,425,3.827,436,4.19,446,3.158,550,2.748,577,4.839,578,4.029,680,3.827,726,3.827,820,3.556,835,1.972,1070,2.64,1082,3.158,1112,4.029,1164,5.621,1241,2.869,1242,4.19,1495,4.19,1499,5.621,1504,3.827,1683,3.339,1905,3.827,2246,3.556,2284,3.827,2303,3.827,2558,4.742,2559,6.361,2560,4.742,2561,4.742,2562,8,2563,4.742,2564,4.742,2565,4.742,2566,6.361,2567,7.178,2568,4.742,2569,4.742,2570,4.742,2571,6.361,2572,4.742,2573,4.742,2574,4.742,2575,4.19,2576,4.742,2577,4.742,2578,4.742,2579,4.742,2580,4.742,2581,4.19,2582,4.742,2583,4.742,2584,4.742,2585,4.742,2586,4.742,2587,4.19,2588,4.742,2589,4.19,2590,4.742,2591,4.742,2592,4.742,2593,4.742,2594,4.742,2595,4.742,2596,4.742,2597,4.742,2598,4.742,2599,4.742,2600,4.742,2601,4.742,2602,4.742,2603,6.361,2604,4.742,2605,4.19,2606,4.742,2607,4.742]],["title/miscellaneous/enumerations.html",[2608,2.251,2609,4.747]],["body/miscellaneous/enumerations.html",[1,3.826,8,0.009,9,0.007,10,0.007,30,5.21,85,0.609,99,2.625,252,4.732,551,4.687,578,5.084,996,5.972,1112,4.687,1241,4.476,1671,6.539,1673,5.972,1967,5.972,1968,5.548,1970,5.972,1986,6.539,2608,3.628,2609,5.3,2610,8.38,2611,5.998,2612,5.998,2613,5.3]],["title/classes/fullNameValidator.html",[0,0.186,1979,3.346]],["body/classes/fullNameValidator.html",[0,0.293,2,1.147,3,0.125,4,0.114,5,0.103,7,0.148,8,0.009,9,0.007,10,0.007,16,0.208,40,0.631,76,0.909,78,1.334,79,1.165,80,1.081,85,0.559,86,1.304,87,1.574,95,1.443,104,1.274,168,1.494,201,3.39,205,2.847,207,1.503,237,2.76,503,3.066,567,3.627,804,2.751,835,2.289,1950,4.128,1979,5.259,2530,4.444,2614,5.434,2615,4.938,2616,4.938,2617,6.139,2618,5.506,2619,6.041,2620,5.259,2621,5.506,2622,4.938,2623,4.444,2624,4.128,2625,4.128,2626,3.877]],["title/miscellaneous/functions.html",[2608,2.251,2627,4.335]],["body/miscellaneous/functions.html",[8,0.009,9,0.006,10,0.006,15,3.519,40,0.769,78,1.625,79,1.224,80,1.317,85,0.425,95,1.599,104,1.441,105,2.181,201,2.824,204,3.494,209,3.133,248,3.702,250,4.482,251,2.79,252,2.166,306,4.439,469,2.79,836,2.333,1167,4.716,1168,4.716,1169,4.716,1190,5.164,1300,3.381,1302,5.431,1305,5.431,1306,3.141,1382,5.431,1628,4.716,1901,4.716,2473,3.702,2474,5.947,2482,3.702,2483,5.164,2484,3.141,2500,3.381,2501,5.947,2510,3.702,2511,4.716,2521,3.381,2523,3.702,2524,5.164,2525,5.164,2527,3.702,2528,5.164,2529,3.702,2543,3.702,2544,6.402,2545,3.381,2546,3.702,2549,3.381,2550,7.01,2551,3.702,2608,2.534,2627,3.381,2628,4.189,2629,4.189,2630,3.702,2631,4.189,2632,4.189,2633,6.73,2634,3.702,2635,3.702,2636,3.702,2637,4.189,2638,4.189,2639,4.189,2640,3.381,2641,4.189,2642,4.189,2643,4.189,2644,4.189,2645,4.189,2646,4.189,2647,4.189,2648,4.189,2649,4.189,2650,4.189,2651,4.189,2652,3.702,2653,4.189,2654,4.189,2655,4.189,2656,4.189,2657,4.189]],["title/classes/imageValidator.html",[0,0.186,2532,3.602]],["body/classes/imageValidator.html",[0,0.284,2,1.095,3,0.12,4,0.109,5,0.098,7,0.142,8,0.009,9,0.006,10,0.006,16,0.199,40,0.613,76,0.882,78,1.295,79,1.082,80,1.049,85,0.533,86,1.266,87,1.502,95,1.469,104,1.237,105,2.541,168,1.45,177,5.029,201,3.29,205,3.52,207,1.858,210,2.069,237,2.679,567,3.904,789,3.33,835,2.185,2531,4.242,2532,5.494,2533,4.242,2614,5.316,2615,4.793,2616,4.793,2617,6.074,2619,5.967,2622,4.793,2626,3.701,2658,5.256,2659,5.256,2660,5.256,2661,4.645,2662,5.256,2663,7.551,2664,5.256]],["title/index.html",[85,0.378,2262,2.79,2263,2.79]],["body/index.html",[0,0.175,1,1.686,4,0.041,5,0.091,8,0.009,9,0.003,10,0.003,13,1.186,36,0.911,40,0.177,53,1.576,61,0.98,63,0.98,79,0.281,86,0.606,91,3.587,98,4.358,99,2.813,104,0.356,109,1.89,110,0.89,116,3.604,127,1.48,133,1.137,143,1.471,164,2.532,171,2.46,177,1.307,191,1.79,206,1.471,218,1.471,231,0.918,240,2.296,250,2.172,266,1.959,267,0.98,272,0.98,285,1.307,311,2.298,315,3.138,337,3.81,344,1.243,369,1.734,370,1.734,381,2.882,383,1.734,387,3.138,455,2.436,458,1.734,473,1.734,483,2.445,486,1.734,496,2.445,498,3.935,521,2.787,525,1.583,555,2.632,556,1.243,577,1.187,578,2.066,601,1.137,611,1.381,621,2.615,628,1.686,630,3.902,655,1.307,701,1.686,702,1.471,735,1.583,738,1.576,744,1.092,751,1.734,773,1.734,778,1.243,781,1.583,806,2.947,835,0.816,836,1.092,841,1.816,842,1.137,844,4.884,892,2.632,911,1.381,916,3.433,926,3.377,939,3.377,940,1.471,994,2.787,1000,1.734,1032,2.243,1093,1.471,1112,1.243,1138,5.16,1149,1.734,1214,1.583,1241,1.187,1309,1.734,1310,1.734,1314,1.734,1322,1.583,1326,1.381,1341,1.734,1343,1.734,1354,2.882,1358,1.583,1359,3.935,1361,2.632,1423,1.734,1447,1.187,1498,2.632,1504,2.632,1564,2.632,1571,2.632,1572,1.734,1582,2.172,1683,1.381,1695,1.583,1725,1.734,1736,2.296,1750,1.734,1767,1.583,1858,1.734,1905,1.583,1907,2.882,1950,1.471,1968,3.138,1987,1.734,2158,2.882,2246,1.471,2260,2.296,2267,4.379,2269,1.583,2273,1.734,2275,1.583,2281,1.471,2284,1.583,2285,2.632,2292,3.698,2295,3.377,2296,1.734,2297,3.698,2301,1.734,2303,1.583,2314,1.583,2319,1.583,2321,1.583,2322,6.13,2323,2.172,2328,2.882,2330,2.882,2335,2.882,2336,2.632,2344,1.734,2348,1.734,2350,1.734,2355,1.734,2357,1.734,2360,1.734,2363,6.432,2365,6.556,2366,1.734,2369,2.882,2387,2.882,2405,2.172,2412,2.882,2417,2.882,2439,1.734,2440,1.734,2467,2.882,2470,1.583,2502,5.043,2511,1.583,2552,1.583,2575,1.734,2581,2.882,2587,1.734,2589,1.734,2605,1.734,2613,1.734,2627,1.583,2665,1.962,2666,1.734,2667,4.782,2668,1.962,2669,3.261,2670,4.185,2671,1.734,2672,1.734,2673,1.962,2674,1.962,2675,1.962,2676,1.962,2677,1.962,2678,1.962,2679,1.962,2680,1.962,2681,1.962,2682,1.962,2683,1.962,2684,3.261,2685,1.962,2686,3.261,2687,1.962,2688,1.962,2689,1.962,2690,4.876,2691,1.962,2692,1.962,2693,1.962,2694,1.734,2695,1.962,2696,4.185,2697,1.962,2698,1.962,2699,3.261,2700,1.962,2701,1.962,2702,3.261,2703,3.261,2704,1.962,2705,1.962,2706,1.962,2707,3.261,2708,1.734,2709,1.734,2710,1.962,2711,3.261,2712,1.962,2713,1.962,2714,1.962,2715,3.261,2716,1.962,2717,1.962,2718,1.962,2719,1.962,2720,1.962,2721,3.261,2722,1.962,2723,1.962,2724,3.261,2725,1.962,2726,1.962,2727,1.962,2728,1.962,2729,3.261,2730,1.962,2731,1.962,2732,1.962,2733,1.962,2734,1.962,2735,1.962,2736,1.962,2737,1.962,2738,1.962,2739,1.962,2740,3.261,2741,1.962,2742,3.261,2743,1.962,2744,1.962,2745,1.734,2746,4.309,2747,1.962,2748,1.962,2749,1.962,2750,1.962,2751,1.962,2752,1.962,2753,1.962,2754,1.962,2755,1.962,2756,1.962,2757,1.962,2758,1.962,2759,1.962,2760,3.261,2761,1.962,2762,1.962,2763,1.734,2764,1.962,2765,1.962,2766,3.261,2767,1.962,2768,1.962,2769,1.962,2770,1.962,2771,1.962,2772,1.962,2773,1.962,2774,1.962,2775,3.261,2776,1.962,2777,1.962,2778,1.962,2779,1.962,2780,1.962,2781,1.962,2782,1.962,2783,1.962,2784,1.962,2785,1.962,2786,1.962,2787,1.962,2788,1.962,2789,1.734,2790,1.962,2791,1.962,2792,1.962,2793,1.962,2794,1.962,2795,1.962,2796,1.962,2797,1.962,2798,1.962,2799,1.962,2800,1.962,2801,1.734,2802,1.962,2803,1.962,2804,3.261,2805,1.962,2806,1.962,2807,1.962,2808,1.962,2809,1.962,2810,1.962,2811,1.962,2812,1.962,2813,1.962,2814,1.962,2815,1.962,2816,1.962,2817,1.962,2818,1.962,2819,1.962,2820,5.412,2821,1.962,2822,1.962,2823,1.962,2824,1.962,2825,1.962,2826,1.962,2827,1.734,2828,1.962,2829,1.962,2830,1.962,2831,1.734,2832,1.962,2833,1.962,2834,1.962,2835,1.962,2836,1.962,2837,3.261,2838,1.962,2839,3.261,2840,1.962,2841,1.962,2842,1.962,2843,1.962,2844,3.261,2845,1.962,2846,1.962,2847,1.962,2848,1.962,2849,1.962,2850,1.962,2851,1.962,2852,1.962,2853,3.261,2854,1.962,2855,1.962,2856,1.962,2857,1.962,2858,1.962,2859,1.962,2860,1.962,2861,1.962,2862,1.962,2863,1.962,2864,2.445,2865,1.962,2866,1.962,2867,1.962,2868,3.261,2869,1.962,2870,1.962,2871,1.962,2872,1.962,2873,1.962,2874,1.962,2875,1.962,2876,1.962,2877,1.962,2878,1.962,2879,1.962,2880,1.962,2881,1.962,2882,1.962,2883,1.962,2884,1.962,2885,3.261,2886,3.261,2887,1.962,2888,1.962,2889,1.962,2890,1.962,2891,1.962,2892,1.962,2893,1.962,2894,1.962,2895,3.261,2896,1.962,2897,1.962,2898,1.962,2899,3.261,2900,1.962,2901,1.962,2902,3.261,2903,1.962,2904,1.962,2905,1.962,2906,1.962,2907,1.962,2908,1.962,2909,1.962,2910,3.261,2911,3.261,2912,3.261,2913,3.261,2914,1.962,2915,1.962,2916,1.962,2917,1.962,2918,1.962,2919,1.962,2920,1.734,2921,1.962]],["title/license.html",[2262,2.79,2263,2.79,2405,2.478]],["body/license.html",[8,0.007,9,0.007,10,0.007,61,2.729,272,2.729,371,6.795,1032,2.929,1093,5.233,1349,4.827,1655,4.827,1722,4.827,1926,4.409,2275,4.409,2283,4.827,2289,4.827,2323,3.638,2394,6.167,2405,3.638,2419,4.827,2457,4.409,2671,4.827,2864,4.096,2920,6.795,2922,4.827,2923,4.827,2924,4.409,2925,4.409,2926,6.979,2927,5.463,2928,5.463,2929,5.463,2930,5.463,2931,4.827,2932,5.463,2933,6.979,2934,8.899,2935,5.463,2936,5.463,2937,5.463,2938,5.463,2939,5.463,2940,5.463,2941,5.463,2942,5.463,2943,5.463,2944,5.463,2945,6.979,2946,5.463,2947,5.463,2948,5.463,2949,5.463,2950,5.463,2951,5.463,2952,5.463,2953,6.979,2954,6.979,2955,5.463,2956,5.463,2957,5.463,2958,5.463,2959,5.463,2960,5.463,2961,5.463,2962,5.463,2963,5.463,2964,5.463,2965,5.463,2966,5.463,2967,5.463,2968,5.463,2969,5.463,2970,5.463,2971,5.463,2972,5.463,2973,5.463,2974,5.463,2975,5.463,2976,5.463,2977,5.463]],["title/modules.html",[52,2.771]],["body/modules.html",[8,0.007,9,0.007,10,0.007,51,4.247,52,2.738,57,3.496,388,4.523,392,3.821,393,4.247,394,4.247,395,4.247,396,4.247,397,4.247,398,4.247,399,4.247,400,3.496,2746,8.051,2763,6.562,2978,9.111,2979,9.111,2980,9.198,2981,7.426]],["title/overview.html",[2982,5.395]],["body/overview.html",[2,0.793,8,0.009,9,0.005,10,0.005,13,1.385,51,5.576,52,1.728,53,2.639,54,3.364,55,3.364,56,3.364,57,5.044,58,4.496,59,2.928,60,1.968,61,1.902,71,1.254,75,4.095,157,4.791,186,2.041,231,1.782,358,4.253,388,6.838,389,3.364,390,3.364,391,3.364,392,5.513,393,5.808,394,5.201,395,4.496,396,4.496,397,5.201,398,6.128,399,5.808,400,4.852,565,4.496,632,5.016,669,3.364,671,3.364,672,3.364,673,4.496,943,4.253,969,3.364,970,3.364,1103,4.496,1170,4.253,1219,3.364,1220,3.364,1236,4.496,1496,4.253,1518,3.364,1519,3.364,1590,5.275,1609,3.364,1610,3.364,1611,3.364,1792,4.253,1834,3.364,1836,3.364,1889,3.364,1890,3.364,1891,3.364,1934,4.407,2016,2.854,2117,3.364,2187,3.364,2188,3.364,2190,3.364,2982,3.364,2983,3.807,2984,3.807]],["title/classes/passwordValidator.html",[0,0.186,2133,3.346]],["body/classes/passwordValidator.html",[0,0.292,2,1.138,3,0.124,4,0.113,5,0.102,7,0.147,8,0.009,9,0.007,10,0.007,16,0.206,40,0.628,76,0.904,78,1.327,79,1.102,80,1.076,85,0.554,86,1.297,87,1.561,95,1.486,104,1.268,168,1.486,201,3.373,205,2.825,207,1.491,237,2.746,503,3.042,567,3.608,628,2.825,804,2.729,835,2.271,2133,5.233,2534,4.409,2614,5.414,2615,4.914,2616,4.914,2617,6.128,2619,6.029,2620,5.233,2622,4.914,2624,4.096,2625,4.096,2626,3.846,2985,5.463,2986,5.463,2987,4.827,2988,4.827,2989,4.827,2990,4.827]],["title/classes/phoneNumberValidator.html",[0,0.186,1980,3.346]],["body/classes/phoneNumberValidator.html",[0,0.292,2,1.138,3,0.124,4,0.113,5,0.102,7,0.147,8,0.009,9,0.007,10,0.007,16,0.206,40,0.628,76,0.904,78,1.327,79,1.102,80,1.076,85,0.554,86,1.297,87,1.561,95,1.486,104,1.268,168,1.486,201,3.373,204,2.406,205,2.825,207,1.491,237,2.746,503,3.042,567,3.608,747,2.929,804,2.729,835,2.271,1923,4.409,1980,5.233,2535,4.409,2614,5.414,2615,4.914,2616,4.914,2617,6.128,2619,6.029,2620,5.233,2622,4.914,2624,4.096,2625,4.096,2626,3.846,2991,5.463,2992,5.463,2993,4.827,2994,4.827]],["title/properties.html",[190,1.813,2557,3.288]],["body/properties.html",[8,0.009,9,0.007,10,0.007,36,1.73,190,2.09,272,3.094,337,5.314,354,5.473,373,5.473,483,6.104,577,3.746,578,3.923,828,4.361,1447,3.746,1477,4.998,1582,4.125,2274,5.473,2280,4.998,2291,5.473,2295,4.998,2370,5.473,2373,6.091,2405,4.125,2502,5.659,2666,5.473,2667,5.473,2708,5.473,2709,5.473,2831,5.473,2864,4.644,2922,5.473,2923,5.473,2924,4.998,2925,4.998,2995,6.194,2996,5.473,2997,6.194,2998,6.194,2999,6.194,3000,6.194]],["title/miscellaneous/typealiases.html",[2608,2.251,3001,5.372]],["body/miscellaneous/typealiases.html",[3,0.112,8,0.008,9,0.006,10,0.006,40,0.828,41,2.244,85,0.502,122,3.481,187,3.481,197,4.904,198,3.707,199,3.99,1199,5.78,1203,5.78,1206,5.78,1268,3.99,1301,6.878,2484,3.707,2544,5.279,2545,3.99,2608,2.991,2636,4.369,2640,5.279,2652,5.78,3002,4.945,3003,4.369,3004,6.541,3005,8.334,3006,6.541,3007,6.541,3008,8.112,3009,6.541,3010,7.33,3011,6.541,3012,6.541,3013,6.541,3014,6.541,3015,6.541,3016,6.541,3017,6.541,3018,6.541,3019,4.945,3020,6.541,3021,6.541,3022,6.541,3023,6.541,3024,7.33,3025,6.541,3026,4.945,3027,4.945,3028,4.945,3029,5.78,3030,5.78,3031,4.369,3032,4.945,3033,4.945]],["title/classes/usenameValidator.html",[0,0.186,2134,3.346]],["body/classes/usenameValidator.html",[0,0.293,2,1.147,3,0.125,4,0.114,5,0.103,7,0.148,8,0.009,9,0.007,10,0.007,16,0.208,40,0.631,76,0.909,78,1.334,79,1.106,80,1.081,85,0.559,86,1.304,87,1.574,95,1.49,104,1.274,168,1.494,201,3.39,205,2.847,207,1.503,237,2.76,503,3.066,567,3.627,744,3.066,804,2.751,835,2.289,2134,5.259,2536,4.444,2614,5.434,2615,4.938,2616,4.938,2617,6.139,2619,6.041,2620,5.259,2622,4.938,2623,4.444,2624,4.128,2625,4.128,2626,3.877,3034,5.506,3035,5.506]],["title/miscellaneous/variables.html",[2311,4.335,2608,2.251]],["body/miscellaneous/variables.html",[1,0.803,3,0.095,8,0.009,9,0.003,10,0.003,30,1.093,31,1.336,33,2.006,36,0.984,40,0.729,41,1.6,50,0.86,79,0.74,85,0.358,87,0.444,95,1.397,99,2.073,101,1.178,110,1.214,122,2.482,140,1.034,147,1.489,148,1.695,164,0.939,168,1.178,171,1.486,185,1.093,187,1.093,189,3.327,191,0.664,196,1.034,197,1.164,198,2.643,200,1.253,202,1.253,203,2.006,204,2.081,205,1.822,206,2.643,207,1.988,208,2.643,209,0.832,210,1.649,211,1.253,212,2.006,213,1.253,214,1.253,215,1.164,216,1.253,217,1.253,218,5.275,219,1.253,220,2.159,221,1.253,222,1.253,223,1.253,224,3.381,225,1.164,226,1.253,227,1.253,228,1.253,229,1.253,230,1.253,231,1.65,232,1.253,251,5.75,252,4.453,266,1.961,267,0.776,284,1.372,285,1.034,308,2.654,311,2.073,312,0.9,313,1.55,314,2.233,337,1.884,342,2.95,344,0.983,351,0.939,422,1.034,446,1.034,483,2.643,496,1.164,503,3.254,517,1.214,521,3.685,523,1.253,529,1.372,543,1.434,545,1.383,555,2.159,556,0.983,573,1.093,578,0.983,601,2.738,611,1.093,621,0.75,628,1.822,630,2.246,634,2.159,639,1.782,655,1.034,702,2.643,721,1.884,722,1.884,723,2.006,724,2.159,726,1.253,735,2.159,738,2.283,747,1.434,778,0.983,804,2.093,806,1.093,828,1.093,836,0.864,841,0.864,844,2.482,892,1.253,906,1.372,911,1.093,916,3.636,941,1.372,984,2.159,1032,0.832,1111,1.782,1150,1.372,1159,1.034,1196,1.253,1208,2.159,1210,5.121,1214,3.381,1241,0.939,1268,2.159,1285,2.364,1301,1.164,1306,2.006,1319,1.164,1322,1.253,1323,1.253,1326,1.093,1334,1.164,1340,1.372,1353,2.364,1358,1.253,1362,1.372,1363,2.364,1420,2.364,1442,2.643,1498,1.253,1505,2.364,1549,3.141,1577,1.372,1627,2.159,1645,1.253,1646,2.364,1712,1.253,1736,1.093,1852,2.159,1874,2.364,1880,2.364,1895,1.372,1901,1.253,1918,1.253,1937,1.164,2027,2.159,2043,1.372,2243,1.253,2260,1.093,2266,1.253,2267,1.164,2280,1.253,2281,1.164,2285,1.253,2311,1.253,2319,1.253,2321,2.159,2323,1.782,2336,1.253,2364,1.372,2373,1.253,2405,1.034,2457,1.253,2476,1.372,2478,2.364,2479,1.372,2480,2.364,2484,1.164,2485,2.364,2486,1.372,2487,2.364,2488,2.364,2489,1.372,2491,1.372,2492,1.372,2495,1.372,2497,1.372,2500,1.253,2502,2.006,2503,1.372,2505,1.372,2506,2.364,2507,2.364,2512,1.372,2513,2.364,2514,1.372,2515,5.164,2516,1.372,2517,2.364,2518,1.372,2519,1.372,2520,3.115,2521,1.253,2522,2.364,2526,1.372,2530,1.253,2531,1.253,2533,2.159,2534,1.253,2535,1.253,2536,1.253,2538,2.364,2539,2.364,2540,2.364,2541,1.372,2549,1.253,2552,3.381,2553,3.115,2554,2.364,2608,0.939,2623,2.159,2630,1.372,2634,1.372,2635,1.372,2640,1.253,2661,1.372,2672,1.372,2694,1.372,2745,2.364,2789,1.372,2801,2.364,2827,1.372,2864,1.164,2924,1.253,2925,1.253,2931,1.372,2987,1.372,2988,1.372,2989,1.372,2990,1.372,2993,1.372,2994,1.372,2996,1.372,3003,2.364,3029,2.364,3030,2.364,3031,2.364,3036,5.532,3037,1.553,3038,1.553,3039,3.525,3040,2.675,3041,2.675,3042,1.553,3043,1.553,3044,1.553,3045,1.553,3046,1.553,3047,1.553,3048,2.675,3049,1.553,3050,1.553,3051,1.553,3052,1.553,3053,1.553,3054,1.553,3055,1.553,3056,1.553,3057,2.675,3058,1.553,3059,1.553,3060,1.553,3061,1.553,3062,1.553,3063,1.553,3064,1.553,3065,4.19,3066,1.553,3067,1.553,3068,2.675,3069,2.675,3070,1.553,3071,1.553,3072,1.553,3073,1.553,3074,1.553,3075,1.553,3076,1.553,3077,1.553,3078,1.553,3079,2.675,3080,1.553,3081,1.553,3082,1.553,3083,1.553,3084,1.553,3085,1.553,3086,1.553,3087,1.553,3088,1.553,3089,1.553,3090,1.553,3091,1.553,3092,2.675,3093,1.553,3094,1.553,3095,1.553,3096,1.553,3097,1.553,3098,1.553,3099,1.553,3100,4.19,3101,1.553,3102,1.553,3103,1.553,3104,1.553,3105,1.553,3106,1.553,3107,1.553,3108,1.553,3109,1.553,3110,2.675,3111,1.553,3112,1.553,3113,1.553,3114,1.553,3115,2.675,3116,1.553,3117,1.553,3118,1.553,3119,1.553,3120,1.553,3121,1.553,3122,1.553,3123,1.553,3124,1.553,3125,1.553,3126,1.553,3127,1.553,3128,1.553,3129,1.553,3130,1.553,3131,1.553,3132,1.553,3133,1.553,3134,1.553,3135,1.553,3136,1.553,3137,1.553,3138,1.553,3139,1.553,3140,1.553,3141,1.553,3142,1.553,3143,1.553,3144,1.553,3145,1.553,3146,1.553,3147,1.553,3148,1.553,3149,1.553,3150,1.553,3151,1.553,3152,1.553,3153,1.553,3154,1.553,3155,1.553,3156,1.553,3157,1.553,3158,1.553,3159,1.553,3160,1.553,3161,2.675,3162,4.19,3163,2.675,3164,1.553,3165,1.553,3166,1.553,3167,1.553,3168,1.553,3169,1.553,3170,1.553,3171,1.553,3172,1.553,3173,1.553,3174,1.553,3175,2.675,3176,1.553,3177,1.553,3178,1.553,3179,1.553,3180,2.675,3181,1.553,3182,2.675,3183,1.553,3184,3.525,3185,1.553,3186,1.553,3187,1.553,3188,1.553]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":747,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.12",{"_index":2594,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2598,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2579,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":2574,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1278,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":2578,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2592,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2475,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2542,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2548,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2537,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2547,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2504,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2481,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2494,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2499,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2490,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2498,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2496,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2493,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":848,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["01t00:00:00.000z",{"_index":849,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["02t05:01:03.938z",{"_index":1945,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["03",{"_index":2318,"title":{},"body":{"changelog.html":{}}}],["03anyolqtms4nv1u0xnktfzxsjthwjrliuvxjabk18zqsuc8imkuz_mvv7tk6aobulne66mrwpoe9ypfs6epl76uxlyj4qqkywwabx",{"_index":2002,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["07",{"_index":1944,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["09",{"_index":2276,"title":{},"body":{"changelog.html":{}}}],["09999999999",{"_index":1973,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["0})@isnumber()@isnotempty({message",{"_index":1726,"title":{},"body":{"classes/PostEntity.html":{}}}],["1",{"_index":231,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AppService.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"contributing.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":2591,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":2585,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":2586,"title":{},"body":{"dependencies.html":{}}}],["1.18.0",{"_index":2606,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2582,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2317,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":2274,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.7.4",{"_index":2580,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1159,"title":{},"body":{"controllers/FileController.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1930,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1024",{"_index":1275,"title":{},"body":{"controllers/HealthController.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(50)@isoptional({message",{"_index":1679,"title":{},"body":{"classes/PaginationDto.html":{}}}],["12",{"_index":1934,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"overview.html":{}}}],["123",{"_index":807,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["150",{"_index":1274,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["17.0.3",{"_index":2559,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1993,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":3109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@isoptional({message",{"_index":1932,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1})@isnumber()@isnotempty()@min(0)@max(2",{"_index":1961,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2",{"_index":366,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"contributing.html":{}}}],["2.0.0",{"_index":2595,"title":{},"body":{"dependencies.html":{}}}],["2.1.11",{"_index":2572,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2563,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":2583,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1272,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["20)@minlength(2",{"_index":2128,"title":{},"body":{"classes/UserEntity.html":{}}}],["200",{"_index":339,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":847,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2022",{"_index":2275,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["21",{"_index":2138,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":2116,"title":{},"body":{"classes/UserEntity.html":{}}}],["22",{"_index":2277,"title":{},"body":{"changelog.html":{}}}],["255",{"_index":858,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["255)@maxlength(256",{"_index":856,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["27",{"_index":2983,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1308,"title":{},"body":{"interfaces/IApp.html":{},"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["3.0.0",{"_index":2567,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2600,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":2573,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":211,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":1449,"title":{},"body":{"controllers/MathController.html":{}}}],["4.0.0",{"_index":2596,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2577,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":2570,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":2602,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":341,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1955,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1952,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["456",{"_index":808,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["5",{"_index":1450,"title":{},"body":{"controllers/MathController.html":{}}}],["5.0.1",{"_index":2576,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":2509,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":869,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{}}}],["50)@minlength(0",{"_index":866,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["51",{"_index":2984,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":2588,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":2568,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":2604,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2601,"title":{},"body":{"dependencies.html":{}}}],["768",{"_index":1271,"title":{},"body":{"controllers/HealthController.html":{}}}],["789",{"_index":809,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["789'})@isnotempty({message",{"_index":1036,"title":{},"body":{"classes/CustomDto.html":{},"classes/PostEntity.html":{}}}],["789'})@isstring({message",{"_index":1709,"title":{},"body":{"classes/PostEntity.html":{}}}],["8",{"_index":2117,"title":{},"body":{"classes/UserEntity.html":{},"overview.html":{}}}],["8.0.1",{"_index":2590,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2607,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":2451,"title":{},"body":{"contributing.html":{}}}],["83",{"_index":2508,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":2562,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":2565,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":2566,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":2569,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2994,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2993,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../docs",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":500,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1940,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["abcedf",{"_index":1731,"title":{},"body":{"classes/PostEntity.html":{}}}],["abcedf'})@isstring({message",{"_index":1711,"title":{},"body":{"classes/PostEntity.html":{}}}],["above",{"_index":2952,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2302,"title":{},"body":{"changelog.html":{}}}],["abstraction/microservices/math/math.module",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction/prisma/prisma.module",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["abstraction/prisma/prisma.service",{"_index":81,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["accept",{"_index":1645,"title":{},"body":{"injectables/OauthService.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["acceptable",{"_index":3085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accepted",{"_index":2359,"title":{},"body":{"contributing.html":{}}}],["accepthmrupdate",{"_index":192,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["access",{"_index":555,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":1660,"title":{},"body":{"classes/PaginationDto.html":{}}}],["accesstoken",{"_index":734,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["account.'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":2283,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["actions",{"_index":216,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":1750,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":3145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":3130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1737,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(userid",{"_index":1748,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcookieauth('optional",{"_index":3144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["added",{"_index":2278,"title":{},"body":{"changelog.html":{}}}],["additional",{"_index":1345,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["addoauth2",{"_index":3136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1654,"title":{},"body":{"injectables/OauthService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":3146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":3126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":3127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":3129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adheres",{"_index":2271,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["admin.controller",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin1",{"_index":888,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["admin2",{"_index":889,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":51,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":839,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":58,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":64,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["age",{"_index":1916,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["age=0",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{}}}],["age=604800",{"_index":798,"title":{},"body":{"injectables/AuthService.html":{}}}],["agedate",{"_index":3106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["agreement",{"_index":2406,"title":{},"body":{"contributing.html":{}}}],["alert",{"_index":185,"title":{"interfaces/Alert.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertoptions",{"_index":189,"title":{"interfaces/AlertOptions.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertstyle",{"_index":197,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":3002,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":1139,"title":{},"body":{"controllers/FileController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1144,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":235,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["allexceptionsfilter.handlemessageresponse(request",{"_index":283,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":3083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allows",{"_index":2788,"title":{},"body":{"index.html":{}}}],["already",{"_index":1880,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["always",{"_index":2447,"title":{},"body":{"contributing.html":{}}}],["amazing",{"_index":2869,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":2814,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2943,"title":{},"body":{"license.html":{}}}],["another",{"_index":557,"title":{},"body":{"injectables/AtGuard.html":{}}}],["answer",{"_index":2386,"title":{},"body":{"contributing.html":{}}}],["any,info",{"_index":1109,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":1108,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["api",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2997,"title":{},"body":{"properties.html":{}}}],["api/blob/main/license",{"_index":3125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/discussions/new",{"_index":2374,"title":{},"body":{"contributing.html":{}}}],["api:latest",{"_index":2857,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":3148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":2665,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":1021,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":3147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":1165,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":830,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({description",{"_index":805,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({example",{"_index":1461,"title":{},"body":{"classes/MessageEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apiproperty({type",{"_index":1034,"title":{},"body":{"classes/CustomDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["apipropertyoptional",{"_index":872,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["apipropertyoptional({description",{"_index":853,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apipropertyoptional({minimum",{"_index":1677,"title":{},"body":{"classes/PaginationDto.html":{}}}],["apipropertyoptional({type",{"_index":1662,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":355,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":2719,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":947,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":1174,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('health",{"_index":1264,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('home",{"_index":364,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('microservices",{"_index":1444,"title":{},"body":{"controllers/MathController.html":{}}}],["apitags('oauth",{"_index":1592,"title":{},"body":{"controllers/OauthController.html":{}}}],["apitags('posts",{"_index":1806,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":2173,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":1166,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["app",{"_index":1306,"title":{},"body":{"interfaces/IApp.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1913,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":3114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.module.ts",{"_index":536,"title":{},"body":{"injectables/AppService.html":{}}}],["app.service",{"_index":359,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["app_filter",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":412,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":324,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2667,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application/json",{"_index":1646,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["application/x",{"_index":779,"title":{},"body":{"injectables/AuthService.html":{}}}],["applications",{"_index":2707,"title":{},"body":{"index.html":{}}}],["apply",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":2196,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":388,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":2371,"title":{},"body":{"contributing.html":{}}}],["apps",{"_index":2748,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":358,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appsetup",{"_index":1305,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["architecture",{"_index":2913,"title":{},"body":{"index.html":{}}}],["args",{"_index":2619,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1697,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":259,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2975,"title":{},"body":{"license.html":{}}}],["array",{"_index":836,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array'})@isnotempty({message",{"_index":817,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["array'})@isoptional({message",{"_index":1965,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":3101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.from(previousnames.value",{"_index":3181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":1167,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":1186,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":2643,"title":{},"body":{"miscellaneous/functions.html":{}}}],["article",{"_index":2414,"title":{},"body":{"contributing.html":{}}}],["asc",{"_index":996,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":1655,"title":{},"body":{"injectables/OauthService.html":{},"license.html":{}}}],["async",{"_index":87,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["atguard",{"_index":416,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":565,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["attach",{"_index":1716,"title":{},"body":{"classes/PostEntity.html":{}}}],["attacks",{"_index":2809,"title":{},"body":{"index.html":{}}}],["audio",{"_index":826,"title":{},"body":{"classes/CommentEntity.html":{},"classes/MessageEntity.html":{}}}],["audio'})@isnotempty()@isstring",{"_index":1468,"title":{},"body":{"classes/MessageEntity.html":{}}}],["auth",{"_index":496,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":677,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":1616,"title":{},"body":{"modules/OauthModule.html":{}}}],["auth/auth.service",{"_index":1630,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth/decorators",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["auth/dto/request",{"_index":1631,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth_error",{"_index":721,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":590,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":2739,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":549,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{}}}],["authguard(estrategy.jwt",{"_index":552,"title":{},"body":{"injectables/AtGuard.html":{}}}],["authguard(estrategy.jwt_refresh",{"_index":2049,"title":{},"body":{"classes/RtGuard.html":{}}}],["authmodule",{"_index":392,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":828,"title":{},"body":{"classes/CommentEntity.html":{},"interfaces/IApp.html":{},"classes/PostEntity.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":1705,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authorization",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OauthService.html":{}}}],["authorization=${tokendata",{"_index":796,"title":{},"body":{"injectables/AuthService.html":{}}}],["authorizationurl",{"_index":3139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":2965,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":632,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":2711,"title":{},"body":{"index.html":{}}}],["automapper",{"_index":2349,"title":{},"body":{"contributing.html":{}}}],["available",{"_index":2981,"title":{},"body":{"modules.html":{}}}],["availablethemes",{"_index":2485,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["await",{"_index":517,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["awesome",{"_index":1309,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["axios",{"_index":726,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.config",{"_index":1209,"title":{},"body":{"classes/FileService.html":{}}}],["axios.create",{"_index":3093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axios.post",{"_index":774,"title":{},"body":{"injectables/AuthService.html":{}}}],["axiosconfig",{"_index":1208,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosconfig.post(url",{"_index":1213,"title":{},"body":{"classes/FileService.html":{}}}],["axiosinstance",{"_index":3092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosrequest",{"_index":1627,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosrequest('get",{"_index":1648,"title":{},"body":{"injectables/OauthService.html":{}}}],["axiosrequest('post",{"_index":776,"title":{},"body":{"injectables/AuthService.html":{}}}],["b",{"_index":1453,"title":{},"body":{"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["backend",{"_index":2683,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2870,"title":{},"body":{"index.html":{}}}],["bad",{"_index":3078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request",{"_index":3077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badgatewayexception",{"_index":1068,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badgatewayexception('bad",{"_index":1076,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badrequestexception",{"_index":715,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1703,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1879,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2314,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["base64').tostring",{"_index":2046,"title":{},"body":{"guards/RolesGuard.html":{}}}],["based",{"_index":1361,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["baseurl",{"_index":3094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":2575,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":3098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":3099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":3132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":3133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2901,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2877,"title":{},"body":{"index.html":{}}}],["before",{"_index":1323,"title":{},"body":{"interfaces/IApp.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["begin",{"_index":1957,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["begining",{"_index":2891,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2903,"title":{},"body":{"index.html":{}}}],["being",{"_index":2338,"title":{},"body":{"contributing.html":{}}}],["best",{"_index":2377,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":2440,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["bindevents",{"_index":1545,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["bindevents(client",{"_index":1546,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["bingbot/2.0",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["bio",{"_index":1917,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birth",{"_index":1946,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birthdate",{"_index":1918,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["blank",{"_index":867,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["blog",{"_index":2428,"title":{},"body":{"contributing.html":{}}}],["bodies",{"_index":2751,"title":{},"body":{"index.html":{}}}],["body",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["bodyformdata",{"_index":768,"title":{},"body":{"injectables/AuthService.html":{}}}],["bodyformdata.append",{"_index":770,"title":{},"body":{"injectables/AuthService.html":{}}}],["bodyformdata.append('response",{"_index":772,"title":{},"body":{"injectables/AuthService.html":{}}}],["boolean",{"_index":201,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/ISwaggerOptions.html":{},"controllers/MessagesGateway.html":{},"classes/PostEntity.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["boolean'})@isnotempty({message",{"_index":1723,"title":{},"body":{"classes/PostEntity.html":{}}}],["bootstrap",{"_index":2550,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":2418,"title":{},"body":{"contributing.html":{}}}],["broken",{"_index":2392,"title":{},"body":{"contributing.html":{}}}],["browse",{"_index":2980,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2978,"title":{},"body":{"modules.html":{}}}],["brute",{"_index":2807,"title":{},"body":{"index.html":{}}}],["buffer.from(token.split('.')[1",{"_index":2045,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bug",{"_index":1316,"title":{},"body":{"interfaces/IApp.html":{},"contributing.html":{}}}],["bug/feature",{"_index":2458,"title":{},"body":{"contributing.html":{}}}],["bugnumber",{"_index":2454,"title":{},"body":{"contributing.html":{}}}],["bugs",{"_index":2370,"title":{},"body":{"contributing.html":{},"properties.html":{}}}],["build",{"_index":2281,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":3120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":2710,"title":{},"body":{"index.html":{}}}],["building",{"_index":2360,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["builds",{"_index":2367,"title":{},"body":{"contributing.html":{}}}],["built",{"_index":2350,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["c",{"_index":1926,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"license.html":{}}}],["cache",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"changelog.html":{},"dependencies.html":{}}}],["cache.interceptor.ts",{"_index":1281,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:5",{"_index":1284,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_manager",{"_index":136,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["cached",{"_index":530,"title":{},"body":{"injectables/AppService.html":{}}}],["cacheinterceptor",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["cachemanager",{"_index":505,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["cachemodule",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["cachetoken",{"_index":518,"title":{},"body":{"injectables/AppService.html":{}}}],["calculate",{"_index":1434,"title":{},"body":{"controllers/MathController.html":{}}}],["call",{"_index":2764,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1577,"title":{},"body":{"controllers/OauthController.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":3102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":1118,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["called",{"_index":2781,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":1064,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":538,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":542,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":2483,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["capitalize(str",{"_index":2645,"title":{},"body":{"miscellaneous/functions.html":{}}}],["card",{"_index":2911,"title":{},"body":{"index.html":{}}}],["catch",{"_index":244,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":256,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1296,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(rpcexception",{"_index":1083,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["catcherror",{"_index":1071,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":1075,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["categories",{"_index":1856,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1858,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["centers",{"_index":2776,"title":{},"body":{"index.html":{}}}],["change",{"_index":939,"title":{},"body":{"controllers/ConversationsController.html":{},"contributing.html":{},"index.html":{}}}],["changed",{"_index":2309,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":2264,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":2266,"title":{},"body":{"changelog.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["character",{"_index":2124,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":859,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(21",{"_index":2118,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1954,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@maxlength(51",{"_index":868,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1956,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":2119,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(phonenumbervalidator",{"_index":1975,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":2129,"title":{},"body":{"classes/UserEntity.html":{}}}],["charge",{"_index":2930,"title":{},"body":{"license.html":{}}}],["chars",{"_index":2452,"title":{},"body":{"contributing.html":{}}}],["chat",{"_index":2291,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["chats",{"_index":2695,"title":{},"body":{"index.html":{}}}],["check",{"_index":1256,"title":{},"body":{"controllers/HealthController.html":{},"controllers/MathController.html":{},"contributing.html":{}}}],["checkexist",{"_index":1875,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1878,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1884,"title":{},"body":{"injectables/PostsService.html":{}}}],["child",{"_index":1325,"title":{},"body":{"interfaces/IApp.html":{}}}],["ci/cd",{"_index":2282,"title":{},"body":{"changelog.html":{}}}],["citizen",{"_index":2340,"title":{},"body":{"contributing.html":{}}}],["city",{"_index":1924,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["claim",{"_index":2968,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessageEntity.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessageEntity.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":2824,"title":{},"body":{"index.html":{}}}],["clicking",{"_index":2401,"title":{},"body":{"contributing.html":{}}}],["client",{"_index":1447,"title":{},"body":{"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"injectables/OauthService.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["client.broadcast.emit('typing",{"_index":1514,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["client.conn.remoteaddress",{"_index":2254,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["client.id",{"_index":1509,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["client.subscribe",{"_index":1558,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["client/.../alertsstore.ts",{"_index":3003,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../app.ts",{"_index":2628,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../auth.dto.ts",{"_index":3019,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../auth.service.ts",{"_index":3043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../axios.config.ts",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../conversations.dto.ts",{"_index":3005,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../conversations.service.ts",{"_index":3044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../count.ts",{"_index":2641,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../file.service.ts",{"_index":3045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../files.dto.ts",{"_index":3024,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../pageview.ts",{"_index":3041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../posts.dto.ts",{"_index":3008,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../posts.service.ts",{"_index":3046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../str.ts",{"_index":2632,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../theme.ts",{"_index":2640,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../user.service.ts",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../user.ts",{"_index":3059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../users.dto.ts",{"_index":3010,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../usesticky.ts",{"_index":3058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/composables/count.ts",{"_index":2473,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/composables/user.ts",{"_index":2479,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/composables/usesticky.ts",{"_index":2476,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/dto/auth.dto.ts",{"_index":3032,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/conversations.dto.ts",{"_index":3026,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/files.dto.ts",{"_index":3033,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/posts.dto.ts",{"_index":3027,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/users.dto.ts",{"_index":3028,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/helpers/app.ts",{"_index":1300,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/str.ts",{"_index":2482,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/theme.ts",{"_index":2484,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/server/api/pageview.ts",{"_index":2486,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/auth.service.ts",{"_index":2489,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/axios.config.ts",{"_index":2491,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/conversations.service.ts",{"_index":2492,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts",{"_index":1196,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts:21",{"_index":1204,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:35",{"_index":1207,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:7",{"_index":1201,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/posts.service.ts",{"_index":2495,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/user.service.ts",{"_index":2497,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/stores/alertsstore.ts",{"_index":187,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":1114,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/MessagesService.html":{}}}],["clientproxy",{"_index":1439,"title":{},"body":{"controllers/MathController.html":{}}}],["clientsecret",{"_index":1116,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsmodule",{"_index":1455,"title":{},"body":{"modules/MathModule.html":{}}}],["clientsmodule.register",{"_index":1458,"title":{},"body":{"modules/MathModule.html":{}}}],["closable",{"_index":202,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["cluster_adminmodule",{"_index":54,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":55,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":56,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":669,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":671,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":670,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":672,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":969,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":971,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":970,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1219,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1220,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1518,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1519,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_oauthmodule",{"_index":1609,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_exports",{"_index":1611,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_imports",{"_index":1612,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":1610,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1834,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1835,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1836,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1889,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1890,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1891,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2187,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2190,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2189,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2188,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":1448,"title":{},"body":{"controllers/MathController.html":{}}}],["code",{"_index":315,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"changelog.html":{},"contributing.html":{},"index.html":{}}}],["coding",{"_index":2411,"title":{},"body":{"contributing.html":{}}}],["command",{"_index":2361,"title":{},"body":{"contributing.html":{}}}],["commands",{"_index":2802,"title":{},"body":{"index.html":{}}}],["comment",{"_index":806,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":1011,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":799,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1767,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commit/pull",{"_index":2449,"title":{},"body":{"contributing.html":{}}}],["commitlint",{"_index":2822,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":2558,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":2560,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2915,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":723,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compatible",{"_index":458,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["completed",{"_index":2459,"title":{},"body":{"contributing.html":{}}}],["compodoc",{"_index":2768,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2296,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compress",{"_index":2750,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2303,"title":{},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["computed",{"_index":3180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["computer",{"_index":2912,"title":{},"body":{"index.html":{}}}],["concept",{"_index":2777,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2951,"title":{},"body":{"license.html":{}}}],["confict",{"_index":2307,"title":{},"body":{"changelog.html":{}}}],["config",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('app_secret",{"_index":586,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["config.get('google_callback_url",{"_index":3140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('throttle_limit",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_ttl",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"app_secret",{"_index":685,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"expire_at_time",{"_index":688,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":2358,"title":{},"body":{"contributing.html":{}}}],["configure",{"_index":402,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":3079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":716,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(user_error.duplicate",{"_index":748,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1571,"title":{},"body":{"controllers/OauthController.html":{},"changelog.html":{},"index.html":{}}}],["connectedsocket",{"_index":1494,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["connection",{"_index":2976,"title":{},"body":{"license.html":{}}}],["console",{"_index":520,"title":{},"body":{"injectables/AppService.html":{}}}],["console.log",{"_index":2039,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log('connecting",{"_index":1417,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`cookies",{"_index":378,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log(`log",{"_index":1422,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":1376,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":1377,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`signed",{"_index":380,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log(postid",{"_index":1825,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(res.getheader('set",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(response.cookie('key",{"_index":385,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log(response.getheader('set",{"_index":386,"title":{},"body":{"controllers/AppController.html":{}}}],["const",{"_index":207,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"classes/FileService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":2313,"title":{},"body":{"changelog.html":{}}}],["constants",{"_index":2026,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constants/math.constant",{"_index":1443,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{}}}],["constraint",{"_index":2298,"title":{},"body":{"changelog.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(configservice",{"_index":582,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["constructor(@inject(math_service",{"_index":1446,"title":{},"body":{"controllers/MathController.html":{}}}],["constructor(authservice",{"_index":1620,"title":{},"body":{"injectables/OauthService.html":{}}}],["constructor(config",{"_index":568,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":694,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":247,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(prismaservice",{"_index":74,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":540,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":2120,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2858,"title":{},"body":{"index.html":{}}}],["content",{"_index":778,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/FileService.html":{},"classes/PostEntity.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":545,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":563,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1418,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":562,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1374,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1375,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1285,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest().secret",{"_index":2030,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtows().getclient",{"_index":2253,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["continuous",{"_index":2817,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2972,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":2325,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":2324,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":2420,"title":{},"body":{"contributing.html":{}}}],["contributor",{"_index":2404,"title":{},"body":{"contributing.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":948,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":1177,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":1265,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('math",{"_index":1445,"title":{},"body":{"controllers/MathController.html":{}}}],["controller('messages",{"_index":1503,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["controller('oauth",{"_index":1593,"title":{},"body":{"controllers/OauthController.html":{}}}],["controller('posts",{"_index":1807,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":2174,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":1362,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":1356,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":2561,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":2412,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["conversation",{"_index":844,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/MessageEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversation.dto",{"_index":1053,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":1015,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:6",{"_index":2083,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":2082,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":2081,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation_error",{"_index":984,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversation_error.not_creator",{"_index":1007,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationentity",{"_index":837,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversationid",{"_index":918,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["conversations",{"_index":892,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversations.controller",{"_index":973,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":944,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":890,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":393,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":943,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":387,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":381,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["copies",{"_index":2945,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2933,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2920,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":2345,"title":{},"body":{"contributing.html":{}}}],["core/interceptors/interceptor.module",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":509,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":510,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["core/security/throttle",{"_index":361,"title":{},"body":{"controllers/AppController.html":{}}}],["cors",{"_index":1504,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":2506,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":2487,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1925,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["course",{"_index":2894,"title":{},"body":{"index.html":{}}}],["cover",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coverage",{"_index":2470,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create_user",{"_index":3071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createat",{"_index":1857,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":1009,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":893,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":951,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":901,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":902,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["createcookie",{"_index":690,"title":{},"body":{"injectables/AuthService.html":{}}}],["createcookie(tokendata",{"_index":697,"title":{},"body":{"injectables/AuthService.html":{}}}],["created",{"_index":906,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":840,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DefaultDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":2524,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":2647,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":1382,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1472,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(dto",{"_index":1476,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":1018,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["createnewconversationdto",{"_index":3004,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["createparamdecorator",{"_index":3110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1738,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":1753,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":1025,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["creator",{"_index":841,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["criteria",{"_index":2738,"title":{},"body":{"index.html":{}}}],["critical",{"_index":291,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["cross",{"_index":2795,"title":{},"body":{"index.html":{}}}],["crud",{"_index":2827,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["crypto",{"_index":2724,"title":{},"body":{"index.html":{}}}],["csrf",{"_index":2794,"title":{},"body":{"index.html":{}}}],["csurf",{"_index":2584,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":278,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":280,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":281,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":916,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":2517,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":1357,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":3157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customdto",{"_index":878,"title":{"classes/CustomDto.html":{}},"body":{"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/PostEntity.html":{},"coverage.html":{}}}],["customeimage",{"_index":2662,"title":{},"body":{"classes/imageValidator.html":{}}}],["customhttpexceptionresponse",{"_index":273,"title":{"interfaces/CustomHttpExceptionResponse.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["customtext",{"_index":2624,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["damages",{"_index":2969,"title":{},"body":{"license.html":{}}}],["dark",{"_index":3029,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":738,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"controllers/MathController.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":1650,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.email.split('@')[0",{"_index":1652,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.id",{"_index":2034,"title":{},"body":{"guards/RolesGuard.html":{}}}],["data.key",{"_index":2032,"title":{},"body":{"guards/RolesGuard.html":{}}}],["data.login}@gmail.com",{"_index":1651,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.role",{"_index":2038,"title":{},"body":{"guards/RolesGuard.html":{}}}],["database",{"_index":2292,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["datasources",{"_index":1906,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":312,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ConversationEntity.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"interfaces/HttpExceptionResponse.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":1298,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":3105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":3107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1420,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1907,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["de",{"_index":2434,"title":{},"body":{"contributing.html":{}}}],["deal",{"_index":2935,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2977,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1387,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1392,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decide",{"_index":2332,"title":{},"body":{"contributing.html":{}}}],["decode",{"_index":2728,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":2729,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CustomDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":1336,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":251,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"interfaces/ISwaggerOptions.html":{},"classes/PaginationDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultdto",{"_index":1041,"title":{"classes/DefaultDto.html":{}},"body":{"classes/DefaultDto.html":{},"coverage.html":{}}}],["defaultmessage",{"_index":2615,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":2616,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultoptions",{"_index":208,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":76,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definestore",{"_index":193,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["definestore('alertsstore",{"_index":213,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["definestore('user",{"_index":3173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defining",{"_index":2778,"title":{},"body":{"index.html":{}}}],["definition",{"_index":2717,"title":{},"body":{"index.html":{}}}],["delete",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":960,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":910,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1831,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1759,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1819,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1763,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":2185,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":2149,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":181,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete_comment",{"_index":3073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_user",{"_index":3072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecomment",{"_index":1739,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1832,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1758,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":1045,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationadminsdto",{"_index":3006,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deleteconversationbyid",{"_index":894,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":908,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":909,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1874,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["deletemessagedto",{"_index":1049,"title":{"classes/DeleteMessageDto.html":{}},"body":{"classes/DeleteMessageDto.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["deleteoneadminconversation",{"_index":895,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":913,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":914,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":1055,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteonepostdto",{"_index":3007,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deletepost",{"_index":1740,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(userid",{"_index":1762,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":2144,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":2148,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":88,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":182,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserprofile",{"_index":3009,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["denied",{"_index":3075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":2762,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1671,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":2716,"title":{},"body":{"index.html":{}}}],["description",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":2737,"title":{},"body":{"index.html":{}}}],["design",{"_index":2718,"title":{},"body":{"index.html":{}}}],["detail",{"_index":2453,"title":{},"body":{"contributing.html":{}}}],["detailed",{"_index":2378,"title":{},"body":{"contributing.html":{}}}],["determined",{"_index":2468,"title":{},"body":{"contributing.html":{}}}],["development",{"_index":2851,"title":{},"body":{"index.html":{}}}],["devices",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":2670,"title":{},"body":{"index.html":{}}}],["diff",{"_index":3104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":2789,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["directly",{"_index":1572,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["disable",{"_index":535,"title":{},"body":{"injectables/AppService.html":{}}}],["discription",{"_index":2136,"title":{},"body":{"classes/UserEntity.html":{}}}],["discuss",{"_index":2421,"title":{},"body":{"contributing.html":{}}}],["discussion",{"_index":2331,"title":{},"body":{"contributing.html":{}}}],["discussions",{"_index":2343,"title":{},"body":{"contributing.html":{}}}],["disk",{"_index":1267,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1259,"title":{},"body":{"controllers/HealthController.html":{}}}],["distribute",{"_index":2941,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2918,"title":{},"body":{"index.html":{}}}],["divorced",{"_index":1986,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/enumerations.html":{}}}],["divorced]'})@isoptional({message",{"_index":1971,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["docker",{"_index":2295,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["docs",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":2321,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["document.documentelement.scrolltop",{"_index":3165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":2323,"title":{},"body":{"changelog.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":3116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documented",{"_index":2268,"title":{},"body":{"changelog.html":{}}}],["doing",{"_index":2431,"title":{},"body":{"contributing.html":{}}}],["don't",{"_index":452,"title":{},"body":{"modules/AppModule.html":{},"contributing.html":{}}}],["done",{"_index":1107,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":1128,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["dontskip",{"_index":326,"title":{},"body":{"controllers/AppController.html":{}}}],["doskip",{"_index":327,"title":{},"body":{"controllers/AppController.html":{}}}],["dotenv",{"_index":1243,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto",{"_index":113,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/FileService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":990,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1867,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":1002,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.conversationid",{"_index":1537,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto.creator",{"_index":991,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":988,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":743,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1877,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1855,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1541,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/PostsService.html":{}}}],["dto.members",{"_index":989,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":987,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":793,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":792,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":2214,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":761,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":2227,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1870,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.published",{"_index":1871,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1883,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.senderid}:${sendername",{"_index":1538,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto.text",{"_index":1536,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/PostsService.html":{}}}],["dto.title",{"_index":1854,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.type",{"_index":1535,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/PostsService.html":{}}}],["dto.userid",{"_index":999,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.username",{"_index":745,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment/request",{"_index":1795,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/comment/response",{"_index":1805,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/request",{"_index":1794,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/response",{"_index":1801,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/request",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/response",{"_index":579,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":3068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":1381,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2882,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":2462,"title":{},"body":{"contributing.html":{}}}],["e2e",{"_index":2861,"title":{},"body":{"index.html":{}}}],["each",{"_index":2773,"title":{},"body":{"index.html":{}}}],["easiest",{"_index":2326,"title":{},"body":{"contributing.html":{}}}],["easily",{"_index":2680,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":2704,"title":{},"body":{"index.html":{}}}],["el",{"_index":2043,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["el.classlist.add('sticky",{"_index":3166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classlist.remove('sticky",{"_index":3167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":701,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":2159,"title":{},"body":{"controllers/UsersController.html":{}}}],["emails",{"_index":1122,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":1123,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emaritalstatus",{"_index":1967,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["emit",{"_index":2288,"title":{},"body":{"changelog.html":{}}}],["empty",{"_index":1712,"title":{},"body":{"classes/PostEntity.html":{},"classes/RecaptchaDto.html":{},"miscellaneous/variables.html":{}}}],["enable",{"_index":2714,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1896,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1900,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2886,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1210,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2319,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["endpoint}/avatar",{"_index":1211,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/cover",{"_index":1216,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/posts",{"_index":1217,"title":{},"body":{"classes/FileService.html":{}}}],["enhance",{"_index":2884,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":2423,"title":{},"body":{"contributing.html":{}}}],["enter",{"_index":554,"title":{},"body":{"injectables/AtGuard.html":{}}}],["entire",{"_index":2772,"title":{},"body":{"index.html":{}}}],["entities/comment.entity",{"_index":1012,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/conversation.entity",{"_index":946,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["entities/message.entity",{"_index":1023,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["entities/profile.entity",{"_index":2094,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["entity",{"_index":2286,"title":{},"body":{"changelog.html":{}}}],["enum",{"_index":1672,"title":{},"body":{"classes/PaginationDto.html":{}}}],["enumerations",{"_index":2609,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":2312,"title":{},"body":{"changelog.html":{}}}],["env",{"_index":473,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2760,"title":{},"body":{"index.html":{}}}],["eorder",{"_index":1673,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["eorder.asc",{"_index":1670,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{}}}],["erole",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":322,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/TimeoutInterceptor.html":{}}}],["error",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"controllers/FileController.html":{},"interfaces/HttpExceptionResponse.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error(auth_error.recaptcha_failed",{"_index":784,"title":{},"body":{"injectables/AuthService.html":{}}}],["error(message",{"_index":225,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["errorlog",{"_index":301,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errormessage",{"_index":305,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errorresponse",{"_index":295,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errors",{"_index":2243,"title":{},"body":{"injectables/ValidationPipe.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["errors.interceptor",{"_index":1369,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["errors.length",{"_index":2245,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsinterceptor",{"_index":1059,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["error}\\n",{"_index":319,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["eslint",{"_index":2813,"title":{},"body":{"index.html":{}}}],["estrategy",{"_index":551,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["estrategy.facebook",{"_index":1113,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["estrategy.google",{"_index":1244,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["estrategy.jwt",{"_index":581,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["estrategy.jwt_refresh",{"_index":2054,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["etiquette",{"_index":2432,"title":{},"body":{"contributing.html":{}}}],["ev",{"_index":1330,"title":{},"body":{"interfaces/IApp.html":{}}}],["ev.preventdefault",{"_index":1332,"title":{},"body":{"interfaces/IApp.html":{}}}],["eval",{"_index":2752,"title":{},"body":{"index.html":{}}}],["event",{"_index":2289,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["everyone",{"_index":2674,"title":{},"body":{"index.html":{}}}],["exact",{"_index":2393,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":455,"title":{},"body":{"modules/AppModule.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["example/issues",{"_index":3000,"title":{},"body":{"properties.html":{}}}],["example@gmail.com",{"_index":2135,"title":{},"body":{"classes/UserEntity.html":{}}}],["example@gmail.com'})@isnotempty({message",{"_index":2110,"title":{},"body":{"classes/UserEntity.html":{}}}],["exception",{"_index":261,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["exception.filter.ts",{"_index":1078,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:7",{"_index":1081,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.geterror",{"_index":1084,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.getresponse",{"_index":296,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":297,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":299,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack",{"_index":318,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":288,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":238,"title":{"classes/ExceptionFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["excludenullinterceptor",{"_index":1085,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["excludepaths",{"_index":1290,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths.includes(httpadapter.getrequesturl(request",{"_index":1291,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["execute",{"_index":1320,"title":{},"body":{"interfaces/IApp.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{}}}],["executes",{"_index":2757,"title":{},"body":{"index.html":{}}}],["execution",{"_index":2397,"title":{},"body":{"contributing.html":{}}}],["executioncontext",{"_index":543,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":3069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existed",{"_index":2306,"title":{},"body":{"changelog.html":{}}}],["existedusermiddleware",{"_index":1090,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["experiences",{"_index":2678,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":687,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["exploit",{"_index":2799,"title":{},"body":{"index.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":675,"title":{},"body":{"modules/AuthModule.html":{},"classes/LoggerModule.html":{},"modules/OauthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":272,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":1136,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":2742,"title":{},"body":{"index.html":{}}}],["extends",{"_index":188,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/FacebookStrategy.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"classes/PostEntity.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/WsThrottlerGuard.html":{}}}],["externals",{"_index":3154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1346,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extraction",{"_index":2070,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["extractjwt",{"_index":575,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":584,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":1337,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":1112,"title":{},"body":{"injectables/FacebookStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["facebookauth",{"_index":1565,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookredirect",{"_index":1566,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["facebookredirect(@req",{"_index":1598,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookredirect(req",{"_index":1575,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["facebookstrategy",{"_index":1103,"title":{"injectables/FacebookStrategy.html":{}},"body":{"injectables/FacebookStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["failed",{"_index":1319,"title":{},"body":{"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":205,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["familiarize",{"_index":2408,"title":{},"body":{"contributing.html":{}}}],["far",{"_index":2465,"title":{},"body":{"contributing.html":{}}}],["favourite",{"_index":1714,"title":{},"body":{"classes/PostEntity.html":{}}}],["favouritorid",{"_index":1706,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["feature",{"_index":2287,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["features",{"_index":2688,"title":{},"body":{"index.html":{}}}],["feedback",{"_index":2342,"title":{},"body":{"contributing.html":{}}}],["feels",{"_index":2676,"title":{},"body":{"index.html":{}}}],["female",{"_index":1960,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["few",{"_index":2445,"title":{},"body":{"contributing.html":{}}}],["field",{"_index":2692,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":2544,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":2644,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":1150,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":1231,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":1229,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":1233,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":1129,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":1230,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":1032,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.controller",{"_index":1222,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":1234,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":1171,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":1178,"title":{"classes/FileService.html":{}},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"coverage.html":{}}}],["filesmodule",{"_index":394,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1170,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filing",{"_index":2375,"title":{},"body":{"contributing.html":{}}}],["filled",{"_index":2626,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["find",{"_index":2158,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["first",{"_index":2337,"title":{},"body":{"contributing.html":{}}}],["firstname",{"_index":1124,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2962,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2829,"title":{},"body":{"index.html":{}}}],["fixed",{"_index":2305,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["flip",{"_index":2910,"title":{},"body":{"index.html":{}}}],["flows",{"_index":3137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fo",{"_index":2908,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2878,"title":{},"body":{"index.html":{}}}],["following",{"_index":2950,"title":{},"body":{"license.html":{}}}],["follows",{"_index":2424,"title":{},"body":{"contributing.html":{}}}],["forbidden",{"_index":3074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":717,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(auth_error.same_password",{"_index":794,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(post_error.not_author",{"_index":1868,"title":{},"body":{"injectables/PostsService.html":{}}}],["forbiddenexception(system_error.forbidden",{"_index":759,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["force",{"_index":2808,"title":{},"body":{"index.html":{}}}],["forgery",{"_index":2797,"title":{},"body":{"index.html":{}}}],["form",{"_index":781,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"index.html":{}}}],["format",{"_index":2269,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["format)tests",{"_index":2456,"title":{},"body":{"contributing.html":{}}}],["formattedmessage",{"_index":1408,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":2812,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":2400,"title":{},"body":{"contributing.html":{}}}],["formdata",{"_index":769,"title":{},"body":{"injectables/AuthService.html":{},"classes/FileService.html":{}}}],["formdata.append('file",{"_index":1212,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('files",{"_index":1218,"title":{},"body":{"classes/FileService.html":{}}}],["forroot",{"_index":1379,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":495,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":342,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"interfaces/IApp.html":{},"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":2703,"title":{},"body":{"index.html":{}}}],["free",{"_index":2929,"title":{},"body":{"license.html":{}}}],["front",{"_index":2885,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2669,"title":{},"body":{"index.html":{}}}],["fs",{"_index":277,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["fs.appendfile('error.log",{"_index":320,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["full",{"_index":1950,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1919,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1979,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":1111,"title":{},"body":{"injectables/FacebookStrategy.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2627,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":2948,"title":{},"body":{"license.html":{}}}],["game",{"_index":2899,"title":{},"body":{"index.html":{}}}],["gender",{"_index":1920,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["general",{"_index":2341,"title":{},"body":{"contributing.html":{}}}],["generate",{"_index":1359,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["generated",{"_index":2712,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":955,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":925,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1813,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1776,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1824,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1811,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1773,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('authorization",{"_index":2055,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["get('cookie/custom",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["get('cookie/server",{"_index":346,"title":{},"body":{"controllers/AppController.html":{}}}],["get('facebook",{"_index":1594,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook')@useguards(undefined)@apioperation({summary",{"_index":1570,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect",{"_index":1597,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect')@useguards(undefined)@apioperation({summary",{"_index":1576,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('find/:email",{"_index":2179,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('github/redirect",{"_index":1606,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('github/redirect')@apioperation({summary",{"_index":1581,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google",{"_index":1600,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google')@useguards(undefined)@apioperation({summary",{"_index":1585,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect",{"_index":1603,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect')@useguards(undefined)@apioperation({summary",{"_index":1588,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('profile/:useridorusername",{"_index":2176,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":2161,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":1255,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1433,"title":{},"body":{"controllers/MathController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":920,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1741,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(postid",{"_index":1765,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":945,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversations",{"_index":896,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@getcurrentuserid",{"_index":953,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(userid",{"_index":919,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversationsdto",{"_index":3011,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallmessages",{"_index":1473,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["getallmessages(conversationid",{"_index":1480,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["getallpostsdto",{"_index":3012,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsofuser",{"_index":1742,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(userid",{"_index":1769,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1743,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(userid",{"_index":1772,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicpostsdto",{"_index":3013,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpublicusersdto",{"_index":3014,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallusers",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getclientname",{"_index":1523,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getclientname(clientid",{"_index":1527,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getconversationbyid",{"_index":897,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":923,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":634,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["geterrorlog",{"_index":241,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["geterrorresponse",{"_index":242,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["gethello",{"_index":328,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethello(@session",{"_index":375,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello(session",{"_index":334,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getoneconversationdto",{"_index":924,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1744,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(postid",{"_index":1775,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":2145,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":2152,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getskip",{"_index":1681,"title":{},"body":{"classes/PaginationDto.html":{}}}],["getting",{"_index":2262,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":691,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":700,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettracker",{"_index":2062,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["gettracker(req",{"_index":2063,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["getuserbyemail",{"_index":2146,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":2156,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofiledto",{"_index":3015,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gi",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["gitbox",{"_index":2890,"title":{},"body":{"index.html":{}}}],["github",{"_index":1582,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{},"changelog.html":{},"contributing.html":{},"index.html":{},"properties.html":{}}}],["github2",{"_index":2593,"title":{},"body":{"dependencies.html":{}}}],["githubredirect",{"_index":1567,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["githubredirect(@query",{"_index":1607,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubredirect(req",{"_index":1580,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["githubsuccess",{"_index":1619,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess(token",{"_index":1624,"title":{},"body":{"injectables/OauthService.html":{}}}],["gkxj824bp14bwarpwxdxztu59nvfqhe99nz0mygvg39s8m86czarkzwgizumq2",{"_index":2008,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["global",{"_index":1352,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["good",{"_index":2339,"title":{},"body":{"contributing.html":{}}}],["google",{"_index":1241,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["googleauth",{"_index":1568,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(@req",{"_index":1602,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(req",{"_index":1584,"title":{},"body":{"controllers/OauthController.html":{}}}],["googlebot",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["googlebot/2.1",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["googlebot/gi",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["googleredirect",{"_index":1569,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["googleredirect(@req",{"_index":1604,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleredirect(req",{"_index":1587,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["googlestrategy",{"_index":1236,"title":{"injectables/GoogleStrategy.html":{}},"body":{"injectables/GoogleStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2928,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2763,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grigorik",{"_index":2438,"title":{},"body":{"contributing.html":{}}}],["grow",{"_index":2866,"title":{},"body":{"index.html":{}}}],["grpc",{"_index":2775,"title":{},"body":{"index.html":{}}}],["guard",{"_index":2016,"title":{"guards/RolesGuard.html":{}},"body":{"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":636,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["hand",{"_index":558,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handle",{"_index":1073,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessagelog",{"_index":245,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessagelog(exception",{"_index":263,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessageresponse",{"_index":246,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessageresponse(request",{"_index":265,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlerequest",{"_index":539,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["handlerequest(context",{"_index":2250,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["handlerequest(err",{"_index":546,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handlers",{"_index":1553,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["handlers.foreach",{"_index":1557,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["hard",{"_index":2466,"title":{},"body":{"contributing.html":{}}}],["hash",{"_index":735,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":739,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":791,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":724,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":795,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":740,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":736,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":2745,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":1214,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":1253,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheck",{"_index":1260,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":1261,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1262,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1251,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":527,"title":{},"body":{"injectables/AppService.html":{},"classes/MessageEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["helmet",{"_index":2587,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["help",{"_index":2722,"title":{},"body":{"index.html":{}}}],["here",{"_index":1326,"title":{},"body":{"interfaces/IApp.html":{},"controllers/OauthController.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["here's",{"_index":2427,"title":{},"body":{"contributing.html":{}}}],["here).'})@httpcode(httpstatus.created)@apicreatedresponse({description",{"_index":1578,"title":{},"body":{"controllers/OauthController.html":{}}}],["here).'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1573,"title":{},"body":{"controllers/OauthController.html":{}}}],["hereby",{"_index":2927,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2832,"title":{},"body":{"index.html":{}}}],["hmr.config.ts",{"_index":2553,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["hobbies",{"_index":1963,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["holders",{"_index":2966,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":373,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":338,"title":{},"body":{"controllers/AppController.html":{}}}],["hooks",{"_index":3169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":258,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":271,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":279,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":2769,"title":{},"body":{"index.html":{}}}],["html",{"_index":200,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["htmlelement",{"_index":3160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":1498,"title":{},"body":{"controllers/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["http://www.bing.com/bingbot.htm",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["http://www.google.com/bot.html",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["httpadapter",{"_index":1286,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod(request",{"_index":1289,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request",{"_index":1292,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpargumentshost",{"_index":269,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcacheinterceptor",{"_index":1279,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpcode",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":257,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1293,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpexceptionresponse",{"_index":274,"title":{"interfaces/HttpExceptionResponse.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["httpexceptionresponse).error",{"_index":298,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httponly",{"_index":797,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://api.github.com/user",{"_index":1649,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/fivethree",{"_index":2998,"title":{},"body":{"properties.html":{}}}],["https://github.com/login/oauth/access_token?client_id=${process.env.github_client_id}&client_secret=${process.env.github_secret}&code=${requesttoken",{"_index":1644,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email",{"_index":1641,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/thuongtruong1009",{"_index":3122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2373,"title":{},"body":{"contributing.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["https://github.com/viandwi24",{"_index":1312,"title":{},"body":{"interfaces/IApp.html":{}}}],["https://help.github.com/articles/using",{"_index":2415,"title":{},"body":{"contributing.html":{}}}],["https://www.google.com/recaptcha/api/siteverify?secret=${process.env.google_recaptcha_secret}&response=${capcha",{"_index":777,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":949,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":294,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.ok",{"_index":1596,"title":{},"body":{"controllers/OauthController.html":{}}}],["husky",{"_index":2589,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iapp",{"_index":1299,"title":{"interfaces/IApp.html":{}},"body":{"interfaces/IApp.html":{},"coverage.html":{}}}],["iarrayfile",{"_index":1172,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["icaza",{"_index":2435,"title":{},"body":{"contributing.html":{}}}],["icreatecomment",{"_index":1802,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["icreatemessage",{"_index":1500,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["icreatepost",{"_index":1796,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["id",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CustomDto.html":{},"classes/DeleteCommentDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiokresponse({description",{"_index":1755,"title":{},"body":{"controllers/PostsController.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id'})@isnotempty()@isstring",{"_index":1462,"title":{},"body":{"classes/MessageEntity.html":{}}}],["id.decorator.ts",{"_index":2539,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["id1",{"_index":1732,"title":{},"body":{"classes/PostEntity.html":{}}}],["id2",{"_index":1733,"title":{},"body":{"classes/PostEntity.html":{}}}],["idea",{"_index":2875,"title":{},"body":{"index.html":{}}}],["ideal",{"_index":2384,"title":{},"body":{"contributing.html":{}}}],["identifier",{"_index":2471,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1530,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.authorid",{"_index":1872,"title":{},"body":{"injectables/PostsService.html":{}}}],["identify.length",{"_index":2219,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":2220,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifailrecaptcha",{"_index":719,"title":{},"body":{"injectables/AuthService.html":{}}}],["ifinduserbyemail",{"_index":2172,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetallmessages",{"_index":1501,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["igetcomment",{"_index":1803,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpostofuser",{"_index":1797,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpublicpost",{"_index":1798,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetuserprofile",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":1351,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreexpiration",{"_index":588,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["ignoreglobalprefix",{"_index":1338,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreuseragents",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["ijwtpayload",{"_index":571,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["ilya",{"_index":2437,"title":{},"body":{"contributing.html":{}}}],["image",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/CommentEntity.html":{},"classes/MessageEntity.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":2664,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":1157,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":2532,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["impact",{"_index":2917,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":2333,"title":{},"body":{"contributing.html":{}}}],["implements",{"_index":237,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implicit",{"_index":3138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implied",{"_index":2958,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["import.meta.env.vite_base_url",{"_index":3095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import.meta.hot",{"_index":233,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["import.meta.hot.accept(accepthmrupdate(usealertsstore",{"_index":234,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["important",{"_index":2390,"title":{},"body":{"contributing.html":{}}}],["imported",{"_index":1344,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MathModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":2685,"title":{},"body":{"index.html":{}}}],["include",{"_index":1339,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"contributing.html":{}}}],["included",{"_index":1349,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2394,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["index",{"_index":85,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":2791,"title":{},"body":{"index.html":{}}}],["individualize",{"_index":2068,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["inestapplication",{"_index":1901,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["info(message",{"_index":227,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":926,"title":{},"body":{"controllers/ConversationsController.html":{},"contributing.html":{},"index.html":{}}}],["informations",{"_index":2889,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":415,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":363,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{}}}],["infrastructure/auth/guards",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":420,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":430,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/oauth/oauth.module",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":432,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":2096,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["init",{"_index":2839,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":2513,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MathController.html":{},"injectables/RtStrategy.html":{}}}],["inject(cache_manager",{"_index":513,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["inject(configservice",{"_index":727,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"overview.html":{}}}],["inputs",{"_index":2758,"title":{},"body":{"index.html":{}}}],["insertbefore",{"_index":1321,"title":{},"body":{"interfaces/IApp.html":{}}}],["inserted",{"_index":1324,"title":{},"body":{"interfaces/IApp.html":{}}}],["inspect",{"_index":2761,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":1348,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2876,"title":{},"body":{"index.html":{}}}],["install",{"_index":2837,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2836,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2734,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":286,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["int.pipe.ts",{"_index":1694,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1698,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2850,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2818,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2759,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1061,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1062,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":531,"title":{},"body":{"injectables/AppService.html":{}}}],["interceptormodule",{"_index":395,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1921,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["interface",{"_index":184,"title":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":186,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":284,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["internal_server_error",{"_index":3076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":1976,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["ip",{"_index":2069,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["ipublicuser",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":2131,"title":{},"body":{"classes/UserEntity.html":{}}}],["isarray",{"_index":831,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray({message",{"_index":816,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isboolean",{"_index":1729,"title":{},"body":{"classes/PostEntity.html":{}}}],["isdate",{"_index":1978,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":2132,"title":{},"body":{"classes/UserEntity.html":{}}}],["isenum",{"_index":1684,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isenum(eorder",{"_index":1687,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isgetrequest",{"_index":1288,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["isglobal",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":1173,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isint",{"_index":1685,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isjson",{"_index":832,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isjson({message",{"_index":819,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":2663,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1702,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":833,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["isnumber",{"_index":1730,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isoptional",{"_index":874,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":559,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":834,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":1057,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["issue",{"_index":2329,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":2376,"title":{},"body":{"contributing.html":{}}}],["istyping",{"_index":1487,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["isuccessrecaptcha",{"_index":720,"title":{},"body":{"injectables/AuthService.html":{}}}],["iswaggeroptions",{"_index":1334,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1555,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["item.id",{"_index":230,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["item1item2",{"_index":2697,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":1189,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":1191,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":1192,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":1193,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":1194,"title":{},"body":{"controllers/FileController.html":{}}}],["items",{"_index":215,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/PaginationDto.html":{},"miscellaneous/variables.html":{}}}],["itheme",{"_index":3016,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ithemesettingoptions",{"_index":3017,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":3123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":154,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecomment",{"_index":1804,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatecover",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatepost",{"_index":1799,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatereaction",{"_index":1800,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["java",{"_index":2902,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":2726,"title":{},"body":{"index.html":{}}}],["join",{"_index":2696,"title":{},"body":{"index.html":{}}}],["join(__dirname",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["jpeg|jpg|gif|png",{"_index":2661,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":2725,"title":{},"body":{"index.html":{}}}],["json",{"_index":821,"title":{},"body":{"classes/CommentEntity.html":{}}}],["json.parse",{"_index":2044,"title":{},"body":{"guards/RolesGuard.html":{}}}],["json.parse(item",{"_index":1556,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["json.stringify(errorresponse)}\\n",{"_index":317,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["json.stringify(exception.getresponse",{"_index":287,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":578,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["jwt_refresh",{"_index":2612,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jwtfromrequest",{"_index":583,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":679,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":683,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":695,"title":{},"body":{"injectables/AuthService.html":{}}}],["keep",{"_index":2270,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":1549,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["keywords",{"_index":2995,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2957,"title":{},"body":{"license.html":{}}}],["know",{"_index":2413,"title":{},"body":{"contributing.html":{}}}],["large",{"_index":3088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":1126,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["latest",{"_index":2355,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["league",{"_index":2907,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2895,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2893,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2909,"title":{},"body":{"index.html":{}}}],["length",{"_index":875,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(0",{"_index":884,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["length(1",{"_index":881,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["length(3",{"_index":1982,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":2137,"title":{},"body":{"classes/UserEntity.html":{}}}],["less",{"_index":2450,"title":{},"body":{"contributing.html":{}}}],["letter",{"_index":2122,"title":{},"body":{"classes/UserEntity.html":{}}}],["lgdlkq3qzudg1akl95fwu80ywkmgofbjd2aftdlesmh9r2yu3bi05nqj_682aenaiwy5qe0j3cqz234tjqxyhihpfi2txvanbyg_z53xetts9wo95nzq_ntxgoz",{"_index":2006,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["liability",{"_index":2970,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2967,"title":{},"body":{"license.html":{}}}],["library",{"_index":2721,"title":{},"body":{"index.html":{}}}],["license",{"_index":2405,"title":{"license.html":{}},"body":{"contributing.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["licensed",{"_index":2865,"title":{},"body":{"index.html":{}}}],["life",{"_index":2681,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":3168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["light",{"_index":3030,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"classes/PaginationDto.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{}}}],["limitation",{"_index":2937,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2959,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":370,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["line",{"_index":2362,"title":{},"body":{"contributing.html":{}}}],["link",{"_index":1304,"title":{},"body":{"interfaces/IApp.html":{}}}],["linter",{"_index":2823,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":2821,"title":{},"body":{"index.html":{}}}],["list",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"contributing.html":{},"index.html":{}}}],["list.authorid",{"_index":1866,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":1006,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list['creator",{"_index":1004,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter",{"_index":1008,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["literal",{"_index":1301,"title":{},"body":{"interfaces/IApp.html":{},"interfaces/NatsSubscriber.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":1342,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2849,"title":{},"body":{"index.html":{}}}],["log",{"_index":1388,"title":{},"body":{"injectables/LoggerService.html":{},"changelog.html":{},"contributing.html":{}}}],["log(message",{"_index":1397,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":250,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger('appservice",{"_index":512,"title":{},"body":{"injectables/AppService.html":{}}}],["logger(prefix",{"_index":2650,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":1383,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":1384,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":427,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":2525,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":2649,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":433,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":248,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1365,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logindto",{"_index":609,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RecaptchaDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(userid",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":857,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["looking",{"_index":2914,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2754,"title":{},"body":{"index.html":{}}}],["made",{"_index":1657,"title":{},"body":{"injectables/OauthService.html":{}}}],["main",{"_index":2501,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["main.ts",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":2387,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["making",{"_index":2448,"title":{},"body":{"contributing.html":{}}}],["male",{"_index":1959,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["malicious",{"_index":2798,"title":{},"body":{"index.html":{}}}],["manager",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["many",{"_index":3081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":1088,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["mapping",{"_index":2396,"title":{},"body":{"contributing.html":{}}}],["mark",{"_index":2441,"title":{},"body":{"contributing.html":{}}}],["markdown",{"_index":2399,"title":{},"body":{"contributing.html":{}}}],["marriagestatus",{"_index":1922,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["married",{"_index":1970,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["master",{"_index":2417,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["match",{"_index":2694,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["matched",{"_index":2040,"title":{},"body":{"guards/RolesGuard.html":{}}}],["matchemail",{"_index":2226,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":2228,"title":{},"body":{"injectables/UsersService.html":{}}}],["matchroles",{"_index":2018,"title":{},"body":{"guards/RolesGuard.html":{}}}],["matchroles(roles",{"_index":2022,"title":{},"body":{"guards/RolesGuard.html":{}}}],["math",{"_index":1431,"title":{},"body":{"controllers/MathController.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":3108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.controller",{"_index":1457,"title":{},"body":{"modules/MathModule.html":{}}}],["math_service",{"_index":1442,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mathcontroller",{"_index":1429,"title":{"controllers/MathController.html":{}},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{}}}],["mathmodule",{"_index":396,"title":{"modules/MathModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MathModule.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":469,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1995,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1998,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(50",{"_index":1689,"title":{},"body":{"classes/PaginationDto.html":{}}}],["maxcount",{"_index":1190,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maximum",{"_index":1678,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["maxlength",{"_index":876,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1990,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(151",{"_index":1996,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":1991,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(256",{"_index":885,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["maxlength(46",{"_index":1984,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(51",{"_index":883,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["media",{"_index":3091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":2071,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["member",{"_index":941,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["member1",{"_index":886,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["member2",{"_index":887,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["members",{"_index":842,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["memory",{"_index":1266,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1263,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":2961,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2940,"title":{},"body":{"license.html":{}}}],["message",{"_index":191,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["message.dto.ts",{"_index":1020,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{},"coverage.html":{}}}],["message.enum.ts",{"_index":2515,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["messagebody",{"_index":1492,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1506,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1512,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1511,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messageentity",{"_index":1022,"title":{"classes/MessageEntity.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{},"classes/MessageEntity.html":{},"coverage.html":{}}}],["messagepattern",{"_index":1440,"title":{},"body":{"controllers/MathController.html":{}}}],["messagepattern({cmd",{"_index":1437,"title":{},"body":{"controllers/MathController.html":{}}}],["messages",{"_index":994,"title":{},"body":{"injectables/ConversationsService.html":{},"interfaces/IApp.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"changelog.html":{},"index.html":{}}}],["messages.gateway",{"_index":1521,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.includes(ev.message",{"_index":1331,"title":{},"body":{"interfaces/IApp.html":{}}}],["messages.service",{"_index":1497,"title":{},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1470,"title":{"controllers/MessagesGateway.html":{}},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":397,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1496,"title":{"injectables/MessagesService.html":{}},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2888,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":820,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":2238,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":308,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["method_not_allowed",{"_index":3082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodkey",{"_index":1363,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":86,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["microservice",{"_index":2301,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["middleware",{"_index":498,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2844,"title":{},"body":{"index.html":{}}}],["miguel",{"_index":2433,"title":{},"body":{"contributing.html":{}}}],["min",{"_index":1686,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["min(0",{"_index":1997,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(1",{"_index":1688,"title":{},"body":{"classes/PaginationDto.html":{}}}],["min(11",{"_index":1994,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minimal",{"_index":2381,"title":{},"body":{"contributing.html":{}}}],["minimum",{"_index":1663,"title":{},"body":{"classes/PaginationDto.html":{}}}],["minlength",{"_index":877,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(0",{"_index":882,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["minlength(2",{"_index":1983,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":2139,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":2608,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2389,"title":{},"body":{"contributing.html":{}}}],["mit",{"_index":2864,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2853,"title":{},"body":{"index.html":{}}}],["model/http",{"_index":275,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["models",{"_index":1347,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2939,"title":{},"body":{"license.html":{}}}],["module",{"_index":50,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2872,"title":{},"body":{"index.html":{}}}],["morgan",{"_index":2284,"title":{},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["mozilla/5.0",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["ms",{"_index":2657,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":2743,"title":{},"body":{"index.html":{}}}],["multi",{"_index":1149,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":1169,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":2651,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multipart/form",{"_index":1215,"title":{},"body":{"classes/FileService.html":{}}}],["multiple",{"_index":2784,"title":{},"body":{"index.html":{}}}],["music",{"_index":1987,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mvc",{"_index":2787,"title":{},"body":{"index.html":{}}}],["name",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":1127,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":1125,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["named",{"_index":3174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natsstrategy",{"_index":1542,"title":{"classes/NatsStrategy.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["natssubscriber",{"_index":1548,"title":{"interfaces/NatsSubscriber.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["need",{"_index":2402,"title":{},"body":{"contributing.html":{}}}],["needs",{"_index":2072,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["nest",{"_index":2322,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nestinterceptor",{"_index":1067,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":2996,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":270,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":423,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":680,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2564,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":1082,"title":{},"body":{"classes/ExceptionFilter.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":550,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1164,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":357,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/MessagesGateway.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1495,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1098,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":409,"title":{},"body":{"modules/AppModule.html":{}}}],["netword",{"_index":2294,"title":{},"body":{"changelog.html":{}}}],["network",{"_index":2673,"title":{},"body":{"index.html":{}}}],["new",{"_index":311,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"classes/UpdatePasswordDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":2224,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":985,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":2225,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":2085,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["newprofile",{"_index":2222,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":749,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":754,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.id",{"_index":753,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.role",{"_index":755,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":1063,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":2077,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":2015,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nextfunction",{"_index":1096,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2923,"title":{},"body":{"license.html":{},"properties.html":{}}}],["node",{"_index":1322,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":2740,"title":{},"body":{"index.html":{}}}],["nodeexternals",{"_index":2554,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":2702,"title":{},"body":{"index.html":{}}}],["non",{"_index":2730,"title":{},"body":{"index.html":{}}}],["none",{"_index":199,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{}}}],["noninfringement",{"_index":2964,"title":{},"body":{"license.html":{}}}],["not_acceptable",{"_index":3084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_admin",{"_index":3064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_author",{"_index":3070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_creator",{"_index":3066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":3065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_member",{"_index":3067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notable",{"_index":2265,"title":{},"body":{"changelog.html":{}}}],["notacceptableexception",{"_index":2208,"title":{},"body":{"injectables/UsersService.html":{}}}],["notacceptableexception(auth_error.password_not_match",{"_index":2229,"title":{},"body":{"injectables/UsersService.html":{}}}],["note",{"_index":528,"title":{},"body":{"injectables/AppService.html":{}}}],["notedev",{"_index":2892,"title":{},"body":{"index.html":{}}}],["notfounderror",{"_index":1318,"title":{},"body":{"interfaces/IApp.html":{}}}],["notfoundexception",{"_index":1099,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":1102,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["notfoundexception(post_error.empty",{"_index":1862,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(post_error.not_found",{"_index":1865,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(user_error.not_found",{"_index":1861,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2953,"title":{},"body":{"license.html":{}}}],["notify(message",{"_index":217,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["now",{"_index":1419,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1424,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2365,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["npx",{"_index":2840,"title":{},"body":{"index.html":{}}}],["nuk",{"_index":2012,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["nuk'})@isstring({message",{"_index":2009,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["null",{"_index":789,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/imageValidator.html":{}}}],["null.interceptor",{"_index":1370,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["nullable",{"_index":854,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":204,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"controllers/MathController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number'})@isstring({message",{"_index":1664,"title":{},"body":{"classes/PaginationDto.html":{}}}],["number(dto.current",{"_index":2213,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":2212,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(process.env.cache_max",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["number(process.env.cache_ttl",{"_index":468,"title":{},"body":{"modules/AppModule.html":{}}}],["number(this.current",{"_index":1690,"title":{},"body":{"classes/PaginationDto.html":{}}}],["nuxt",{"_index":1307,"title":{},"body":{"interfaces/IApp.html":{}}}],["oauth",{"_index":1564,"title":{},"body":{"controllers/OauthController.html":{},"changelog.html":{},"index.html":{}}}],["oauth.controller",{"_index":1614,"title":{},"body":{"modules/OauthModule.html":{}}}],["oauth.service",{"_index":1591,"title":{},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{}}}],["oauth2",{"_index":2280,"title":{},"body":{"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":1242,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["oauthcontroller",{"_index":1562,"title":{"controllers/OauthController.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":398,"title":{"modules/OauthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OauthModule.html":{},"modules.html":{},"overview.html":{}}}],["oauthservice",{"_index":1590,"title":{"injectables/OauthService.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["object",{"_index":521,"title":{},"body":{"injectables/AppService.html":{},"classes/CommentEntity.html":{},"interfaces/IApp.html":{},"injectables/ValidationPipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object'})@isnotempty({message",{"_index":822,"title":{},"body":{"classes/CommentEntity.html":{}}}],["observable",{"_index":1066,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2932,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":292,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["occurs",{"_index":2774,"title":{},"body":{"index.html":{}}}],["official",{"_index":2666,"title":{},"body":{"index.html":{},"properties.html":{}}}],["offset",{"_index":3161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["old",{"_index":1937,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["old!'})@max(101",{"_index":1936,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["oldpassword",{"_index":2086,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["omittype",{"_index":1016,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["omittype(conversationentity",{"_index":1017,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["omittype(messageentity",{"_index":1024,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["one",{"_index":911,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["onmoduledestroy",{"_index":1897,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1898,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onscroll",{"_index":3162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onunmounted",{"_index":3171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onuploadprogress",{"_index":1200,"title":{},"body":{"classes/FileService.html":{}}}],["oop",{"_index":2900,"title":{},"body":{"index.html":{}}}],["open",{"_index":2328,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["operationid",{"_index":1360,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":1340,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":2811,"title":{},"body":{"index.html":{}}}],["option",{"_index":3100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["optional'})@isenum(eorder",{"_index":1675,"title":{},"body":{"classes/PaginationDto.html":{}}}],["optional'})@isstring({message",{"_index":1928,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["optional'})@maxlength(151",{"_index":1942,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["optional'})@min(11",{"_index":1933,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["options",{"_index":218,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options.timeout",{"_index":220,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1659,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":995,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["oriented",{"_index":2896,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1505,"title":{},"body":{"controllers/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":1228,"title":{},"body":{"classes/FilesService.html":{}}}],["othernames",{"_index":3182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":2974,"title":{},"body":{"license.html":{}}}],["out",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2982,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2p",{"_index":2835,"title":{},"body":{"index.html":{}}}],["package",{"_index":2557,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":525,"title":{},"body":{"injectables/AppService.html":{},"classes/PaginationDto.html":{},"index.html":{}}}],["page'})@isstring({message",{"_index":1668,"title":{},"body":{"classes/PaginationDto.html":{}}}],["pagecurrent",{"_index":2218,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":2215,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":2217,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":107,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["param('conversationid",{"_index":963,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":2180,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":956,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('postid",{"_index":1814,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["param('useridorusername",{"_index":2177,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":2744,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1701,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1692,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parsejwt",{"_index":2019,"title":{},"body":{"guards/RolesGuard.html":{}}}],["parsejwt(token",{"_index":2024,"title":{},"body":{"guards/RolesGuard.html":{}}}],["parser",{"_index":2581,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1791,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":2741,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1052,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(conversationentity",{"_index":1054,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2963,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":2785,"title":{},"body":{"index.html":{}}}],["parttern",{"_index":2533,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":577,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["passportmodule",{"_index":681,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":682,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":574,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":580,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["passreqtocallback",{"_index":589,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["password",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":2150,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":2091,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["password123'})@isnotempty()@isstring",{"_index":2087,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["password123'})@isnotempty({message",{"_index":2114,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_not_match",{"_index":3061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":760,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":2723,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":2133,"title":{"classes/passwordValidator.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":3134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":965,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":915,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":962,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":934,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":967,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":938,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":958,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":930,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":2182,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":2168,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1816,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1789,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":306,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":503,"title":{},"body":{"modules/AppModule.html":{},"controllers/MathController.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":2625,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["patterns",{"_index":1551,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["patterns.map((item",{"_index":1554,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["payload",{"_index":573,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["payload.email",{"_index":1653,"title":{},"body":{"injectables/OauthService.html":{}}}],["payload_too_large",{"_index":3087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":1667,"title":{},"body":{"classes/PaginationDto.html":{}}}],["perfect",{"_index":2444,"title":{},"body":{"contributing.html":{}}}],["perform",{"_index":2731,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2926,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2946,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":3152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2931,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["persons",{"_index":2947,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1923,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1980,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["photos",{"_index":1248,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":1250,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picktype",{"_index":873,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(commententity",{"_index":1013,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(conversationentity",{"_index":1048,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["picktype(customdto",{"_index":880,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PostEntity.html":{}}}],["picktype(postentity",{"_index":1030,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":2095,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(userentity",{"_index":1428,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["picture",{"_index":1249,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pinia",{"_index":194,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["pipe",{"_index":1074,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["pipe(map((value",{"_index":1089,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipe(tap",{"_index":1421,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":2819,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1699,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":2733,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":2240,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":2242,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":2348,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["playground",{"_index":2825,"title":{},"body":{"index.html":{}}}],["please",{"_index":2344,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["plugin",{"_index":3156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugins",{"_index":2701,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2955,"title":{},"body":{"license.html":{}}}],["post",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/OauthService.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiokresponse({description",{"_index":1760,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('avatar",{"_index":1179,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1137,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1827,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1749,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":1182,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":1143,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":1188,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":1148,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":1185,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":1156,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1809,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1770,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1821,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1780,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":662,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin/recaptcha",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin/recaptcha')@apioperation({summary",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1754,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":903,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":1027,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:6",{"_index":1058,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post_error",{"_index":1852,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postentity",{"_index":1028,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2831,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1908,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":801,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2830,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1736,"title":{},"body":{"controllers/PostsController.html":{},"changelog.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":1838,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1793,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1734,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":399,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1792,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":2682,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2905,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":1385,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":2522,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["present",{"_index":2460,"title":{},"body":{"contributing.html":{}}}],["prettier",{"_index":2605,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":2668,"title":{},"body":{"index.html":{}}}],["previousnames",{"_index":3177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previousnames.value.add(savedname.value",{"_index":3187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["print",{"_index":2753,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":2502,"title":{},"body":{"coverage.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["prisma.service",{"_index":1893,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/.../seed.ts",{"_index":2635,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":1905,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/seed.ts",{"_index":2500,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma:generate",{"_index":2843,"title":{},"body":{"index.html":{}}}],["prisma:migrate",{"_index":2845,"title":{},"body":{"index.html":{}}}],["prisma:pull",{"_index":2842,"title":{},"body":{"index.html":{}}}],["prisma:push",{"_index":2847,"title":{},"body":{"index.html":{}}}],["prisma:studiorunning",{"_index":2848,"title":{},"body":{"index.html":{}}}],["prisma@latest",{"_index":2838,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1895,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismamodule",{"_index":400,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":75,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":239,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problem",{"_index":2379,"title":{},"body":{"contributing.html":{}}}],["problems",{"_index":2816,"title":{},"body":{"index.html":{}}}],["process.env.admin_key",{"_index":2033,"title":{},"body":{"guards/RolesGuard.html":{}}}],["process.env.admin_sub",{"_index":2035,"title":{},"body":{"guards/RolesGuard.html":{}}}],["process.env.app_secret",{"_index":587,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["process.env.cache_ttl",{"_index":532,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.database_url",{"_index":1909,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.facebook_callback_url",{"_index":1119,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_id",{"_index":1115,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_secret",{"_index":1117,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.google_callback_url",{"_index":1247,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_client_id",{"_index":1245,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":1246,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.public_guard",{"_index":561,"title":{},"body":{"injectables/AtGuard.html":{}}}],["process.env.white_list",{"_index":3103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["product",{"_index":2425,"title":{},"body":{"contributing.html":{}}}],["production",{"_index":2854,"title":{},"body":{"index.html":{}}}],["profile",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profileentity",{"_index":1914,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["profileentity:111",{"_index":2097,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:129",{"_index":2107,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:140",{"_index":2101,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:156",{"_index":2098,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:172",{"_index":2100,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:183",{"_index":2104,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:42",{"_index":2103,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:55",{"_index":2099,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:68",{"_index":2102,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:82",{"_index":2106,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:95",{"_index":2105,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profilefields",{"_index":1121,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["programming",{"_index":2686,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2879,"title":{},"body":{"index.html":{}}}],["project",{"_index":2267,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":728,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":190,"title":{"properties.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteOnePost.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"interfaces/NatsSubscriber.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"changelog.html":{},"properties.html":{}}}],["property",{"_index":2109,"title":{},"body":{"classes/UserEntity.html":{}}}],["protect",{"_index":2806,"title":{},"body":{"index.html":{}}}],["protected",{"_index":2061,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["provide",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":2457,"title":{},"body":{"contributing.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":2648,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":63,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["providing",{"_index":2380,"title":{},"body":{"contributing.html":{}}}],["proxy.guard",{"_index":362,"title":{},"body":{"controllers/AppController.html":{}}}],["proxy.guard.ts",{"_index":2060,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["proxy.guard.ts:6",{"_index":2064,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["prs",{"_index":2416,"title":{},"body":{"contributing.html":{}}}],["public",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1766,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":2157,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":2153,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@post('signin')@useinterceptors(cacheinterceptor)@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@roledecorator(erole.admin)@get('users/all')@apioperation({summary",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public/multi",{"_index":1153,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":1160,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":1722,"title":{},"body":{"classes/PostEntity.html":{},"license.html":{}}}],["published",{"_index":1707,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["pull",{"_index":2335,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["purpose",{"_index":2671,"title":{},"body":{"index.html":{},"license.html":{}}}],["push",{"_index":2436,"title":{},"body":{"contributing.html":{}}}],["put",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1829,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1785,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":2183,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":2163,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":2184,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":2165,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":179,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["qa",{"_index":2461,"title":{},"body":{"contributing.html":{}}}],["query",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["questions",{"_index":2385,"title":{},"body":{"contributing.html":{}}}],["queue",{"_index":1550,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["quickly",{"_index":2815,"title":{},"body":{"index.html":{}}}],["random",{"_index":2279,"title":{},"body":{"changelog.html":{}}}],["rapidy",{"_index":2828,"title":{},"body":{"index.html":{}}}],["rate",{"_index":369,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["reach",{"_index":2916,"title":{},"body":{"index.html":{}}}],["react",{"_index":1781,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1881,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":1725,"title":{},"body":{"classes/PostEntity.html":{},"index.html":{}}}],["reactionpost",{"_index":1745,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1822,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1778,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":802,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1779,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1708,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":2336,"title":{},"body":{"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["readiness",{"_index":1254,"title":{},"body":{"controllers/HealthController.html":{}}}],["reading",{"_index":2430,"title":{},"body":{"contributing.html":{}}}],["readme",{"_index":2320,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{}}}],["realtime",{"_index":3031,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["recapcha",{"_index":2001,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["recaptcha",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RecaptchaDto.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["recaptcha'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{}}}],["recaptcha_failed",{"_index":3062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recaptcha_not_person",{"_index":3063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recaptchadto",{"_index":614,"title":{"classes/RecaptchaDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RecaptchaDto.html":{},"coverage.html":{}}}],["recompile",{"_index":2771,"title":{},"body":{"index.html":{}}}],["record",{"_index":335,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["redirect",{"_index":2308,"title":{},"body":{"changelog.html":{}}}],["reduce((a",{"_index":1452,"title":{},"body":{"controllers/MathController.html":{}}}],["ref",{"_index":3176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref(new",{"_index":3178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":2826,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":2597,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":489,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":2613,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["refreshtoken",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["regexp('bingbot",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["relational",{"_index":2700,"title":{},"body":{"index.html":{}}}],["relationship",{"_index":1969,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["reload",{"_index":2770,"title":{},"body":{"index.html":{}}}],["remotely",{"_index":2782,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1515,"title":{},"body":{"controllers/MessagesGateway.html":{},"changelog.html":{}}}],["remove(id",{"_index":228,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["removemessage",{"_index":1474,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["removemessage(dto",{"_index":1483,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":481,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":2755,"title":{},"body":{"index.html":{}}}],["replace",{"_index":2310,"title":{},"body":{"changelog.html":{}}}],["replace('bearer",{"_index":2056,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["replies",{"_index":803,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repo",{"_index":2346,"title":{},"body":{"contributing.html":{}}}],["report",{"_index":2372,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":2709,"title":{},"body":{"index.html":{},"properties.html":{}}}],["reproduce",{"_index":2383,"title":{},"body":{"contributing.html":{}}}],["req",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"miscellaneous/variables.html":{}}}],["req.ip",{"_index":2067,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ips.length",{"_index":2065,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ips[0",{"_index":2066,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.params.userid",{"_index":1100,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["req.user",{"_index":1632,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.email",{"_index":1639,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.email.split('@')[0",{"_index":1640,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.user.email",{"_index":1633,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.user.email.split('@')[0",{"_index":1634,"title":{},"body":{"injectables/OauthService.html":{}}}],["req['code",{"_index":1643,"title":{},"body":{"injectables/OauthService.html":{}}}],["request",{"_index":266,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.method",{"_index":309,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.session.cookie",{"_index":379,"title":{},"body":{"controllers/AppController.html":{}}}],["request.signedcookies",{"_index":382,"title":{},"body":{"controllers/AppController.html":{}}}],["request.url",{"_index":307,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":3111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":3113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":3112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_timeout",{"_index":3086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["requestcookie",{"_index":329,"title":{},"body":{"controllers/AppController.html":{}}}],["requestcookie(@req",{"_index":377,"title":{},"body":{"controllers/AppController.html":{}}}],["requestcookie(request",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["requestmethod",{"_index":2193,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":501,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":492,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":2260,"title":{},"body":{"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":2075,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["requesttoken",{"_index":1642,"title":{},"body":{"injectables/OauthService.html":{}}}],["require('run",{"_index":3155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('webpack",{"_index":3153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":209,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"controllers/FileController.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["required'})@isalphanumeric()@length(3",{"_index":2127,"title":{},"body":{"classes/UserEntity.html":{}}}],["required'})@isemail({discription",{"_index":2111,"title":{},"body":{"classes/UserEntity.html":{}}}],["required'})@isstring({message",{"_index":811,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CustomDto.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["required'})@length(3",{"_index":1951,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["requiredroles",{"_index":2029,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["res.setheader('set",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":267,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["response'})@apiresponse({status",{"_index":340,"title":{},"body":{"controllers/AppController.html":{}}}],["response.data",{"_index":3097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.interface",{"_index":276,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response.interface.ts",{"_index":1040,"title":{},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["response.status(status).json",{"_index":1297,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":304,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":290,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsecookie",{"_index":330,"title":{},"body":{"controllers/AppController.html":{}}}],["responsecookie(@res",{"_index":384,"title":{},"body":{"controllers/AppController.html":{}}}],["responsecookie(response",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["responses_message",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responses_message.create_user",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["responses_message.delete_comment",{"_index":1888,"title":{},"body":{"injectables/PostsService.html":{}}}],["responses_message.delete_user",{"_index":2231,"title":{},"body":{"injectables/UsersService.html":{}}}],["rest",{"_index":3119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2936,"title":{},"body":{"license.html":{}}}],["result",{"_index":773,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["result?.data.score",{"_index":785,"title":{},"body":{"injectables/AuthService.html":{}}}],["result?.data.success",{"_index":783,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2938,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":2599,"title":{},"body":{"dependencies.html":{}}}],["roadmap",{"_index":2426,"title":{},"body":{"contributing.html":{}}}],["role",{"_index":940,"title":{},"body":{"controllers/ConversationsController.html":{},"guards/RolesGuard.html":{},"changelog.html":{},"index.html":{}}}],["roledecorator",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(erole.admin",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roles",{"_index":702,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles.decorator",{"_index":2028,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.find((el",{"_index":2042,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.includes(role",{"_index":2041,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles_key",{"_index":2027,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":438,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":1343,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["rpcexception",{"_index":1080,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rpcexceptionfilter",{"_index":1079,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rt",{"_index":711,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":635,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtm",{"_index":2352,"title":{},"body":{"contributing.html":{}}}],["rtstrategy",{"_index":673,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2363,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["running",{"_index":2792,"title":{},"body":{"index.html":{}}}],["runs",{"_index":2368,"title":{},"body":{"contributing.html":{}}}],["rxjs",{"_index":1070,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1072,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":2520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["same_password",{"_index":3060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sample_image",{"_index":2693,"title":{},"body":{"index.html":{}}}],["save",{"_index":2290,"title":{},"body":{"changelog.html":{}}}],["savedname",{"_index":3175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["savedname.value",{"_index":3184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saves",{"_index":3185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":2705,"title":{},"body":{"index.html":{}}}],["scale",{"_index":2720,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":2464,"title":{},"body":{"contributing.html":{}}}],["schema",{"_index":2297,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["scheme",{"_index":3131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":1120,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1406,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scopes",{"_index":3141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":2364,"title":{},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["scrolltop",{"_index":3163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seconds",{"_index":533,"title":{},"body":{"injectables/AppService.html":{}}}],["secret",{"_index":684,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":585,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":2747,"title":{},"body":{"index.html":{}}}],["security",{"_index":2299,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":2698,"title":{},"body":{"index.html":{}}}],["seemann",{"_index":2442,"title":{},"body":{"contributing.html":{}}}],["select",{"_index":993,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2944,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":2272,"title":{},"body":{"changelog.html":{}}}],["sender",{"_index":1035,"title":{},"body":{"classes/CustomDto.html":{}}}],["senderid",{"_index":998,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["sendername",{"_index":1532,"title":{},"body":{"injectables/MessagesService.html":{}}}],["serialize",{"_index":2736,"title":{},"body":{"index.html":{}}}],["serve",{"_index":2766,"title":{},"body":{"index.html":{}}}],["server",{"_index":285,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servernats",{"_index":1544,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["servestaticmodule",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":2779,"title":{},"body":{"index.html":{}}}],["session",{"_index":344,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["session.visits",{"_index":516,"title":{},"body":{"injectables/AppService.html":{}}}],["set",{"_index":1353,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["setcontact",{"_index":3121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":3118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":1355,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setlicense",{"_index":3124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('ispublic",{"_index":3158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":3159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname",{"_index":3188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname(name",{"_index":3186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":1389,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1399,"title":{},"body":{"injectables/LoggerService.html":{}}}],["settimeout",{"_index":221,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":2749,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":3117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2511,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["setup(app",{"_index":2653,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.6.0",{"_index":3128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2954,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":2675,"title":{},"body":{"index.html":{}}}],["ships",{"_index":2354,"title":{},"body":{"contributing.html":{}}}],["shopee",{"_index":2883,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2881,"title":{},"body":{"index.html":{}}}],["short",{"_index":1953,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["side",{"_index":2706,"title":{},"body":{"index.html":{}}}],["sigin.dto",{"_index":2011,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["sign",{"_index":2403,"title":{},"body":{"contributing.html":{}}}],["signed",{"_index":383,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["signin",{"_index":2690,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinrecaptcha",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinrecaptcha(@body",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinrecaptcha(dto",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":686,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":2691,"title":{},"body":{"index.html":{}}}],["signup",{"_index":2689,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":619,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":646,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocaldto",{"_index":3018,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["single",{"_index":1968,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["singlefielddecorator",{"_index":1168,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":1180,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":1183,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":2654,"title":{},"body":{"miscellaneous/functions.html":{}}}],["site",{"_index":2796,"title":{},"body":{"index.html":{}}}],["size",{"_index":1232,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":2684,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1661,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{}}}],["skipthrottle",{"_index":356,"title":{},"body":{"controllers/AppController.html":{},"controllers/MessagesGateway.html":{}}}],["skipthrottle(false",{"_index":367,"title":{},"body":{"controllers/AppController.html":{}}}],["skipthrottle(undefined",{"_index":331,"title":{},"body":{"controllers/AppController.html":{}}}],["snake",{"_index":2898,"title":{},"body":{"index.html":{}}}],["snippet",{"_index":2391,"title":{},"body":{"contributing.html":{}}}],["social",{"_index":2834,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1477,"title":{},"body":{"controllers/MessagesGateway.html":{},"changelog.html":{},"properties.html":{}}}],["socket.io",{"_index":1499,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2934,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"contributing.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["source/destination",{"_index":2395,"title":{},"body":{"contributing.html":{}}}],["spa",{"_index":2767,"title":{},"body":{"index.html":{}}}],["special",{"_index":2123,"title":{},"body":{"classes/UserEntity.html":{}}}],["specific",{"_index":2455,"title":{},"body":{"contributing.html":{}}}],["specification",{"_index":1350,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2868,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1988,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":3042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":2629,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../axios.ts",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":2642,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../fullname.validator.ts",{"_index":3052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.validator.ts",{"_index":3051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":2634,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":2633,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2630,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../math.constant.ts",{"_index":3050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../multi",{"_index":2636,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../options.enum.ts",{"_index":2610,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../password.validator.ts",{"_index":3053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":3054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":3056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":2639,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../repl.ts",{"_index":2631,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":3057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../setup.config.ts",{"_index":2637,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../single",{"_index":2638,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":3049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":3055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/constants/math.constant.ts",{"_index":2503,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/filters/rpc",{"_index":1077,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts",{"_index":1430,"title":{},"body":{"controllers/MathController.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:35",{"_index":1435,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:42",{"_index":1438,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.module.ts",{"_index":1454,"title":{},"body":{"modules/MathModule.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts",{"_index":1543,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts:12",{"_index":1547,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["src/abstraction/prisma/prisma.module",{"_index":676,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/abstraction/prisma/prisma.module.ts",{"_index":1892,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/abstraction/prisma/prisma.service",{"_index":718,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["src/abstraction/prisma/prisma.service.ts",{"_index":1894,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/abstraction/prisma/prisma.service.ts:13",{"_index":1899,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:25",{"_index":1904,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:29",{"_index":1903,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:33",{"_index":1902,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/app.controller.ts",{"_index":325,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:28",{"_index":332,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:32",{"_index":333,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:45",{"_index":343,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:50",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:57",{"_index":350,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:106",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":504,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:14",{"_index":506,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:20",{"_index":507,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/common/dto",{"_index":879,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PostEntity.html":{}}}],["src/core/common/dto/custom.dto.ts",{"_index":1033,"title":{},"body":{"classes/CustomDto.html":{},"coverage.html":{}}}],["src/core/common/dto/custom.dto.ts:16",{"_index":1038,"title":{},"body":{"classes/CustomDto.html":{}}}],["src/core/common/dto/custom.dto.ts:29",{"_index":1037,"title":{},"body":{"classes/CustomDto.html":{}}}],["src/core/common/dto/default.dto.ts",{"_index":1042,"title":{},"body":{"classes/DefaultDto.html":{},"coverage.html":{}}}],["src/core/common/dto/default.dto.ts:2",{"_index":1043,"title":{},"body":{"classes/DefaultDto.html":{}}}],["src/core/common/dto/default.dto.ts:3",{"_index":1044,"title":{},"body":{"classes/DefaultDto.html":{}}}],["src/core/common/dto/pagination.dto",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/common/dto/pagination.dto.ts",{"_index":1658,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/core/common/dto/pagination.dto.ts:21",{"_index":1666,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:35",{"_index":1669,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:52",{"_index":1676,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:66",{"_index":1680,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:68",{"_index":1682,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/configs/cors.config.ts",{"_index":2505,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":1335,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/setup.config.ts",{"_index":2510,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/configs/swagger.config.ts",{"_index":2512,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"injectables/GoogleStrategy.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/constants/options.enum.ts",{"_index":2611,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":2514,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":236,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:18",{"_index":249,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:21",{"_index":260,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:31",{"_index":264,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:43",{"_index":268,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:73",{"_index":254,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:85",{"_index":253,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:98",{"_index":255,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":1294,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":1295,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/filters/model/http",{"_index":1039,"title":{},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["src/core/helpers",{"_index":725,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{}}}],["src/core/helpers/age.ts",{"_index":2516,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/axios.ts",{"_index":2518,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":2209,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":2519,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/errors.interceptor.ts",{"_index":1060,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/errors.interceptor.ts:13",{"_index":1065,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["src/core/interceptors/http",{"_index":1280,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":1364,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":1366,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1414,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1415,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/null.interceptor.ts",{"_index":1086,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/null.interceptor.ts:12",{"_index":1087,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":2073,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":2074,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":1368,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":2013,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":2079,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":2521,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":1378,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":1380,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":2523,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":1386,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1398,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1396,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1404,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1393,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1402,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1405,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1400,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":1091,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/logger",{"_index":1373,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1693,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":2234,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":2239,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":2237,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"modules/AuthModule.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":2526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":2017,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:13",{"_index":2020,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:16",{"_index":2021,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:41",{"_index":2023,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:46",{"_index":2025,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/security/throttle",{"_index":2059,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["src/core/utils/delay.ts",{"_index":2527,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random",{"_index":1629,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/core/utils/random.ts",{"_index":2529,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":1981,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":2530,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":2621,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":2618,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":2531,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":2660,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":2658,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":2534,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2986,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2985,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":2535,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2992,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2991,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":2536,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":3035,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":3034,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/health.controller.ts",{"_index":1252,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:25",{"_index":1258,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infrastructure/admin/admin",{"_index":83,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":72,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:101",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:110",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:124",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:136",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:80",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:90",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":2195,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":674,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":689,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:107",{"_index":706,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:128",{"_index":714,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:154",{"_index":707,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:160",{"_index":704,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:172",{"_index":705,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:192",{"_index":709,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:224",{"_index":698,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:25",{"_index":696,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:34",{"_index":703,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:66",{"_index":712,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:78",{"_index":708,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1441,"title":{},"body":{"controllers/MathController.html":{},"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":2538,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":2541,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto/request",{"_index":2170,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":2084,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts:13",{"_index":2089,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts:22",{"_index":2088,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/request/recaptcha.dto.ts",{"_index":2000,"title":{},"body":{"classes/RecaptchaDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/recaptcha.dto.ts:18",{"_index":2010,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1425,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":2058,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":537,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:11",{"_index":541,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:17",{"_index":544,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:27",{"_index":547,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":2047,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:4",{"_index":2048,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":566,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:20",{"_index":572,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:9",{"_index":569,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":2050,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:12",{"_index":2051,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:25",{"_index":2053,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":891,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:105",{"_index":927,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:120",{"_index":931,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:135",{"_index":912,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:150",{"_index":935,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:169",{"_index":917,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:188",{"_index":942,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:80",{"_index":907,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:92",{"_index":922,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":972,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":974,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:100",{"_index":981,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:115",{"_index":977,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:132",{"_index":982,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:147",{"_index":978,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:16",{"_index":975,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:182",{"_index":983,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:19",{"_index":976,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:34",{"_index":979,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:74",{"_index":980,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":1014,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":1047,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":1235,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":1051,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":838,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:21",{"_index":862,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:37",{"_index":870,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:52",{"_index":860,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:58",{"_index":846,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:64",{"_index":850,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:71",{"_index":871,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:79",{"_index":864,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:86",{"_index":845,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:95",{"_index":852,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":2543,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":2545,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":2546,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":1130,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:112",{"_index":1154,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:70",{"_index":1141,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:81",{"_index":1146,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:92",{"_index":1161,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":1221,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":1223,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":1225,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":1227,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":1226,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":1224,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/request/create",{"_index":1019,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/request/delete",{"_index":1050,"title":{},"body":{"classes/DeleteMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts",{"_index":1460,"title":{},"body":{"classes/MessageEntity.html":{},"coverage.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:11",{"_index":1464,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:19",{"_index":1469,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:27",{"_index":1467,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:35",{"_index":1463,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:43",{"_index":1465,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1471,"title":{},"body":{"controllers/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:25",{"_index":1482,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1479,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:45",{"_index":1489,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:56",{"_index":1485,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1520,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1522,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:10",{"_index":1526,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:30",{"_index":1528,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:38",{"_index":1525,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:54",{"_index":1529,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1524,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts",{"_index":1563,"title":{},"body":{"controllers/OauthController.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:102",{"_index":1589,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:115",{"_index":1583,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:63",{"_index":1574,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:77",{"_index":1579,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:88",{"_index":1586,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.module.ts",{"_index":1613,"title":{},"body":{"modules/OauthModule.html":{}}}],["src/infrastructure/oauth/oauth.service.ts",{"_index":1618,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:15",{"_index":1622,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:33",{"_index":1626,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:51",{"_index":1623,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:67",{"_index":1625,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:9",{"_index":1621,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts",{"_index":1104,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:10",{"_index":1105,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:21",{"_index":1110,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts",{"_index":1237,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:13",{"_index":1238,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:23",{"_index":1240,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/posts/dto/comment/request/create",{"_index":1010,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/delete",{"_index":1046,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/update",{"_index":2080,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":1026,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":1056,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1999,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":800,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":812,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:29",{"_index":827,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:42",{"_index":824,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:55",{"_index":829,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:68",{"_index":815,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:76",{"_index":818,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:84",{"_index":823,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":1029,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1704,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:101",{"_index":1720,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:114",{"_index":1715,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:125",{"_index":1727,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:23",{"_index":1719,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:36",{"_index":1728,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:49",{"_index":1713,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:62",{"_index":1718,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:75",{"_index":1724,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:88",{"_index":1710,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1735,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:110",{"_index":1771,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:123",{"_index":1774,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:135",{"_index":1777,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:147",{"_index":1790,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:157",{"_index":1764,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:170",{"_index":1782,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:180",{"_index":1768,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:193",{"_index":1752,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:206",{"_index":1786,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:218",{"_index":1761,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:94",{"_index":1757,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1837,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1839,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:125",{"_index":1848,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:143",{"_index":1851,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:174",{"_index":1844,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:200",{"_index":1849,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:228",{"_index":1845,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:239",{"_index":1841,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:262",{"_index":1850,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:277",{"_index":1843,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:34",{"_index":1840,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:37",{"_index":1842,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:71",{"_index":1846,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:89",{"_index":1847,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/users/dto/request/update",{"_index":2092,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1915,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:111",{"_index":1931,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:129",{"_index":1977,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:140",{"_index":1948,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:156",{"_index":1938,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:172",{"_index":1943,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:183",{"_index":1962,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:42",{"_index":1958,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:55",{"_index":1939,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:68",{"_index":1949,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:82",{"_index":1972,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:95",{"_index":1966,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/user.entity",{"_index":2090,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/users/entities/user.entity.ts",{"_index":2108,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:26",{"_index":2113,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:39",{"_index":2112,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:63",{"_index":2125,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:87",{"_index":2130,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":2143,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:103",{"_index":2162,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:114",{"_index":2169,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:128",{"_index":2164,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:142",{"_index":2166,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:154",{"_index":2151,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:77",{"_index":2154,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:90",{"_index":2160,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":2191,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":2192,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":2197,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:116",{"_index":2207,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:136",{"_index":2205,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:165",{"_index":2206,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:194",{"_index":2199,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:227",{"_index":2200,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:33",{"_index":2198,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:36",{"_index":2201,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:61",{"_index":2202,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:81",{"_index":2203,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:97",{"_index":2204,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":2549,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/repl.ts",{"_index":2551,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standards",{"_index":2727,"title":{},"body":{"index.html":{}}}],["start",{"_index":2330,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["start:dev",{"_index":2366,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["start:prodrunning",{"_index":2855,"title":{},"body":{"index.html":{}}}],["startat",{"_index":2488,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":2263,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1310,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["state",{"_index":214,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":2472,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":240,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":374,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["status_message",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["status_message.success",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":293,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{}}}],["stay",{"_index":2873,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2382,"title":{},"body":{"contributing.html":{}}}],["storage",{"_index":2300,"title":{},"body":{"changelog.html":{}}}],["store",{"_index":2783,"title":{},"body":{"index.html":{}}}],["str",{"_index":2646,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strategies",{"_index":678,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/facebook.strategy",{"_index":1617,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategies/google.strategy",{"_index":1615,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategy",{"_index":576,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"changelog.html":{}}}],["string",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"guards/RolesGuard.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["string'})@isnotempty({message",{"_index":814,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["string'})@isoptional({message",{"_index":1665,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["string'})@length(8",{"_index":2115,"title":{},"body":{"classes/UserEntity.html":{}}}],["string'})@maxlength(101",{"_index":1929,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["string'})@maxlength(21",{"_index":1974,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["string})@isarray()@isnotempty",{"_index":851,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["string})@isnotempty({message",{"_index":810,"title":{},"body":{"classes/CommentEntity.html":{},"classes/UserEntity.html":{}}}],["string})@isstring()@isnotempty",{"_index":861,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["string})@isstring()@isnotempty()@length(1",{"_index":865,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["string})@isstring({message",{"_index":813,"title":{},"body":{"classes/CommentEntity.html":{}}}],["structure",{"_index":2699,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2357,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["style",{"_index":206,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":730,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2949,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2942,"title":{},"body":{"license.html":{}}}],["submit",{"_index":2334,"title":{},"body":{"contributing.html":{}}}],["submitting",{"_index":2407,"title":{},"body":{"contributing.html":{}}}],["submodule",{"_index":2304,"title":{},"body":{"changelog.html":{}}}],["subrandom",{"_index":1628,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["subrandom(16",{"_index":1635,"title":{},"body":{"injectables/OauthService.html":{}}}],["subrandom(max",{"_index":2655,"title":{},"body":{"miscellaneous/functions.html":{}}}],["subscribemessage",{"_index":1491,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1478,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1481,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1484,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1488,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["substantial",{"_index":2419,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["success",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["success(message",{"_index":223,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["successfuly",{"_index":1756,"title":{},"body":{"controllers/PostsController.html":{}}}],["sum",{"_index":1432,"title":{},"body":{"controllers/MathController.html":{}}}],["sum(data",{"_index":1436,"title":{},"body":{"controllers/MathController.html":{}}}],["summary",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"contributing.html":{}}}],["super",{"_index":553,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":564,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1412,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1410,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1409,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1413,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1411,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":2746,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supports",{"_index":2398,"title":{},"body":{"contributing.html":{}}}],["sure",{"_index":2388,"title":{},"body":{"contributing.html":{}}}],["svg",{"_index":2979,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1341,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":3115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":3149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":3150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":3151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2846,"title":{},"body":{"index.html":{}}}],["system",{"_index":1268,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["system'})@healthcheck",{"_index":1257,"title":{},"body":{"controllers/HealthController.html":{}}}],["system_error",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["system_error.conflict",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.forbidden",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.internal_server_error",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.method_not_allowed",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_acceptable",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_found",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.payload_too_large",{"_index":1175,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["system_error.request_timeout",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.too_many_requests",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unauthorized",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unsupported_media_type",{"_index":1176,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["t",{"_index":2014,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":2556,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2555,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":2713,"title":{},"body":{"index.html":{}}}],["take",{"_index":997,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{}}}],["takes",{"_index":2756,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1416,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tar.gz",{"_index":2316,"title":{},"body":{"changelog.html":{}}}],["tasks",{"_index":2463,"title":{},"body":{"contributing.html":{}}}],["team",{"_index":2422,"title":{},"body":{"contributing.html":{}}}],["team/nestjs",{"_index":2999,"title":{},"body":{"properties.html":{}}}],["templates",{"_index":2833,"title":{},"body":{"index.html":{}}}],["teneno",{"_index":337,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":2765,"title":{},"body":{"index.html":{}}}],["terminusmodule",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["terms",{"_index":2780,"title":{},"body":{"index.html":{}}}],["test",{"_index":2467,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["test:covsupport",{"_index":2863,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2862,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2369,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["text",{"_index":804,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteMessageDto.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["text'})@isnotempty()@isstring",{"_index":1466,"title":{},"body":{"classes/MessageEntity.html":{}}}],["thanks",{"_index":2867,"title":{},"body":{"index.html":{}}}],["theme",{"_index":1303,"title":{},"body":{"interfaces/IApp.html":{}}}],["thememanager",{"_index":1302,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["then(async",{"_index":3096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["things",{"_index":2446,"title":{},"body":{"contributing.html":{}}}],["thinking",{"_index":2687,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":2677,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1910,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1911,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1912,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello(session",{"_index":376,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createcookie(a.accesstoken",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(payload",{"_index":1638,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.signinrecaptcha(dto",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(dto",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(payload",{"_index":1637,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.updatepassword(dto",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cachemanager.get",{"_index":519,"title":{},"body":{"injectables/AppService.html":{}}}],["this.cachemanager.set('cachetoken",{"_index":767,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.client.send(pattern",{"_index":1451,"title":{},"body":{"controllers/MathController.html":{}}}],["this.configservice.get('app_secret",{"_index":731,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":732,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":733,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('google_recaptcha_secret",{"_index":771,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('recaptcha_verify_url",{"_index":775,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversationsservice",{"_index":950,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":952,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":961,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":966,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(userid",{"_index":954,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":957,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":959,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":964,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":968,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.disk.checkstorage('storage",{"_index":1276,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":1181,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":1184,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":1195,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":1187,"title":{},"body":{"controllers/FileController.html":{}}}],["this.generatekey(context",{"_index":2255,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.getallmessages(dto.conversationid",{"_index":1539,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getclientname(dto.senderid",{"_index":1533,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.geterrorlog(errorresponse",{"_index":302,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.geterrorresponse",{"_index":300,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.getmessagehandler(key).bind(this",{"_index":1561,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1864,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":2223,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens",{"_index":752,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":763,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.githubsuccess(data.access_token",{"_index":1647,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.handlemessagelog(exception",{"_index":282,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.health.check",{"_index":1269,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpadapterhost",{"_index":1287,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.items.findindex((item",{"_index":229,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.push",{"_index":219,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.splice(index",{"_index":232,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.jwtservice.signasync",{"_index":729,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":289,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":514,"title":{},"body":{"injectables/AppService.html":{}}}],["this.matchroles(requiredroles",{"_index":2037,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":1273,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('mem_rss",{"_index":1270,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagehandlers.keys",{"_index":1552,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.messagesservice.createmessage",{"_index":1508,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.getallmessages(conversationid",{"_index":1507,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.getclientname(senderid",{"_index":1513,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.removemessage(dto",{"_index":1516,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.notify(message",{"_index":224,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.oauthservice.facebookredirect(req",{"_index":1599,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.githubredirect(req",{"_index":1608,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.googleredirect(req",{"_index":1605,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.parsejwt(request",{"_index":2031,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.postsservice.addcomment(userid",{"_index":1828,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(userid",{"_index":1808,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1833,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":1820,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1826,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(userid",{"_index":1810,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1812,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1815,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1823,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1830,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1818,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1407,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1885,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1887,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1886,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":986,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":1005,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":992,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":1003,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["this.prismaservice.conversation.update",{"_index":1001,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.message.create",{"_index":1534,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.prismaservice.message.delete",{"_index":1540,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.prismaservice.post.create",{"_index":1853,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1873,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1859,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1863,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1869,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1882,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1876,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":2211,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":750,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":2232,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":742,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":758,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":737,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":788,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":2230,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":2221,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride",{"_index":560,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["this.remove(id",{"_index":222,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.server.emit('message",{"_index":1510,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.server.emit('remove",{"_index":1517,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.signinlocal",{"_index":787,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.storageservice.addrecord(key",{"_index":2261,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.storageservice.getrecord(key",{"_index":2257,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.take",{"_index":1691,"title":{},"body":{"classes/PaginationDto.html":{}}}],["this.tovalidate(metatype",{"_index":2241,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":756,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":766,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":2175,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":2186,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":183,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":2178,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":2181,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(payload.email",{"_index":1636,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":180,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.verifyrecaptcha(dto.recaptcha",{"_index":786,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.writeerrorlogtofile(errorlog",{"_index":303,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["thresholdpercent",{"_index":1277,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttle",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["throttlerbehindproxyguard",{"_index":360,"title":{"injectables/ThrottlerBehindProxyGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["throttlerexception",{"_index":2252,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["throttlerexception('many",{"_index":2259,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["throttlerguard",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["throttlermodule",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":444,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":1354,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":323,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{}}}],["throwerror",{"_index":1069,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["thuong",{"_index":2924,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2921,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2856,"title":{},"body":{"index.html":{}}}],["time",{"_index":1423,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"index.html":{}}}],["timeout",{"_index":203,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["timeout(5000",{"_index":2078,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout.interceptor",{"_index":1372,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["timeouterror",{"_index":2076,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1371,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["times",{"_index":526,"title":{},"body":{"injectables/AppService.html":{}}}],["timestamp",{"_index":310,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{}}}],["tip",{"_index":534,"title":{},"body":{"injectables/AppService.html":{}}}],["tips",{"_index":2439,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["title",{"_index":1031,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":2679,"title":{},"body":{"index.html":{}}}],["token",{"_index":556,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/OauthService.html":{},"classes/RecaptchaDto.html":{},"guards/RolesGuard.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokendata",{"_index":699,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":751,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":757,"title":{},"body":{"injectables/AuthService.html":{}}}],["too_many_requests",{"_index":3080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tooling",{"_index":2353,"title":{},"body":{"contributing.html":{}}}],["tools",{"_index":2810,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2973,"title":{},"body":{"license.html":{}}}],["total",{"_index":2210,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2874,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":2235,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":2236,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1395,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trackby",{"_index":1282,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1283,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["tracker",{"_index":2347,"title":{},"body":{"contributing.html":{}}}],["trading",{"_index":2880,"title":{},"body":{"index.html":{}}}],["training",{"_index":2904,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2922,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1695,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1696,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1683,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":1367,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transition",{"_index":1315,"title":{},"body":{"interfaces/IApp.html":{}}}],["transmitted",{"_index":2803,"title":{},"body":{"index.html":{}}}],["transport",{"_index":1456,"title":{},"body":{"modules/MathModule.html":{}}}],["transport.tcp",{"_index":1459,"title":{},"body":{"modules/MathModule.html":{}}}],["travel",{"_index":1989,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":2057,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":210,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/AuthModule.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WsThrottlerGuard.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isboolean({message",{"_index":1721,"title":{},"body":{"classes/PostEntity.html":{}}}],["true})@isoptional()@isstring()@length(0",{"_index":855,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["truong",{"_index":2925,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["trusts",{"_index":2805,"title":{},"body":{"index.html":{}}}],["tslint",{"_index":2603,"title":{},"body":{"dependencies.html":{}}}],["ttl",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"injectables/WsThrottlerGuard.html":{}}}],["ttls",{"_index":2256,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["ttls.length",{"_index":2258,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["turn",{"_index":2841,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2897,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2887,"title":{},"body":{"index.html":{}}}],["type",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3001,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1327,"title":{},"body":{"interfaces/IApp.html":{}}}],["types",{"_index":2246,"title":{},"body":{"injectables/ValidationPipe.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":2247,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":2571,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2708,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1475,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["typing(senderid",{"_index":1486,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["ui/ux",{"_index":2906,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":2801,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":548,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["unauthorizedexception(auth_error.not_admin",{"_index":2036,"title":{},"body":{"guards/RolesGuard.html":{}}}],["uncaught",{"_index":1317,"title":{},"body":{"interfaces/IApp.html":{}}}],["undefined",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"controllers/OauthController.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apicreatedresponse({description",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["undefined})@apicreatedresponse({type",{"_index":905,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["undefined})@apioperation({summary",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MathController.html":{}}}],["undefined})@arrayfielddecorator('files",{"_index":1158,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":863,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["undefined})@isarray({message",{"_index":1717,"title":{},"body":{"classes/PostEntity.html":{}}}],["undefined})@isstring({message",{"_index":1674,"title":{},"body":{"classes/PaginationDto.html":{}}}],["undefined})@multifielddecorator(['undefined",{"_index":1152,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/avatars",{"_index":1140,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/covers",{"_index":1145,"title":{},"body":{"controllers/FileController.html":{}}}],["under",{"_index":2919,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2860,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":313,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":3090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported_media_type",{"_index":3089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uoewsdcm7t6cs84zfpwaw7q3eh4hyo7tmhrhoiqtmh9cmfggyfn4mqohcsx0bhj",{"_index":2005,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["update",{"_index":91,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{}}}],["update(userid",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1746,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(dto",{"_index":1783,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1784,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":898,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":928,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":929,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateconversationmembersdto",{"_index":3020,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updateconversationroles",{"_index":3021,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updated",{"_index":1000,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":843,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DefaultDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":899,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":932,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":933,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateoneconversationbyiddto",{"_index":3022,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updatepassword",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":626,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1747,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1817,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1787,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1788,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostsdto",{"_index":3023,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updaterolesconversation",{"_index":900,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":936,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":937,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":692,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":710,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuseravatardto",{"_index":125,"title":{"classes/UpdateUserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusercoverdto",{"_index":131,"title":{"classes/UpdateUserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":119,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusersavatar",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":130,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":2147,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":2167,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":1138,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":1131,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadavatar(data",{"_index":1198,"title":{},"body":{"classes/FileService.html":{}}}],["uploadavatar(file",{"_index":1135,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatardto",{"_index":1199,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadcover",{"_index":1132,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadcover(data",{"_index":1202,"title":{},"body":{"classes/FileService.html":{}}}],["uploadcover(file",{"_index":1142,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcoverdto",{"_index":1203,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadedfile",{"_index":1162,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":1163,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":2652,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":1133,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":1147,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpost",{"_index":1197,"title":{},"body":{"classes/FileService.html":{}}}],["uploadpost(data",{"_index":1205,"title":{},"body":{"classes/FileService.html":{}}}],["uploadposts",{"_index":1134,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":1155,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpostsdto",{"_index":1206,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":2121,"title":{},"body":{"classes/UserEntity.html":{}}}],["upsertreactpostdto",{"_index":3025,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uptest",{"_index":2859,"title":{},"body":{"index.html":{}}}],["url",{"_index":314,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FileService.html":{},"injectables/OauthService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["urlencoded",{"_index":782,"title":{},"body":{"injectables/AuthService.html":{}}}],["url}\\n",{"_index":316,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["use",{"_index":1093,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":1095,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["usealertsstore",{"_index":212,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":485,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["usecount",{"_index":2474,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["used",{"_index":1358,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usednames",{"_index":3179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usednames.value.filter((name",{"_index":3183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useful",{"_index":2786,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":353,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["useguards(authguard('facebook",{"_index":1595,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(authguard('google",{"_index":1601,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(rtguard",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(throttlerbehindproxyguard",{"_index":365,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(wsthrottlerguard",{"_index":1502,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["useinterceptors",{"_index":508,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":511,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{}}}],["usenamevalidator",{"_index":2134,"title":{"classes/usenameValidator.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CustomDto.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"injectables/GoogleStrategy.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiokresponse({description",{"_index":1751,"title":{},"body":{"controllers/PostsController.html":{}}}],["user'})@isarray({message",{"_index":1964,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["user'})@isoptional({message",{"_index":1927,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["user'})@isstring({message",{"_index":1941,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["user'})@type(undefined)@isdate({message",{"_index":1947,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["user)'})@apiokresponse({description",{"_index":904,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":921,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1151,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":2540,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":764,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":790,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":2194,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":1092,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":1094,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":1097,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":762,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.role",{"_index":765,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":1531,"title":{},"body":{"injectables/MessagesService.html":{}}}],["user:read",{"_index":3143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user:write",{"_index":3142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_error",{"_index":722,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":1426,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":741,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":1101,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":746,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":2155,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":744,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":2126,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":84,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:100",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:112",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:124",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:136",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:78",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:89",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.dto.ts",{"_index":2093,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["users.length",{"_index":2216,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":2171,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/request",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/entities/user.entity",{"_index":1427,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["users/users.module",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":158,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/OauthService.html":{}}}],["userscontroller",{"_index":2142,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":57,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":157,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"injectables/OauthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usestate('app",{"_index":1313,"title":{},"body":{"interfaces/IApp.html":{}}}],["usesticky",{"_index":2478,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["useuserstore",{"_index":2480,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":2351,"title":{},"body":{"contributing.html":{}}}],["utf8",{"_index":321,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["uuid",{"_index":196,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["v4",{"_index":195,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{}}}],["v9slimndming5jofjigpiqu",{"_index":2007,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["val",{"_index":1700,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":3135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":567,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(accesstoken",{"_index":1106,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(fullnamevalidator",{"_index":1985,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":2659,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":2244,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":2140,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":570,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1992,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":2052,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":2620,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":2141,"title":{},"body":{"classes/UserEntity.html":{}}}],["validation",{"_index":2732,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":2617,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":2233,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":835,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":2622,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":2614,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":252,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/ExcludeNullInterceptor.html":{},"interfaces/ISwaggerOptions.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.pattern",{"_index":1559,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["value.queue",{"_index":1560,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["variable",{"_index":2477,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2311,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":2715,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":1390,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1401,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verified",{"_index":1656,"title":{},"body":{"injectables/OauthService.html":{},"contributing.html":{}}}],["verify",{"_index":2285,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["verifycallback",{"_index":1239,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["verifyrecaptcha",{"_index":693,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyrecaptcha(recaptcha",{"_index":713,"title":{},"body":{"injectables/AuthService.html":{}}}],["versa",{"_index":2735,"title":{},"body":{"index.html":{}}}],["version",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["version('1",{"_index":372,"title":{},"body":{"controllers/AppController.html":{}}}],["version('1')@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":336,"title":{},"body":{"controllers/AppController.html":{}}}],["versioning",{"_index":2273,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["versions",{"_index":2790,"title":{},"body":{"index.html":{}}}],["viandwi24",{"_index":1311,"title":{},"body":{"interfaces/IApp.html":{}}}],["video",{"_index":825,"title":{},"body":{"classes/CommentEntity.html":{},"classes/MessageEntity.html":{}}}],["view",{"_index":529,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["views",{"_index":522,"title":{},"body":{"injectables/AppService.html":{}}}],["visited",{"_index":524,"title":{},"body":{"injectables/AppService.html":{}}}],["visual",{"_index":2356,"title":{},"body":{"contributing.html":{}}}],["void",{"_index":262,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/FacebookStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"classes/NatsStrategy.html":{},"modules/UsersModule.html":{}}}],["volumn",{"_index":2293,"title":{},"body":{"changelog.html":{}}}],["vue",{"_index":1314,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["vxan5gw4xpl7ps4_2pdzb1kiibdgn2zyt9bjikwislrvzxzencewwg4t7lens25p84d7n7s12dxikdqi2xaaemnas1lk",{"_index":2003,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["wait",{"_index":2528,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":2656,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":1391,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1403,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":198,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["warning(message",{"_index":226,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":2960,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2956,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2852,"title":{},"body":{"index.html":{}}}],["way",{"_index":2327,"title":{},"body":{"contributing.html":{}}}],["web",{"_index":2804,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":2672,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":2552,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":2800,"title":{},"body":{"index.html":{}}}],["websocket.guard.ts",{"_index":2249,"title":{},"body":{"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["websocket.guard.ts:6",{"_index":2251,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["websocketgateway",{"_index":1490,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["websocketserver",{"_index":1493,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["whether",{"_index":2971,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":2507,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["whole",{"_index":2469,"title":{},"body":{"contributing.html":{}}}],["window",{"_index":1328,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('error",{"_index":1329,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('scroll",{"_index":3170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.location.reload",{"_index":1333,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.pageyoffset",{"_index":3164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.removeeventlistener('scroll",{"_index":3172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":2793,"title":{},"body":{"index.html":{}}}],["without",{"_index":371,"title":{},"body":{"controllers/AppController.html":{},"license.html":{}}}],["work",{"_index":368,"title":{},"body":{"controllers/AppController.html":{}}}],["workflow",{"_index":2410,"title":{},"body":{"contributing.html":{}}}],["world",{"_index":515,"title":{},"body":{"injectables/AppService.html":{},"classes/MessageEntity.html":{}}}],["worth",{"_index":2429,"title":{},"body":{"contributing.html":{}}}],["write",{"_index":2443,"title":{},"body":{"contributing.html":{}}}],["writeerrorlogtofile",{"_index":243,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["writtenposts",{"_index":1860,"title":{},"body":{"injectables/PostsService.html":{}}}],["wsthrottlerguard",{"_index":2248,"title":{"injectables/WsThrottlerGuard.html":{}},"body":{"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["www",{"_index":780,"title":{},"body":{"injectables/AuthService.html":{}}}],["x",{"_index":2820,"title":{},"body":{"index.html":{}}}],["years",{"_index":1935,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["yes",{"_index":1394,"title":{},"body":{"injectables/LoggerService.html":{}}}],["you'd",{"_index":2871,"title":{},"body":{"index.html":{}}}],["you're",{"_index":523,"title":{},"body":{"injectables/AppService.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["yourself",{"_index":2409,"title":{},"body":{"contributing.html":{}}}],["ypqan3e8avyd_yctvzqkoeu9j_exvr",{"_index":2004,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2990,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2987,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2988,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":2623,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2989,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zip",{"_index":2315,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":59,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { EROLE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@RoleDecorator(EROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n    constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@RoleDecorator(EROLE.ADMIN)@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    CACHE_MANAGER,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Inject,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport { EROLE, STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from '../users/dto/request';\nimport {\n    IAllUsers,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\nimport { Cache } from 'cache-manager';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('admin')\nexport class AdminUsersController {\n    constructor(private readonly usersService: UsersService) {}\n\n    @Public()\n    @RoleDecorator(EROLE.ADMIN)\n    @Get('users/all')\n    @ApiOperation({ summary: 'Get list all public users' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getAllUsers(@Query() dto: PaginationDto): Promise {\n        return this.usersService.getAllUsers(dto);\n    }\n\n    @Public()\n    @Get('users/:userId')\n    @ApiOperation({\n        summary: 'Get user profile by user-id',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @Param('userId') userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('users/profile/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: 'Success' })\n    async update(\n        @Param('userId') userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('users/avatar/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersAvatar(\n        @Param() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('users/cover/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersCover(\n        @Param() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('users/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user by user-id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUserById(@Param('userId') userId: string): Promise {\n        return this.usersService.deleteUserById(userId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Alert.html":{"url":"interfaces/Alert.html","title":"interface - Alert","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Alert\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AlertOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AlertOptions.html":{"url":"interfaces/AlertOptions.html","title":"interface - AlertOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlertOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            closable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            html\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        closable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        html\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        html:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:         AlertStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlertStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getErrorLog\n                            \n                            \n                                    Private\n                                    Static\n                                getErrorResponse\n                            \n                            \n                                    Private\n                                    Static\n                                writeErrorLogToFile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessageLog\n                            \n                            \n                                    Private\n                                    Static\n                                handleMessageResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getErrorLog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/exception.filter.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getErrorResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/exception.filter.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        writeErrorLogToFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/exception.filter.ts:98\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessageLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessageLog(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleMessageResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessageResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArgumentsHost,\n    Catch,\n    ExceptionFilter,\n    HttpException,\n    HttpStatus,\n    LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\nimport {\n    CustomHttpExceptionResponse,\n    HttpExceptionResponse,\n} from './model/http-exception-response.interface';\nimport * as fs from 'fs';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    constructor(private logger: LoggerService) {}\n\n    catch(exception: HttpException | Error, host: ArgumentsHost): void {\n        const ctx: HttpArgumentsHost = host.switchToHttp();\n        const request: Request = ctx.getRequest();\n        const response: Response = ctx.getResponse();\n\n        this.handleMessageLog(exception);\n\n        AllExceptionsFilter.handleMessageResponse(request, response, exception);\n    }\n\n    private handleMessageLog(exception: HttpException | Error): void {\n        let message = 'Internal Server Error';\n\n        if (exception instanceof HttpException) {\n            message = JSON.stringify(exception.getResponse());\n        } else if (exception instanceof Error) {\n            message = exception.stack.toString();\n        }\n\n        this.logger.error(message, exception);\n    }\n\n    private static handleMessageResponse(\n        request: Request,\n        response: Response,\n        exception: HttpException | Error,\n    ): void {\n        let responseBody: any = {\n            message: 'Critical internal server error occurred!',\n        };\n        let statusCode: HttpStatus.INTERNAL_SERVER_ERROR;\n\n        if (exception instanceof HttpException) {\n            const errorResponse = exception.getResponse();\n            statusCode = exception.getStatus();\n            responseBody =\n                (errorResponse as HttpExceptionResponse).error ||\n                exception.message;\n        } else if (exception instanceof Error) {\n            statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n\n        const errorResponse = this.getErrorResponse(\n            statusCode,\n            exception.stack.toString(),\n            responseBody,\n        );\n        const errorLog = this.getErrorLog(errorResponse, request, exception);\n        this.writeErrorLogToFile(errorLog);\n        response.status(statusCode).json(responseBody);\n    }\n\n    private static getErrorResponse = (\n        statusCode: HttpStatus,\n        errorMessage: string,\n        request: Request,\n    ): CustomHttpExceptionResponse => ({\n        statusCode: statusCode,\n        error: errorMessage,\n        path: request.url,\n        method: request.method,\n        timeStamp: new Date(),\n    });\n\n    private static getErrorLog = (\n        errorResponse: CustomHttpExceptionResponse,\n        request: Request,\n        exception: unknown,\n    ): string => {\n        const { statusCode, error } = errorResponse;\n        const { method, url } = request;\n        const errorLog = `Response Code: ${statusCode} - Method: ${method} - URL: ${url}\\n\n        ${JSON.stringify(errorResponse)}\\n\n        ${exception instanceof HttpException ? exception.stack : error}\\n`;\n        return errorLog;\n    };\n\n    private static writeErrorLogToFile = (errorLog: string): void => {\n        fs.appendFile('error.log', errorLog, 'utf8', (err) => {\n            if (err) throw err;\n        });\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dontSkip\n                            \n                            \n                                doSkip\n                            \n                            \n                                    Async\n                                getHello\n                            \n                            \n                                requestCookie\n                            \n                            \n                                responseCookie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        dontSkip\n                        \n                    \n                \n            \n            \n                \ndontSkip()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SkipThrottle(undefined)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doSkip\n                        \n                    \n                \n            \n            \n                \ndoSkip()\n                \n            \n\n\n            \n                \n                    Defined in src/app.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello(session: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Version('1')@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: 'Default server response'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestCookie\n                        \n                    \n                \n            \n            \n                \nrequestCookie(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cookie/server')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        responseCookie\n                        \n                    \n                \n            \n            \n                \nresponseCookie(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cookie/custom')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Req,\n    Res,\n    Session,\n    UseGuards,\n    Version,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { SkipThrottle } from '@nestjs/throttler';\nimport { AppService } from './app.service';\nimport { ThrottlerBehindProxyGuard } from './core/security/throttle-proxy.guard';\nimport { Public } from './infrastructure/auth/decorators';\nimport { Request, Response } from 'express';\n\n@ApiTags('Home')\n@UseGuards(ThrottlerBehindProxyGuard)\n@SkipThrottle()\n@Public()\n@Controller({ version: '2', path: '/' })\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @SkipThrottle(false)\n    dontSkip() {\n        return 'List users work with Rate limiting.';\n    }\n\n    doSkip() {\n        return 'List users work without Rate limiting.';\n    }\n\n    @Version('1')\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Teneno homepage' })\n    @ApiResponse({\n        status: 200,\n        description: 'Default server response',\n    })\n    @ApiResponse({ status: 404, description: 'Not found' })\n    async getHello(@Session() session: Record): Promise {\n        return this.appService.getHello(session);\n    }\n\n    @Get('cookie/server')\n    requestCookie(@Req() request: Request) {\n        console.log(`Cookies: ${request.session.cookie}`);\n        console.log(`Signed cookies: ${request.signedCookies}`);\n        return `Cookies: ${request.session.cookie} Signed cookies: ${request.signedCookies}`;\n    }\n\n    @Get('cookie/custom')\n    responseCookie(@Res() response: Response) {\n        // console.log(response.cookie('key', 'value'));\n        console.log(response.getHeader('Set-Cookie'));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MathModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            OauthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n    CacheInterceptor,\n    CacheModule,\n    MiddlewareConsumer,\n    Module,\n    NestModule,\n} from '@nestjs/common';\nimport { APP_FILTER, APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './abstraction/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\nimport { OauthModule } from './infrastructure/oauth/oauth.module';\nimport { MathModule } from './abstraction/microservices/math/math.module';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\n\n@Module({\n    imports: [\n        InterceptorModule,\n        PrismaModule,\n        TerminusModule,\n        ThrottlerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (config: ConfigService) => ({\n                ttl: config.get('THROTTLE_TTL'),\n                limit: config.get('THROTTLE_LIMIT'),\n                ignoreUserAgents: [\n                    // Don't throttle request that have 'googlebot' defined in them.\n                    // Example user agent: Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\n                    /googlebot/gi,\n                    // Example user agent: Mozilla/5.0 (compatible; Bingbot/2.0; +http://www.bing.com/bingbot.htm)\n                    new RegExp('bingbot', 'gi'),\n                ],\n            }),\n        }),\n        CacheModule.register({\n            isGlobal: true,\n            ttl: Number(process.env.CACHE_TTL),\n            max: +Number(process.env.CACHE_MAX),\n        }),\n        MathModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            cache: true,\n            // envFilePath: ['.env'],\n            envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n        }),\n        LoggerModule.forRoot(),\n        ServeStaticModule.forRoot({\n            rootPath: `${__dirname}/../docs`,\n            // rootPath: join(__dirname, '..', 'docs'),\n            renderPath: '/',\n            // exclude: ['/api*'],\n        }),\n        AuthModule,\n        OauthModule,\n        AdminModule,\n        UsersModule,\n        FilesModule,\n        PostsModule,\n        ConversationsModule,\n        MessagesModule,\n    ],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        {\n            provide: APP_GUARD,\n            useClass: ThrottlerGuard,\n        },\n        // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n        {\n            provide: APP_GUARD,\n            useClass: AtGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: RolesGuard,\n        },\n        {\n            provide: APP_INTERCEPTOR,\n            useClass: CacheInterceptor,\n        },\n        // {\n        //     provide: APP_FILTER,\n        //     useClass: AllExceptionsFilter,\n        // },\n    ],\n})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer.apply(LoggerContextMiddleware).forRoutes('*');\n        //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n        //   .forRoutes(UsersController);\n        // .forRoutes('users');\n        // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n        // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello(session: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CacheInterceptor,\n    CACHE_MANAGER,\n    Inject,\n    Injectable,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\n@UseInterceptors(CacheInterceptor)\nexport class AppService {\n    constructor(\n        @Logger('AppService') private logger: LoggerService,\n        @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    ) {}\n\n    async getHello(session: Record): Promise {\n        this.logger.log('Hello World', '200');\n        session.visits = (await session.visits) ? session.visits + 1 : 1;\n        const cacheToken = await this.cacheManager.get(\n            'cacheToken' || undefined,\n        );\n        const console: Object = {\n            Views: `You're visited this page ${await session.visits} times`,\n            Message: 'Hello World from Teneno!',\n            Note: `This view has been cached by Cache-Interceptor in ${process.env.CACHE_TTL} seconds.`,\n            Tip: 'Disable cache module in app.module.ts to reset views.',\n            CacheToken: cacheToken,\n        };\n        return console;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtGuard extends AuthGuard(ESTRATEGY.JWT) {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    // if true will enter with access-token , and another hand\n    public canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            process.env.PUBLIC_GUARD,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) return true;\n\n        return super.canActivate(context);\n    }\n\n    handleRequest(err, user, info) {\n        if (err || !user) {\n            throw err || new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, ESTRATEGY.JWT) {\n    constructor(@Inject(ConfigService) private config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: config.get('APP_SECRET'),\n            // secretOrKey: process.env.APP_SECRET,\n            ignoreExpiration: false,\n            passReqToCallback: false,\n        });\n    }\n\n    async validate(payload: IJwtPayload): Promise {\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signInRecaptcha\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: undefined})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@UseInterceptors(CacheInterceptor)@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signInRecaptcha\n                        \n                    \n                \n            \n            \n                \n                    \n                    signInRecaptcha(dto: RecaptchaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin/recaptcha')@ApiOperation({summary: 'Login user with recaptcha'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                RecaptchaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account.'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: undefined, type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    CacheInterceptor,\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    Put,\n    Res,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport {\n    LoginDto,\n    RecaptchaDto,\n    SignupDto,\n    UpdatePasswordDto,\n} from './dto/request';\nimport { ITokens } from './dto/response';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\nimport { Response } from 'express';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {\n        this.authService = authService;\n    }\n\n    @Public()\n    @Post('signup')\n    @ApiOperation({ summary: 'Create new user account.' })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n        type: SignupDto,\n    })\n    async signupLocal(@Body() dto: SignupDto): Promise {\n        return this.authService.signupLocal(dto);\n    }\n\n    @Public()\n    @Post('signin')\n    @UseInterceptors(CacheInterceptor)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Login to user account' })\n    async signinLocal(@Body() dto: LoginDto): Promise {\n        // const cookie = this.authService.createCookie(a.accessToken);\n        // res.setHeader('Set-Cookie', [cookie]);\n        // console.log(res.getHeader('Set-Cookie'));\n        return await this.authService.signinLocal(dto);\n    }\n\n    @Post('signin/recaptcha')\n    @ApiOperation({ summary: 'Login user with recaptcha' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async signInRecaptcha(@Body() dto: RecaptchaDto): Promise {\n        return await this.authService.signInRecaptcha(dto);\n    }\n\n    @Post('logout')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Logout user account (user)' })\n    async logout(\n        @GetCurrentUserId() userId: string,\n        @Res() res: Response,\n    ): Promise {\n        res.setHeader('Set-Cookie', ['Authorization=; Max-age=0']);\n        return this.authService.logout(userId);\n    }\n\n    @Post('refresh')\n    @ApiBearerAuth()\n    @UseGuards(RtGuard)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Logout account on all devices' })\n    async refreshToken(\n        @GetCurrentUserId() userId: string,\n        @GetCurrentUser('refreshToken') refreshToken: string,\n    ): Promise {\n        return this.authService.refreshToken(userId, refreshToken);\n    }\n\n    @Put('password')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Update user password' })\n    async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n        return this.authService.updatePassWord(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { RolesGuard } from 'src/core/roles';\n\n@Module({\n    imports: [\n        PrismaModule,\n        JwtModule,\n        PassportModule.register({ session: true }),\n        // JwtModule.registerAsync({\n        //   imports: [ConfigModule],\n        //   useFactory: async (configService: ConfigService) => ({\n        //     secret: configService.get(\"APP_SECRET\"),\n        //     signOptions: { expiresIn: configService.get(\"EXPIRE_AT_TIME\") },\n        //   }),\n        //   inject: [ConfigService],\n        // })\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, AtStrategy, RtStrategy, RolesGuard],\n    exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createCookie\n                            \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signInRecaptcha\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                            \n                                    Async\n                                verifyRecaptcha\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createCookie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCookie(tokenData: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string, roles: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signInRecaptcha\n                        \n                    \n                \n            \n            \n                \n                    \n                    signInRecaptcha(dto: RecaptchaDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                RecaptchaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyRecaptcha\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyRecaptcha(recaptcha: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recaptcha\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    CACHE_MANAGER,\n    ConflictException,\n    ForbiddenException,\n    Inject,\n    Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport { IFailRecaptcha, ISuccessRecaptcha, ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    LoginDto,\n    RecaptchaDto,\n    SignupDto,\n    UpdatePasswordDto,\n} from './dto/request';\nimport { Cache } from 'cache-manager';\nimport { AUTH_ERROR, SYSTEM_ERROR, USER_ERROR } from 'src/core/constants';\nimport { comparePassword, hashPassword } from 'src/core/helpers';\nimport axios from 'axios';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(ConfigService)\n        private configService: ConfigService,\n        private prismaService: PrismaService,\n        private jwtService: JwtService,\n        @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    ) {}\n\n    async getTokens(\n        userId: string,\n        email: string,\n        roles: string[],\n    ): Promise {\n        const [at, rt] = await Promise.all([\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                    roles: roles,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n                },\n            ),\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                    roles: roles,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n                },\n            ),\n        ]);\n        return { accessToken: at, refreshToken: rt };\n    }\n\n    async updateRtHash(userId: string, rt: string) {\n        const hash = await hashPassword(rt);\n        await this.prismaService.user.update({\n            where: {\n                id: userId,\n            },\n            data: {\n                hashedRefreshToken: hash,\n            },\n        });\n    }\n\n    async signupLocal(dto: SignupDto): Promise {\n        const hash = await hashPassword(dto.password);\n\n        const userExist = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ email: dto.email }, { username: dto.username }],\n            },\n        });\n\n        if (userExist.length > 0)\n            throw new ConflictException(USER_ERROR.DUPLICATE);\n\n        const newUser = await this.prismaService.user.create({\n            data: {\n                email: dto.email,\n                password: hash,\n                username: dto.username,\n            },\n        });\n\n        const tokens = await this.getTokens(\n            newUser.id,\n            newUser.email,\n            newUser.role,\n        );\n        await this.updateRtHash(newUser.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async signinLocal(dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const passwordMatches = await comparePassword(\n            dto.password,\n            user.password,\n        );\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email, user.role);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        await this.cacheManager.set('cacheToken', tokens);\n        return tokens;\n    }\n\n    async verifyRecaptcha(\n        recaptcha: any,\n    ): Promise {\n        const bodyFormData: FormData = new FormData();\n        bodyFormData.append(\n            'secret',\n            this.configService.get('GOOGLE_RECAPTCHA_SECRET'),\n        );\n        bodyFormData.append('response', recaptcha);\n\n        const result = await axios.post(\n            `${this.configService.get('RECAPTCHA_VERIFY_URL')}`,\n            bodyFormData,\n        );\n\n        //     const response = await axiosRequest('post',\n        //       `https://www.google.com/recaptcha/api/siteverify?secret=${process.env.GOOGLE_RECAPTCHA_SECRET}&response=${capcha}`,\n        //       'Content-Type': 'application/x-www-form-urlencoded'\n        //     );\n        if (!result?.data.success) throw new Error(AUTH_ERROR.RECAPTCHA_FAILED);\n        if (result?.data.score  {\n        await this.verifyRecaptcha(dto.recaptcha);\n        const { email, password } = dto;\n        return await this.signinLocal({ email, password });\n    }\n\n    async logout(userId: string): Promise {\n        await this.prismaService.user.updateMany({\n            where: {\n                id: userId,\n                hashedRefreshToken: {\n                    not: null,\n                },\n            },\n            data: { hashedRefreshToken: null },\n        });\n    }\n\n    async refreshToken(userId: string, refreshToken: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n        if (!user || !user.hashedRefreshToken)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const hashMatches = await comparePassword(\n            refreshToken,\n            user.hashedRefreshToken,\n        );\n        if (!hashMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email, user.role);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async updatePassWord(dto: UpdatePasswordDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n\n        const passwordMatches = await comparePassword(\n            dto.oldPassword,\n            user.password,\n        );\n\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (dto.newPassword === dto.oldPassword)\n            throw new ForbiddenException(AUTH_ERROR.SAME_PASSWORD);\n\n        if (passwordMatches) {\n            await this.prismaService.user.update({\n                where: { email: dto.email },\n                data: {\n                    password: await hashPassword(dto.newPassword),\n                },\n            });\n        }\n\n        const tokens = await this.getTokens(user.id, user.email, user.role);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    public createCookie(tokenData: string): string {\n        return `Authorization=${tokenData}; HttpOnly; Max-Age=604800;`;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment id', example: 'comment-id-123-456-789', type: String})@IsNotEmpty({message: 'Comment-id is required'})@IsString({message: 'Comment-id must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment post-id', example: undefined, type: String})@IsString({message: 'Comment post id must be a string'})@IsNotEmpty({message: 'Comment post id is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray({message: 'Comment reactions must be an array'})@IsNotEmpty({message: 'Comment reactions is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON({message: 'Comment metadata must be a JSON object'})@IsNotEmpty({message: 'Comment metadata is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment content', example: 'This is a comment', type: String})@IsString({message: 'Comment text must be a string'})@IsNotEmpty({message: 'Comment text is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment type (text, image, video, audio)', example: 'text', type: String})@IsNotEmpty({message: 'Comment-type is required'})@IsString({message: 'Comment-type must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment author-id', example: undefined, type: String})@IsString({message: 'Comment author id must be a string'})@IsNotEmpty({message: 'Comment author id is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsArray, IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CommentEntity {\n    @ApiProperty({\n        description: 'Comment id',\n        example: 'comment-id-123-456-789',\n        type: String,\n    })\n    @IsNotEmpty({\n        message: 'Comment-id is required',\n    })\n    @IsString({\n        message: 'Comment-id must be a string',\n    })\n    id: string;\n\n    @ApiProperty({\n        description: 'Comment type (text, image, video, audio)',\n        example: 'text',\n        type: String,\n    })\n    @IsNotEmpty({\n        message: 'Comment-type is required',\n    })\n    @IsString({\n        message: 'Comment-type must be a string',\n    })\n    type: string;\n\n    @ApiProperty({\n        description: 'Comment content',\n        example: 'This is a comment',\n        type: String,\n    })\n    @IsString({\n        message: 'Comment text must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Comment text is required',\n    })\n    text: string;\n\n    @ApiProperty({\n        description: 'Comment author-id',\n        example: ['user-id-123-456-789'],\n        type: String,\n    })\n    @IsString({\n        message: 'Comment author id must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Comment author id is required',\n    })\n    userId: string;\n\n    @ApiProperty({\n        description: 'Comment post-id',\n        example: ['post-id-123-456-789'],\n        type: String,\n    })\n    @IsString({\n        message: 'Comment post id must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Comment post id is required',\n    })\n    postId: string;\n\n    @IsArray({\n        message: 'Comment reactions must be an array',\n    })\n    @IsNotEmpty({\n        message: 'Comment reactions is required',\n    })\n    reactions: number[];\n\n    @IsJSON({\n        message: 'Comment metadata must be a JSON object',\n    })\n    @IsNotEmpty({\n        message: 'Comment metadata is required',\n    })\n    replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The list all admins of the conversation', example: undefined, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The avatar of the conversation', example: 'avatar-123-456-789'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The create date of the conversation', example: '2021-01-01T00:00:00.000Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of conversation creator', example: 'creator-123-456-789', type: String})@IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The description of the conversation', example: 'description-123-456-789', type: String, required: false, nullable: true})@IsOptional()@IsString()@Length(0, 255)@MaxLength(256, {message: 'Description is too long, must be at most 255 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the conversation', example: 'id-123-456-789', type: String})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The list all members of the conversation', example: undefined, type: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the conversation', example: 'Conversation 1', type: String})@IsString()@IsNotEmpty()@Length(1, 50)@MinLength(0, {message: 'Name is not blank, must be at least 1 characters!'})@MaxLength(51, {message: 'Name is too long, must be at most 50 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The update date of the conversation', example: '2021-01-01T00:00:00.000Z', type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional, PickType } from '@nestjs/swagger';\nimport {\n    IsArray,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    Length,\n    MaxLength,\n    MinLength,\n} from 'class-validator';\nimport { CustomDto } from 'src/core/common/dto';\n\nexport class ConversationEntity extends PickType(CustomDto, ['userId']) {\n    @ApiProperty({\n        description: 'The id of the conversation',\n        example: 'id-123-456-789',\n        type: String,\n    })\n    @IsString()\n    @IsNotEmpty()\n    id: string;\n\n    @ApiProperty({\n        description: 'The name of the conversation',\n        example: 'Conversation 1',\n        type: String,\n    })\n    @IsString()\n    @IsNotEmpty()\n    @Length(1, 50)\n    @MinLength(0, {\n        message: 'Name is not blank, must be at least 1 characters!',\n    })\n    @MaxLength(51, {\n        message: 'Name is too long, must be at most 50 characters!',\n    })\n    name: string;\n\n    @ApiPropertyOptional({\n        description: 'The description of the conversation',\n        example: 'description-123-456-789',\n        type: String,\n        required: false,\n        nullable: true,\n    })\n    @IsOptional()\n    @IsString()\n    @Length(0, 255)\n    @MaxLength(256, {\n        message: 'Description is too long, must be at most 255 characters!',\n    })\n    description?: string | null;\n\n    @ApiProperty({\n        description: 'The avatar of the conversation',\n        example: 'avatar-123-456-789',\n    })\n    avatar: string;\n\n    @ApiProperty({\n        description: 'The create date of the conversation',\n        example: '2021-01-01T00:00:00.000Z',\n    })\n    createdAt: Date;\n\n    @ApiProperty({\n        description: 'The update date of the conversation',\n        example: '2021-01-01T00:00:00.000Z',\n        type: Date,\n    })\n    updatedAt: Date;\n\n    @ApiProperty({\n        description: 'The list all members of the conversation',\n        example: ['member1-123-456', 'member2-456-789'],\n        type: Array,\n    })\n    @IsArray()\n    members: string[];\n\n    @ApiProperty({\n        description: 'The list all admins of the conversation',\n        example: ['admin1-123-456', 'admin2-456-789'],\n        type: Array,\n    })\n    admins: string[];\n\n    @ApiProperty({\n        description: 'The name of conversation creator',\n        example: 'creator-123-456-789',\n        type: String,\n    })\n    @IsArray()\n    @IsNotEmpty()\n    creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { GetCurrentUserId } from '../auth/decorators';\nimport { ConversationsService } from './conversations.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetAllConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities/conversation.entity';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n    constructor(private readonly conversationsService: ConversationsService) {\n        this.conversationsService = conversationsService;\n    }\n\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create a new conversation (user)' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({\n        type: ConversationEntity,\n        description: 'The new conversation has been created.',\n    })\n    async createConversation(@Body() dto: CreateConversationDto) {\n        return await this.conversationsService.createConversation(dto);\n    }\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        isArray: true,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllConversations(@GetCurrentUserId() userId: string) {\n        return this.conversationsService.getAllConversations(userId);\n    }\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getConversationById(\n        @Param('id') id: string,\n        @Body() dto: GetOneConversationDto,\n    ) {\n        return this.conversationsService.getConversationById(id, dto);\n    }\n\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    updateConversationById(\n        @Param('id') id: string,\n        @Body() dto: UpdateConversationDto,\n    ) {\n        return this.conversationsService.updateConversationById(id, dto);\n    }\n\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Delete one conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteConversationById(\n        @Param('id') id: string,\n        @Body() dto: DeleteConversationDto,\n    ) {\n        return this.conversationsService.deleteConversationById(id, dto);\n    }\n\n    @Patch(':conversationId/updateMembers')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update members list of current conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateMembersConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateMembersConversationDto,\n    ) {\n        return this.conversationsService.updateMembersConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/deleteAdmins')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Delete one admin of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteOneAdminConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: DeleteOneAdminConversationDto,\n    ) {\n        return this.conversationsService.deleteOneAdminConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/updateRoles')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Change role of any member of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateRolesConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateRolesConversationDto,\n    ) {\n        return this.conversationsService.updateRolesConversation(\n            conversationId,\n            dto,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_ConversationsModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [ConversationsController],\n    providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\nimport { CONVERSATION_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class ConversationsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createConversation(dto: CreateConversationDto) {\n        const newConversation = await this.prismaService.conversation.create({\n            data: {\n                id: uuid(),\n                name: dto.name,\n                description: dto.description,\n                avatar: '',\n                members: dto.members,\n                admins: dto.admins,\n                creator: dto.creator,\n            },\n        });\n        return newConversation;\n    }\n\n    async getAllConversations(userId: string) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: userId,\n                    },\n                    {\n                        admins: {\n                            has: userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: userId,\n                        },\n                    },\n                ],\n            },\n            select: {\n                id: true,\n                name: true,\n                avatar: true,\n                messages: {\n                    orderBy: {\n                        createdAt: 'asc',\n                    },\n                    take: 1,\n                    select: {\n                        type: true,\n                        text: true,\n                        updatedAt: true,\n                        senderId: true,\n                    },\n                },\n            },\n        });\n        return { userId, list };\n    }\n\n    async getConversationById(id: string, dto: GetOneConversationDto) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.userId,\n                    },\n                    {\n                        admins: {\n                            has: dto.userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: dto.userId,\n                        },\n                    },\n                ],\n                AND: {\n                    id: id,\n                },\n            },\n        });\n        return list;\n    }\n\n    updateConversationById(id: string, dto: UpdateConversationDto) {\n        const updated = this.prismaService.conversation.update({\n            where: {\n                id: id,\n            },\n            data: {\n                name: dto.name,\n                description: dto.description,\n                avatar: dto.avatar,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteConversationById(id: string, dto: DeleteConversationDto) {\n        const list = await this.prismaService.conversation.findUnique({\n            where: {\n                id: id,\n            },\n        });\n        if (list['creator'] === dto.userId) {\n            await this.prismaService.conversation.delete({\n                where: {\n                    id: id,\n                },\n            });\n            return '';\n        }\n        return false;\n    }\n\n    async updateMembersConversation(\n        conversationId: string,\n        dto: UpdateMembersConversationDto,\n    ) {\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteOneAdminConversation(\n        conversationId: string,\n        dto: DeleteOneAdminConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n        const updated = list[0]['admins'].filter(\n            (admin) => admin !== dto.userId,\n        );\n\n        await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: updated,\n            },\n        });\n        return updated;\n    }\n\n    async updateRolesConversation(\n        conversationId: string,\n        dto: UpdateRolesConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: dto.admins,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n    'type',\n    'text',\n    'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class CreateConversationDto extends OmitType(ConversationEntity, [\n    'id',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/request/create-message.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, OmitType } from '@nestjs/swagger';\nimport { MessageEntity } from '../../entities/message.entity';\n\n@ApiExtraModels()\nexport class CreateMessageDto extends OmitType(MessageEntity, ['id']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomDto.html":{"url":"classes/CustomDto.html","title":"class - CustomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/custom.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                senderId\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of sender', example: 'sender-id-123-456-789'})@IsNotEmpty({message: 'Sender id is required'})@IsString({message: 'Sender id must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/custom.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of user', example: 'user-id-123-456-789'})@IsNotEmpty({message: 'User id is required'})@IsString({message: 'User id must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/custom.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CustomDto {\n    @ApiProperty({\n        type: String,\n        description: 'The id of user',\n        example: 'user-id-123-456-789',\n    })\n    @IsNotEmpty({\n        message: 'User id is required',\n    })\n    @IsString({\n        message: 'User id must be a string',\n    })\n    userId?: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The id of sender',\n        example: 'sender-id-123-456-789',\n    })\n    @IsNotEmpty({\n        message: 'Sender id is required',\n    })\n    @IsString({\n        message: 'Sender id must be a string',\n    })\n    senderId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomHttpExceptionResponse.html":{"url":"interfaces/CustomHttpExceptionResponse.html","title":"interface - CustomHttpExceptionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomHttpExceptionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/model/http-exception-response.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpExceptionResponse\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface HttpExceptionResponse {\n    statusCode: number;\n    error: string;\n}\n\nexport interface CustomHttpExceptionResponse extends HttpExceptionResponse {\n    path: string;\n    method: string;\n    timeStamp: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultDto.html":{"url":"classes/DefaultDto.html","title":"class - DefaultDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/default.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/default.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/default.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DefaultDto {\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class DeleteConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteMessageDto.html":{"url":"classes/DeleteMessageDto.html","title":"class - DeleteMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/request/delete-message.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { MessageEntity } from '../../entities/message.entity';\n\nexport class DeleteMessageDto extends OmitType(MessageEntity, [\n    'type',\n    'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/errors.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/errors.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    BadGatewayException,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(\n                catchError((err) =>\n                    throwError(() => new BadGatewayException('Bad request...')),\n                ),\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionFilter.html":{"url":"classes/ExceptionFilter.html","title":"class - ExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/filters/rpc-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            RpcExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: RpcException)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/filters/rpc-exception.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            RpcException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, RpcExceptionFilter } from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { Observable, throwError } from 'rxjs';\n\n@Catch(RpcException)\nexport class ExceptionFilter implements RpcExceptionFilter {\n    catch(exception: RpcException): Observable {\n        return throwError(() => exception.getError());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/null.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(map((value) => (value === null ? '' : value)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n    constructor(private prismaService: PrismaService) {}\n\n    async use(req: Request, res: Response, next: NextFunction) {\n        const userId = req.params.userId;\n        const userExist = await this.prismaService.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n            },\n        });\n        if (\n            userExist === null ||\n            userExist === undefined ||\n            userExist.id === ''\n        ) {\n            throw new NotFoundException('User not found');\n        }\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/facebook.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (err: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-facebook';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.FACEBOOK,\n) {\n    constructor() {\n        super({\n            clientID: process.env.FACEBOOK_CLIENT_ID,\n            clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\n            callbackURL: process.env.FACEBOOK_CALLBACK_URL,\n            scope: 'email',\n            profileFields: ['emails', 'name'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: Profile,\n        done: (err: any, user: any, info?: any) => void,\n    ): Promise {\n        const { name, emails } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n        };\n        const payload = {\n            user,\n            accessToken,\n        };\n\n        done(null, payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    UploadedFile,\n    UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport {\n    ArrayFieldDecorator,\n    SingleFieldDecorator,\n    MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('files')\nexport class FileController {\n    constructor(private readonly fileService: FilesService) {}\n\n    @Post('avatar')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/avatars')\n    async uploadAvatar(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadAvatar(file);\n    }\n\n    @Post('cover')\n    @ApiOperation({ summary: 'Upload cover file form data (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/covers')\n    async uploadCover(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadCover(file);\n    }\n\n    @Post('posts')\n    @ApiOperation({ summary: 'Upload post with multi images (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ArrayFieldDecorator('files', true, 10, './public/posts')\n    async uploadPosts(\n        @UploadedFiles() files: Array,\n    ): Promise {\n        return this.fileService.uploadPosts(files);\n    }\n\n    @Post('multi')\n    @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @MultiFieldDecorator(\n        [\n            { name: 'item_1', maxCount: 1, required: true },\n            { name: 'item_2', maxCount: 1 },\n            { name: 'item_3', maxCount: 1 },\n            { name: 'item_4', maxCount: 1 },\n            { name: 'item_5', maxCount: 1 },\n        ],\n        './public/multi',\n    )\n    async uploadMulti(\n        @UploadedFiles() files: Express.Multer.File[],\n    ): Promise {\n        return this.fileService.uploadMulti(files);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileService.html":{"url":"classes/FileService.html","title":"class - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/services/file.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadAvatar\n                            \n                            \n                                uploadCover\n                            \n                            \n                                uploadPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \nuploadAvatar(data: UploadAvatarDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadCover\n                        \n                    \n                \n            \n            \n                \nuploadCover(data: UploadCoverDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPost\n                        \n                    \n                \n            \n            \n                \nuploadPost(data: UploadPostsDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadPostsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { UploadAvatarDto, UploadCoverDto, UploadPostsDto } from '@/dto';\nimport axiosConfig from './axios.config';\n\nconst ENDPOINT = '/files';\n\nexport class FileService {\n    uploadAvatar(data: UploadAvatarDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/avatar`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadCover(data: UploadCoverDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/cover`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadPost(data: UploadPostsDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/posts`;\n\n        const formData = new FormData();\n        formData.append('files', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class GetAllConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\nexport class GetOneConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class GetAllConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\nexport class GetOneConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/google.strategy.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/google.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\nimport { Injectable } from '@nestjs/common';\nimport { ESTRATEGY } from 'src/core/constants';\n\n// config();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.GOOGLE,\n) {\n    constructor() {\n        super({\n            clientID: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: process.env.GOOGLE_CALLBACK_URL,\n            scope: ['email', 'profile'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: any,\n        done: VerifyCallback,\n    ): Promise {\n        const { name, emails, photos } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n            picture: photos[0].value,\n            accessToken,\n        };\n        done(null, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                readiness\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        readiness\n                        \n                    \n                \n            \n            \n                \n                    \n                    readiness()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Health check for server system'})@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n    DiskHealthIndicator,\n    HealthCheck,\n    HealthCheckResult,\n    HealthCheckService,\n    MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Health')\n@Public()\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private memory: MemoryHealthIndicator,\n        private disk: DiskHealthIndicator,\n    ) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Health check for server system' })\n    @HealthCheck()\n    async readiness(): Promise {\n        return await this.health.check([\n            async () => await this.memory.checkRSS('mem_rss', 768 * 2 ** 20),\n            async () =>\n                await this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n            async () =>\n                await this.disk.checkStorage('storage', {\n                    path: '/',\n                    thresholdPercent: 0.5,\n                }),\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/http-cache.interceptor.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n    trackBy(context: ExecutionContext): string | undefined {\n        const request = context.switchToHttp().getRequest();\n        const { httpAdapter } = this.httpAdapterHost;\n\n        const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';\n        const excludePaths = [];\n        if (\n            !isGetRequest ||\n            (isGetRequest &&\n                excludePaths.includes(httpAdapter.getRequestUrl(request)))\n        ) {\n            return undefined;\n        }\n        return httpAdapter.getRequestUrl(request);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpExceptionResponse.html":{"url":"interfaces/HttpExceptionResponse.html","title":"interface - HttpExceptionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HttpExceptionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/model/http-exception-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface HttpExceptionResponse {\n    statusCode: number;\n    error: string;\n}\n\nexport interface CustomHttpExceptionResponse extends HttpExceptionResponse {\n    path: string;\n    method: string;\n    timeStamp: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IApp.html":{"url":"interfaces/IApp.html","title":"interface - IApp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IApp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/helpers/app.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ThemeManager } from './theme';\n\nexport interface IApp {\n    name: string;\n    author: {\n        name: string;\n        link: string;\n    };\n}\n\nexport function AppSetup() {\n    const app: IApp = {\n        name: 'Nuxt 3 Awesome Starter',\n        author: {\n            name: 'viandwi24',\n            link: 'https://github.com/viandwi24',\n        },\n    };\n    useState('app', () => app);\n\n    const themeManager = ThemeManager();\n\n    // vue transition bug handle\n    const messages = [\n        \"Uncaught NotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\",\n        'NotFoundError: The object can not be found here.',\n    ];\n    if (typeof window !== 'undefined') {\n        window.addEventListener('error', (ev) => {\n            if (messages.includes(ev.message)) {\n                ev.preventDefault();\n                window.location.reload();\n            }\n        });\n    }\n\n    return {\n        app,\n        themeManager,\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\nimport { ErrorsInterceptor } from './errors.interceptor';\nimport { ExcludeNullInterceptor } from './null.interceptor';\nimport { TimeoutInterceptor } from './timeout.interceptor';\n\n@Module({\n    providers: [\n        { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ExcludeNullInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: TimeoutInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ErrorsInterceptor },\n    ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n    use(req: Request, res: Response, next: () => void): void {\n        console.log(`Request ${req}...`);\n        console.log(`Response ${res}...`);\n        return next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        console.log('Connecting ' + context.getClass().name);\n        const now = Date.now();\n        return next\n            .handle()\n            .pipe(tap(() => console.log(`Log time... ${Date.now() - now}ms`)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MathController.html":{"url":"controllers/MathController.html","title":"controller - MathController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MathController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                math\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                execute\n                            \n                            \n                                sum\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Calculate check sum pattern'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sum\n                        \n                    \n                \n            \n            \n                \nsum(data: number[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'sum'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus, Inject } from '@nestjs/common';\nimport { ClientProxy, MessagePattern } from '@nestjs/microservices';\nimport {\n    ApiConflictResponse,\n    ApiInternalServerErrorResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { Public } from 'src/infrastructure/auth/decorators';\nimport { MATH_SERVICE } from '../constants/math.constant';\n\n@ApiTags('Microservices')\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('math')\nexport class MathController {\n    constructor(@Inject(MATH_SERVICE) private readonly client: ClientProxy) {}\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Calculate check sum pattern' })\n    execute(): Observable {\n        const pattern = { cmd: 'sum' };\n        const data = [1, 2, 3, 4, 5];\n        return this.client.send(pattern, data);\n    }\n\n    @MessagePattern({ cmd: 'sum' })\n    sum(data: number[]): number {\n        return (data || []).reduce((a, b) => a + b);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MathModule.html":{"url":"modules/MathModule.html","title":"module - MathModule","body":"\n                   \n\n\n\n\n    Modules\n    MathModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            MathController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { MATH_SERVICE } from '../constants/math.constant';\nimport { MathController } from './math.controller';\n\n@Module({\n    imports: [\n        ClientsModule.register([\n            { name: MATH_SERVICE, transport: Transport.TCP },\n        ]),\n    ],\n    controllers: [MathController],\n})\nexport class MathModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageEntity.html":{"url":"classes/MessageEntity.html","title":"class - MessageEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/entities/message.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'conversation-id-123-456-789', description: 'Conversation id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'id-123-456-789', description: 'Message id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user-id-123-456-789', description: 'User id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Hello world', description: 'Message text'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'text', description: 'Message type: text, image, video, audio'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class MessageEntity {\n    @ApiProperty({\n        example: 'id-123-456-789',\n        description: 'Message id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    id: string;\n\n    @ApiProperty({\n        example: 'text',\n        description: 'Message type: text, image, video, audio',\n    })\n    @IsNotEmpty()\n    @IsString()\n    type: string;\n\n    @ApiProperty({\n        example: 'Hello world',\n        description: 'Message text',\n    })\n    @IsNotEmpty()\n    @IsString()\n    text: string;\n\n    @ApiProperty({\n        example: 'conversation-id-123-456-789',\n        description: 'Conversation id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    conversationId: string;\n\n    @ApiProperty({\n        example: 'user-id-123-456-789',\n        description: 'User id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    senderId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesGateway.html":{"url":"controllers/MessagesGateway.html","title":"controller - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n            \n                Prefix\n            \n            \n                messages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                removeMessage\n                            \n                            \n                                    Async\n                                typing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(dto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMessage(dto: DeleteMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(senderId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    WebSocketGateway,\n    SubscribeMessage,\n    MessageBody,\n    WebSocketServer,\n    ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, DeleteMessageDto } from './dto/request';\nimport { SkipThrottle } from '@nestjs/throttler';\nimport { ICreateMessage, IGetAllMessages } from './dto/response';\nimport { Controller } from '@nestjs/common';\n\n@SkipThrottle()\n// @UseGuards(WsThrottlerGuard)\n@Controller('messages')\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n    @WebSocketServer() server: Server;\n    constructor(private readonly messagesService: MessagesService) {}\n\n    @SubscribeMessage('findAllMessages')\n    async getAllMessages(\n        @MessageBody('conversationId') conversationId: string,\n    ): Promise {\n        return this.messagesService.getAllMessages(conversationId);\n    }\n\n    @SubscribeMessage('createMessage')\n    async createMessage(\n        @MessageBody() dto: CreateMessageDto,\n        @ConnectedSocket() client: Socket,\n    ): Promise {\n        const message = await this.messagesService.createMessage(\n            dto,\n            client.id,\n        );\n        this.server.emit('message', message);\n        return message;\n    }\n\n    @SubscribeMessage('typing')\n    async typing(\n        @MessageBody('senderId') senderId: string,\n        @MessageBody('isTyping') isTyping: boolean,\n        @ConnectedSocket() client: Socket,\n    ): Promise {\n        const name = await this.messagesService.getClientName(senderId);\n\n        client.broadcast.emit('typing', { senderId: name, isTyping });\n    }\n\n    @SubscribeMessage('removeMessage')\n    async removeMessage(\n        @MessageBody() dto: DeleteMessageDto,\n    ): Promise {\n        const remove = await this.messagesService.removeMessage(dto);\n        this.server.emit('remove', remove);\n        return remove;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n    controllers: [MessagesGateway],\n    providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getClientName\n                            \n                            \n                                    Async\n                                removeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(dto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getClientName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClientName(clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMessage(dto: DeleteMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, DeleteMessageDto } from './dto/request';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport { ICreateMessage, IGetAllMessages } from './dto/response';\n\n@Injectable()\nexport class MessagesService {\n    constructor(private prismaService: PrismaService) {}\n\n    async getAllMessages(conversationId: string): Promise {\n        const identify = await this.prismaService.conversation.findUnique({\n            where: {\n                id: conversationId,\n            },\n            select: {\n                id: true,\n                name: true,\n                description: true,\n                avatar: true,\n                createdAt: true,\n                messages: true,\n                members: true,\n                admins: true,\n                creator: true,\n            },\n        });\n        return identify;\n    }\n\n    async getClientName(clientId: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: { id: clientId },\n            select: { username: true },\n        });\n        return user.username;\n    }\n\n    async createMessage(\n        dto: CreateMessageDto,\n        clientId: string,\n    ): Promise {\n        const senderName = await this.getClientName(dto.senderId);\n        await this.prismaService.message.create({\n            data: {\n                type: dto.type,\n                text: dto.text,\n                conversationId: dto.conversationId,\n                senderId: `${dto.senderId}:${senderName}`,\n            },\n        });\n        return await this.getAllMessages(dto.conversationId);\n    }\n\n    async removeMessage(dto: DeleteMessageDto): Promise {\n        await this.prismaService.message.delete({\n            where: {\n                id: dto.id,\n            },\n        });\n\n        return this.getAllMessages(dto.conversationId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NatsStrategy.html":{"url":"classes/NatsStrategy.html","title":"class - NatsStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NatsStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ServerNats\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        bindEvents\n                        \n                    \n                \n            \n            \n                \nbindEvents(client: any)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/strategies/nats.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NatsSubscriber.html":{"url":"interfaces/NatsSubscriber.html","title":"interface - NatsSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NatsSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OauthController.html":{"url":"controllers/OauthController.html","title":"controller - OauthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OauthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookAuth\n                            \n                            \n                                    Async\n                                facebookRedirect\n                            \n                            \n                                    Async\n                                githubRedirect\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookAuth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubRedirect(req: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/redirect')@ApiOperation({summary: 'Create login callback with your Github account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Google account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Google account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Query,\n    Req,\n    UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\nimport { Public } from '../auth/decorators';\nimport { OauthService } from './oauth.service';\nimport { Request } from 'express';\n\n@ApiTags('OAuth')\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('oauth')\nexport class OauthController {\n    constructor(private readonly oauthService: OauthService) {}\n\n    @Get('facebook')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Connect to your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async facebookAuth(): Promise {\n        return HttpStatus.OK;\n    }\n\n    @Get('facebook/redirect')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async facebookRedirect(@Req() req: Request): Promise {\n        return this.oauthService.facebookRedirect(req);\n    }\n\n    @Get('google')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary: 'Connect to your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async googleAuth(@Req() req: Request): Promise {\n        return req;\n    }\n\n    @Get('google/redirect')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async googleRedirect(@Req() req: Request): Promise {\n        return this.oauthService.googleRedirect(req);\n    }\n\n    @Get('github/redirect')\n    @ApiOperation({\n        summary:\n            'Create login callback with your Github account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async githubRedirect(@Query() req: string) {\n        return this.oauthService.githubRedirect(req);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OauthModule.html":{"url":"modules/OauthModule.html","title":"module - OauthModule","body":"\n                   \n\n\n\n\n    Modules\n    OauthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OauthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OauthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OauthService } from './oauth.service';\nimport { OauthController } from './oauth.controller';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { AuthModule } from '../auth/auth.module';\nimport { FacebookStrategy } from './strategies/facebook.strategy';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [AuthModule, UsersModule],\n    controllers: [OauthController],\n    providers: [OauthService, GoogleStrategy, FacebookStrategy],\n    exports: [OauthService],\n})\nexport class OauthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OauthService.html":{"url":"injectables/OauthService.html","title":"injectable - OauthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OauthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookRedirect\n                            \n                            \n                                    Async\n                                githubRedirect\n                            \n                            \n                                    Async\n                                githubSuccess\n                            \n                            \n                                    Async\n                                googleRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/oauth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookRedirect(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubRedirect(req: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubSuccess(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleRedirect(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { axiosRequest } from 'src/core/helpers';\nimport { subRandom } from 'src/core/utils/random';\nimport { AuthService } from '../auth/auth.service';\nimport { SignupDto } from '../auth/dto/request';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class OauthService {\n    constructor(\n        private readonly authService: AuthService,\n        private readonly usersService: UsersService,\n    ) {}\n\n    async facebookRedirect(req: any) {\n        if (!req.user) {\n            return 'Not found user from facebook!';\n        }\n\n        const payload = {\n            email: req.user.user.email,\n            password: req.user.user.email.split('@')[0],\n            username: subRandom(16),\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n\n    async googleRedirect(req: any) {\n        if (!req.user) {\n            return 'Not found user from Google!';\n        }\n\n        const payload = {\n            email: req.user.email,\n            password: req.user.email.split('@')[0],\n            username: subRandom(16),\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n\n    async githubRedirect(req: string) {\n        // client must request to this url https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email\n        if (!req) {\n            return 'Not found user from Github!';\n        }\n\n        const requestToken = req['code'];\n\n        const data = await axiosRequest(\n            'post',\n            `https://github.com/login/oauth/access_token?client_id=${process.env.GITHUB_CLIENT_ID}&client_secret=${process.env.GITHUB_SECRET}&code=${requestToken}`,\n            { accept: 'application/json' },\n        );\n        return await this.githubSuccess(data.access_token);\n    }\n\n    async githubSuccess(token: string) {\n        const data = await axiosRequest('get', 'https://api.github.com/user', {\n            Authorization: 'token ' + token,\n        });\n        const payload = {\n            email: data.email || `${data.login}@gmail.com`,\n            password: data.email.split('@')[0],\n            username: subRandom(16),\n        } as SignupDto;\n\n        if (!payload.email) {\n            throw new NotFoundException(\n                'The email address associated with this account has not been verified or made public!',\n            );\n        }\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                current\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 1, minimum: 1, default: 1, nullable: true, description: 'Page number'})@IsString({message: 'Page current must be as string'})@IsOptional({message: 'Page current is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 10, nullable: true, description: 'Number of items per page'})@IsString({message: 'Page limit must be as string'})@IsOptional({message: 'Page limit is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : EORDER.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, description: 'asc, desc', example: 'asc', nullable: true, enum: EORDER, default: undefined})@IsString({message: 'Page order must be as string'})@IsOptional({message: 'Page order is optional'})@IsEnum(EORDER)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(50)@IsOptional({message: 'Page take is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:66\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/dto/pagination.dto.ts:68\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsEnum, IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\nimport { EORDER } from 'src/core/constants';\n\nexport class PaginationDto {\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1,\n        minimum: 1,\n        default: 1,\n        nullable: true,\n        description: 'Page number',\n    })\n    @IsString({\n        message: 'Page current must be as string',\n    })\n    @IsOptional({\n        message: 'Page current is optional',\n    })\n    current?: string = '1';\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10,\n        nullable: true,\n        description: 'Number of items per page',\n    })\n    @IsString({\n        message: 'Page limit must be as string',\n    })\n    @IsOptional({\n        message: 'Page limit is optional',\n    })\n    limit?: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        description: 'asc, desc',\n        example: 'asc',\n        nullable: true,\n        enum: EORDER,\n        default: EORDER.ASC,\n    })\n    @IsString({\n        message: 'Page order must be as string',\n    })\n    @IsOptional({\n        message: 'Page order is optional',\n    })\n    @IsEnum(EORDER)\n    order?: string = EORDER.ASC;\n\n    @ApiPropertyOptional({\n        minimum: 1,\n        maximum: 50,\n        default: 10,\n    })\n    @Type(() => Number)\n    @IsInt()\n    @Min(1)\n    @Max(50)\n    @IsOptional({\n        message: 'Page take is optional',\n    })\n    readonly take?: number = 10;\n\n    get skip(): number {\n        return (Number(this.current) - 1) * this.take;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                published\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of post author', example: 'author-id-123-456-789'})@IsString({message: 'The author of post must be a string'})@IsNotEmpty({message: 'The author of post is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The content of post', example: 'content abcedf'})@IsString({message: 'The post content must be a string'})@IsNotEmpty({message: 'The post content must not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The favourite id in post', example: 'favourite-id-123-456-789'})@IsString({message: 'The favourite id of post must be a string'})@IsNotEmpty({message: 'The favourite id of post is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'The attach files of post', example: undefined})@IsArray({message: 'The attach files must be an array'})@IsNotEmpty({message: 'The attach files must not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of post', example: 'post-id-123-456-789'})@IsNotEmpty({message: 'The id of post is required'})@IsString({message: 'The id of post must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of post', example: 'post-id-123-456-789'})@IsString({message: 'The id of post must be a string'})@IsNotEmpty({message: 'The id of post is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'The status of post', example: true})@IsBoolean({message: 'The publish status must be a boolean'})@IsNotEmpty({message: 'The publish status is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'The type reaction in post', example: 0})@IsNumber()@IsNotEmpty({message: 'The type reaction of post is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The title of post', example: 'title abcedf'})@IsString({message: 'The post title must be a string'})@IsNotEmpty({message: 'The post title is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport {\n    IsArray,\n    IsBoolean,\n    IsNotEmpty,\n    IsNumber,\n    IsString,\n} from 'class-validator';\nimport { CustomDto } from 'src/core/common/dto';\n\nexport class PostEntity extends PickType(CustomDto, ['userId']) {\n    @ApiProperty({\n        type: String,\n        description: 'The id of post',\n        example: 'post-id-123-456-789',\n    })\n    @IsNotEmpty({\n        message: 'The id of post is required',\n    })\n    @IsString({\n        message: 'The id of post must be a string',\n    })\n    id: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The title of post',\n        example: 'title abcedf',\n    })\n    @IsString({\n        message: 'The post title must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The post title is required',\n    })\n    title: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The content of post',\n        example: 'content abcedf',\n    })\n    @IsString({\n        message: 'The post content must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The post content must not be empty',\n    })\n    description: string;\n\n    @ApiProperty({\n        type: Array,\n        description: 'The attach files of post',\n        example: ['file-id1-123-456', 'file-id2-456-789'],\n    })\n    @IsArray({\n        message: 'The attach files must be an array',\n    })\n    @IsNotEmpty({\n        message: 'The attach files must not be empty',\n    })\n    files: string[];\n\n    @ApiProperty({\n        type: Boolean,\n        description: 'The status of post',\n        example: true,\n    })\n    @IsBoolean({\n        message: 'The publish status must be a boolean',\n    })\n    @IsNotEmpty({\n        message: 'The publish status is required',\n    })\n    published: boolean;\n\n    @ApiProperty({\n        type: String,\n        description: 'The id of post author',\n        example: 'author-id-123-456-789',\n    })\n    @IsString({\n        message: 'The author of post must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The author of post is required',\n    })\n    authorId: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The id of post',\n        example: 'post-id-123-456-789',\n    })\n    @IsString({\n        message: 'The id of post must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The id of post is required',\n    })\n    postId: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The favourite id in post',\n        example: 'favourite-id-123-456-789',\n    })\n    @IsString({\n        message: 'The favourite id of post must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The favourite id of post is required',\n    })\n    favouritorId: string;\n\n    @ApiProperty({\n        type: Number,\n        description: 'The type reaction in post',\n        example: 0,\n    })\n    @IsNumber()\n    @IsNotEmpty({\n        message: 'The type reaction of post is required',\n    })\n    reactionType: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n    ParseUUIDPipe,\n    Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    UpdatePostDto,\n    ReactionsPost,\n} from './dto/post/request';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Posts')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('posts')\nexport class PostsController {\n    constructor(private postsService: PostsService) {}\n\n    @Post()\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Get all posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({ description: 'Create new post successfuly' })\n    async createPost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreatePostDto,\n    ): Promise {\n        return this.postsService.createPost(userId, dto);\n    }\n\n    @Post('private/all')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get all public and private posts of user',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPostsOfUser(\n        @GetCurrentUserId() userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPostsOfUser(userId);\n    }\n\n    @Get(':userId/all')\n    @Public()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all public posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPublicPosts(\n        @Param('userId', new ParseUUIDPipe()) userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPublicPosts(userId);\n    }\n\n    @Get(':postId')\n    @Public()\n    @ApiOperation({ summary: 'Get one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getOnePostById(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        return this.postsService.getOnePostById(postId);\n    }\n\n    @Patch('update')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updatePost(@Body() dto: UpdatePostDto): Promise {\n        return this.postsService.updatePost(dto);\n    }\n\n    @Delete('delete')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deletePost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: DeleteOnePost,\n    ): Promise {\n        return this.postsService.deletePost(userId, dto);\n    }\n\n    @Post('reaction')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'React to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async reactionPost(@Body() dto: ReactionsPost): Promise {\n        return this.postsService.reactionPost(dto);\n    }\n\n    @Public()\n    @Get(':postId/comments')\n    @ApiOperation({ summary: 'Get all comments of the post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllComments(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        console.log(postId);\n        return this.postsService.getAllComments(postId);\n    }\n\n    @Post('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Add a new comment to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async addComment(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreateCommentDto,\n    ): Promise {\n        return this.postsService.addComment(userId, dto);\n    }\n\n    @Put('comments/update/text')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateComment(\n        @Body() dto: UpdateCommentTextDto,\n    ): Promise {\n        return this.postsService.updateComment(dto);\n    }\n\n    @Delete('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteComment(@Body() dto: DeleteCommentDto): Promise {\n        return this.postsService.deleteComment(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [PostsController],\n    providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:277\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    ReactionsPost,\n    UpdatePostDto,\n} from './dto/post/request';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { POST_ERROR, RESPONSES_MESSAGE, USER_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class PostsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createPost(userId: string, dto: CreatePostDto): Promise {\n        const post = await this.prismaService.post.create({\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                authorId: userId,\n                // categories: {\n                //   create: [\n                //     {\n                //       createAt: new Date(),\n                //       category: {\n                //         create: {\n                //           id: uuid(),\n                //           name: 'New category',\n                //         },\n                //       },\n                //     },\n                //   ],\n                // },\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n            },\n        });\n        return post;\n    }\n\n    async getAllPostsOfUser(userId: string): Promise | null {\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllPublicPosts(userId: string): Promise | null {\n        const list = await this.prismaService.user.findMany({\n            where: {\n                id: userId,\n            },\n            select: {\n                writtenPosts: {\n                    select: {\n                        id: true,\n                    },\n                },\n            },\n        });\n        if (!list) {\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        }\n        if (list.length === 0) {\n            throw new NotFoundException(POST_ERROR.EMPTY);\n        }\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n                published: true,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getOnePostById(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async updatePost(dto: UpdatePostDto): Promise {\n        const list = await this.getOnePostById(dto.postId);\n\n        if (!list) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (list.authorId !== dto.authorId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        return await this.prismaService.post.update({\n            where: {\n                id: dto.postId,\n            },\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                published: dto.published,\n            },\n            select: {\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deletePost(userId: string, dto: DeleteOnePost): Promise {\n        const identify = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                authorId: true,\n            },\n        });\n\n        if (!identify) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (identify.authorId !== userId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        await this.prismaService.post.delete({\n            where: {\n                id: dto.postId,\n            },\n        });\n        return 'This post has been deleted!';\n    }\n\n    async reactionPost(dto: ReactionsPost): Promise {\n        const checkExist = await this.prismaService.reaction.findMany({\n            where: {\n                postId: dto.postId,\n                userId: dto.favouritorId,\n            },\n        });\n\n        if (checkExist.length > 0) {\n            throw new BadRequestException('You already reacted to this post');\n        }\n        await this.prismaService.reaction.create({\n            data: {\n                userId: dto.favouritorId,\n                postId: dto.postId,\n                type: dto.reactionType,\n            },\n        });\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllComments(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                comments: true,\n            },\n        });\n    }\n\n    async addComment(\n        userId: string,\n        dto: CreateCommentDto,\n    ): Promise {\n        const checkPost = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n        });\n\n        if (!checkPost) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n        return this.prismaService.comment.create({\n            data: {\n                text: dto.text,\n                type: dto.type,\n                postId: dto.postId,\n                authorId: userId,\n            },\n        });\n    }\n\n    async updateComment(dto: UpdateCommentTextDto): Promise {\n        return await this.prismaService.comment.update({\n            where: {\n                id: dto.id,\n            },\n            data: {\n                text: dto.text,\n            },\n            select: {\n                text: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deleteComment(dto: DeleteCommentDto): Promise {\n        await this.prismaService.comment.delete({\n            where: {\n                id: dto.id,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_COMMENT;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n    providers: [PrismaService, ConfigModule],\n    exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/abstraction/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    INestApplication,\n    Injectable,\n    OnModuleDestroy,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n    extends PrismaClient\n    implements OnModuleInit, OnModuleDestroy\n{\n    constructor() {\n        super({\n            datasources: {\n                db: {\n                    url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n                    // url: process.env.DATABASE_URL,\n                },\n            },\n        });\n    }\n\n    async onModuleInit(): Promise {\n        await this.$connect();\n    }\n\n    async onModuleDestroy() {\n        await this.$disconnect();\n    }\n\n    async enableShutdownHooks(app: INestApplication): Promise {\n        this.$on('beforeExit', async () => {\n            await app.close();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: '123, Address A, City B, Country C', description: 'The address of the user'})@IsOptional({message: 'Address is optional'})@IsString({message: 'Address must be a string'})@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 19})@IsNumber()@IsOptional({message: 'Age is optional'})@Min(11, {message: 'You must be at least 12 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Avatar example 1 url', description: 'The avatar of the user'})@IsOptional({message: 'Avatar is optional'})@IsString({message: 'Avatar must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'This is bio of Hello ABC account', description: 'The bio of the user'})@IsString({message: 'Bio must be a string'})@IsOptional({message: 'Bio is optional'})@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z', type: Date, description: 'The date of birth of the user'})@Type(undefined)@IsDate({message: 'Date of birth must be a date type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Cover example 1 url', description: 'The cover of the user'})@IsString({message: 'Cover must be a string'})@IsOptional({message: 'Cover is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC', description: 'The full name of the user'})@IsString({message: 'Full name must be a string'})@IsNotEmpty({message: 'Full name is required'})@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@IsNotEmpty()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:183\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined, example: undefined, description: 'The hobbies of the user'})@IsArray({message: 'Hobbies must be an array'})@IsOptional({message: 'Hobbies is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EMaritalStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Single', description: 'The relationship status of the user [single, married, divorced]'})@IsOptional({message: 'Relationship status is optional'})@IsString({message: 'Relationship status must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: '09999999999', description: 'The phone number of the user'})@IsOptional({message: 'Phone number is optional'})@IsString({message: 'Phone number must be a string'})@MaxLength(21, {message: 'Phone number is too long, must be at most maximum 20 characters!'})@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:129\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n    IsArray,\n    IsDate,\n    IsNotEmpty,\n    IsNumber,\n    IsOptional,\n    IsString,\n    Length,\n    Max,\n    MaxLength,\n    Min,\n    MinLength,\n    Validate,\n} from 'class-validator';\nimport { EMaritalStatus } from 'src/core/constants';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n    @ApiProperty({\n        type: String,\n        example: 'Hello ABC',\n        description: 'The full name of the user',\n    })\n    @IsString({\n        message: 'Full name must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Full name is required',\n    })\n    @Length(3, 45)\n    @MinLength(2, {\n        message: 'Full name is too short, must be at least 3 characters!',\n    })\n    @MaxLength(46, {\n        message: 'Name is too long, must be at most 45 characters!',\n    })\n    @Validate(fullNameValidator, {\n        message: 'Full name must be not begin with number!',\n    })\n    fullName: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: 'Avatar example 1 url',\n        description: 'The avatar of the user',\n    })\n    @IsOptional({\n        message: 'Avatar is optional',\n    })\n    @IsString({\n        message: 'Avatar must be a string',\n    })\n    avatar: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: 'Cover example 1 url',\n        description: 'The cover of the user',\n    })\n    @IsString({\n        message: 'Cover must be a string',\n    })\n    @IsOptional({\n        message: 'Cover is optional',\n    })\n    cover: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: 'Single',\n        description:\n            'The relationship status of the user [single, married, divorced]',\n    })\n    @IsOptional({\n        message: 'Relationship status is optional',\n    })\n    @IsString({\n        message: 'Relationship status must be a string',\n    })\n    marriageStatus: EMaritalStatus;\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: ['Music', 'Sport', 'Travel'],\n        description: 'The hobbies of the user',\n    })\n    @IsArray({\n        message: 'Hobbies must be an array',\n    })\n    @IsOptional({\n        message: 'Hobbies is optional',\n    })\n    interests: string[];\n\n    @ApiPropertyOptional({\n        type: String,\n        example: '123, Address A, City B, Country C',\n        description: 'The address of the user',\n    })\n    @IsOptional({\n        message: 'Address is optional',\n    })\n    @IsString({\n        message: 'Address must be a string',\n    })\n    @MaxLength(101, {\n        message: 'Address is too long, must be at most 100 characters!',\n    })\n    address: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: '09999999999',\n        description: 'The phone number of the user',\n    })\n    @IsOptional({\n        message: 'Phone number is optional',\n    })\n    @IsString({\n        message: 'Phone number must be a string',\n    })\n    @MaxLength(21, {\n        message:\n            'Phone number is too long, must be at most maximum 20 characters!',\n    })\n    @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n    phone: string;\n\n    @ApiProperty({\n        example: '2021-07-02T05:01:03.938Z',\n        type: Date,\n        description: 'The date of birth of the user',\n    })\n    @Type(() => Date)\n    @IsDate({\n        message: 'Date of birth must be a date type',\n    })\n    birthdate: Date;\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 19,\n    })\n    @IsNumber()\n    @IsOptional({\n        message: 'Age is optional',\n    })\n    @Min(11, {\n        message: 'You must be at least 12 years old!',\n    })\n    @Max(101, {\n        message: 'You must be at most 100 years old!',\n    })\n    age: number;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: 'This is bio of Hello ABC account',\n        description: 'The bio of the user',\n    })\n    @IsString({\n        message: 'Bio must be a string',\n    })\n    @IsOptional({\n        message: 'Bio is optional',\n    })\n    @MaxLength(151, {\n        message: 'Bio is too long, must be at most 150 characters!',\n    })\n    bio: string;\n\n    @ApiProperty({\n        type: Number,\n        description: '1: male, 2: female, 0: other',\n        example: 1,\n    })\n    @IsNumber()\n    @IsNotEmpty()\n    @Min(0)\n    @Max(2)\n    gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecaptchaDto.html":{"url":"classes/RecaptchaDto.html","title":"class - RecaptchaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecaptchaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/recaptcha.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                recaptcha\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Recapcha token', type: String, example: '03ANYolqtMS4nv1u0XNKtfZxSjthwjRLiuvXJABk18ZQSuc8IMkuZ_mvV7Tk6aOBULne66mRwPoe9ypFs6EPl76uxlYj4QQKYWWaBX-VxAn5GW4XpL7Ps4_2PdZB1kIibDgN2zyt9BJIkwisLRvzxZenCeWWg4T7lEns25P84d7N7s12DxIKdqi2XaaEMnAS1LK-ypqAN3E8Avyd_yCTvZqkOeu9J_exVR-UoewSdcm7T6cS84zfpwaw7Q3eH4hyo7tmHrhoiqtMh9cmFgGYFN4MQOHcSx0bhJ-LgDlkq3QzudG1AKL95fwu80YWKMgofbjD2afTdLeSmH9r2YU3bi05Nqj_682aenAiwy5Qe0j3CqZ234TJqxyhihPfi2tXVANByG_z53XetTS9Wo95NZQ_NtXgOz-V9slImnDmINg5jOFjIGpIQu-GkXJ824bP14bwaRPWXdXZTu59nVfQHE99Nz0MYGVg39s8m86cZarKZWGiZUMq2-nuk'})@IsString({message: 'Recapcha token must be a string'})@IsNotEmpty({message: 'Recapcha token must not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/request/recaptcha.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { LoginDto } from './sigin.dto';\n\nexport class RecaptchaDto extends LoginDto {\n    @ApiProperty({\n        description: 'Recapcha token',\n        type: String,\n        example:\n            '03ANYolqtMS4nv1u0XNKtfZxSjthwjRLiuvXJABk18ZQSuc8IMkuZ_mvV7Tk6aOBULne66mRwPoe9ypFs6EPl76uxlYj4QQKYWWaBX-VxAn5GW4XpL7Ps4_2PdZB1kIibDgN2zyt9BJIkwisLRvzxZenCeWWg4T7lEns25P84d7N7s12DxIKdqi2XaaEMnAS1LK-ypqAN3E8Avyd_yCTvZqkOeu9J_exVR-UoewSdcm7T6cS84zfpwaw7Q3eH4hyo7tmHrhoiqtMh9cmFgGYFN4MQOHcSx0bhJ-LgDlkq3QzudG1AKL95fwu80YWKMgofbjD2afTdLeSmH9r2YU3bi05Nqj_682aenAiwy5Qe0j3CqZ234TJqxyhihPfi2tXVANByG_z53XetTS9Wo95NZQ_NtXgOz-V9slImnDmINg5jOFjIGpIQu-GkXJ824bP14bwaRPWXdXZTu59nVfQHE99Nz0MYGVg39s8m86cZarKZWGiZUMq2-nuk',\n    })\n    @IsString({\n        message: 'Recapcha token must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Recapcha token must not be empty',\n    })\n    recaptcha: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                matchRoles\n                            \n                            \n                                parseJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchRoles\n                        \n                    \n                \n            \n            \n                \nmatchRoles(roles: EROLE[], role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n                                    \n                                                EROLE[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseJwt\n                        \n                    \n                \n            \n            \n                \nparseJwt(token)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AUTH_ERROR, EROLE } from '../constants';\nimport { ROLES_KEY } from './roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            ROLES_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (!requiredRoles) {\n            return true;\n        }\n\n        const request = context.switchToHttp().getRequest().secret;\n\n        const data = this.parseJwt(request);\n\n        if (\n            data.key !== process.env.ADMIN_KEY ||\n            data.id !== process.env.ADMIN_SUB\n        ) {\n            throw new UnauthorizedException(AUTH_ERROR.NOT_ADMIN);\n        }\n\n        return this.matchRoles(requiredRoles, data.role);\n    }\n\n    matchRoles(roles: EROLE[], role: string) {\n        console.log(`--> Matched role: ${roles.includes(role as EROLE)}`);\n        return roles.find((el) => el === role) ? true : false;\n    }\n\n    parseJwt(token) {\n        return JSON.parse(\n            Buffer.from(token.split('.')[1], 'base64').toString(),\n        );\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:4\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\nexport class RtGuard extends AuthGuard(ESTRATEGY.JWT_REFRESH) {\n    constructor() {\n        super();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.JWT_REFRESH,\n) {\n    constructor(\n        @Inject(ConfigService)\n        private config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: config.get('APP_SECRET'),\n            // secretOrKey: process.env.APP_SECRET,\n            passReqToCallback: true,\n        });\n    }\n\n    async validate(req: Request, payload: any) {\n        const refreshToken = req\n            .get('authorization')\n            .replace('Bearer', '')\n            .trim();\n        return {\n            ...payload,\n            refreshToken,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThrottlerBehindProxyGuard.html":{"url":"injectables/ThrottlerBehindProxyGuard.html","title":"injectable - ThrottlerBehindProxyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThrottlerBehindProxyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/security/throttle-proxy.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ThrottlerGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getTracker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        getTracker\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracker(req: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/core/security/throttle-proxy.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThrottlerGuard } from '@nestjs/throttler';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ThrottlerBehindProxyGuard extends ThrottlerGuard {\n    protected getTracker(req: Record): string {\n        return req.ips.length ? req.ips[0] : req.ip; // individualize IP extraction to meet your own needs\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(5000),\n            catchError((err) => {\n                if (err instanceof TimeoutError) {\n                    return throwError(() => new RequestTimeoutException());\n                }\n                return throwError(() => err);\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The new password of user', example: 'password123'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/request/password.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The old password of user', example: 'password123'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/request/password.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { UserEntity } from 'src/infrastructure/users/entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, ['email']) {\n    @ApiProperty({\n        type: String,\n        description: 'The old password of user',\n        example: 'password123',\n    })\n    @IsNotEmpty()\n    @IsString()\n    oldPassword: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The new password of user',\n        example: 'password123',\n    })\n    @IsNotEmpty()\n    @IsString()\n    newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAvatarDto.html":{"url":"classes/UpdateUserAvatarDto.html","title":"class - UpdateUserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCoverDto.html":{"url":"classes/UpdateUserCoverDto.html","title":"class - UpdateUserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: '123, Address A, City B, Country C', description: 'The address of the user'})@IsOptional({message: 'Address is optional'})@IsString({message: 'Address must be a string'})@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:111\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 19})@IsNumber()@IsOptional({message: 'Age is optional'})@Min(11, {message: 'You must be at least 12 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:156\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Avatar example 1 url', description: 'The avatar of the user'})@IsOptional({message: 'Avatar is optional'})@IsString({message: 'Avatar must be a string'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:55\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'This is bio of Hello ABC account', description: 'The bio of the user'})@IsString({message: 'Bio must be a string'})@IsOptional({message: 'Bio is optional'})@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:172\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z', type: Date, description: 'The date of birth of the user'})@Type(undefined)@IsDate({message: 'Date of birth must be a date type'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:140\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Cover example 1 url', description: 'The cover of the user'})@IsString({message: 'Cover must be a string'})@IsOptional({message: 'Cover is optional'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC', description: 'The full name of the user'})@IsString({message: 'Full name must be a string'})@IsNotEmpty({message: 'Full name is required'})@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@IsNotEmpty()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:183\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined, example: undefined, description: 'The hobbies of the user'})@IsArray({message: 'Hobbies must be an array'})@IsOptional({message: 'Hobbies is optional'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:95\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EMaritalStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Single', description: 'The relationship status of the user [single, married, divorced]'})@IsOptional({message: 'Relationship status is optional'})@IsString({message: 'Relationship status must be a string'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:82\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: '09999999999', description: 'The phone number of the user'})@IsOptional({message: 'Phone number is optional'})@IsString({message: 'Phone number must be a string'})@MaxLength(21, {message: 'Phone number is too long, must be at most maximum 20 characters!'})@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:129\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})@IsNotEmpty({message: 'Email is required'})@IsEmail({discription: 'Email is invalid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User id', example: 'user-id-123-456-789', type: String})@IsNotEmpty({message: 'User id is required'})@IsString({message: 'User id must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@IsNotEmpty({message: 'Password is required'})@IsString({message: 'Password must be a string'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123', description: 'The username of the user'})@IsString({message: 'Username must be a string'})@IsNotEmpty({message: 'Username is required'})@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:87\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n    IsAlphanumeric,\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    Length,\n    MaxLength,\n    MinLength,\n    Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n    @ApiProperty({\n        description: 'User id',\n        example: 'user-id-123-456-789',\n        type: String,\n    })\n    @IsNotEmpty({\n        message: 'User id is required',\n    })\n    @IsString({\n        message: 'User id must be a string',\n    })\n    id: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'This is a required property',\n        example: 'example@gmail.com',\n    })\n    @IsNotEmpty({\n        message: 'Email is required',\n    })\n    @IsEmail({\n        discription: 'Email is invalid',\n    })\n    email: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'This is a required property',\n        example: 'password123',\n    })\n    @IsNotEmpty({\n        message: 'Password is required',\n    })\n    @IsString({\n        message: 'Password must be a string',\n    })\n    @Length(8, 21)\n    @MinLength(7, {\n        message: 'Password is too short, must be at least 8 characters!',\n    })\n    @MaxLength(21, {\n        message: 'Password is too long, must be at most 20 characters!',\n    })\n    @Validate(passwordValidator, {\n        message:\n            'Password must be at contain at least one number, one uppercase letter and one special character',\n    })\n    password: string;\n\n    @ApiProperty({\n        type: String,\n        example: 'username123',\n        description: 'The username of the user',\n    })\n    @IsString({\n        message: 'Username must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Username is required',\n    })\n    @IsAlphanumeric()\n    @Length(3, 20)\n    @MinLength(2, {\n        message: 'Name is too short, must be at least 3 characters!',\n    })\n    @MaxLength(21, {\n        message: 'Name is too long, must be at most 20 characters!',\n    })\n    @Validate(usenameValidator, {\n        message: 'Username must be not begin with number!',\n    })\n    username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport { UsersService } from './users.service';\nimport {\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('users')\nexport class UsersController {\n    constructor(private usersService: UsersService) {\n        this.usersService = usersService;\n    }\n\n    @Public()\n    @Get('profile/:userIdOrUsername')\n    @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getPublicUserByIdOrUsername(\n        @Param('userIdOrUsername') userIdOrUsername: string,\n    ): Promise {\n        return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n    }\n\n    @Public()\n    @Get('find/:email')\n    @ApiOperation({ summary: 'Find user account by email' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getUserByEmail(\n        @Param('email') email: string,\n    ): Promise {\n        return this.usersService.getUserByEmail(email);\n    }\n\n    @Get()\n    @ApiBearerAuth()\n    @ApiOperation({\n        summary: 'Get user profile by user-id (all)',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @GetCurrentUserId() userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersProfile(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('profile/avatar')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersAvatar(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('profile/cover')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image by user id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersCover(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user profile by email & password' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUser(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: LoginDto,\n    ): Promise {\n        return this.usersService.deleteUser(userId, dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n    imports: [PrismaModule, AuthModule],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        // consumer\n        //   .apply(ExistedUserMiddleware)\n        //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:227\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotAcceptableException,\n    NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport {\n    IAllUsers,\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport {\n    AUTH_ERROR,\n    EORDER,\n    RESPONSES_MESSAGE,\n    SYSTEM_ERROR,\n    USER_ERROR,\n} from 'src/core/constants';\n\n@Injectable()\nexport class UsersService {\n    constructor(private prismaService: PrismaService) {}\n\n    async getAllUsers(dto: PaginationDto): Promise {\n        const total = await this.prismaService.user.count();\n        const users = await this.prismaService.user.findMany({\n            // skip: Number(dto.limit) * (Number(dto.current) - 1),\n            take: Number(dto.limit) || 10,\n            orderBy: {\n                id: dto.order as any,\n            },\n            select: {\n                id: true,\n                email: true,\n                username: true,\n                createdAt: true,\n            },\n        });\n        return {\n            total,\n            orderBy: dto.order || EORDER.ASC,\n            pageItems: users.length,\n            pageLimit: Number(dto.limit) || 10,\n            pageCurrent: Number(dto.current) || 1,\n            users: users,\n        };\n    }\n\n    async getPublicUserByIdOrUsername(\n        userIdOrUsername: string,\n    ): Promise {\n        const identify = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n            },\n        });\n        if (identify.length === 0)\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify[0];\n    }\n\n    async getUserByEmail(email: string): Promise {\n        const identify = await this.prismaService.user.findUnique({\n            where: {\n                email: email,\n            },\n            select: {\n                username: true,\n                email: true,\n            },\n        });\n\n        // if (!identify && !nullable)\n        //     throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify;\n    }\n\n    async getUserProfile(userId: string): Promise {\n        const profile = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n                updatedAt: true,\n            },\n        });\n\n        if (!profile) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return profile;\n    }\n\n    async updateUsersProfile(\n        userId: string,\n        dto: UpdateUserProfileDto,\n    ): Promise {\n        await this.prismaService.userProfile.upsert({\n            where: {\n                userId: userId,\n            },\n            create: {\n                ...dto,\n                userId: userId,\n            },\n            update: {\n                ...dto,\n            },\n        });\n        const newProfile = await this.getPublicUserByIdOrUsername(userId);\n        return newProfile;\n    }\n\n    async updateUsersAvatar(\n        userId: string,\n        dto: UpdateUserAvatarDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newAvatar = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        avatar: true,\n                    },\n                },\n            },\n        });\n        return newAvatar;\n    }\n\n    async updateUsersCover(\n        userId: string,\n        dto: UpdateUserCoverDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newCover = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        cover: true,\n                    },\n                },\n            },\n        });\n        return newCover;\n    }\n\n    async deleteUser(userId: string, dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                email: true,\n                password: true,\n            },\n        });\n\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const matchEmail: number = dto.password.localeCompare(user.password);\n        const matchPassword: boolean = await comparePassword(\n            dto.password,\n            user.password,\n        );\n\n        if (matchEmail === 0 || !matchPassword)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (!matchPassword)\n            throw new NotAcceptableException(AUTH_ERROR.PASSWORD_NOT_MATCH);\n\n        await this.prismaService.userProfile.delete({\n            where: {\n                userId: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n\n    async deleteUserById(userId: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n\n        if (!user) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n\n        await this.prismaService.user.delete({\n            where: {\n                id: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WsThrottlerGuard.html":{"url":"injectables/WsThrottlerGuard.html","title":"injectable - WsThrottlerGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WsThrottlerGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/security/throttle-websocket.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ThrottlerGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(context: ExecutionContext, limit: number, ttl: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/security/throttle-websocket.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ttl\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { ThrottlerException, ThrottlerGuard } from '@nestjs/throttler';\n\n@Injectable()\nexport class WsThrottlerGuard extends ThrottlerGuard {\n    async handleRequest(\n        context: ExecutionContext,\n        limit: number,\n        ttl: number,\n    ): Promise {\n        const client = context.switchToWs().getClient();\n        const ip = client.conn.remoteAddress;\n        const key: string = this.generateKey(context, ip);\n        const ttls = await this.storageService.getRecord(key);\n\n        if (ttls.length >= limit) {\n            throw new ThrottlerException('Many requests');\n        }\n\n        await this.storageService.addRecord(key, ttl);\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n1.6.0 - 2022-09-22\nAdded\n\nGenerate random username oauth2\nBuild CI/CD\nLog requests and errors action messages with Morgan\nVerify account with recaptcha\nUpdate entity properties description\nRemove messages by id feature\nEmit client socket event\nSave messages in chat to database\nConnect volumn netword to docker-compose\nLimit schema constraint\nSecurity throttle guard\nSession storage cache\nMicroservice abstract\nFacebook strategy passport\nLogin with Github OAuth\nCompression middleware\nLogin with Google OAuth2 passport\nClient submodule\n\nFixed\n\nExisted confict email with oauth2\nAdmin role guard context\nGet Github redirect param token\n\nChanged\n\nReplace variables with enums constant\nCode base\n\nSource code (.zip)\nSource code (.tar.gz)\n1.5.0 - 2022-09-03\nAdded\n\nPosts endpoints module\nCreate comment for post\nUpdate README document\nGenerate Nest documentation\nCreate admin module\n\nSource code (.zip)\nSource code (.tar.gz)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to contribute\nThe easiest way to contribute is to open an issue and start a discussion.\nThen we can decide if and how a feature or a change could be implemented and if you should submit a pull requests with code changes.\nAlso read this first: Being a good open source citizen\nGeneral feedback and discussions\nPlease start a discussion on the core repo issue tracker.\nPlatform\nAutoMapper is built using the RTM tooling that ships with the latest Visual Studio. This is the only configuration accepted.\nBuilding from the command line\nRun the script npm i && npm run start:dev from the command line. This builds and runs tests.\nBugs and feature requests?\nPlease log a new issue in the appropriate GitHub repo:\n\nReport\n\nOther discussions\nhttps://github.com/thuongtruong1009/teneno-api/discussions/new\nFiling issues\nThe best way to get your bug fixed is to be as detailed as you can be about the problem.\nProviding a minimal project with steps to reproduce the problem is ideal.\nHere are questions you can answer before you file a bug to make sure you're not missing any important information.\n\nDid you read the documentation?\nDid you include the snippet of broken code in the issue?\nWhat are the EXACT steps to reproduce this problem (including source/destination types, mapping configuration and execution)?\n\nGitHub supports markdown, so when filing bugs make sure you check the formatting before clicking submit.\nContributing code and content\nYou will need to sign a Contributor License Agreement before submitting your pull request.\nMake sure you can build the code. Familiarize yourself with the project workflow and our coding conventions. If you don't know what a pull request is read this article: https://help.github.com/articles/using-pull-requests.\nWe only accept PRs to the master branch.\nBefore submitting a feature or substantial code contribution please discuss it with the team and ensure it follows the product roadmap. Here's a list of blog posts that are worth reading before doing a pull request:\n\nOpen Source Contribution Etiquette by Miguel de Icaza\nDon't \"Push\" Your Pull Requests by Ilya Grigorik.\n10 tips for better Pull Requests by Mark Seemann\nHow to write the perfect pull request by GitHub\n\nHere's a few things you should always do when making changes to the code base:\nCommit/Pull Request Format\nSummary of the changes (Less than 80 chars)\n - Detail 1\n - Detail 2\n\n#bugnumber (in this specific format)Tests\n\nTests need to be provided for every bug/feature that is completed.\nTests only need to be present for issues that need to be verified by QA (e.g. not tasks).\nIf there is a scenario that is far too hard to test there does not need to be a test for it.\n\"Too hard\" is determined by the team as a whole.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/composables/count.ts\n            \n            function\n            useCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/useSticky.ts\n            \n            variable\n            useSticky\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/user.ts\n            \n            variable\n            useUserStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            interface\n            IApp\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            function\n            AppSetup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/str.ts\n            \n            function\n            capitalize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            function\n            ThemeManager\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            variable\n            availableThemes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            count\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            startAt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            class\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/axios.config.ts\n            \n            variable\n            axiosConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            class\n            ConversationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            class\n            FileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            class\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            class\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            Alert\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            AlertOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            useAlertsStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/constants/math.constant.ts\n            \n            variable\n            MATH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/filters/rpc-exception.filter.ts\n            \n            class\n            ExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/math/math.controller.ts\n            \n            controller\n            MathController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            class\n            NatsStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            interface\n            NatsSubscriber\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/custom.dto.ts\n            \n            class\n            CustomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/default.dto.ts\n            \n            class\n            DefaultDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/setup.config.ts\n            \n            function\n            setup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.config.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            AUTH_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            CONVERSATION_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            POST_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            RESPONSES_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            STATUS_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            SYSTEM_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            USER_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/model/http-exception-response.interface.ts\n            \n            interface\n            CustomHttpExceptionResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/model/http-exception-response.interface.ts\n            \n            interface\n            HttpExceptionResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/axios.ts\n            \n            variable\n            axiosRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/errors.interceptor.ts\n            \n            injectable\n            ErrorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/security/throttle-proxy.guard.ts\n            \n            injectable\n            ThrottlerBehindProxyGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/security/throttle-websocket.guard.ts\n            \n            injectable\n            WsThrottlerGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            subRandom\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/recaptcha.dto.ts\n            \n            class\n            RecaptchaDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/request/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/request/delete-message.dto.ts\n            \n            class\n            DeleteMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/entities/message.entity.ts\n            \n            class\n            MessageEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            controller\n            MessagesGateway\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.controller.ts\n            \n            controller\n            OauthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.service.ts\n            \n            injectable\n            OauthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            nodeExternals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @nestjs/throttler : ^3.0.0\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.3.1\n        \n            @types/passport-facebook : ^2.1.11\n        \n            @types/passport-jwt : ^3.0.6\n        \n            axios : ^0.27.2\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            csurf : ^1.11.0\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            morgan : ^1.10.0\n        \n            passport : ^0.6.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EMaritalStatus   (src/.../options.enum.ts)\n                        \n                        \n                            EORDER   (src/.../options.enum.ts)\n                        \n                        \n                            EROLE   (src/.../options.enum.ts)\n                        \n                        \n                            ESTRATEGY   (src/.../options.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/options.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EMaritalStatus\n                    \n                \n                        \n                            \n                                 SINGLE\n                            \n                        \n                        \n                            \n                                Value : single\n                            \n                        \n                        \n                            \n                                 MARRIED\n                            \n                        \n                        \n                            \n                                Value : married\n                            \n                        \n                        \n                            \n                                 DIVORCED\n                            \n                        \n                        \n                            \n                                Value : divorced\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EORDER\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : asc\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : desc\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ESTRATEGY\n                    \n                \n                        \n                            \n                                 JWT\n                            \n                        \n                        \n                            \n                                Value : jwt\n                            \n                        \n                        \n                            \n                                 JWT_REFRESH\n                            \n                        \n                        \n                            \n                                Value : jwt-refresh\n                            \n                        \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppSetup   (client/.../app.ts)\n                        \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                        \n                            capitalize   (client/.../str.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            setup   (src/.../setup.config.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            subRandom   (src/.../random.ts)\n                        \n                        \n                            ThemeManager   (client/.../theme.ts)\n                        \n                        \n                            useCount   (client/.../count.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/helpers/app.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppSetup\n                        \n                    \n                \n            \n            \n                \nAppSetup()\n                \n            \n\n\n\n\n        \n    \n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    client/helpers/str.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/configs/setup.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setup\n                        \n                    \n                \n            \n            \n                \nsetup(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        subRandom\n                        \n                    \n                \n            \n            \n                \nsubRandom(max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ThemeManager\n                        \n                    \n                \n            \n            \n                \nThemeManager()\n                \n            \n\n\n\n\n        \n    \n    client/composables/count.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useCount\n                        \n                    \n                \n            \n            \n                \nuseCount()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\nProject documentation\n\nDatabase diagram\n\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAdmin\nAuth\n\n\n\n\n✅ Get list all users\n✅ Signup\n\n\n✅ Get user profile by id\n✅ Signin\n\n\n✅ Update user profile\n✅ Verify recaptcha\n\n\n✅ Delete user by user-id\n✅ Signout\n\n\n\n✅ Refresh access-token\n\n\n\n✅ Update password\n\n\n\n\n\n\nOAuth\nFiles\n\n\n\n\n✅ Google signin\n✅ Upload single file (avatar, cover)\n\n\n✅ Facebook signin\n✅ Upload multi files\n\n\n✅ Github signin\n✅ Upload array-field files (post, sample_image)\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅ Create a new post\n\n\n✅ Find user account by email\n✅ Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅ Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅ Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅ Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅ Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nDiagram database\n\nRelational diagram\n\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nCrypto-js a JavaScript library of crypto standards\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nMorgan HTTP request logger middleware for Node.js\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\nWebpack hot-reload auto recompile the entire project each time a change occurs\ngRPC support to run in any environment across data centers based on the concept of defining a service in terms of functions (methods) that called remotely\nSession store information about the user across multiple requests, which is particularly useful for MVC applications.\nVersioning allows you to have different versions of your controllers or individual routes running within the same application.\nCSRF (Cross-site request forgery) type of malicious exploit of a website where unauthorized commands are transmitted from a user that the web application trusts\nrate-limiting protect your application from brute-force attacks\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nPostgre x Heroku\nNest x Prisma\ngRPC for Microservice\nOAuth in Node\n\n\n\nExample templates\n\nNest example\nNest awesome\nNest structure\nNest auth example\nNest social login\nNest P2P\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nnpm run prisma:pull\n\n# generate the Prisma Client\nnpm run prisma:generate\n\n# Create env and migrate db\nnpm run prisma:migrate\n\n# Sync migrate change to db\nnpm run prisma:push# Open prisma studio\nnpm run prisma:studioRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MathModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OauthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    27 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    51 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.6.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github, chat, socket, passport, jwt, oauth2\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            Bugs : https://github.com/fivethree-team/nestjs-prisma-client-example/issues\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlertStyle   (client/.../AlertsStore.ts)\n                        \n                        \n                            CreateNewConversationDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteConversationAdminsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteOnePostDto   (client/.../posts.dto.ts)\n                        \n                        \n                            DeleteUserProfile   (client/.../users.dto.ts)\n                        \n                        \n                            GetAllConversationsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            GetAllPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicUsersDto   (client/.../users.dto.ts)\n                        \n                        \n                            GetUserProfileDto   (client/.../users.dto.ts)\n                        \n                        \n                            ITheme   (client/.../theme.ts)\n                        \n                        \n                            IThemeSettingOptions   (client/.../theme.ts)\n                        \n                        \n                            SignUpLocalDto   (client/.../auth.dto.ts)\n                        \n                        \n                            UpdateConversationMembersDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateConversationRoles   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateOneConversationByIdDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdatePostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            UploadAvatarDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadCoverDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            UploadPostsDto   (client/.../files.dto.ts)\n                        \n                        \n                            UpsertReactPostDto   (client/.../posts.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/stores/AlertsStore.ts\n    \n    \n        \n            \n                \n                    \n                    AlertStyle\n                \n            \n            \n                \n                        \"error\" | \"success\" | \"warning\" | \"info\" | \"none\"\n\n                \n            \n        \n    \n    client/dto/conversations.dto.ts\n    \n    \n        \n            \n                \n                    \n                    CreateNewConversationDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteConversationAdminsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllConversationsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationMembersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationRoles\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateOneConversationByIdDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/posts.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteOnePostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdatePostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpsertReactPostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/users.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteUserProfile\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicUsersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetUserProfileDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n    \n        \n            \n                \n                    \n                    ITheme\n                \n            \n            \n                \n                        \"dark\" | \"light\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IThemeSettingOptions\n                \n            \n            \n                \n                        \"dark\" | \"light\" | \"system\" | \"realtime\"\n\n                \n            \n        \n    \n    client/dto/auth.dto.ts\n    \n    \n        \n            \n                \n                    \n                    SignUpLocalDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/files.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UploadAvatarDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadCoverDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            availableThemes   (client/.../theme.ts)\n                        \n                        \n                            axiosConfig   (client/.../axios.config.ts)\n                        \n                        \n                            axiosRequest   (src/.../axios.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            CONVERSATION_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            count   (client/.../pageview.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            defaultOptions   (client/.../AlertsStore.ts)\n                        \n                        \n                            ENDPOINT   (client/.../auth.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../conversations.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../file.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../posts.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../user.service.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.config.ts)\n                        \n                        \n                            MATH_SERVICE   (src/.../math.constant.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            nodeExternals   (webpack-hmr.config.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            POST_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSES_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            startAt   (client/.../pageview.ts)\n                        \n                        \n                            STATUS_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            SYSTEM_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                               (webpack-hmr.config.ts)\n                        \n                        \n                            useAlertsStore   (client/.../AlertsStore.ts)\n                        \n                        \n                            USER_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            useSticky   (client/.../useSticky.ts)\n                        \n                        \n                            useUserStore   (client/.../user.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/status-message.enum.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SAME_PASSWORD: 'New password must be different from old password',\n    PASSWORD_NOT_MATCH: 'Password does not match',\n    RECAPTCHA_FAILED: 'Failed to verify recaptcha',\n    RECAPTCHA_NOT_PERSON: \"You're not person\",\n    NOT_ADMIN: 'You are not admin',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CONVERSATION_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Conversation not found',\n    NOT_CREATOR: 'You are not creator of this conversation',\n    NOT_MEMBER: 'You are not member of this conversation',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Post not found',\n    EMPTY: 'User not have post',\n    DUPLICATE: 'Post already exist',\n    NOT_AUTHOR: 'You are not author of this post',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSES_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CREATE_USER: 'The new account has been created.',\n    DELETE_USER: 'The user account has been deleted.',\n    DELETE_COMMENT: 'The comment has been deleted.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATUS_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SUCCESS: 'Success.',\n    ERROR: 'Errors.',\n    WARNING: 'Warning.',\n    INFO: 'Info.',\n    UNKNOWN: 'Unknown.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    FORBIDDEN: 'Access denied',\n    NOT_FOUND: 'Not found',\n    INTERNAL_SERVER_ERROR: 'Internal server error',\n    BAD_REQUEST: 'Bad request',\n    UNAUTHORIZED: 'Unauthorized',\n    CONFLICT: 'Conflict',\n    TOO_MANY_REQUESTS: 'Too many requests',\n    METHOD_NOT_ALLOWED: 'Method not allowed',\n    NOT_ACCEPTABLE: 'Provided fields are not acceptable',\n    REQUEST_TIMEOUT: 'Request timeout',\n    PAYLOAD_TOO_LARGE: 'Payload too large',\n    UNSUPPORTED_MEDIA_TYPE: 'Unsupported media type',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'User not found',\n    DUPLICATE: 'User already exist',\n}\n                    \n                \n\n\n        \n    \n\n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        availableThemes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { key: 'light', text: 'Light' },\n    { key: 'dark', text: 'Dark' },\n    { key: 'system', text: 'System' },\n    { key: 'realtime', text: 'Realtime' },\n]\n                    \n                \n\n\n        \n    \n\n    client/services/axios.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                \n                    \n                        Default value : axios.create({\n    baseURL: import.meta.env.VITE_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n    },\n}) as AxiosInstance\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/axios.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    method: string,\n    url: string,\n    headers?: any,\n) => {\n    return await axios({\n        method: method,\n        url: url,\n        headers: headers,\n    }).then(async (response: any) => await response.data);\n}\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n    let option: any;\n\n    if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n        option = { origin: true };\n    } else {\n        option = { origin: false };\n    }\n    callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    client/server/api/pageview.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startAt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Date.now()\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    client/stores/AlertsStore.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        useAlertsStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n})\n                    \n                \n\n\n        \n    \n\n    client/services/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/auth'\n                    \n                \n\n\n        \n    \n\n    client/services/conversations.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/conversations'\n                    \n                \n\n\n        \n    \n\n    client/services/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/files'\n                    \n                \n\n\n        \n    \n\n    client/services/posts.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/posts'\n                    \n                \n\n\n        \n    \n\n    client/services/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/users'\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n    const config: ConfigService = app.get(ConfigService);\n\n    const swaggerConfig = new DocumentBuilder()\n        .setTitle('Teneno API')\n        .setDescription(\n            `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n        )\n        .setContact(\n            'Thuong Truong',\n            'https://github.com/thuongtruong1009',\n            'ititiu19228@student.hcmiu.edu.vn',\n        )\n        .setLicense(\n            'License - MIT',\n            'https://github.com/thuongtruong1009/teneno-api/blob/main/LICENSE',\n        )\n        .addServer(config.get('BASE_URL'))\n        .addServer(config.get('HOST_URL'))\n        .setVersion('1.6.0')\n        // .addTag('cats', 'default description')\n        .addBearerAuth({\n            type: 'http',\n            scheme: 'Bearer',\n            bearerFormat: 'JWT',\n            description: 'Paste a valid access token here.',\n            in: 'Header',\n        })\n        .addOAuth2({\n            type: 'oauth2',\n            description: 'Login with Google account',\n            flows: {\n                implicit: {\n                    authorizationUrl: config.get('GOOGLE_CALLBACK_URL'),\n                    scopes: {\n                        'user:write': 'create your account',\n                        'user:read': 'read your account',\n                    },\n                },\n            },\n        })\n        .addCookieAuth('optional-session-id')\n        .addBasicAuth()\n        .addSecurity('api_key', {\n            type: 'apiKey',\n            name: 'api_key',\n            in: 'header',\n        })\n        .build();\n\n    const options: ISwaggerOptions = {\n        operationIdFactory: (controllerKey: string, methodKey: string) =>\n            methodKey,\n    };\n    const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n    SwaggerModule.setup('api', app, document, {\n        swaggerOptions: {\n            persistAuthorization: true,\n        },\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/abstraction/microservices/constants/math.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MATH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MATH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    webpack-hmr.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodeExternals\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('webpack-node-externals')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('run-script-webpack-plugin')\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: EROLE[]) =>\n    SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    client/composables/useSticky.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useSticky\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (el: HTMLElement, offset: number) => {\n    const onScroll = () => {\n        const scrollTop =\n            window.pageYOffset || document.documentElement.scrollTop;\n        if (scrollTop > offset) el.classList.add('sticky');\n        else el.classList.remove('sticky');\n    };\n\n    // lifecycle hooks\n    window.addEventListener('scroll', onScroll);\n    onUnmounted(() => {\n        window.removeEventListener('scroll', onScroll);\n    });\n\n    return {\n        onScroll,\n    };\n}\n                    \n                \n\n\n        \n    \n\n    client/composables/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useUserStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('user', () => {\n    /**\n     * Current named of the user.\n     */\n    const savedName = ref('');\n    const previousNames = ref(new Set());\n\n    const usedNames = computed(() => Array.from(previousNames.value));\n    const otherNames = computed(() =>\n        usedNames.value.filter((name) => name !== savedName.value),\n    );\n\n    /**\n     * Changes the current name of the user and saves the one that was used\n     * before.\n     *\n     * @param name - new name to set\n     */\n    function setNewName(name: string) {\n        if (savedName.value) previousNames.value.add(savedName.value);\n\n        savedName.value = name;\n    }\n\n    return {\n        setNewName,\n        otherNames,\n        savedName,\n    };\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
