var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.223,1,2.29]],["body/classes/Admin.html",[0,0.35,1,4.17,2,1.329,3,0.177,4,0.177,5,0.159,6,5.89,7,0.195,8,0.01,9,0.009,10,0.009]],["title/controllers/AdminController.html",[11,1.562,12,3.151]],["body/controllers/AdminController.html",[0,0.274,1,2.814,3,0.138,4,0.138,5,0.125,7,0.153,8,0.011,9,0.008,10,0.008,11,1.919,12,4.94,13,1.978,14,4.605,15,2.5,16,0.254,17,0.878,18,4.126,19,3.927,20,4.126,21,3.927,22,3.927,23,3.927,24,3.927,25,3.927,26,2.814,27,3.927,28,4.126,29,1.293,30,3.234,31,3.871,32,4.605,33,4.605,34,2.476,35,4.185,36,4.185,37,3.412,38,0.491,39,3.445,40,3.412,41,4.185,42,3.871,43,3.871,44,4.605,45,3.871,46,2.596,47,3.871,48,4.185,49,4.605,50,4.185,51,3.871,52,3.871,53,3.234,54,4.605,55,4.605]],["title/modules/AdminModule.html",[56,1.389,57,2.947]],["body/modules/AdminModule.html",[0,0.285,1,2.927,3,0.144,4,0.144,5,0.13,7,0.159,8,0.011,9,0.008,10,0.008,12,5.54,13,2.588,16,0.28,17,0.913,56,2.232,57,5.871,58,2.421,59,3.154,60,4.79,61,4.79,62,4.79,63,4.861,64,5.719,65,3.532,66,2.809,67,2.6,68,5.454,69,3.27,70,5.54,71,4.026,72,5.454,73,5.454,74,4.353,75,4.79]],["title/injectables/AdminService.html",[64,2.947,76,0.756]],["body/injectables/AdminService.html",[0,0.319,3,0.161,4,0.161,5,0.145,7,0.178,8,0.01,9,0.009,10,0.009,16,0.254,17,1.022,38,0.571,64,5.076,76,1.303,77,2.104,78,5.36,79,2.452,80,4.214,81,4.383,82,0.637,83,6.102,84,1.21,85,0.882,86,1.113,87,4.871,88,2.375]],["title/controllers/AdminUsersController.html",[11,1.562,70,3.151]],["body/controllers/AdminUsersController.html",[0,0.134,1,1.377,3,0.068,4,0.068,5,0.061,7,0.075,8,0.011,9,0.005,10,0.005,11,0.939,13,0.968,15,1.223,16,0.241,17,0.43,18,3.748,19,2.357,20,2.477,21,2.357,22,2.357,23,2.357,24,2.357,25,2.357,26,1.377,27,2.357,28,2.477,29,0.633,30,1.582,31,1.894,32,2.253,33,2.253,34,2.289,35,2.048,36,2.048,37,1.67,38,0.63,39,2.068,40,1.67,41,2.048,42,1.894,43,1.894,44,2.253,45,1.894,46,1.27,47,1.894,48,2.048,49,2.253,50,2.048,51,1.894,52,1.894,53,1.582,54,2.253,55,2.253,70,2.965,82,0.673,84,1.277,85,0.931,86,1.175,88,0.999,89,5.917,90,2.253,91,0.24,92,0.753,93,2.413,94,3.527,95,3.527,96,3.95,97,4.421,98,3.95,99,3.95,100,2.253,101,1.476,102,2.222,103,2.565,104,3.417,105,2.767,106,3.527,107,6.67,108,2.565,109,3.043,110,1.175,111,3.621,112,2.253,113,3.866,114,2.565,115,2.614,116,2.898,117,2.565,118,2.565,119,3.858,120,2.048,121,2.565,122,3.417,123,2.565,124,2.565,125,3.286,126,2.565,127,2.565,128,2.565,129,2.048,130,3.286,131,2.565,132,1.783,133,4.016,134,2.565,135,2.048,136,3.286,137,2.565,138,2.251,139,2.565,140,3.866,141,1.506,142,1.377,143,3.417,144,1.894,145,1.894,146,1.894,147,4.155,148,3.775,149,2.253,150,2.048,151,2.565,152,2.253,153,2.048,154,2.048,155,2.048,156,2.048,157,2.565,158,3.052,159,2.565,160,1.506,161,2.565,162,3.612,163,1.582,164,3.783,165,2.565,166,1.465,167,2.565,168,2.565,169,1.307,170,3.527,171,2.253,172,2.565,173,2.253,174,2.565,175,2.965,176,2.253,177,2.565,178,2.253,179,2.565,180,2.565,181,2.565]],["title/classes/AllExceptionsFilter.html",[0,0.223,182,3.407]],["body/classes/AllExceptionsFilter.html",[0,0.19,2,0.719,3,0.096,4,0.096,5,0.086,7,0.106,8,0.011,9,0.006,10,0.006,16,0.211,17,0.608,38,0.624,39,4.253,46,3.834,52,3.848,53,3.214,79,1.458,82,0.696,84,1.321,85,0.963,86,1.215,88,1.413,91,0.34,92,0.977,110,1.112,142,1.948,182,4.16,183,3.188,184,2.029,185,5.356,186,5.854,187,4.118,188,5.212,189,4.211,190,6.098,191,3.188,192,4.11,193,3.63,194,3.392,195,4.578,196,6.534,197,5.356,198,5.854,199,3.63,200,7.116,201,4.782,202,5.212,203,3.63,204,3.63,205,4.295,206,3.63,207,5.212,208,3.63,209,3.63,210,1.948,211,1.984,212,3.188,213,3.188,214,3.188,215,3.188,216,3.63,217,3.63,218,2.507,219,6.664,220,3.63,221,3.63,222,3.63,223,6.098,224,5.854,225,3.63,226,3.63,227,3.188,228,3.188,229,1.557,230,3.188,231,3.63,232,2.239,233,3.188,234,3.63]],["title/controllers/AppController.html",[11,1.562,235,3.151]],["body/controllers/AppController.html",[0,0.264,3,0.133,4,0.133,5,0.12,7,0.147,8,0.011,9,0.008,10,0.008,11,2.39,13,1.905,15,2.407,16,0.264,17,0.845,26,2.709,29,1.245,34,2.224,37,4.249,82,0.527,88,1.965,91,0.472,92,1.224,101,1.224,102,1.741,110,0.92,116,3.113,141,2.963,142,2.709,148,3.659,160,2.963,162,2.829,164,2.963,166,1.147,218,2.319,235,4.821,236,4.434,237,6.72,238,5.048,239,4.509,240,5.048,241,5.735,242,5.735,243,3.504,244,3.233,245,4.509,246,5.212,247,5.048,248,6.529,249,5.048,250,7.236,251,4.71,252,4.434,253,4.434,254,5.048,255,4.434,256,5.735,257,5.048]],["title/modules/AppModule.html",[56,1.389,258,3.151]],["body/modules/AppModule.html",[0,0.159,3,0.081,4,0.081,5,0.073,7,0.089,8,0.011,9,0.005,10,0.007,13,1.731,16,0.292,17,0.511,38,0.286,40,3.588,46,1.511,56,1.493,57,4.769,58,1.355,59,2.11,63,4.054,65,2.363,66,1.572,67,1.455,69,2.188,71,2.693,82,0.319,84,0.605,85,0.441,86,0.556,92,0.572,110,0.556,116,2.188,163,2.83,184,1.188,189,2.108,201,2.986,232,3.782,235,4.071,251,4.495,252,2.681,258,6.329,259,2.681,260,2.681,261,2.681,262,4.259,263,4.769,264,4.769,265,4.769,266,4.769,267,4.769,268,4.769,269,3.871,270,3.052,271,2.681,272,4.03,273,5.386,274,3.052,275,2.681,276,4.588,277,5.513,278,2.108,279,3.052,280,3.052,281,3.388,282,3.052,283,3.052,284,3.052,285,3.052,286,2.436,287,1.986,288,4.588,289,2.436,290,3.052,291,2.254,292,3.052,293,3.052,294,3.052,295,3.052,296,3.052,297,2.254,298,3.052,299,3.052,300,2.681,301,3.052,302,3.388,303,3.052,304,3.052,305,2.681,306,3.052,307,3.052,308,1.309,309,4.588,310,4.03,311,3.052,312,3.052,313,3.052,314,4.588,315,3.052,316,3.052,317,3.052,318,3.052,319,4.588,320,2.254,321,3.052,322,3.052,323,3.052,324,2.436,325,3.052,326,4.03,327,4.03,328,3.052,329,4.03,330,3.052,331,3.052,332,4.03,333,3.388,334,4.588,335,4.03,336,2.436,337,4.588,338,3.052,339,3.052,340,1.882]],["title/injectables/AppService.html",[76,0.756,251,2.777]],["body/injectables/AppService.html",[0,0.292,3,0.148,4,0.148,5,0.133,7,0.163,8,0.011,9,0.008,10,0.008,16,0.262,17,0.937,38,0.524,76,1.236,77,1.931,79,2.249,82,0.728,84,1.11,85,0.809,86,1.021,91,0.524,92,1.307,101,1.307,110,1.021,166,1.272,187,3.138,191,4.918,192,4.902,194,4.942,237,6.981,239,3.866,241,4.918,245,3.866,246,5.566,251,4.538,341,4.918,342,5.598,343,5.598,344,5.598,345,5.598,346,5.598,347,5.598]],["title/injectables/AtGuard.html",[76,0.756,281,3.151]],["body/injectables/AtGuard.html",[0,0.27,3,0.137,4,0.137,5,0.123,7,0.15,8,0.011,9,0.008,10,0.008,16,0.253,17,0.866,38,0.621,76,1.175,77,1.783,79,2.078,82,0.692,84,1.314,85,0.958,86,1.209,88,2.013,91,0.484,92,1.243,110,0.943,116,3.49,166,1.507,211,1.683,278,3.572,281,4.897,308,2.845,324,6.52,348,4.543,349,5.825,350,4.543,351,5.172,352,5.825,353,4.532,354,5.172,355,3.036,356,4.128,357,3.19,358,1.59,359,4.543,360,3.366,361,5.172,362,4.128,363,3.819,364,5.172,365,5.172,366,6.631,367,5.172,368,4.543,369,4.543,370,5.172]],["title/injectables/AtStrategy.html",[76,0.756,371,2.947]],["body/injectables/AtStrategy.html",[0,0.267,3,0.135,4,0.135,5,0.122,7,0.149,8,0.011,9,0.008,10,0.008,16,0.275,17,0.857,38,0.616,76,1.167,77,1.764,79,2.055,82,0.688,84,1.305,85,0.952,86,1.201,88,1.991,91,0.479,92,1.235,110,0.933,166,1.163,287,3.33,357,3.155,358,1.573,360,3.33,371,4.548,372,4.494,373,3.261,374,4.494,375,5.311,376,5.116,377,4.548,378,6.585,379,8.145,380,5.116,381,4.863,382,4.084,383,4.494,384,4.084,385,3.33,386,4.286,387,3.533,388,4.084,389,4.494,390,4.494,391,5.784,392,4.494,393,4.494,394,5.116,395,3.391,396,4.494]],["title/controllers/AuthController.html",[11,1.562,397,3.151]],["body/controllers/AuthController.html",[0,0.15,3,0.076,4,0.076,5,0.068,7,0.083,8,0.011,9,0.005,10,0.005,11,1.048,13,1.08,15,1.365,16,0.25,17,0.479,18,3.661,19,2.566,20,2.696,21,2.566,22,2.566,23,2.566,24,2.566,25,2.566,26,1.537,27,2.566,28,2.696,29,0.706,34,2.339,38,0.676,39,1.475,82,0.667,84,1.267,85,0.924,86,1.166,88,1.115,91,0.268,92,0.82,93,2.405,97,2.696,101,1.389,102,2.324,105,2.684,109,2.463,110,1.166,111,3.603,116,2.529,119,3.336,140,1.977,141,1.681,142,1.537,145,2.114,147,4.156,148,3.777,160,1.681,162,3.583,164,3.484,166,1.453,218,1.017,229,1.876,333,2.114,387,1.977,397,3.228,398,2.515,399,5.919,400,5.176,401,3.84,402,3.84,403,3.84,404,2.515,405,2.863,406,5.303,407,4.562,408,2.863,409,2.515,410,2.863,411,2.863,412,4.372,413,2.863,414,2.515,415,3.661,416,2.863,417,3.228,418,2.863,419,2.515,420,4.386,421,2.863,422,2.085,423,2.863,424,2.515,425,1.537,426,2.863,427,2.515,428,4.099,429,2.863,430,2.251,431,2.863,432,1.681,433,2.515,434,3.228,435,3.661,436,2.515,437,2.286,438,3.019,439,2.114,440,2.515,441,2.114,442,2.515,443,1.864,444,1.681,445,1.537,446,1.418,447,2.863,448,1.977,449,1.977,450,1.864,451,1.864,452,1.864,453,1.864,454,1.864,455,1.864,456,1.864,457,2.863,458,2.863,459,2.863,460,2.114,461,4.16,462,2.515,463,2.863,464,2.863,465,2.863,466,2.863,467,2.863,468,2.863,469,2.863,470,2.863,471,2.863,472,2.863,473,2.863,474,2.863,475,2.863,476,2.863,477,2.863]],["title/modules/AuthModule.html",[56,1.389,262,2.632]],["body/modules/AuthModule.html",[0,0.241,3,0.122,4,0.122,5,0.11,7,0.134,8,0.011,9,0.007,10,0.007,13,2.324,16,0.273,17,0.773,56,2.004,58,2.05,59,2.832,65,3.171,66,2.378,67,2.202,69,2.936,71,4.067,93,1.38,262,5.291,269,4.438,286,3.686,371,5.469,375,4.785,397,5.116,435,5.26,436,4.056,478,4.056,479,4.618,480,4.056,481,4.056,482,5.469,483,4.618,484,4.253,485,4.056,486,4.618,487,4.618,488,6.158,489,3.686,490,4.618,491,4.618,492,4.618,493,4.056,494,4.618,495,4.618,496,4.056,497,4.618,498,3.686]],["title/injectables/AuthService.html",[76,0.756,435,2.632]],["body/injectables/AuthService.html",[0,0.122,3,0.062,4,0.062,5,0.056,7,0.068,8,0.011,9,0.004,10,0.004,16,0.233,17,0.392,38,0.632,76,0.662,77,0.807,79,1.501,81,3.349,82,0.705,84,1.338,85,0.976,86,1.231,91,0.219,92,0.7,93,2.422,101,1.519,105,2.065,109,2.889,110,1.185,111,3.537,119,2.308,166,1.321,169,1.517,187,2.612,211,2.513,218,0.831,229,2.79,244,2.634,287,1.524,375,4.279,387,1.617,399,3.281,400,4.801,401,3.281,402,3.281,403,3.281,404,3.281,409,3.281,414,3.281,415,3.281,419,3.281,420,3.462,427,3.281,428,3.674,430,1.924,435,2.304,441,1.729,442,2.056,445,1.256,446,1.159,489,1.869,493,3.281,496,3.281,498,1.869,499,2.056,500,3.735,501,3.735,502,2.341,503,6.502,504,2.341,505,3.735,506,3.981,507,2.341,508,2.341,509,2.341,510,2.341,511,2.341,512,2.341,513,3.735,514,5.813,515,2.341,516,2.341,517,1.869,518,1.869,519,1.729,520,1.617,521,3.928,522,1.869,523,2.056,524,2.056,525,4.055,526,2.341,527,3.735,528,3.735,529,3.735,530,2.341,531,2.341,532,2.056,533,4.247,534,2.341,535,3.281,536,4.661,537,2.341,538,2.056,539,1.869,540,5.813,541,2.193,542,3.735,543,2.341,544,1.256,545,4.232,546,2.341,547,2.341,548,2.341,549,5.931,550,2.341,551,2.341,552,2.341,553,5.32,554,3.721,555,5.106,556,5.813,557,2.056,558,3.281,559,4.661,560,4.661,561,4.661,562,2.341,563,2.431,564,3.735,565,3.735,566,3.735,567,2.341,568,2.341,569,2.341]],["title/classes/CommentEntity.html",[0,0.223,570,2.777]],["body/classes/CommentEntity.html",[0,0.339,2,0.993,3,0.132,4,0.132,5,0.119,7,0.146,8,0.011,9,0.008,10,0.008,16,0.173,38,0.758,82,0.846,91,0.469,101,1.567,102,2.793,109,2.992,169,2.346,570,4.227,571,4.399,572,2.113,573,4.041,574,6.332,575,7.209,576,3.869,577,5.008,578,5.008,579,5.755,580,5.008,581,3.216,582,4.399,583,5.008,584,5.008,585,5.008,586,5.008,587,5.008,588,4.486,589,6.495,590,4.082,591,5.008,592,3.769,593,1.833]],["title/classes/ConversationEntity.html",[0,0.223,594,3.151]],["body/classes/ConversationEntity.html",[0,0.235,2,0.894,3,0.119,4,0.119,5,0.107,7,0.131,8,0.011,9,0.007,10,0.007,16,0.156,29,1.112,34,1.99,38,0.774,82,0.864,85,0.989,91,0.422,101,1.612,102,2.853,132,3.039,169,2.227,308,2.6,395,3.121,563,3.944,572,1.972,594,4.475,595,3.96,596,4.222,597,5.464,598,3.673,599,3.673,600,5.464,601,4.496,602,4.509,603,4.509,604,5.055,605,4.509,606,4.509,607,4.509,608,4.837,609,4.509,610,4.509,611,4.509,612,4.509,613,4.509,614,3.114]],["title/controllers/ConversationsController.html",[11,1.562,615,3.151]],["body/controllers/ConversationsController.html",[0,0.111,1,1.848,3,0.056,4,0.056,5,0.05,7,0.062,8,0.011,9,0.004,10,0.004,11,0.775,13,0.799,15,1.009,16,0.204,17,0.354,18,2.124,19,2.022,20,2.124,21,2.022,22,2.022,23,2.022,24,2.022,25,2.022,26,1.136,27,2.022,28,2.124,29,0.522,30,2.124,34,2.315,38,0.675,39,1.09,82,0.679,84,1.289,85,0.94,86,1.186,88,0.824,91,0.198,92,0.646,93,2.38,97,3.095,101,1.46,102,2.243,104,3.814,105,2.646,110,1.186,115,2.242,119,4.099,140,4.309,141,1.242,142,1.136,143,1.462,144,1.563,147,4.148,148,3.769,160,1.242,162,3.645,164,3.662,166,1.478,169,1.926,218,0.752,229,2.153,308,1.478,422,1.642,425,3.349,432,2.022,434,2.543,444,1.242,445,1.136,446,1.048,448,1.462,449,1.462,450,1.378,451,1.378,452,1.378,453,1.378,454,1.378,455,1.378,456,1.378,460,1.563,461,4.233,525,1.048,588,2.379,594,4.607,598,3.177,599,1.848,615,2.543,616,1.859,617,3.215,618,3.025,619,3.825,620,3.825,621,3.025,622,3.825,623,3.825,624,3.825,625,3.825,626,1.859,627,2.812,628,2.117,629,6.397,630,5.919,631,2.117,632,3.025,633,2.117,634,3.497,635,1.859,636,3.465,637,2.117,638,4.802,639,2.117,640,1.859,641,2.945,642,2.117,643,4.983,644,2.117,645,4.644,646,1.859,647,3.095,648,2.117,649,3.444,650,2.117,651,1.859,652,3.266,653,2.117,654,4.407,655,2.117,656,1.859,657,2.945,658,2.117,659,2.117,660,1.859,661,2.945,662,2.117,663,2.117,664,1.859,665,2.945,666,2.117,667,3.025,668,3.444,669,2.117,670,3.266,671,1.859,672,2.117,673,2.117,674,2.117,675,2.117,676,2.117,677,2.117,678,2.117,679,2.117,680,2.117,681,2.117,682,4.355,683,2.117,684,2.117,685,2.117,686,2.117,687,2.117,688,2.117,689,4.355,690,2.117,691,2.117,692,2.117,693,2.117,694,2.117]],["title/modules/ConversationsModule.html",[56,1.389,263,2.947]],["body/modules/ConversationsModule.html",[0,0.281,3,0.142,4,0.142,5,0.128,7,0.156,8,0.011,9,0.008,10,0.008,13,2.565,16,0.279,17,0.9,56,2.212,58,2.387,59,3.125,63,4.843,65,3.501,66,2.769,67,2.564,69,3.241,71,3.99,74,4.292,263,5.953,269,4.625,615,5.504,670,5.37,671,4.723,695,4.723,696,5.377,697,4.723,698,5.377,699,5.377,700,4.723]],["title/injectables/ConversationsService.html",[76,0.756,670,2.777]],["body/injectables/ConversationsService.html",[0,0.122,1,1.258,3,0.062,4,0.062,5,0.056,7,0.068,8,0.011,9,0.004,10,0.004,16,0.201,17,0.392,34,1.087,38,0.652,76,0.663,77,0.808,79,0.942,80,1.619,81,3.193,82,0.727,84,1.38,85,1.072,86,1.27,87,1.871,88,0.912,91,0.219,92,0.701,93,2.422,101,1.489,110,1.232,115,4.234,119,4.013,132,2.071,166,1.657,169,2.584,211,2.323,218,0.832,244,2.88,308,2.001,395,1.207,446,1.161,525,3.535,544,2.007,596,3.588,598,3.122,599,3.327,618,3.284,619,3.284,620,4.097,621,3.284,622,3.284,623,3.284,624,4.097,625,4.097,626,3.284,627,2.984,634,3.646,635,3.284,636,3.677,640,2.059,641,3.125,645,5.034,646,3.284,647,3.284,651,3.284,652,3.465,656,3.284,657,3.125,660,2.059,661,3.125,664,2.059,665,3.125,670,2.434,701,2.059,702,2.344,703,2.344,704,2.344,705,2.344,706,2.344,707,2.344,708,2.344,709,2.344,710,2.344,711,2.059,712,3.444,713,1.871,714,3.739,715,2.344,716,3.739,717,3.284,718,5.324,719,3.739,720,4.665,721,5.324,722,6.755,723,1.731,724,6.116,725,5.324,726,2.344,727,2.344,728,2.344,729,2.344,730,3.284,731,3.739,732,2.344]],["title/classes/CreateCommentDto.html",[0,0.223,733,2.947]],["body/classes/CreateCommentDto.html",[0,0.33,2,1.254,3,0.167,4,0.167,5,0.15,7,0.184,8,0.01,9,0.009,10,0.009,16,0.259,29,1.56,358,1.945,570,4.117,573,3.546,576,3.395,733,5.187,734,5.556,735,4.671,736,3.132,737,5.05,738,5.05]],["title/classes/CreateConversationDto.html",[0,0.223,627,2.392]],["body/classes/CreateConversationDto.html",[0,0.272,2,0.719,3,0.096,4,0.096,5,0.086,7,0.106,8,0.011,9,0.006,10,0.006,16,0.211,29,0.895,34,2.292,38,0.749,82,0.737,85,1.14,86,0.95,91,0.34,101,1.608,102,2.434,218,2.907,308,1.557,373,1.797,395,2.684,572,1.696,581,3.3,588,4.211,590,3.019,592,3.178,593,1.328,596,3.761,598,3.272,599,3.272,601,3.784,608,4.16,614,3.599,627,2.921,739,6.453,740,2.034,741,4.143,742,3.816,743,4.16,744,3.63,745,3.63,746,3.63,747,6.098,748,3.63,749,3.63,750,4.921,751,4.921,752,3.63,753,4.921,754,6.098,755,4.578,756,4.921,757,3.63,758,3.63,759,3.63,760,3.188,761,3.188,762,4.868,763,3.63,764,3.63,765,3.188,766,3.188,767,2.897,768,2.897,769,2.897,770,2.507,771,2.507,772,2.897,773,4.16,774,4.16,775,4.921,776,3.188,777,4.578,778,3.63,779,3.63,780,3.63,781,3.63,782,3.63,783,3.63]],["title/classes/CreateMessageDto.html",[0,0.223,784,2.777]],["body/classes/CreateMessageDto.html",[0,0.306,2,1.161,3,0.155,4,0.155,5,0.139,7,0.17,8,0.01,9,0.009,10,0.009,16,0.202,29,1.444,38,0.725,82,0.809,91,0.548,101,1.58,169,2.521,572,2.333,576,4.158,784,4.666,785,7.092,786,4.676,787,6.185,788,5.858,789,5.858,790,5.145,791,7.17]],["title/classes/CreatePostDto.html",[0,0.223,792,2.947]],["body/classes/CreatePostDto.html",[0,0.329,2,1.25,3,0.167,4,0.167,5,0.15,7,0.183,8,0.01,9,0.009,10,0.009,16,0.259,29,1.555,34,1.833,358,1.938,736,3.122,792,5.176,793,5.538,794,4.354,795,4.104,796,5.033,797,5.033,798,4.354,799,3.247]],["title/classes/DeleteCommentDto.html",[0,0.223,800,2.947]],["body/classes/DeleteCommentDto.html",[0,0.33,2,1.254,3,0.167,4,0.167,5,0.15,7,0.184,8,0.01,9,0.009,10,0.009,16,0.259,29,1.56,169,2.058,358,1.945,570,4.117,573,3.546,735,4.671,736,3.132,737,5.05,738,5.05,800,5.187,801,5.556]],["title/classes/DeleteConversationDto.html",[0,0.223,636,2.947]],["body/classes/DeleteConversationDto.html",[0,0.315,2,1.194,3,0.159,4,0.159,5,0.143,7,0.175,8,0.01,9,0.009,10,0.009,16,0.208,38,0.564,82,0.629,91,0.564,101,1.368,102,2.078,105,2.14,109,3.027,169,1.96,358,2.242,572,2.373,636,5.037,647,5.028,740,3.377,741,3.536,742,2.873,802,5.292,803,3.377,804,3.716,805,4.449,806,4.809,807,5.292,808,4.161]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.223,641,2.505]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.408,2,0.96,3,0.128,4,0.128,5,0.115,7,0.219,8,0.011,9,0.008,10,0.008,16,0.245,29,1.194,34,1.407,38,0.664,82,0.663,85,0.7,91,0.453,101,1.619,102,1.67,105,2.257,109,2.943,132,2.149,169,2.067,358,2.315,422,2.309,572,2.067,590,3.146,592,3.03,593,1.772,596,2.986,598,4.041,599,3.41,601,3.272,627,4.22,641,3.73,657,2.842,661,2.842,665,2.842,740,2.714,741,2.842,742,3.03,803,3.561,804,3.919,805,3.575,808,3.344,809,4.898,810,4.842,811,4.842,812,5.2,813,3.575,814,3.151]],["title/classes/DeleteOnePost.html",[0,0.223,815,2.947]],["body/classes/DeleteOnePost.html",[0,0.385,2,1.213,3,0.162,4,0.162,5,0.146,7,0.178,8,0.01,9,0.009,10,0.009,16,0.211,38,0.573,82,0.639,91,0.573,101,1.381,102,2.111,572,2.396,573,4.427,579,4.887,590,3.646,592,3.511,593,2.241,794,4.228,815,5.086,816,6.469,817,6.122]],["title/injectables/ErrorsIntereptor.html",[76,0.756,818,3.407]],["body/injectables/ErrorsIntereptor.html",[0,0.283,3,0.143,4,0.143,5,0.129,7,0.158,8,0.011,9,0.008,10,0.008,16,0.236,17,0.908,38,0.507,76,1.211,77,1.87,82,0.566,84,1.075,85,0.784,86,0.989,91,0.507,92,1.281,110,0.989,142,2.91,166,1.232,184,2.111,196,4.329,218,1.926,229,2.326,353,4.612,355,3.183,818,5.455,819,4.763,820,4.72,821,5.046,822,4.846,823,5.426,824,5.423,825,5.168,826,4.72,827,5.423,828,6.834,829,3.529,830,4.763,831,5.423,832,5.423,833,5.423,834,5.423]],["title/injectables/ExistedUserMiddleware.html",[76,0.756,835,3.151]],["body/injectables/ExistedUserMiddleware.html",[0,0.247,3,0.125,4,0.125,5,0.113,7,0.138,8,0.011,9,0.007,10,0.007,16,0.242,17,0.793,37,3.081,38,0.586,46,3.695,76,1.11,77,1.632,79,1.902,80,3.269,81,4.107,82,0.654,84,1.241,85,0.905,86,1.141,88,1.842,91,0.443,92,1.174,93,2.096,109,2.598,110,0.863,169,2.037,184,1.842,205,4.005,210,2.54,211,2.037,229,2.031,308,2.031,425,2.54,518,3.778,525,2.344,538,6.161,545,3.081,554,3.778,563,3.081,723,3.495,822,4.603,835,4.622,836,5.599,837,4.158,838,4.622,839,4.733,840,5.498,841,5.599,842,7.463,843,4.733,844,3.081,845,5.498,846,3.778,847,4.733,848,4.733,849,4.733]],["title/controllers/FileController.html",[11,1.562,850,3.151]],["body/controllers/FileController.html",[0,0.148,3,0.075,4,0.075,5,0.176,7,0.083,8,0.011,9,0.005,10,0.005,11,1.039,13,1.071,15,1.353,16,0.249,17,0.475,18,2.678,19,2.549,20,2.678,21,2.549,22,2.549,23,2.549,24,2.549,25,2.549,26,1.523,27,2.549,28,2.678,29,0.7,34,2.335,38,0.596,39,1.461,43,3.206,45,4.958,82,0.617,84,1.171,85,1.068,86,1.077,88,1.105,91,0.266,92,0.814,93,2.325,102,2.195,105,1.542,110,1.077,111,3.436,132,1.927,138,2.434,141,1.666,142,1.523,147,3.927,148,3.568,160,1.666,162,3.311,164,3.468,166,1.343,210,2.83,218,1.008,243,3.417,244,3.325,308,1.863,425,3.417,432,3.095,444,1.666,445,1.523,446,1.405,448,1.96,449,1.96,450,1.847,451,1.847,452,1.847,453,1.847,454,1.847,455,1.847,456,1.847,461,3.845,614,1.96,799,3.279,850,3.206,851,2.492,852,4.21,853,4.21,854,4.632,855,4.632,856,2.492,857,6.489,858,2.838,859,6.33,860,2.838,861,2.838,862,2.838,863,2.492,864,2.838,865,2.492,866,2.838,867,2.838,868,2.492,869,2.838,870,5.189,871,3.814,872,2.838,873,4.342,874,2.838,875,2.492,876,3.432,877,2.838,878,4.342,879,2.838,880,2.826,881,4.342,882,2.838,883,5.274,884,5.274,885,2.492,886,3.814,887,3.814,888,2.265,889,2.265,890,3.466,891,2.826,892,2.492,893,2.492,894,2.492,895,1.96,896,2.838,897,2.492,898,2.492,899,2.838,900,2.095,901,2.838,902,2.838,903,2.838,904,2.838,905,2.838,906,2.838,907,2.838,908,2.838,909,2.838,910,2.838,911,2.838,912,5.592,913,2.838,914,2.838,915,2.838,916,2.838,917,2.838]],["title/classes/FileService.html",[0,0.223,900,3.151]],["body/classes/FileService.html",[0,0.225,2,0.855,3,0.114,4,0.114,5,0.103,7,0.125,8,0.011,9,0.007,10,0.007,16,0.203,38,0.743,82,0.699,84,1.326,85,0.967,86,1.22,91,0.404,92,1.103,110,1.22,119,2.136,166,1.521,211,2.585,229,2.871,244,4.06,799,2.222,852,4.695,853,4.695,900,4.343,918,3.444,919,5.882,920,5.882,921,6.313,922,8.437,923,4.314,924,5.882,925,6.313,926,4.314,927,5.882,928,6.313,929,4.314,930,3.444,931,4.314,932,3.444,933,4.622,934,4.314,935,8.199,936,5.882,937,6.692,938,5.342,939,5.342,940,6.692,941,4.314,942,4.314,943,4.314]],["title/modules/FilesModule.html",[56,1.389,264,2.947]],["body/modules/FilesModule.html",[0,0.304,3,0.154,4,0.154,5,0.138,7,0.169,8,0.01,9,0.009,10,0.009,13,2.695,16,0.267,17,0.975,56,2.324,58,2.584,59,3.284,65,3.678,66,2.998,67,2.776,69,2.776,71,4.193,264,5.812,850,5.706,891,5.548,892,5.114,944,5.114,945,5.114,946,5.822,947,5.822]],["title/classes/FilesService.html",[0,0.223,891,2.777]],["body/classes/FilesService.html",[0,0.231,2,0.877,3,0.117,4,0.117,5,0.161,7,0.129,8,0.011,9,0.007,10,0.007,16,0.153,38,0.68,82,0.758,84,1.44,85,1.05,86,1.324,91,0.414,92,1.122,93,2.532,110,1.324,111,3.878,166,1.725,799,3.908,852,4.776,853,4.776,854,5.256,855,5.256,856,5.256,857,7.24,863,5.256,868,5.256,875,5.256,876,4.413,891,3.894,893,3.886,894,3.886,895,3.056,948,3.886,949,4.424,950,4.424,951,4.424,952,4.424,953,6.78,954,6.78,955,6.78,956,6.78,957,6.78,958,6.78,959,4.424]],["title/classes/GetAllConversationDto.html",[0,0.223,647,2.632]],["body/classes/GetAllConversationDto.html",[0,0.397,2,1.113,3,0.148,4,0.148,5,0.133,7,0.203,8,0.01,9,0.008,10,0.008,16,0.241,29,1.385,38,0.654,82,0.586,91,0.526,101,1.492,102,1.936,105,2.481,109,3.156,169,2.273,358,1.726,572,2.273,590,3.459,592,3.331,593,2.055,601,3.597,647,4.69,652,3.655,740,3.147,741,3.296,742,3.331,803,3.915,804,4.308,805,4.146,814,3.655,960,5.576,961,5.615]],["title/classes/GetOneConversationDto.html",[0,0.223,652,2.777]],["body/classes/GetOneConversationDto.html",[0,0.396,2,1.103,3,0.147,4,0.147,5,0.132,7,0.202,8,0.01,9,0.008,10,0.008,16,0.24,29,1.372,38,0.65,82,0.581,91,0.521,101,1.487,102,1.919,105,2.467,109,3.143,169,2.26,358,2.135,572,2.26,590,3.44,592,3.312,593,2.037,601,3.578,647,4.891,652,4.521,740,3.119,741,3.267,742,3.312,803,3.894,804,4.285,805,4.11,806,4.443,807,4.889,814,3.622,960,4.443]],["title/injectables/GoogleStrategy.html",[76,0.756,962,2.947]],["body/injectables/GoogleStrategy.html",[0,0.249,3,0.126,4,0.126,5,0.113,7,0.139,8,0.011,9,0.008,10,0.008,16,0.258,17,0.799,38,0.446,76,1.115,77,1.644,79,2.828,82,0.657,84,0.945,85,0.909,86,0.87,91,0.446,92,1.18,93,2.104,101,1.498,105,2.234,110,0.87,111,3,122,5.374,211,2.047,357,2.941,358,1.466,360,3.104,373,3.486,377,4.345,382,3.807,384,3.807,385,3.104,388,3.807,400,5.198,506,3.376,532,6.183,962,4.345,963,4.189,964,4.769,965,4.769,966,7.04,967,7.485,968,4.769,969,3.88,970,4.189,971,4.769,972,4.189,973,4.769,974,4.769,975,4.769,976,4.769,977,4.769,978,4.189,979,4.769,980,4.769,981,4.769,982,4.769,983,4.769,984,4.769,985,4.769,986,4.769,987,4.769,988,4.769]],["title/controllers/HealthController.html",[11,1.562,989,3.407]],["body/controllers/HealthController.html",[0,0.252,3,0.127,4,0.127,5,0.115,7,0.14,8,0.011,9,0.008,10,0.008,11,1.763,13,1.818,15,2.297,16,0.26,17,0.807,26,2.585,29,1.188,53,3.906,79,1.936,82,0.503,91,0.451,92,1.187,93,2.395,102,1.661,110,0.878,111,3.02,116,3.02,148,3.549,162,2.7,166,1.095,187,3.965,232,2.971,253,4.231,289,3.845,525,3.721,762,3.845,989,5.055,990,4.231,991,7.515,992,7.515,993,4.817,994,6.333,995,4.817,996,4.817,997,6.333,998,6.333,999,4.817,1000,6.333,1001,6.333,1002,4.817,1003,4.817,1004,4.817,1005,4.817,1006,4.817,1007,4.817,1008,4.817,1009,4.817,1010,3.135,1011,4.817,1012,3.845,1013,6.333,1014,4.817,1015,4.817,1016,4.817]],["title/classes/HttpExceptionFilter.html",[0,0.223,1017,3.407]],["body/classes/HttpExceptionFilter.html",[0,0.278,2,1.054,3,0.14,4,0.14,5,0.126,7,0.155,8,0.011,9,0.008,10,0.008,16,0.233,17,0.89,38,0.498,46,3.342,82,0.555,84,1.054,85,0.768,86,0.969,91,0.498,92,1.265,110,0.969,184,2.627,185,6.513,186,6.513,195,5.928,196,6.227,197,6.513,198,6.852,200,4.67,201,3.46,205,3.622,210,2.853,211,2.538,212,4.67,213,4.67,214,4.67,215,4.67,224,4.67,227,4.67,228,4.67,229,2.281,230,4.67,232,3.279,233,4.67,256,5.928,1017,5.388,1018,4.67,1019,5.316,1020,5.316,1021,5.316]],["title/interfaces/ISwaggerOptions.html",[1022,2.777,1023,3.151]],["body/interfaces/ISwaggerOptions.html",[3,0.113,4,0.113,5,0.102,7,0.124,8,0.011,9,0.007,10,0.007,15,2.787,38,0.702,40,3.804,58,3.436,86,1.509,91,0.4,101,1.249,115,3.804,308,3.072,572,1.902,895,2.952,1022,2.782,1023,4.316,1024,3.755,1025,7.161,1026,7.161,1027,7.161,1028,8.068,1029,6.8,1030,3.833,1031,6.29,1032,5.845,1033,5.134,1034,5.845,1035,5.958,1036,5.845,1037,5.845,1038,5.845,1039,5.845,1040,5.134,1041,7.161,1042,5.845,1043,5.134,1044,5.845,1045,5.134,1046,5.845,1047,4.316,1048,2.637,1049,5.845,1050,5.845,1051,5.134,1052,5.134,1053,5.845,1054,5.134,1055,5.851,1056,5.851]],["title/modules/InterceptorModule.html",[56,1.389,265,2.947]],["body/modules/InterceptorModule.html",[0,0.31,3,0.157,4,0.157,5,0.141,7,0.173,8,0.011,9,0.009,10,0.009,16,0.28,17,0.993,56,2.351,58,2.633,69,2.828,265,4.989,278,4.096,326,6.346,327,6.346,1057,5.931,1058,7.791,1059,5.334,1060,5.931,1061,4.989,1062,5.931]],["title/injectables/LoggerContextMiddleware.html",[76,0.756,291,3.151]],["body/injectables/LoggerContextMiddleware.html",[0,0.285,3,0.144,4,0.144,5,0.13,7,0.159,8,0.011,9,0.008,10,0.008,16,0.237,17,0.913,38,0.642,46,3.898,76,1.216,77,1.881,82,0.569,84,1.081,85,0.788,86,0.994,91,0.51,92,1.286,110,0.994,166,1.24,184,2.123,201,5.124,205,4.225,210,2.927,291,5.065,822,4.856,838,5.065,840,6.025,841,6.285,844,4.464,845,6.025,1035,4.027,1063,6.025,1064,4.79,1065,5.454,1066,5.454,1067,5.454]],["title/classes/LoggerModule.html",[0,0.223,297,3.151]],["body/classes/LoggerModule.html",[0,0.299,2,1.133,3,0.151,4,0.151,5,0.136,7,0.166,8,0.011,9,0.008,10,0.008,16,0.265,17,0.957,56,1.86,69,2.726,82,0.597,91,0.535,92,1.324,110,1.042,166,1.299,189,5.294,192,4.727,211,1.86,297,5.66,484,3.948,1068,5.021,1069,8.006,1070,5.716,1071,7.665,1072,5.638,1073,5.716,1074,5.716,1075,7.665]],["title/injectables/LoggerService.html",[76,0.756,192,2.632]],["body/injectables/LoggerService.html",[0,0.202,3,0.102,4,0.102,5,0.092,7,0.112,8,0.011,9,0.006,10,0.006,15,4.173,16,0.133,17,0.646,38,0.721,39,2.803,76,0.965,77,1.33,82,0.804,84,1.486,85,1.083,86,1.434,91,0.361,92,1.021,101,1.644,110,1.367,187,3.535,192,3.357,194,4.105,201,4.879,218,2.736,358,1.673,572,1.771,978,4.781,1076,3.389,1077,5.443,1078,5.443,1079,5.443,1080,5.443,1081,5.443,1082,5.443,1083,3.858,1084,7.497,1085,5.443,1086,6.851,1087,3.858,1088,5.443,1089,3.858,1090,5.443,1091,3.858,1092,5.443,1093,3.858,1094,5.443,1095,3.858,1096,3.858,1097,3.858,1098,6.307,1099,5.443,1100,3.858,1101,3.858,1102,3.858,1103,3.858,1104,3.858]],["title/injectables/LoggingInterceptor.html",[76,0.756,1059,3.151]],["body/injectables/LoggingInterceptor.html",[0,0.282,3,0.142,4,0.142,5,0.128,7,0.157,8,0.011,9,0.008,10,0.008,16,0.258,17,0.903,38,0.505,76,1.207,77,1.859,82,0.563,84,1.069,85,0.779,86,0.983,91,0.505,92,1.277,110,0.983,166,1.225,184,2.099,211,1.754,353,4.602,355,3.165,820,4.703,821,5.028,822,4.836,823,5.415,825,5.155,826,4.703,829,3.509,830,4.736,1059,5.028,1105,4.736,1106,5.392,1107,5.392,1108,3.981,1109,5.392,1110,5.392,1111,5.392,1112,5.392,1113,5.981,1114,5.392,1115,5.392,1116,5.392]],["title/classes/LoginDto.html",[0,0.223,415,2.632]],["body/classes/LoginDto.html",[0,0.334,2,1.266,3,0.169,4,0.169,5,0.152,7,0.186,8,0.01,9,0.009,10,0.009,16,0.261,29,1.576,358,1.964,415,4.66,430,3.291,506,3.429,736,3.164,1117,5.613,1118,4.159,1119,5.613,1120,5.101]],["title/classes/MessagesGateway.html",[0,0.223,1121,3.151]],["body/classes/MessagesGateway.html",[0,0.162,2,0.616,3,0.082,4,0.082,5,0.074,7,0.09,8,0.011,9,0.006,10,0.006,16,0.229,38,0.694,53,4.288,79,1.248,82,0.774,84,1.429,85,1.095,86,1.314,88,1.209,91,0.291,92,0.872,93,2.265,101,1.561,102,2.485,110,1.268,119,1.538,160,1.824,166,1.506,211,2.013,218,2.353,525,2.759,572,1.513,634,2.606,645,5.41,784,4.823,787,5.288,1030,2.759,1121,3.434,1122,2.729,1123,4.895,1124,4.085,1125,4.895,1126,4.085,1127,5.573,1128,4.085,1129,3.107,1130,4.525,1131,4.65,1132,5.573,1133,2.729,1134,6.049,1135,6.778,1136,4.65,1137,3.107,1138,2.729,1139,4.65,1140,3.107,1141,2.729,1142,4.65,1143,3.107,1144,2.729,1145,4.65,1146,3.107,1147,3.107,1148,6.187,1149,4.65,1150,3.107,1151,2.729,1152,4.801,1153,4.65,1154,3.107,1155,4.65,1156,3.107,1157,4.65,1158,6.187,1159,2.729,1160,2.729,1161,2.48,1162,2.729,1163,2.48,1164,2.729,1165,5.573,1166,3.107,1167,3.107,1168,5.573,1169,3.107,1170,3.107,1171,3.107,1172,3.107,1173,3.107,1174,3.107,1175,3.107,1176,3.107,1177,5.134,1178,3.107,1179,4.65,1180,3.107,1181,3.107]],["title/modules/MessagesModule.html",[56,1.389,266,2.947]],["body/modules/MessagesModule.html",[0,0.309,3,0.156,4,0.156,5,0.141,7,0.172,8,0.01,9,0.009,10,0.009,16,0.269,17,0.99,56,2.346,58,2.625,59,3.315,65,3.713,66,3.045,67,2.819,69,3.438,266,5.834,1121,5.324,1130,5.498,1160,5.193,1182,5.193,1183,5.193,1184,5.912,1185,5.912]],["title/injectables/MessagesService.html",[76,0.756,1130,2.777]],["body/injectables/MessagesService.html",[0,0.148,3,0.075,4,0.075,5,0.067,7,0.082,8,0.011,9,0.005,10,0.005,16,0.182,17,0.473,38,0.653,76,0.767,77,0.974,82,0.728,84,1.329,85,1.088,86,1.222,91,0.264,92,0.811,93,1.572,101,1.598,110,1.222,119,1.399,166,1.523,169,2.45,211,0.919,218,1.868,243,3.744,245,2.988,246,3.454,572,1.408,576,3.597,599,3.41,617,3.883,634,1.583,645,5.095,711,2.481,712,3.883,784,4.541,787,5.35,972,6.727,1010,2.816,1047,2.086,1048,1.742,1123,4.619,1124,3.801,1125,3.801,1126,3.801,1128,3.801,1130,2.816,1133,2.481,1138,3.801,1141,3.801,1144,3.801,1151,3.801,1152,4.388,1186,2.481,1187,4.327,1188,2.825,1189,2.825,1190,4.327,1191,2.825,1192,2.825,1193,2.825,1194,2.825,1195,5.581,1196,4.327,1197,4.327,1198,3.454,1199,4.327,1200,4.327,1201,4.327,1202,2.825,1203,5.894,1204,6.976,1205,2.825,1206,2.825,1207,2.825,1208,2.825,1209,2.825,1210,2.825,1211,2.825,1212,2.825,1213,4.327,1214,2.825,1215,4.327,1216,4.327,1217,2.825,1218,2.825,1219,2.825,1220,2.825,1221,2.825,1222,2.825,1223,2.825,1224,2.825]],["title/controllers/OauthController.html",[11,1.562,1225,3.151]],["body/controllers/OauthController.html",[0,0.193,3,0.098,4,0.098,5,0.088,7,0.108,8,0.011,9,0.006,10,0.006,11,1.354,13,1.396,15,1.764,16,0.255,17,0.62,19,3.102,21,3.102,22,3.102,23,3.102,24,3.102,25,3.102,26,1.986,27,3.102,29,0.912,34,2.303,38,0.495,39,1.906,82,0.644,84,1.222,85,0.891,86,1.124,88,1.44,91,0.346,92,0.991,93,2.368,101,1.261,102,2.125,110,1.124,116,2.52,141,2.172,142,1.986,143,2.555,146,2.732,147,3.259,148,3.455,150,2.954,160,2.172,162,2.962,164,2.172,166,1.401,187,2.074,218,1.314,356,2.954,357,2.282,407,4.376,417,3.902,422,2.52,425,2.836,433,3.25,434,3.902,443,2.408,444,2.172,445,1.986,446,1.832,450,2.408,451,2.408,452,2.408,453,2.408,454,2.408,455,2.408,456,2.408,460,2.732,461,2.408,462,3.25,634,3.455,841,2.954,844,5.066,969,4.147,1225,3.902,1226,3.25,1227,3.25,1228,5.284,1229,5.284,1230,5.284,1231,3.7,1232,5.284,1233,3.7,1234,3.7,1235,3.7,1236,4.641,1237,6.723,1238,3.7,1239,3.7,1240,3.7,1241,3.7,1242,4.641,1243,3.7,1244,3.7,1245,3.7,1246,3.7,1247,4.012,1248,3.25,1249,3.7,1250,3.7,1251,3.7,1252,3.7,1253,3.7,1254,5.284,1255,4.641,1256,3.7,1257,3.7,1258,3.7,1259,3.7,1260,3.7,1261,3.7,1262,3.7,1263,3.7,1264,3.7]],["title/modules/OauthModule.html",[56,1.389,267,2.947]],["body/modules/OauthModule.html",[0,0.272,3,0.138,4,0.138,5,0.124,7,0.152,8,0.011,9,0.008,10,0.008,13,2.515,16,0.276,17,0.873,56,2.169,58,2.315,59,3.065,65,3.433,66,2.685,67,2.486,69,3.179,71,3.913,262,5.049,267,5.962,484,4.604,962,5.654,1225,5.426,1247,5.65,1248,4.58,1265,4.58,1266,4.58,1267,5.214,1268,4.58,1269,5.214,1270,5.214,1271,5.214,1272,5.214]],["title/injectables/OauthService.html",[76,0.756,1247,2.777]],["body/injectables/OauthService.html",[0,0.206,3,0.104,4,0.104,5,0.094,7,0.115,8,0.011,9,0.007,10,0.007,16,0.252,17,0.661,37,3.599,38,0.648,46,1.954,76,0.98,77,1.361,79,1.586,82,0.722,84,1.371,85,1,86,1.262,88,1.536,91,0.369,92,1.037,93,2.403,101,1.416,105,1.964,110,1.164,160,2.316,166,1.656,211,2.37,244,2.738,363,4.715,381,4.084,420,4.156,430,2.848,432,2.316,435,4.657,506,2.968,523,3.466,525,3.839,541,3.246,634,3.579,844,4.156,933,2.725,969,2.434,1134,3.15,1247,3.599,1273,3.466,1274,5.53,1275,5.53,1276,5.53,1277,3.946,1278,3.946,1279,5.53,1280,3.946,1281,5.53,1282,3.946,1283,5.53,1284,3.946,1285,4.415,1286,4.415,1287,3.946,1288,3.946,1289,3.946,1290,6.385,1291,5.53,1292,5.53,1293,3.946,1294,3.15,1295,3.946,1296,3.946,1297,3.946,1298,3.466,1299,3.466,1300,3.946,1301,3.946,1302,3.946,1303,3.946,1304,3.946,1305,3.946,1306,3.946,1307,3.946]],["title/classes/PaginationDto.html",[0,0.223,113,2.947]],["body/classes/PaginationDto.html",[0,0.326,2,0.936,3,0.125,4,0.125,5,0.112,7,0.137,8,0.01,9,0.007,10,0.007,16,0.216,29,1.164,34,2.316,38,0.746,82,0.731,91,0.442,101,1.547,102,2.416,113,4.316,243,3.354,308,3.419,572,2.033,581,4.086,592,3.555,593,1.728,601,3.84,608,6.361,643,4.838,742,3.8,880,4.067,1308,4.147,1309,7.005,1310,7.005,1311,7.005,1312,6.549,1313,4.722,1314,6.249,1315,6.249,1316,4.722,1317,5.952,1318,5.489,1319,4.722,1320,6.549]],["title/injectables/ParseIntPipe.html",[76,0.756,1321,3.407]],["body/injectables/ParseIntPipe.html",[0,0.289,3,0.146,4,0.146,5,0.132,7,0.161,8,0.01,9,0.008,10,0.008,16,0.191,17,0.926,38,0.518,76,1.227,77,1.908,82,0.578,84,1.097,85,0.8,86,1.009,91,0.518,92,1.298,93,2.258,101,1.416,110,1.009,166,1.258,184,2.154,211,1.8,229,2.374,545,3.601,634,3.101,880,3.601,1048,3.413,1321,5.525,1322,6.08,1323,4.86,1324,5.525,1325,6.08,1326,6.029,1327,6.952,1328,5.533,1329,4.417,1330,6.08,1331,6.921,1332,5.533,1333,5.533,1334,4.86,1335,4.86]],["title/classes/PostEntity.html",[0,0.223,795,2.777]],["body/classes/PostEntity.html",[0,0.316,2,0.889,3,0.119,4,0.119,5,0.107,7,0.131,8,0.011,9,0.007,10,0.007,16,0.155,34,1.985,38,0.774,82,0.863,91,0.42,101,1.611,102,2.851,109,2.834,572,1.966,573,3.827,579,6.269,581,2.991,582,3.941,588,4.172,590,4.137,592,3.827,593,1.642,795,3.932,798,4.716,799,3.517,1030,2.991,1336,3.941,1337,5.042,1338,5.451,1339,5.042,1340,5.451,1341,4.487,1342,4.487,1343,4.487,1344,4.487,1345,4.487,1346,4.487,1347,4.487,1348,4.487,1349,4.487,1350,4.487,1351,4.487,1352,6.041,1353,5.306]],["title/controllers/PostsController.html",[11,1.562,1354,3.151]],["body/controllers/PostsController.html",[0,0.098,3,0.05,4,0.05,5,0.045,7,0.055,8,0.011,9,0.004,10,0.004,11,0.686,13,0.707,15,0.894,16,0.222,17,0.314,18,3.967,19,1.829,20,1.922,21,1.829,22,1.829,23,1.829,24,1.829,25,1.829,26,1.006,27,1.829,28,1.922,29,0.462,34,2.294,38,0.651,39,0.965,82,0.711,84,1.349,85,0.984,86,1.241,88,0.73,91,0.175,92,0.584,93,2.468,97,2.875,101,1.459,102,2.347,104,3.573,105,2.562,109,2.753,110,1.241,111,3.738,116,2.954,119,3.823,140,3.573,141,1.1,142,1.006,143,1.294,144,1.384,145,1.384,147,4.293,148,3.901,150,1.496,162,3.815,164,1.829,166,1.547,169,1.014,170,1.646,187,1.747,218,0.666,229,2.539,422,1.486,424,1.646,425,3.56,432,4.405,434,2.301,438,3.573,444,1.1,445,1.006,446,0.928,448,1.294,449,1.294,450,1.22,451,1.22,452,1.22,453,1.22,454,1.22,455,1.22,456,1.22,460,1.384,461,4.431,563,3.033,573,2.612,638,4.122,733,3.219,792,3.219,800,3.219,815,3.219,886,2.737,887,2.737,897,1.646,898,1.646,1354,2.301,1355,1.646,1356,4.724,1357,3.513,1358,3.513,1359,2.737,1360,3.513,1361,3.513,1362,3.513,1363,3.513,1364,3.513,1365,2.737,1366,3.513,1367,2.737,1368,1.646,1369,1.874,1370,2.737,1371,4.456,1372,5.583,1373,1.874,1374,1.646,1375,1.874,1376,3.116,1377,3.116,1378,1.874,1379,1.646,1380,1.874,1381,4,1382,1.874,1383,1.646,1384,1.874,1385,1.874,1386,1.646,1387,1.874,1388,2.488,1389,1.874,1390,1.646,1391,1.874,1392,1.874,1393,1.646,1394,1.874,1395,1.874,1396,1.646,1397,1.874,1398,1.874,1399,1.646,1400,3.033,1401,1.874,1402,3.116,1403,1.874,1404,1.646,1405,3.219,1406,1.874,1407,1.874,1408,1.646,1409,3.033,1410,1.874,1411,1.874,1412,4.661,1413,2.603,1414,1.646,1415,1.646,1416,1.646,1417,1.646,1418,1.646,1419,1.646,1420,1.646,1421,1.646,1422,1.646,1423,1.646,1424,1.646,1425,1.646,1426,1.646,1427,1.874,1428,1.874,1429,1.874,1430,1.874,1431,1.874,1432,1.874,1433,1.874,1434,1.874,1435,3.116,1436,1.874,1437,1.874,1438,1.874,1439,1.874,1440,1.874,1441,1.874,1442,1.874,1443,1.874,1444,1.874,1445,1.874,1446,1.874,1447,1.874,1448,1.874,1449,1.874,1450,1.874,1451,1.874,1452,1.874,1453,1.874,1454,1.874]],["title/modules/PostsModule.html",[56,1.389,268,2.947]],["body/modules/PostsModule.html",[0,0.281,3,0.142,4,0.142,5,0.128,7,0.156,8,0.011,9,0.008,10,0.008,13,2.565,16,0.279,17,0.9,56,2.212,58,2.387,59,3.125,63,4.843,65,3.501,66,2.769,67,2.564,69,3.241,71,3.99,74,4.292,268,5.953,269,4.625,700,4.723,1354,5.504,1413,5.37,1414,4.723,1455,4.723,1456,5.377,1457,4.723,1458,5.377,1459,5.377]],["title/injectables/PostsService.html",[76,0.756,1413,2.777]],["body/injectables/PostsService.html",[0,0.095,3,0.048,4,0.048,5,0.043,7,0.053,8,0.011,9,0.004,10,0.004,16,0.202,17,0.305,34,1.697,38,0.658,76,0.539,77,0.628,79,0.731,80,1.257,81,2.833,82,0.72,84,1.367,85,1.017,86,1.257,87,1.453,88,0.709,91,0.17,92,0.57,93,2.458,101,1.451,109,2.97,110,1.229,111,3.717,115,2.979,119,3.483,166,1.532,169,2.396,211,1.79,218,0.647,229,2.816,244,2.52,308,3.613,422,1.45,432,2.686,443,1.185,446,0.901,517,1.453,520,1.257,525,3.646,539,1.453,544,1.632,545,3.984,563,2.979,573,3.273,574,4.02,576,2.102,597,3.653,600,2.428,604,1.257,712,1.344,717,2.671,723,4.978,730,1.599,733,3.161,792,3.161,798,4.033,799,3.007,800,3.161,815,3.161,846,1.453,1329,1.453,1337,4.696,1339,4.063,1357,3.441,1358,2.671,1359,2.671,1360,2.671,1361,2.671,1362,2.671,1363,2.671,1364,2.671,1365,2.671,1366,2.671,1367,2.671,1368,1.599,1374,2.671,1379,2.671,1383,2.671,1386,2.671,1388,1.453,1390,2.671,1393,2.671,1396,2.671,1399,2.671,1400,2.979,1404,2.671,1405,3.161,1408,2.671,1409,2.979,1413,1.979,1415,1.599,1416,1.599,1417,1.599,1418,1.599,1419,1.599,1420,1.599,1421,1.599,1422,1.599,1423,1.599,1424,1.599,1425,1.599,1426,1.599,1460,1.599,1461,1.82,1462,1.82,1463,1.82,1464,1.82,1465,1.82,1466,1.82,1467,1.82,1468,1.82,1469,1.82,1470,1.82,1471,1.82,1472,1.82,1473,1.453,1474,1.82,1475,3.041,1476,3.041,1477,1.82,1478,1.82,1479,2.671,1480,3.041,1481,1.82,1482,1.599,1483,1.82,1484,5.09,1485,1.82,1486,3.917,1487,1.82,1488,1.82,1489,3.041,1490,1.82,1491,6.121,1492,1.82,1493,2.671,1494,1.82,1495,1.82,1496,1.599,1497,1.82,1498,1.82,1499,3.041,1500,1.82,1501,1.82,1502,1.599,1503,1.82,1504,1.82,1505,1.82,1506,3.041,1507,1.82,1508,3.041,1509,1.82,1510,3.041,1511,1.82,1512,1.82]],["title/modules/PrismaModule.html",[56,1.389,269,2.392]],["body/modules/PrismaModule.html",[0,0.297,3,0.15,4,0.15,5,0.135,7,0.165,8,0.01,9,0.008,10,0.008,16,0.264,17,0.951,56,2.29,58,2.522,59,3.236,65,3.624,66,2.926,67,2.709,69,3.355,81,4.522,269,4.753,286,5.617,287,3.698,484,4.86,1043,6.181,1513,4.991,1514,4.991,1515,4.991,1516,5.682,1517,5.682]],["title/injectables/PrismaService.html",[76,0.756,81,2.198]],["body/injectables/PrismaService.html",[0,0.256,3,0.129,4,0.129,5,0.116,7,0.142,8,0.011,9,0.008,10,0.008,16,0.221,17,0.819,38,0.458,76,1.134,77,1.687,79,2.864,81,3.294,82,0.789,84,0.97,85,0.707,86,0.892,91,0.458,92,1.199,93,2.536,110,1.3,184,1.904,358,1.966,360,3.184,525,3.529,933,4.418,1518,4.297,1519,7.128,1520,6.397,1521,8.047,1522,8.047,1523,4.892,1524,6.397,1525,6.035,1526,4.892,1527,3.612,1528,4.892,1529,4.892,1530,3.905,1531,4.892,1532,4.297,1533,4.892,1534,4.892,1535,4.892,1536,4.892,1537,4.892,1538,4.892]],["title/classes/ProfileEntity.html",[0,0.223,1539,2.777]],["body/classes/ProfileEntity.html",[0,0.264,2,0.525,3,0.07,4,0.07,5,0.063,7,0.077,8,0.011,9,0.005,10,0.005,16,0.197,29,0.653,34,1.196,38,0.78,82,0.787,85,0.944,91,0.248,101,1.591,102,2.598,132,2.738,138,3.457,218,2.84,243,3.658,245,3.933,373,1.311,407,1.723,425,1.421,544,2.209,572,1.339,581,3.789,588,2.843,590,2.5,592,3.36,593,0.969,601,3.941,604,3.487,741,4.342,742,4.006,743,2.114,750,3.039,751,3.039,753,4.822,756,3.039,767,2.114,768,2.114,769,2.114,772,2.114,773,2.114,774,2.114,775,4.822,803,2.307,933,2.843,1010,2.679,1012,3.286,1198,2.114,1320,2.326,1353,4.435,1539,2.679,1540,2.326,1541,5.986,1542,4.435,1543,5.986,1544,4.031,1545,4.435,1546,4.031,1547,4.435,1548,4.435,1549,4.924,1550,3.615,1551,3.615,1552,3.615,1553,2.326,1554,5.002,1555,2.648,1556,2.326,1557,3.615,1558,5.002,1559,2.326,1560,4.031,1561,2.648,1562,3.615,1563,2.648,1564,4.435,1565,2.326,1566,2.648,1567,2.326,1568,3.615,1569,3.615,1570,2.326,1571,2.648,1572,2.648,1573,2.326,1574,2.326,1575,4.205,1576,2.326,1577,4.435,1578,2.326,1579,2.648,1580,3.286,1581,3.286,1582,2.326,1583,2.648,1584,2.648,1585,2.326,1586,2.648,1587,2.326,1588,3.615,1589,2.648,1590,1.955,1591,4.116,1592,2.326,1593,1.955,1594,1.955,1595,2.648,1596,2.648,1597,2.114,1598,2.326,1599,2.648,1600,2.648,1601,2.326,1602,2.648,1603,2.648,1604,2.648,1605,2.648,1606,2.648,1607,2.648,1608,2.648,1609,2.648,1610,2.648,1611,2.648]],["title/classes/ReactionsPost.html",[0,0.223,1400,2.777]],["body/classes/ReactionsPost.html",[0,0.381,2,1.194,3,0.159,4,0.159,5,0.143,7,0.212,8,0.011,9,0.009,10,0.009,16,0.252,29,1.486,34,1.751,358,2.242,573,4.088,736,2.983,794,4.161,795,3.921,796,4.809,797,5.822,798,4.161,799,3.103,1337,4.449,1338,4.809,1339,4.449,1340,4.809,1400,4.747,1409,3.921,1612,4.809]],["title/interfaces/Response.html",[205,2.29,1022,2.777]],["body/interfaces/Response.html",[0,0.294,3,0.149,4,0.149,5,0.134,7,0.204,8,0.011,9,0.008,10,0.008,16,0.263,17,0.943,38,0.527,76,1.24,91,0.527,166,1.28,184,2.192,205,3.755,244,4.055,353,4.108,355,3.306,572,2.277,820,3.889,822,3.473,823,4.833,825,4.833,826,4.833,829,3.665,895,3.889,1022,3.665,1061,3.889,1108,4.158,1613,4.495,1614,6.688,1615,4.947,1616,4.947]],["title/guards/RolesGuard.html",[302,3.151,1617,3.407]],["body/guards/RolesGuard.html",[0,0.258,3,0.131,4,0.131,5,0.117,7,0.144,8,0.011,9,0.008,10,0.008,16,0.247,17,0.828,30,3.049,38,0.603,46,2.447,76,1.142,79,1.986,82,0.672,84,1.276,85,0.931,86,1.174,88,1.924,91,0.463,92,1.208,105,2.287,110,0.901,166,1.628,184,1.924,211,2.47,278,3.414,302,4.755,308,2.121,324,6.442,349,6.667,350,4.342,352,5.657,353,4.455,355,2.901,368,4.342,369,4.342,395,2.545,440,4.342,1030,3.189,1618,4.342,1619,4.943,1620,4.943,1621,4.943,1622,6.44,1623,4.943,1624,4.342,1625,4.342,1626,6.44,1627,4.943,1628,4.943,1629,4.943]],["title/classes/RtGuard.html",[0,0.223,439,3.151]],["body/classes/RtGuard.html",[0,0.33,2,1.254,3,0.167,4,0.167,5,0.15,7,0.184,8,0.01,9,0.009,10,0.009,16,0.218,79,3.218,82,0.661,356,5.05,357,3.902,358,1.945,359,5.556,360,4.117,439,5.545,1177,4.671,1630,5.556,1631,6.326]],["title/injectables/RtStrategy.html",[76,0.756,482,2.947]],["body/injectables/RtStrategy.html",[0,0.257,3,0.13,4,0.13,5,0.117,7,0.143,8,0.011,9,0.008,10,0.008,16,0.271,17,0.823,38,0.601,46,3.751,76,1.138,77,1.696,79,2.579,82,0.67,84,1.272,85,0.928,86,1.17,91,0.46,92,1.203,110,0.897,166,1.118,187,2.756,210,2.639,211,1.6,287,3.2,308,2.11,357,3.033,358,1.512,360,3.2,373,3.178,374,4.319,375,5.231,377,4.433,381,5.593,382,3.925,383,4.319,384,3.925,385,3.2,386,4.177,388,3.925,389,4.319,390,4.319,391,5.638,392,4.319,393,4.319,396,4.319,400,4.739,482,4.433,498,3.925,524,4.319,844,4.177,1177,3.631,1632,4.319,1633,4.917,1634,6.418,1635,4.917,1636,4.917,1637,4.917,1638,4.917]],["title/classes/SignupDto.html",[0,0.223,420,2.777]],["body/classes/SignupDto.html",[0,0.33,2,1.254,3,0.167,4,0.167,5,0.15,7,0.184,8,0.01,9,0.009,10,0.009,16,0.259,29,1.56,358,1.945,420,4.888,430,3.258,506,3.395,541,3.713,736,3.132,1118,4.117,1119,5.556,1120,5.05,1639,5.556]],["title/injectables/TimeoutInterceptor.html",[76,0.756,1640,3.407]],["body/injectables/TimeoutInterceptor.html",[0,0.294,3,0.149,4,0.149,5,0.134,7,0.164,8,0.011,9,0.008,10,0.008,16,0.263,17,0.943,38,0.527,47,4.158,76,1.24,77,1.942,82,0.588,84,1.116,85,0.814,86,1.027,91,0.527,92,1.312,110,1.027,166,1.28,184,2.192,353,4.675,355,3.306,820,4.833,821,5.167,822,4.696,823,5.5,825,5.258,826,4.833,829,3.665,1108,4.158,1640,5.586,1641,4.947,1642,5.632,1643,5.632]],["title/injectables/TransformInterceptor.html",[76,0.756,1061,2.947]],["body/injectables/TransformInterceptor.html",[0,0.283,3,0.143,4,0.143,5,0.129,7,0.199,8,0.011,9,0.008,10,0.008,16,0.258,17,0.908,38,0.507,76,1.211,77,1.87,82,0.566,84,1.075,85,0.784,86,0.989,91,0.507,92,1.281,110,0.989,166,1.232,184,2.111,205,2.91,244,3.384,353,4.612,355,4.011,820,5.168,821,4.004,822,4.616,823,5.426,825,5.168,826,4.72,829,3.529,1022,3.529,1061,4.72,1108,4.004,1613,4.329,1614,4.763,1615,4.763,1616,4.763,1644,5.423]],["title/classes/UpdateCommentTextDto.html",[0,0.223,1405,2.947]],["body/classes/UpdateCommentTextDto.html",[0,0.33,2,1.254,3,0.167,4,0.167,5,0.15,7,0.184,8,0.01,9,0.009,10,0.009,16,0.259,29,1.56,169,2.058,358,1.945,570,4.117,576,3.395,735,4.671,736,3.132,737,5.05,738,5.05,1405,5.187,1645,5.556]],["title/classes/UpdateConversationDto.html",[0,0.223,657,2.505]],["body/classes/UpdateConversationDto.html",[0,0.407,2,0.95,3,0.127,4,0.127,5,0.114,7,0.218,8,0.011,9,0.008,10,0.008,16,0.244,29,1.182,34,2.051,38,0.702,82,0.737,85,1.02,86,1.459,91,0.449,101,1.617,105,1.702,109,1.989,132,3.133,169,1.56,358,2.305,422,2.285,572,2.054,590,3.125,592,3.01,593,1.754,596,2.956,598,3.387,599,3.387,601,3.251,627,4.204,641,2.813,657,3.705,661,2.813,665,2.813,740,2.686,742,2.285,803,2.686,804,2.956,808,3.31,809,5.18,812,5.18,813,3.539,814,3.12,1646,4.793,1647,4.793,1648,4.793]],["title/classes/UpdateMembersConversationDto.html",[0,0.223,661,2.505]],["body/classes/UpdateMembersConversationDto.html",[0,0.415,2,1.006,3,0.134,4,0.134,5,0.121,7,0.223,8,0.011,9,0.008,10,0.008,16,0.251,29,1.251,34,1.475,38,0.613,82,0.53,85,0.733,91,0.475,101,1.612,105,1.802,109,2.106,132,2.253,169,1.651,358,2.357,422,2.42,572,2.132,590,3.244,592,3.124,593,1.857,596,3.13,598,3.516,599,4.114,601,3.374,627,4.297,641,2.979,657,2.979,661,3.845,665,2.979,740,2.844,742,2.42,803,2.844,804,3.13,808,3.505,809,4.524,812,5.295,813,3.747,814,3.303,1649,5.075]],["title/classes/UpdateMessageDto.html",[0,0.223,1152,2.947]],["body/classes/UpdateMessageDto.html",[0,0.306,2,1.161,3,0.155,4,0.155,5,0.139,7,0.17,8,0.01,9,0.009,10,0.009,16,0.248,38,0.671,82,0.749,91,0.548,101,1.514,169,2.521,358,1.801,422,2.793,572,2.333,645,5.351,784,4.666,786,4.676,790,5.145,812,4.952,1152,4.952,1650,6.806,1651,5.858,1652,5.145,1653,4.325,1654,5.858]],["title/classes/UpdatePasswordDto.html",[0,0.223,428,2.947]],["body/classes/UpdatePasswordDto.html",[0,0.33,2,1.254,3,0.167,4,0.167,5,0.15,7,0.184,8,0.01,9,0.009,10,0.009,16,0.259,29,1.56,358,1.945,428,5.187,506,3.395,736,3.132,1118,4.117,1120,5.05,1655,5.556,1656,6.326,1657,5.556,1658,5.556]],["title/classes/UpdatePostDto.html",[0,0.223,1409,2.777]],["body/classes/UpdatePostDto.html",[0,0.381,2,1.194,3,0.159,4,0.159,5,0.143,7,0.212,8,0.011,9,0.009,10,0.009,16,0.252,29,1.486,34,1.751,358,2.242,573,4.088,736,2.983,794,4.161,795,3.921,796,4.809,797,5.822,798,4.161,799,3.103,1337,4.449,1338,4.809,1339,4.449,1340,4.809,1400,3.921,1409,4.747,1612,4.809]],["title/classes/UpdateRolesConversationDto.html",[0,0.223,665,2.505]],["body/classes/UpdateRolesConversationDto.html",[0,0.409,2,0.965,3,0.129,4,0.129,5,0.116,7,0.219,8,0.011,9,0.008,10,0.008,16,0.246,29,1.2,34,1.415,38,0.706,82,0.742,85,0.703,91,0.455,101,1.62,105,1.729,109,2.02,132,2.16,169,1.584,358,2.319,422,2.321,572,2.074,590,3.157,592,3.04,593,1.781,596,4.385,598,4.049,599,4.049,601,3.283,627,4.229,641,2.857,657,2.857,661,2.857,665,3.742,740,2.728,742,2.321,803,2.728,804,3.002,808,3.361,809,5.211,812,5.211,813,3.594,814,3.167,1659,4.867,1660,4.867,1661,4.867]],["title/classes/UpdateUserAvatarDto.html",[0,0.223,130,2.505]],["body/classes/UpdateUserAvatarDto.html",[0,0.413,2,1.213,3,0.162,4,0.162,5,0.146,7,0.23,8,0.01,9,0.009,10,0.009,16,0.254,29,1.51,125,3.593,130,4.323,132,2.718,136,3.593,138,3.431,358,2.428,736,3.031,1539,4.793,1662,4.52,1663,4.52,1664,4.887,1665,5.879]],["title/classes/UpdateUserCoverDto.html",[0,0.223,136,2.505]],["body/classes/UpdateUserCoverDto.html",[0,0.413,2,1.213,3,0.162,4,0.162,5,0.146,7,0.23,8,0.01,9,0.009,10,0.009,16,0.254,29,1.51,125,3.593,130,3.593,132,2.718,136,4.323,138,3.431,358,2.428,736,3.031,1539,4.793,1662,4.52,1663,4.52,1664,4.887,1665,5.879]],["title/classes/UpdateUserProfileDto.html",[0,0.223,125,2.505]],["body/classes/UpdateUserProfileDto.html",[0,0.313,2,0.697,3,0.093,4,0.093,5,0.084,7,0.174,8,0.01,9,0.006,10,0.006,16,0.176,29,0.867,34,1.022,38,0.753,82,0.84,85,0.866,91,0.329,101,1.552,102,2.775,125,2.989,130,2.063,132,2.915,136,2.063,138,3.68,218,2.727,243,3.214,245,3.517,358,2.018,425,1.887,544,1.887,572,1.657,581,3.598,604,2.428,736,1.741,741,4.664,742,3.879,743,2.806,750,2.596,751,2.596,753,4.422,756,2.596,775,3.761,803,1.97,806,6.424,1010,2.288,1012,2.806,1539,5.387,1541,5.768,1542,4.473,1543,5.768,1544,4.065,1545,4.473,1546,4.065,1547,4.473,1548,4.473,1549,4.781,1550,3.088,1551,3.088,1552,3.088,1553,3.088,1554,4.473,1556,3.088,1557,3.088,1558,4.473,1559,3.088,1560,2.806,1562,4.473,1564,3.088,1565,3.088,1567,3.088,1568,3.088,1569,3.088,1570,3.088,1573,3.088,1574,3.088,1575,3.761,1576,3.088,1577,3.088,1578,3.088,1580,2.806,1581,2.806,1582,3.088,1585,3.088,1587,3.088,1588,3.088,1662,2.596,1663,2.596,1664,2.806,1665,4.065,1666,3.515,1667,3.515,1668,3.515,1669,3.515,1670,3.515,1671,3.515,1672,3.515,1673,3.515,1674,3.515,1675,3.515,1676,3.515]],["title/classes/UserEntity.html",[0,0.223,1118,2.777]],["body/classes/UserEntity.html",[0,0.265,2,0.692,3,0.092,4,0.092,5,0.083,7,0.102,8,0.011,9,0.006,10,0.006,16,0.206,29,0.86,34,2.227,38,0.742,82,0.726,85,0.946,91,0.327,101,1.601,102,2.396,218,2.885,373,1.728,430,4.022,506,3.2,541,4.079,572,1.648,581,3.24,590,3.589,592,3.12,593,1.277,601,3.733,614,5.291,638,5.352,741,2.048,742,3.782,750,4.832,751,3.741,753,4.832,755,3.065,756,3.741,760,3.065,761,4.45,762,5.547,765,4.45,766,4.45,767,2.785,768,2.785,769,2.785,770,2.41,771,2.41,772,2.785,773,2.785,774,2.785,775,4.832,776,4.45,777,3.065,1118,3.297,1657,5.238,1658,5.238,1677,3.065,1678,3.489,1679,7.661,1680,5.066,1681,3.489,1682,5.066,1683,6.949,1684,3.489,1685,3.489,1686,3.489,1687,3.489,1688,3.489,1689,5.066,1690,3.489,1691,5.066,1692,5.066,1693,5.066,1694,5.066,1695,5.066,1696,3.489,1697,3.489,1698,3.489,1699,3.489,1700,3.489,1701,3.489,1702,3.489,1703,3.489]],["title/controllers/UsersController.html",[11,1.562,1704,3.151]],["body/controllers/UsersController.html",[0,0.122,3,0.061,4,0.061,5,0.055,7,0.068,8,0.011,9,0.004,10,0.004,11,0.852,13,0.878,15,1.109,16,0.233,17,0.39,18,3.811,19,2.182,20,2.293,21,2.182,22,2.182,23,2.182,24,2.182,25,2.182,26,1.249,27,2.182,28,2.293,29,0.574,34,2.265,38,0.631,39,1.198,82,0.677,84,1.286,85,0.937,86,1.183,88,0.906,91,0.218,92,0.697,93,2.419,96,3.705,97,3.811,98,3.705,99,3.705,101,1.518,102,2.237,104,3.206,105,2.945,106,2.044,109,2.956,110,1.183,111,3.634,116,2.763,119,3.858,120,1.857,122,4.268,125,3.112,129,1.857,130,3.112,132,1.65,135,1.857,136,3.112,138,2.083,140,4.002,141,1.366,142,1.249,143,1.607,144,1.718,145,1.718,146,1.718,147,4.155,148,3.776,153,1.857,154,1.857,155,1.857,156,1.857,158,3.27,162,3.635,163,1.435,164,3.807,166,1.474,169,2.26,171,2.044,173,2.044,175,3.915,176,2.044,178,2.044,218,0.826,387,1.607,407,2.419,415,3.27,425,3.481,430,1.198,438,4.268,441,1.718,444,1.366,445,1.249,446,1.152,448,1.607,449,1.607,450,1.514,451,1.514,452,1.514,453,1.514,454,1.514,455,1.514,456,1.514,461,4.222,506,3.11,541,2.182,865,3.265,871,3.265,1704,2.745,1705,2.044,1706,4.077,1707,4.077,1708,4.077,1709,4.077,1710,2.044,1711,2.327,1712,2.327,1713,2.327,1714,2.044,1715,2.327,1716,2.327,1717,3.265,1718,2.044,1719,2.327,1720,3.265,1721,2.327,1722,2.327,1723,2.327,1724,2.327,1725,2.327,1726,2.327,1727,2.327,1728,2.327,1729,2.044,1730,2.327,1731,2.327,1732,2.327,1733,2.044,1734,2.044,1735,2.044,1736,2.327,1737,2.327,1738,2.327,1739,2.327,1740,2.327,1741,2.327,1742,2.327,1743,2.327,1744,2.327,1745,2.327,1746,2.327,1747,2.327,1748,2.327,1749,2.327]],["title/modules/UsersModule.html",[56,1.389,63,2.505]],["body/modules/UsersModule.html",[0,0.244,3,0.123,4,0.123,5,0.111,7,0.136,8,0.011,9,0.007,10,0.007,13,2.339,16,0.274,17,0.781,38,0.436,40,3.035,56,2.017,58,2.07,59,2.85,63,4.979,65,3.192,66,2.402,67,2.224,69,2.955,71,3.638,75,4.096,82,0.487,84,0.924,85,0.674,86,0.85,92,0.874,110,0.85,116,2.955,158,5.268,163,2.876,201,4.034,232,2.876,262,4.898,269,4.451,271,4.096,272,5.444,273,6.517,275,5.444,329,4.096,332,4.096,484,4.281,485,4.096,835,3.444,836,3.723,1704,5.141,1734,4.096,1750,4.096,1751,4.096,1752,4.664,1753,4.096,1754,4.664,1755,4.664,1756,4.664,1757,4.664,1758,4.664,1759,4.664]],["title/injectables/UsersService.html",[76,0.756,158,2.632]],["body/injectables/UsersService.html",[0,0.106,3,0.054,4,0.054,5,0.048,7,0.059,8,0.011,9,0.004,10,0.004,16,0.221,17,0.339,38,0.638,76,0.589,77,0.699,79,0.814,80,1.399,81,2.986,82,0.711,84,1.351,85,0.985,86,1.242,88,0.789,91,0.19,92,0.623,93,2.44,94,2.919,95,2.919,96,2.653,97,2.606,98,3.373,99,3.373,100,2.919,101,1.509,105,1.736,109,3.321,110,1.207,111,3.678,112,2.919,113,3.376,119,3.783,120,2.653,122,4.572,125,2.869,129,1.617,130,2.869,132,0.899,135,1.617,136,2.869,138,1.136,149,1.78,152,1.78,153,1.617,154,1.617,155,1.617,156,1.617,158,2.05,163,2.606,166,1.505,169,2.36,211,2.318,218,0.72,229,2.628,243,1.784,244,1.646,308,3.389,387,1.399,415,3.015,422,0.966,430,1.043,441,1.496,443,1.319,445,1.087,446,1.003,506,3.431,517,1.617,518,1.617,519,1.496,520,1.399,521,2.454,525,3.742,535,2.919,539,2.653,541,3.168,544,1.784,545,3.986,554,4.629,555,2.919,557,1.78,558,1.78,581,1.003,597,3.373,600,1.617,723,4.889,846,1.617,880,2.163,1030,1.003,1317,1.617,1482,4.294,1493,4.294,1706,2.919,1707,3.711,1708,2.919,1709,3.711,1710,2.919,1714,1.78,1717,4.294,1718,2.919,1729,1.78,1733,1.78,1735,1.78,1760,1.78,1761,2.026,1762,2.026,1763,2.026,1764,2.026,1765,2.026,1766,2.026,1767,2.026,1768,2.026,1769,2.026,1770,2.026,1771,2.026,1772,2.026,1773,3.324,1774,2.026,1775,2.026,1776,4.225,1777,3.324,1778,2.026,1779,3.324,1780,3.324,1781,2.026,1782,2.026,1783,2.026,1784,2.026,1785,2.026,1786,2.026,1787,2.026,1788,3.324,1789,2.026,1790,3.324,1791,3.324,1792,3.324,1793,2.026,1794,4.225,1795,2.026,1796,2.026,1797,3.324,1798,2.026]],["title/injectables/ValidationPipe.html",[76,0.756,1799,3.407]],["body/injectables/ValidationPipe.html",[0,0.363,3,0.123,4,0.123,5,0.11,7,0.135,8,0.011,9,0.007,10,0.007,16,0.24,17,0.777,38,0.757,76,1.095,77,1.6,82,0.645,84,1.225,85,0.893,86,1.126,91,0.434,92,1.158,93,2.076,101,0.87,110,1.126,166,1.579,184,1.806,187,3.893,211,2.409,229,1.991,373,2.298,525,2.298,544,2.49,545,3.02,581,2.298,593,1.699,634,2.601,876,3.02,1030,3.439,1048,4.567,1324,4.932,1325,5.427,1326,5.911,1327,6.504,1329,3.704,1330,5.427,1334,4.076,1335,4.076,1590,3.427,1653,3.427,1799,4.932,1800,4.076,1801,6.178,1802,6.178,1803,4.641,1804,7.405,1805,4.641,1806,4.641,1807,4.641,1808,4.932,1809,4.641,1810,4.076,1811,4.641,1812,4.641,1813,4.641]],["title/coverage.html",[1814,4.66]],["body/coverage.html",[0,0.441,1,0.925,5,0.041,6,1.513,8,0.011,9,0.003,10,0.003,11,2.354,12,1.272,14,1.513,31,1.272,38,0.161,56,0.561,64,1.19,70,1.272,76,1.367,78,1.513,81,0.887,89,1.513,90,1.513,105,0.612,113,1.19,116,0.821,125,1.011,130,1.011,136,1.011,158,1.791,182,1.375,183,1.513,192,1.063,194,1.121,205,0.925,229,0.739,235,1.272,236,1.513,251,1.121,281,1.272,291,1.272,297,1.272,302,1.272,336,1.375,340,2.726,341,1.513,348,1.513,371,1.19,372,1.513,397,1.272,398,1.513,415,1.063,420,1.121,428,1.19,435,1.791,437,1.375,438,1.19,439,1.272,443,1.121,444,1.011,445,0.925,446,2.818,482,1.19,499,1.513,519,1.272,520,1.19,521,1.272,522,1.375,544,4.796,570,1.121,571,1.513,594,1.272,595,1.513,615,1.272,616,1.513,627,0.966,636,1.19,641,1.011,643,2.006,647,1.063,652,1.121,657,1.011,661,1.011,665,1.011,670,1.89,701,1.513,713,1.375,733,1.19,734,1.513,735,2.78,739,1.513,740,3.351,770,1.19,771,1.19,784,1.121,785,1.513,786,2.318,792,1.19,793,1.513,794,3.052,795,1.121,800,1.19,801,1.513,802,1.513,809,3.052,815,1.19,816,1.513,818,1.375,819,1.513,835,1.272,836,1.375,837,1.513,850,1.272,851,1.513,888,1.375,889,1.375,890,1.375,891,1.121,900,1.272,918,2.318,930,1.375,932,3.939,948,1.513,960,2.318,962,1.19,963,1.513,989,1.375,990,1.513,1017,1.375,1018,1.513,1022,1.89,1023,1.272,1024,1.513,1035,5.003,1059,1.272,1061,1.19,1063,1.513,1064,1.513,1068,1.513,1072,1.375,1076,1.513,1105,1.513,1117,1.513,1118,1.121,1121,1.272,1122,1.513,1130,1.121,1152,1.19,1186,1.513,1225,1.272,1226,1.513,1247,1.121,1273,1.513,1286,1.375,1308,1.513,1321,1.375,1322,1.513,1323,1.513,1336,1.513,1354,1.272,1355,1.513,1400,1.121,1405,1.19,1409,1.121,1413,1.89,1460,1.513,1473,1.375,1518,1.513,1527,1.272,1539,1.121,1540,1.513,1593,1.272,1594,1.272,1612,2.318,1613,2.318,1617,1.375,1618,1.513,1630,1.513,1632,1.513,1639,1.513,1640,1.375,1641,1.513,1645,1.513,1650,1.513,1655,1.513,1662,2.78,1663,2.78,1677,1.513,1704,1.272,1705,1.513,1760,1.513,1799,1.375,1800,1.513,1814,1.375,1815,1.272,1816,1.723,1817,1.723,1818,1.513,1819,8.265,1820,8.632,1821,1.513,1822,2.551,1823,4.419,1824,1.513,1825,2.551,1826,4.419,1827,5.35,1828,2.551,1829,4.419,1830,2.551,1831,3.765,1832,1.513,1833,1.513,1834,7.437,1835,7.158,1836,2.551,1837,1.513,1838,1.513,1839,1.723,1840,1.723,1841,1.513,1842,1.375,1843,1.513,1844,1.513,1845,5,1846,4.934,1847,1.513,1848,1.513,1849,1.513,1850,3.307,1851,1.513,1852,2.318,1853,1.513,1854,3.307,1855,1.513,1856,1.513,1857,1.513,1858,1.513,1859,1.513,1860,1.513,1861,1.513,1862,2.318,1863,2.318,1864,1.375,1865,1.375,1866,2.318,1867,2.318,1868,2.318,1869,2.551,1870,1.513,1871,1.513,1872,1.513,1873,3.765,1874,1.513,1875,3.005,1876,1.375,1877,1.513,1878,3.765,1879,1.723,1880,1.723,1881,2.318,1882,2.551,1883,1.513,1884,2.318,1885,2.551,1886,1.513,1887,1.723,1888,1.723]],["title/dependencies.html",[59,2.362,1889,3.124]],["body/dependencies.html",[0,0.325,8,0.011,9,0.007,10,0.007,17,0.785,29,1.156,59,2.155,189,3.237,210,3.337,278,3.237,287,3.05,289,3.741,300,4.117,357,2.891,377,3.237,385,4.838,386,4.047,489,3.741,593,1.715,712,3.461,829,3.05,885,5.462,969,2.891,970,4.117,1159,4.117,1162,5.462,1163,3.741,1285,3.741,1326,3.741,1530,3.741,1590,3.461,1652,4.117,1653,3.461,1890,4.687,1891,6.219,1892,4.687,1893,4.687,1894,7.736,1895,4.687,1896,6.219,1897,4.687,1898,4.687,1899,4.687,1900,6.219,1901,4.687,1902,4.687,1903,4.687,1904,4.117,1905,4.687,1906,4.687,1907,4.687,1908,4.117,1909,4.687,1910,4.117,1911,4.117,1912,4.687,1913,4.687,1914,4.117,1915,4.687,1916,4.117,1917,4.687,1918,4.117,1919,4.687,1920,4.687,1921,4.687,1922,4.687,1923,4.687,1924,4.687,1925,3.741,1926,4.687,1927,4.687,1928,4.687,1929,4.687,1930,4.687,1931,4.687,1932,6.219,1933,4.687,1934,4.117,1935,4.687,1936,4.687]],["title/miscellaneous/enumerations.html",[1937,2.088,1938,4.512]],["body/miscellaneous/enumerations.html",[1,3.727,8,0.011,9,0.007,10,0.007,30,3.431,34,1.617,91,0.372,105,2.467,218,1.976,969,3.431,1048,5.529,1317,4.441,1318,4.886,1546,4.441,1580,4.441,1581,3.177,1597,4.441,1937,2.336,1938,3.495,1939,5.563,1940,8.248,1941,5.563,1942,5.563,1943,5.563,1944,5.563,1945,5.563,1946,5.563,1947,5.563,1948,5.563,1949,5.563,1950,5.563,1951,3.979,1952,3.979,1953,3.979,1954,3.979,1955,5.563,1956,5.563,1957,5.563,1958,5.563,1959,5.563,1960,5.563,1961,5.563,1962,3.979,1963,5.563,1964,5.563,1965,4.441,1966,5.563,1967,5.563,1968,5.563,1969,5.563,1970,5.563,1971,3.979,1972,3.495,1973,6.414,1974,4.886,1975,5.563,1976,5.563,1977,5.563,1978,3.979,1979,3.979,1980,5.563,1981,5.563,1982,3.979]],["title/classes/fullNameValidator.html",[0,0.223,1593,3.151]],["body/classes/fullNameValidator.html",[0,0.348,2,1.031,3,0.137,4,0.137,5,0.124,7,0.151,8,0.011,9,0.008,10,0.008,16,0.18,38,0.623,82,0.695,84,1.319,85,1.118,86,1.213,91,0.487,92,1.248,93,1.554,101,1.451,110,1.213,166,1.512,184,2.59,211,1.692,340,3.207,373,3.295,395,2.678,576,2.791,593,1.903,1030,3.295,1575,3.84,1593,4.914,1862,4.151,1983,5.068,1984,4.596,1985,4.596,1986,5.744,1987,5.2,1988,5.649,1989,4.914,1990,5.2,1991,4.596,1992,4.151,1993,3.84,1994,3.84,1995,3.591]],["title/miscellaneous/functions.html",[1937,2.088,1996,4.512]],["body/miscellaneous/functions.html",[8,0.01,9,0.007,10,0.007,15,3.389,38,0.763,84,1.616,85,1.178,86,1.486,91,0.393,101,1.596,110,1.358,111,3.147,192,3.561,194,4.295,232,4.596,581,3.978,614,3.988,876,2.733,888,4.609,889,4.609,890,4.609,912,5.072,1030,2.859,1047,3.101,1048,2.59,1072,5.268,1198,4.609,1525,4.609,1527,3.101,1592,3.689,1841,3.689,1842,4.609,1852,3.352,1854,3.689,1855,5.072,1856,5.072,1858,3.689,1859,5.072,1860,3.689,1861,5.072,1874,3.689,1875,6.146,1876,3.352,1877,3.689,1881,3.352,1882,6.763,1883,3.689,1937,2.465,1996,3.689,1997,4.199,1998,4.199,1999,3.689,2000,6.599,2001,3.689,2002,3.689,2003,4.199,2004,4.199,2005,4.199,2006,4.199,2007,4.199,2008,4.199,2009,4.199,2010,4.199,2011,4.199,2012,4.199,2013,4.199,2014,3.689,2015,4.199,2016,4.199,2017,4.199,2018,4.199,2019,4.199]],["title/classes/imageValidator.html",[0,0.223,1864,3.407]],["body/classes/imageValidator.html",[0,0.337,2,0.982,3,0.131,4,0.131,5,0.118,7,0.144,8,0.011,9,0.008,10,0.008,16,0.171,38,0.604,82,0.674,84,1.279,85,1.037,86,1.176,91,0.464,92,1.21,93,1.481,101,1.477,110,1.176,111,3.076,166,1.466,175,5.296,184,2.511,211,2.099,308,2.126,373,3.551,395,3.322,563,3.225,593,1.814,1030,3.194,1863,3.956,1864,5.15,1865,3.956,1983,4.954,1984,4.455,1985,4.455,1986,5.68,1988,5.577,1991,4.455,1995,3.422,2020,4.956,2021,4.956,2022,4.956,2023,4.353,2024,4.956,2025,7.173,2026,4.956]],["title/index.html",[91,0.333,2027,3.124,2028,3.124]],["body/index.html",[0,0.216,1,1.738,4,0.052,5,0.114,8,0.011,9,0.004,10,0.004,13,0.741,30,1.211,34,0.941,45,1.45,46,0.972,51,1.45,53,1.211,59,1.489,67,0.936,69,0.936,85,0.284,92,0.368,97,3.726,104,4.172,105,2.664,110,0.358,115,2.108,116,0.936,122,3.665,132,1.438,138,1.1,146,1.45,163,2.549,169,2.193,175,1.45,189,2.237,194,1.278,205,1.054,210,1.054,218,1.468,229,2.709,239,3.665,242,3.631,243,1.054,244,0.972,305,3.631,310,1.725,320,2.391,333,2.391,335,3.631,362,2.585,363,1.45,385,1.278,386,2.108,407,1.278,417,1.45,422,2.53,430,1.668,432,4.144,506,1.738,533,1.567,541,1.152,549,1.725,593,0.719,598,1.738,599,1.054,617,2.391,629,5.381,638,1.45,643,3.312,654,2.845,667,3.631,724,1.725,742,2.287,799,2.129,838,1.45,859,5.017,870,1.725,876,1.278,938,1.567,939,1.567,969,1.211,1031,1.725,1045,2.845,1051,1.725,1052,4.213,1054,1.725,1134,1.567,1161,1.567,1163,2.585,1177,1.45,1195,3.631,1227,1.725,1236,2.845,1255,1.725,1294,2.585,1312,1.725,1324,1.567,1356,2.585,1370,1.725,1371,3.299,1388,1.567,1479,1.725,1530,1.567,1532,2.845,1575,1.45,1590,1.45,1597,3.299,1598,1.725,1653,1.45,1720,2.845,1808,3.299,1814,1.567,1815,1.45,1842,1.567,1884,1.567,1904,1.725,1908,1.725,1910,3.631,1911,2.845,1916,1.725,1918,1.725,1925,5.224,1934,1.725,1965,1.567,1972,1.725,1974,1.725,2029,1.963,2030,1.725,2031,2.845,2032,1.963,2033,3.238,2034,4.796,2035,1.963,2036,1.725,2037,1.725,2038,1.963,2039,1.963,2040,1.963,2041,1.963,2042,1.963,2043,1.963,2044,1.963,2045,1.963,2046,3.238,2047,1.963,2048,1.963,2049,1.963,2050,1.963,2051,3.238,2052,1.963,2053,3.238,2054,1.963,2055,1.963,2056,1.963,2057,4.796,2058,1.963,2059,1.963,2060,1.963,2061,1.963,2062,1.963,2063,1.963,2064,1.963,2065,3.238,2066,1.963,2067,3.238,2068,3.238,2069,1.963,2070,1.963,2071,1.963,2072,1.963,2073,1.963,2074,6.544,2075,1.725,2076,1.963,2077,1.725,2078,1.963,2079,3.238,2080,1.963,2081,4.133,2082,1.963,2083,1.963,2084,3.238,2085,1.725,2086,1.963,2087,1.963,2088,1.963,2089,1.963,2090,1.725,2091,1.963,2092,1.963,2093,1.963,2094,1.963,2095,1.963,2096,1.963,2097,1.963,2098,3.238,2099,1.963,2100,1.963,2101,1.963,2102,1.963,2103,1.963,2104,1.963,2105,1.963,2106,1.963,2107,1.963,2108,1.963,2109,1.963,2110,3.238,2111,1.963,2112,3.238,2113,1.963,2114,1.963,2115,1.725,2116,1.963,2117,3.631,2118,1.963,2119,1.963,2120,1.963,2121,1.963,2122,1.963,2123,2.845,2124,1.963,2125,1.963,2126,1.963,2127,1.963,2128,1.963,2129,1.963,2130,1.963,2131,1.963,2132,1.963,2133,1.963,2134,1.963,2135,1.963,2136,1.725,2137,1.963,2138,1.963,2139,3.238,2140,1.963,2141,1.963,2142,4.661,2143,1.963,2144,1.963,2145,1.963,2146,1.963,2147,1.963,2148,1.963,2149,1.963,2150,3.238,2151,1.963,2152,1.963,2153,1.963,2154,1.963,2155,1.963,2156,1.963,2157,1.963,2158,1.963,2159,1.963,2160,1.963,2161,1.963,2162,5.306,2163,1.963,2164,1.963,2165,1.963,2166,1.963,2167,1.963,2168,1.963,2169,1.963,2170,1.725,2171,1.725,2172,1.725,2173,1.963,2174,1.963,2175,1.963,2176,1.963,2177,1.725,2178,1.725,2179,1.963,2180,1.725,2181,3.238,2182,1.963,2183,1.963,2184,1.963,2185,7.19,2186,3.238,2187,1.963,2188,3.238,2189,1.963,2190,1.963,2191,6.911,2192,1.963,2193,1.963,2194,3.238,2195,1.963,2196,1.963,2197,1.963,2198,3.238,2199,1.963,2200,1.963,2201,1.963,2202,1.963,2203,1.963,2204,3.238,2205,1.963,2206,3.238,2207,1.963,2208,1.963,2209,1.963,2210,3.631,2211,3.238,2212,1.963,2213,1.963,2214,1.963,2215,1.963,2216,1.963,2217,1.963,2218,3.238,2219,3.238,2220,1.963,2221,1.963,2222,1.963,2223,2.585,2224,1.963,2225,1.963,2226,1.963,2227,3.238,2228,1.963,2229,1.963,2230,1.963,2231,1.963,2232,1.963,2233,1.725,2234,1.963,2235,1.963,2236,1.963,2237,1.963,2238,1.963,2239,1.963,2240,1.963,2241,1.963,2242,1.963,2243,1.963,2244,1.963,2245,1.963,2246,1.963,2247,1.963,2248,3.238,2249,3.238,2250,1.963,2251,1.963,2252,1.963,2253,1.963,2254,1.963,2255,1.963,2256,1.963,2257,1.963,2258,1.963,2259,1.963,2260,3.238,2261,3.238,2262,1.963,2263,1.963,2264,1.963,2265,3.238,2266,1.963,2267,1.963,2268,3.238,2269,1.963,2270,1.963,2271,1.963,2272,1.963,2273,1.963,2274,1.963,2275,1.963,2276,3.238,2277,3.238,2278,3.238,2279,3.238,2280,1.963,2281,1.963,2282,1.963,2283,1.963,2284,1.963,2285,2.391,2286,1.963,2287,1.963,2288,1.725,2289,1.963,2290,1.725]],["title/license.html",[2027,3.124,2028,3.124,2285,2.626]],["body/license.html",[8,0.008,9,0.008,10,0.008,42,3.808,67,2.459,210,2.768,799,2.656,838,4.888,1040,4.53,1601,4.53,1815,3.808,2036,4.53,2223,4.117,2285,3.808,2288,6.421,2290,4.53,2291,4.53,2292,4.53,2293,4.117,2294,4.117,2295,6.62,2296,5.158,2297,5.158,2298,5.158,2299,5.158,2300,5.158,2301,5.158,2302,6.62,2303,8.493,2304,5.158,2305,5.158,2306,7.311,2307,5.158,2308,6.62,2309,5.158,2310,5.158,2311,5.158,2312,5.158,2313,5.158,2314,5.158,2315,5.158,2316,5.158,2317,5.158,2318,6.62,2319,5.158,2320,5.158,2321,5.158,2322,5.158,2323,5.158,2324,5.158,2325,5.158,2326,6.62,2327,6.62,2328,5.158,2329,5.158,2330,5.158,2331,5.158,2332,5.158,2333,5.158,2334,5.158,2335,5.158,2336,5.158,2337,5.158,2338,5.158,2339,5.158,2340,5.158,2341,5.158,2342,5.158,2343,5.158,2344,5.158,2345,5.158,2346,5.158,2347,5.158,2348,5.158,2349,5.158,2350,5.158,2351,5.158,2352,5.158,2353,5.158]],["title/modules.html",[58,2.592]],["body/modules.html",[8,0.008,9,0.008,10,0.008,57,3.996,58,2.569,63,3.396,258,4.273,262,3.569,263,3.996,264,3.996,265,3.996,266,3.996,267,3.996,268,3.996,269,3.243,2117,7.658,2136,5.082,2354,8.719,2355,8.719,2356,8.764,2357,5.786]],["title/overview.html",[2358,5.128]],["body/overview.html",[2,0.726,8,0.011,9,0.006,10,0.006,13,1.383,57,5.242,58,1.627,59,2.413,60,3.219,61,3.219,62,3.219,63,4.855,64,4.234,65,2.703,66,1.887,67,1.747,77,1.264,81,3.909,158,4.681,243,1.967,251,3.99,258,6.416,259,3.219,260,3.219,261,3.219,262,5.14,263,5.458,264,4.892,265,4.234,266,4.892,267,5.538,268,5.458,269,4.495,371,4.234,435,4.681,478,3.219,480,3.219,481,3.219,482,4.234,670,3.99,695,3.219,697,3.219,880,2.385,891,3.99,895,2.531,944,3.219,945,3.219,962,4.234,1010,2.385,1130,3.99,1182,3.219,1183,3.219,1247,4.94,1265,3.219,1266,3.219,1268,3.219,1413,3.99,1455,3.219,1457,3.219,1513,3.219,1514,3.219,1515,3.219,1617,2.925,1750,3.219,1751,3.219,1753,3.219,2358,3.219,2359,3.665,2360,3.665,2361,3.665]],["title/classes/passwordValidator.html",[0,0.223,770,2.947]],["body/classes/passwordValidator.html",[0,0.346,2,1.022,3,0.136,4,0.136,5,0.123,7,0.15,8,0.011,9,0.008,10,0.008,16,0.178,38,0.62,82,0.691,84,1.312,85,1.057,86,1.207,91,0.483,92,1.241,93,1.542,101,1.496,110,1.207,166,1.505,184,2.577,211,1.678,340,3.181,373,3.278,395,2.656,430,2.656,576,2.768,593,1.888,770,4.572,1030,3.278,1866,4.117,1983,5.049,1984,4.572,1985,4.572,1986,5.733,1988,5.637,1989,4.888,1991,4.572,1993,3.808,1994,3.808,1995,3.562,2362,5.158,2363,5.158,2364,4.53,2365,4.53,2366,4.53,2367,4.53]],["title/classes/phoneNumberValidator.html",[0,0.223,1594,3.151]],["body/classes/phoneNumberValidator.html",[0,0.346,2,1.022,3,0.136,4,0.136,5,0.123,7,0.15,8,0.011,9,0.008,10,0.008,16,0.178,38,0.62,82,0.691,84,1.312,85,1.057,86,1.207,91,0.483,92,1.241,93,1.542,101,1.496,110,1.207,166,1.505,184,2.577,211,1.678,340,3.181,373,3.278,395,2.656,544,2.768,576,2.768,581,2.554,593,1.888,1030,3.278,1549,4.117,1594,4.888,1867,4.117,1983,5.049,1984,4.572,1985,4.572,1986,5.733,1988,5.637,1989,4.888,1991,4.572,1993,3.808,1994,3.808,1995,3.562,2368,5.158,2369,5.158,2370,4.53,2371,4.53]],["title/properties.html",[572,1.671,1889,3.124]],["body/properties.html",[8,0.01,9,0.009,10,0.009,34,1.746,210,3.223,239,5.027,255,5.275,320,5.784,385,3.909,386,3.909,572,1.954,1135,5.275,1294,4.794,1925,4.794,2030,5.275,2031,5.275,2075,5.275,2077,5.275,2178,5.275,2180,5.275,2210,5.275,2223,4.794,2285,4.435,2291,5.275,2292,5.275,2293,4.794,2294,4.794,2372,6.006,2373,6.006,2374,6.006,2375,5.275,2376,5.275,2377,7.28,2378,6.006,2379,5.275]],["title/miscellaneous/typealiases.html",[1937,2.088,2380,5.136]],["body/miscellaneous/typealiases.html",[8,0.008,9,0.008,10,0.008,38,0.828,91,0.47,921,5.715,925,5.715,928,5.715,1875,5.194,1876,4.008,1937,2.947,2002,4.41,2014,5.715,2381,5.021,2382,6.506,2383,8.105,2384,6.506,2385,6.506,2386,7.91,2387,6.506,2388,7.218,2389,6.506,2390,6.506,2391,6.506,2392,6.506,2393,6.506,2394,6.506,2395,5.021,2396,6.506,2397,6.506,2398,6.506,2399,6.506,2400,7.218,2401,6.506,2402,5.021,2403,8.827,2404,5.021,2405,5.021,2406,5.021,2407,5.021]],["title/classes/usenameValidator.html",[0,0.223,771,2.947]],["body/classes/usenameValidator.html",[0,0.348,2,1.031,3,0.137,4,0.137,5,0.124,7,0.151,8,0.011,9,0.008,10,0.008,16,0.18,38,0.623,82,0.695,84,1.319,85,1.061,86,1.213,91,0.487,92,1.248,93,1.554,101,1.499,110,1.213,166,1.512,184,2.59,211,1.692,340,3.207,373,3.295,395,2.678,541,3.052,576,2.791,593,1.903,771,4.596,1030,3.295,1868,4.151,1983,5.068,1984,4.596,1985,4.596,1986,5.744,1988,5.649,1989,4.914,1991,4.596,1992,4.151,1993,3.84,1994,3.84,1995,3.591,2408,5.2,2409,5.2]],["title/miscellaneous/variables.html",[1937,2.088,2410,4.512]],["body/miscellaneous/variables.html",[3,0.08,8,0.011,9,0.004,10,0.004,30,1.119,31,2.24,34,1.136,35,2.422,36,1.449,37,2.973,38,0.724,39,1.563,40,2.973,41,1.449,42,1.34,43,1.34,46,2.262,47,1.34,48,2.422,50,1.449,51,1.34,52,1.34,53,1.119,56,0.987,85,0.565,91,0.17,93,0.543,101,1.341,105,1.951,107,2.665,116,1.447,163,1.119,166,1.249,169,0.987,205,0.974,211,1.989,229,2.357,232,1.871,239,2.095,243,0.974,244,2.516,308,1.677,320,2.887,333,1.34,336,2.422,340,3.771,353,1.781,355,1.781,362,2.422,363,1.34,375,1.254,377,1.254,381,1.34,386,1.181,395,0.935,407,3.308,417,1.34,422,0.865,425,1.628,430,2.013,432,2.681,437,2.422,438,2.095,443,1.975,444,1.781,445,1.628,446,0.899,519,2.24,520,2.095,521,2.24,522,2.422,525,1.502,533,2.422,544,1.628,581,1.936,598,0.974,604,1.254,617,1.34,629,2.422,632,1.594,634,1.701,643,3.155,713,2.422,799,0.935,844,1.181,876,1.181,880,1.181,918,1.449,930,2.422,932,5.234,933,2.7,938,3.646,939,1.449,969,1.119,1010,1.181,1023,1.34,1029,1.594,1033,1.594,1035,1.34,1047,6.143,1048,5.117,1055,1.594,1056,2.665,1113,1.594,1161,1.449,1164,2.665,1242,1.594,1285,1.449,1286,2.422,1298,1.594,1299,2.665,1356,1.449,1371,1.449,1473,2.422,1496,2.665,1502,2.665,1525,1.449,1527,3.373,1544,1.449,1560,1.449,1624,2.665,1625,1.594,1808,4.655,1810,1.594,1815,2.24,1818,1.594,1821,1.594,1822,1.594,1824,1.594,1825,1.594,1828,1.594,1830,1.594,1832,1.594,1833,2.665,1836,1.594,1837,2.665,1838,2.665,1843,1.594,1844,2.665,1845,5.37,1847,1.594,1848,2.665,1849,1.594,1850,1.594,1851,3.434,1852,1.449,1853,2.665,1857,1.594,1862,1.449,1863,1.449,1865,2.422,1866,1.449,1867,1.449,1868,1.449,1869,2.665,1870,2.665,1871,2.665,1872,1.594,1881,1.449,1884,3.646,1885,3.434,1886,2.665,1914,1.594,1937,1.065,1965,1.449,1992,2.422,1999,1.594,2001,1.594,2023,1.594,2037,1.594,2085,2.665,2090,2.665,2115,2.665,2123,1.594,2142,1.594,2170,1.594,2171,1.594,2172,1.594,2177,2.665,2233,1.594,2293,1.449,2294,1.449,2364,1.594,2365,1.594,2366,1.594,2367,1.594,2370,1.594,2371,1.594,2375,1.594,2376,1.594,2379,1.594,2410,1.594,2411,1.815,2412,5.832,2413,1.815,2414,1.815,2415,3.909,2416,3.034,2417,1.815,2418,1.815,2419,1.815,2420,1.815,2421,1.815,2422,1.815,2423,3.034,2424,1.815,2425,1.815,2426,1.815,2427,1.815,2428,1.815,2429,1.815,2430,1.815,2431,1.815,2432,1.815,2433,1.815,2434,1.815,2435,1.815,2436,1.815,2437,1.815,2438,4.568,2439,1.815,2440,1.815,2441,3.034,2442,3.034,2443,1.815,2444,1.815,2445,1.815,2446,1.815,2447,3.034,2448,1.815,2449,1.815,2450,1.815,2451,1.815,2452,1.815,2453,1.815,2454,1.815,2455,1.815,2456,1.815,2457,1.815,2458,1.815,2459,1.815,2460,1.815,2461,1.815,2462,3.034,2463,1.815,2464,1.815,2465,1.815,2466,1.815,2467,1.815,2468,1.815,2469,1.815,2470,4.568,2471,1.815,2472,1.815,2473,1.815,2474,1.815,2475,1.815,2476,1.815,2477,1.815,2478,1.815,2479,1.815,2480,3.034,2481,1.815,2482,1.815,2483,1.815,2484,3.034,2485,1.815,2486,1.815,2487,1.815,2488,1.815,2489,1.815,2490,1.815,2491,1.815,2492,1.815,2493,1.815,2494,1.815,2495,1.815,2496,1.815,2497,1.815,2498,1.815,2499,1.815,2500,1.815,2501,1.815,2502,1.815,2503,1.815,2504,1.815,2505,1.815,2506,1.815,2507,1.815,2508,1.815,2509,1.815,2510,1.815,2511,1.815,2512,1.815,2513,1.815,2514,1.815,2515,1.815,2516,1.815,2517,1.815,2518,1.815,2519,1.815,2520,1.815,2521,1.815,2522,1.815,2523,1.815,2524,1.815,2525,1.815,2526,1.815,2527,1.815,2528,1.815,2529,1.815,2530,1.815,2531,1.815,2532,1.815,2533,1.815,2534,3.034,2535,1.815,2536,1.815,2537,1.815,2538,3.034,2539,3.034,2540,1.815,2541,1.815,2542,1.815,2543,1.815,2544,1.815,2545,1.815]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.12",{"_index":1922,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1927,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1907,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":1903,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1016,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":1906,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1920,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1820,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1873,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1880,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1878,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1879,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1834,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1835,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1827,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1846,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1823,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1831,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1829,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1826,"title":{},"body":{"coverage.html":{}}}],["02t05:01:03.938z",{"_index":1605,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1570,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["07",{"_index":1569,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["09999999999",{"_index":1603,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1587,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1",{"_index":243,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.17.3",{"_index":1915,"title":{},"body":{"dependencies.html":{}}}],["1.18.0",{"_index":1935,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1912,"title":{},"body":{"dependencies.html":{}}}],["1.6.0",{"_index":2373,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":1909,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":880,"title":{},"body":{"controllers/FileController.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1554,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1024",{"_index":1013,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2359,"title":{},"body":{"overview.html":{}}}],["120",{"_index":754,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["120)@minlength(2",{"_index":749,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["123",{"_index":803,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["150",{"_index":1012,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["17.0.3",{"_index":1891,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1557,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["19",{"_index":1606,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":2479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@min(17",{"_index":1556,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1582,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2",{"_index":1010,"title":{},"body":{"controllers/HealthController.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":1923,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1895,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":1913,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":762,"title":{},"body":{"classes/CreateConversationDto.html":{},"controllers/HealthController.html":{},"classes/UserEntity.html":{}}}],["20)@minlength(2",{"_index":760,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["200",{"_index":241,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":1568,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2022",{"_index":2290,"title":{},"body":{"index.html":{},"license.html":{}}}],["21",{"_index":1700,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":1688,"title":{},"body":{"classes/UserEntity.html":{}}}],["22",{"_index":2360,"title":{},"body":{"overview.html":{}}}],["3",{"_index":751,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["3.0.0",{"_index":1897,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1929,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1902,"title":{},"body":{"dependencies.html":{}}}],["302",{"_index":1262,"title":{},"body":{"controllers/OauthController.html":{}}}],["4.0.0",{"_index":1924,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":1900,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":1931,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":248,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1577,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1574,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["456",{"_index":804,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["46",{"_index":2361,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1905,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1840,"title":{},"body":{"coverage.html":{}}}],["6.0.0",{"_index":1917,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1898,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":1933,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1930,"title":{},"body":{"dependencies.html":{}}}],["768",{"_index":1009,"title":{},"body":{"controllers/HealthController.html":{}}}],["789",{"_index":814,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":805,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["8",{"_index":1689,"title":{},"body":{"classes/UserEntity.html":{}}}],["8.0.1",{"_index":1919,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1936,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1839,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1894,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":1896,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1899,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2371,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2370,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../docs",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1564,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1573,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["above",{"_index":2325,"title":{},"body":{"license.html":{}}}],["accept",{"_index":1298,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["acceptable",{"_index":2455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":362,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":1251,"title":{},"body":{"controllers/OauthController.html":{}}}],["accesstoken",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"classes/ProfileEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1565,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["account.'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":2347,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":1370,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":2513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1357,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(userid",{"_index":1368,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcookieauth('optional",{"_index":2512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":1036,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["addoauth2",{"_index":2504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1541,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin.controller",{"_index":73,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":72,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin01",{"_index":781,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admin02",{"_index":782,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":57,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":596,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":64,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":70,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["age",{"_index":1542,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["agedate",{"_index":2476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alcohol",{"_index":1976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":2381,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":860,"title":{},"body":{"controllers/FileController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":865,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":182,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(request",{"_index":217,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["already",{"_index":1502,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":2228,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":2155,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2316,"title":{},"body":{"license.html":{}}}],["another",{"_index":364,"title":{},"body":{"injectables/AtGuard.html":{}}}],["api",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2378,"title":{},"body":{"properties.html":{}}}],["api:latest",{"_index":2213,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":2029,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":791,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioauth2",{"_index":1246,"title":{},"body":{"controllers/OauthController.html":{}}}],["apioauth2(['user:read",{"_index":1253,"title":{},"body":{"controllers/OauthController.html":{}}}],["apioauth2(['user:write",{"_index":1258,"title":{},"body":{"controllers/OauthController.html":{}}}],["apiokresponse",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":886,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":601,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({example",{"_index":1567,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apiproperty({required",{"_index":607,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({type",{"_index":741,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["apipropertyoptional",{"_index":764,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":250,"title":{},"body":{"controllers/AppController.html":{}}}],["apiresponse({status",{"_index":247,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":2091,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":673,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":896,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('health",{"_index":1002,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('home",{"_index":254,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('oauth",{"_index":1249,"title":{},"body":{"controllers/OauthController.html":{}}}],["apitags('posts",{"_index":1427,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1736,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":887,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["app",{"_index":1527,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1538,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":252,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":1058,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":235,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2031,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application/json",{"_index":1299,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":2073,"title":{},"body":{"index.html":{}}}],["apply",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":1759,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":258,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps",{"_index":2119,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":251,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":2279,"title":{},"body":{"index.html":{}}}],["args",{"_index":1988,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1327,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":198,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2351,"title":{},"body":{"license.html":{}}}],["array",{"_index":876,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":888,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":908,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":2007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":1317,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":2304,"title":{},"body":{"license.html":{}}}],["async",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["atguard",{"_index":281,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":371,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":486,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":1272,"title":{},"body":{"modules/OauthModule.html":{}}}],["auth/auth.service",{"_index":1287,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth/decorators",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["auth/dto/request",{"_index":1288,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth_error",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":397,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":2108,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":356,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{}}}],["authguard('jwt",{"_index":359,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authmodule",{"_index":262,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2379,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":1337,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authorization",{"_index":1303,"title":{},"body":{"injectables/OauthService.html":{}}}],["authorizationurl",{"_index":2507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":2340,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":435,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":2079,"title":{},"body":{"index.html":{}}}],["available",{"_index":2357,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["await",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["awesome",{"_index":2183,"title":{},"body":{"index.html":{}}}],["axios",{"_index":1285,"title":{},"body":{"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.config",{"_index":931,"title":{},"body":{"classes/FileService.html":{}}}],["axios.create",{"_index":2463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosconfig",{"_index":930,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosconfig.post(url",{"_index":937,"title":{},"body":{"classes/FileService.html":{}}}],["axiosinstance",{"_index":2462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosrequest",{"_index":1286,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosrequest('get",{"_index":1301,"title":{},"body":{"injectables/OauthService.html":{}}}],["b",{"_index":1551,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["backend",{"_index":2050,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2229,"title":{},"body":{"index.html":{}}}],["bad",{"_index":2451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request",{"_index":2450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":1329,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1334,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1501,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2176,"title":{},"body":{"index.html":{}}}],["based",{"_index":1054,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["baseurl",{"_index":2464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":1904,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2267,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2238,"title":{},"body":{"index.html":{}}}],["begin",{"_index":756,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["begining",{"_index":2254,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2269,"title":{},"body":{"index.html":{}}}],["better",{"_index":2281,"title":{},"body":{"index.html":{}}}],["bio",{"_index":1543,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birthdate",{"_index":1544,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["bodies",{"_index":2122,"title":{},"body":{"index.html":{}}}],["body",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1030,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"classes/MessagesGateway.html":{},"classes/PostEntity.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["bootstrap",{"_index":1882,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2356,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2354,"title":{},"body":{"modules.html":{}}}],["buddhism",{"_index":1969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["build",{"_index":2170,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":2078,"title":{},"body":{"index.html":{}}}],["building",{"_index":2069,"title":{},"body":{"index.html":{}}}],["built",{"_index":2158,"title":{},"body":{"index.html":{}}}],["c",{"_index":1601,"title":{},"body":{"classes/ProfileEntity.html":{},"license.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1553,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["call",{"_index":2137,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1242,"title":{},"body":{"controllers/OauthController.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":976,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["callhandler",{"_index":823,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":349,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":352,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canceled",{"_index":1968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["card",{"_index":2277,"title":{},"body":{"index.html":{}}}],["catch",{"_index":186,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":195,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1020,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":827,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["catcherror((err",{"_index":832,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["categories",{"_index":1477,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1479,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["change",{"_index":667,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["character",{"_index":1695,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":775,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(121",{"_index":752,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["characters!'})@maxlength(21",{"_index":761,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1576,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1578,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1690,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":755,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["charge",{"_index":2299,"title":{},"body":{"license.html":{}}}],["chat",{"_index":2180,"title":{},"body":{"index.html":{},"properties.html":{}}}],["chats",{"_index":2062,"title":{},"body":{"index.html":{}}}],["check",{"_index":994,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkexist",{"_index":1497,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1500,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1506,"title":{},"body":{"injectables/PostsService.html":{}}}],["children",{"_index":1975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["city",{"_index":1550,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["claim",{"_index":2343,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":2166,"title":{},"body":{"index.html":{}}}],["client",{"_index":1134,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/OauthService.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1175,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.id",{"_index":1168,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client/.../auth.dto.ts",{"_index":2395,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../auth.service.ts",{"_index":2418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../axios.config.ts",{"_index":2413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../conversations.dto.ts",{"_index":2383,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../conversations.service.ts",{"_index":2419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../counter.ts",{"_index":2433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../file.service.ts",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../files.dto.ts",{"_index":2400,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../index.ts",{"_index":2432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../main.ts",{"_index":2411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../posts.dto.ts",{"_index":2386,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../posts.service.ts",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../user.service.ts",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../users.dto.ts",{"_index":2388,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/auth.dto.ts",{"_index":2406,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/conversations.dto.ts",{"_index":2402,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/files.dto.ts",{"_index":2407,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/posts.dto.ts",{"_index":2404,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/users.dto.ts",{"_index":2405,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/main.ts",{"_index":1818,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/router/index.ts",{"_index":1821,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/auth.service.ts",{"_index":1822,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/axios.config.ts",{"_index":1824,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/conversations.service.ts",{"_index":1825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/file.service.ts",{"_index":918,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/file.service.ts:21",{"_index":926,"title":{},"body":{"classes/FileService.html":{}}}],["client/src/services/file.service.ts:35",{"_index":929,"title":{},"body":{"classes/FileService.html":{}}}],["client/src/services/file.service.ts:7",{"_index":923,"title":{},"body":{"classes/FileService.html":{}}}],["client/src/services/posts.service.ts",{"_index":1828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/user.service.ts",{"_index":1830,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/stores/counter.ts",{"_index":1832,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":972,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/MessagesService.html":{}}}],["clientsecret",{"_index":974,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["cluster_adminmodule",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":478,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":480,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":479,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":481,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":695,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":696,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":697,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":944,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":945,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1182,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1183,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_oauthmodule",{"_index":1265,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_exports",{"_index":1268,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_imports",{"_index":1267,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":1266,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1455,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1456,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1457,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1513,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1514,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1515,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1750,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1751,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1752,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1753,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":242,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["college",{"_index":1960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comment",{"_index":1371,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":735,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":570,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1388,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commitlint",{"_index":2164,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":1890,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":1892,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2282,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compatible",{"_index":2107,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":2141,"title":{},"body":{"index.html":{}}}],["component",{"_index":2534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compose",{"_index":2215,"title":{},"body":{"index.html":{}}}],["compress",{"_index":2121,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1908,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computer",{"_index":2278,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2324,"title":{},"body":{"license.html":{}}}],["config",{"_index":377,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('app_secret",{"_index":392,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["config.get('google_callback_url",{"_index":2508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":375,"title":{},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"app_secret",{"_index":494,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"expire_at_time",{"_index":497,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(user_error.duplicate",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1236,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["connectedsocket",{"_index":1158,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["connection",{"_index":2352,"title":{},"body":{"license.html":{}}}],["console.log('before",{"_index":1109,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":1110,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1115,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":1066,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":1067,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(postid",{"_index":1446,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":211,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@logger('appservice",{"_index":346,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(authservice",{"_index":1277,"title":{},"body":{"injectables/OauthService.html":{}}}],["constructor(config",{"_index":374,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":191,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(messagesservice",{"_index":1129,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["constructor(prismaservice",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":88,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":350,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1691,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2214,"title":{},"body":{"index.html":{}}}],["content",{"_index":939,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":355,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":369,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1111,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":368,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1064,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1065,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1624,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["continuous",{"_index":2159,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2348,"title":{},"body":{"license.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":55,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":674,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":899,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":1003,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('oauth",{"_index":1250,"title":{},"body":{"controllers/OauthController.html":{}}}],["controller('posts",{"_index":1428,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1737,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":1055,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":1049,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":1893,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":2150,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":629,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversation.dto",{"_index":808,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":740,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:11",{"_index":961,"title":{},"body":{"classes/GetAllConversationDto.html":{}}}],["conversation.dto.ts:14",{"_index":1649,"title":{},"body":{"classes/UpdateMembersConversationDto.html":{}}}],["conversation.dto.ts:20",{"_index":810,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:27",{"_index":811,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:32",{"_index":763,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:33",{"_index":1660,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:34",{"_index":1659,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:35",{"_index":1661,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:52",{"_index":757,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:59",{"_index":758,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1648,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:66",{"_index":744,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1647,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:73",{"_index":746,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1646,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation_error",{"_index":713,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversation_error.not_creator",{"_index":731,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationentity",{"_index":594,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"coverage.html":{}}}],["conversationid",{"_index":645,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{}}}],["conversationid).members",{"_index":1205,"title":{},"body":{"injectables/MessagesService.html":{}}}],["conversations",{"_index":617,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/MessagesService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversations.controller",{"_index":699,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":671,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":615,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":263,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":670,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":1910,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":2110,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2318,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2302,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2288,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":344,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":345,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["correct",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["cors",{"_index":1163,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":1837,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["counter",{"_index":2538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["country",{"_index":1552,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["course",{"_index":2259,"title":{},"body":{"index.html":{}}}],["cover",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coverage",{"_index":1814,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create_user",{"_index":2444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createapp(app",{"_index":2434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createat",{"_index":1478,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":733,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":618,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":677,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":626,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":627,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":632,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":597,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":1855,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":2009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":1072,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1123,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(conversationid",{"_index":1133,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":784,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.text",{"_index":1209,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createnewconversationdto",{"_index":2382,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["createparamdecorator",{"_index":2480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1358,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":1374,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":792,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createrouter",{"_index":2530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createwebhistory(import.meta.env.base_url",{"_index":2532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creator",{"_index":598,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creator01",{"_index":783,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["creator01'})@isstring",{"_index":745,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["criteria",{"_index":2106,"title":{},"body":{"index.html":{}}}],["crud",{"_index":2171,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":212,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":214,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":215,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":643,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":1848,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":1050,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customeimage",{"_index":2024,"title":{},"body":{"classes/imageValidator.html":{}}}],["customtext",{"_index":1993,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["damages",{"_index":2344,"title":{},"body":{"license.html":{}}}],["data",{"_index":244,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":1304,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.id.tostring",{"_index":1306,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login",{"_index":1307,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login}@gmail.com",{"_index":1305,"title":{},"body":{"injectables/OauthService.html":{}}}],["database",{"_index":2034,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1531,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":604,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":230,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1113,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1532,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2305,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2353,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1077,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1082,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":2096,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":2098,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":1025,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":1047,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1984,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":1985,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defined",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definestore",{"_index":2537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["definition",{"_index":2087,"title":{},"body":{"index.html":{}}}],["delete",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":686,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":637,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1452,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1380,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1440,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1384,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":1748,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":1711,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":179,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete_comment",{"_index":2446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_user",{"_index":2445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecomment",{"_index":1359,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1453,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1379,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":800,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationadminsdto",{"_index":2384,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deleteconversationbyid",{"_index":619,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":635,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":636,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1496,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["deleteoneadminconversation",{"_index":620,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":640,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":641,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":815,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteonepostdto",{"_index":2385,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deletepost",{"_index":1360,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(userid",{"_index":1383,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":1706,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1710,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":180,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserprofile",{"_index":2387,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["denied",{"_index":2448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":59,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":2135,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1318,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":2086,"title":{},"body":{"index.html":{}}}],["description",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":2105,"title":{},"body":{"index.html":{}}}],["design",{"_index":2089,"title":{},"body":{"index.html":{}}}],["development",{"_index":2203,"title":{},"body":{"index.html":{}}}],["devices",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":2035,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":2436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directly",{"_index":1255,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["directly).'})@httpcode(httpstatus.created)@apicreatedresponse({description",{"_index":1243,"title":{},"body":{"controllers/OauthController.html":{}}}],["directly).'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1238,"title":{},"body":{"controllers/OauthController.html":{}}}],["disk",{"_index":1005,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":997,"title":{},"body":{"controllers/HealthController.html":{}}}],["distribute",{"_index":2314,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2286,"title":{},"body":{"index.html":{}}}],["divorced",{"_index":1964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["docker",{"_index":2210,"title":{},"body":{"index.html":{},"properties.html":{}}}],["docs",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":2090,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":1815,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doe",{"_index":1197,"title":{},"body":{"injectables/MessagesService.html":{}}}],["done",{"_index":966,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":988,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":971,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["doublecount",{"_index":2541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":119,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/FileService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":719,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1488,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":726,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.creator",{"_index":720,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":717,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1499,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1476,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1510,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.members",{"_index":718,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":716,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1780,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":1793,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1491,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.published",{"_index":1492,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1505,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.text",{"_index":1508,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.title",{"_index":1475,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.userid",{"_index":722,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.username",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment/request",{"_index":1416,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/comment/response",{"_index":1426,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/request",{"_index":1415,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/response",{"_index":1422,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/request",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/response",{"_index":387,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":2441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":1071,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2245,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":2220,"title":{},"body":{"index.html":{}}}],["each",{"_index":2147,"title":{},"body":{"index.html":{}}}],["ealcohol",{"_index":1939,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["easily",{"_index":2047,"title":{},"body":{"index.html":{}}}],["education",{"_index":1980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eeducation",{"_index":1941,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":2070,"title":{},"body":{"index.html":{}}}],["egender",{"_index":1942,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["element.id",{"_index":1204,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.foreach((item",{"_index":1215,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.splice(element.messages.indexof(item",{"_index":1223,"title":{},"body":{"injectables/MessagesService.html":{}}}],["email",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1721,"title":{},"body":{"controllers/UsersController.html":{}}}],["emails",{"_index":979,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":981,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emaritalstatus",{"_index":1943,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["empty",{"_index":2440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":2083,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1520,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1524,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2249,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":932,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2172,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["endpoint}/avatar",{"_index":934,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/cover",{"_index":941,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/posts",{"_index":942,"title":{},"body":{"classes/FileService.html":{}}}],["enhance",{"_index":2247,"title":{},"body":{"index.html":{}}}],["enotification",{"_index":1944,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enter",{"_index":361,"title":{},"body":{"injectables/AtGuard.html":{}}}],["entire",{"_index":2146,"title":{},"body":{"index.html":{}}}],["entities",{"_index":672,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["entities/comment.entity",{"_index":737,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/profile.entity",{"_index":1664,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["enumerations",{"_index":1938,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2133,"title":{},"body":{"index.html":{}}}],["eorder",{"_index":1945,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eotpstatus",{"_index":1946,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ereligion",{"_index":1947,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":1085,"title":{},"body":{"injectables/LoggerService.html":{}}}],["errors",{"_index":1810,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors.length",{"_index":1812,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsintereptor",{"_index":818,"title":{"injectables/ErrorsIntereptor.html":{}},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["eslint",{"_index":2154,"title":{},"body":{"index.html":{}}}],["esocial",{"_index":1948,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eupdateuserprofile",{"_index":1949,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["euserroles",{"_index":1950,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eval",{"_index":2124,"title":{},"body":{"index.html":{}}}],["event",{"_index":2339,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2040,"title":{},"body":{"index.html":{}}}],["example",{"_index":742,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["example@gmail.com",{"_index":1680,"title":{},"body":{"classes/UserEntity.html":{}}}],["exception",{"_index":200,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":226,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":227,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":221,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":185,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["execute",{"_index":1237,"title":{},"body":{"controllers/OauthController.html":{}}}],["executes",{"_index":2129,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":353,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":2442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existed",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["existedusermiddleware",{"_index":835,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["experiences",{"_index":2044,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":496,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":484,"title":{},"body":{"modules/AuthModule.html":{},"classes/LoggerModule.html":{},"modules/OauthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":210,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":857,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":2112,"title":{},"body":{"index.html":{}}}],["extends",{"_index":358,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["externals",{"_index":2523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1037,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extractjwt",{"_index":383,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":390,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":1026,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":1974,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["failed",{"_index":1335,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":395,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1338,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":2055,"title":{},"body":{"index.html":{}}}],["feels",{"_index":2042,"title":{},"body":{"index.html":{}}}],["femail",{"_index":1962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["female",{"_index":1581,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["field",{"_index":2059,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":1875,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":2008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":956,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":954,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":958,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":850,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":955,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":799,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.controller",{"_index":947,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":959,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":892,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":900,"title":{"classes/FileService.html":{}},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"coverage.html":{}}}],["filesmodule",{"_index":264,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":891,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":1995,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["find",{"_index":1720,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["find((element",{"_index":1211,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findallmessages",{"_index":1124,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findallmessages(@messagebody('conversationid",{"_index":1169,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["findallmessages(conversationid",{"_index":1138,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["firstname",{"_index":982,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2336,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2174,"title":{},"body":{"index.html":{}}}],["flip",{"_index":2276,"title":{},"body":{"index.html":{}}}],["flows",{"_index":2505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fo",{"_index":2274,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2239,"title":{},"body":{"index.html":{}}}],["following",{"_index":2323,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(auth_error.same_password",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(post_error.not_author",{"_index":1489,"title":{},"body":{"injectables/PostsService.html":{}}}],["forbiddenexception(system_error.forbidden",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["form",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"index.html":{}}}],["format",{"_index":2088,"title":{},"body":{"index.html":{}}}],["formattedmessage",{"_index":1099,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":2153,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":935,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('file",{"_index":936,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('files",{"_index":943,"title":{},"body":{"classes/FileService.html":{}}}],["forroot",{"_index":1069,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":2068,"title":{},"body":{"index.html":{}}}],["free",{"_index":2298,"title":{},"body":{"license.html":{}}}],["front",{"_index":2248,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2033,"title":{},"body":{"index.html":{}}}],["full",{"_index":1575,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1545,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1593,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":1035,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1996,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2321,"title":{},"body":{"license.html":{}}}],["game",{"_index":2265,"title":{},"body":{"index.html":{}}}],["gender",{"_index":1546,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["generate",{"_index":1052,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["generated",{"_index":2080,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":681,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":653,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1434,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1397,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1445,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1432,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1394,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('authorization",{"_index":1636,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["get('find/:email",{"_index":1742,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('github/redirect",{"_index":1232,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google",{"_index":1252,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google')@apioauth2(['user:read'])@useguards(undefined)@apioperation({summary",{"_index":1235,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect",{"_index":1257,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect')@apioauth2(['user:write'])@useguards(undefined)@apioperation({summary",{"_index":1241,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('profile/:useridorusername",{"_index":1739,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1723,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":993,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":648,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1361,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(postid",{"_index":1386,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":647,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversationdto:11",{"_index":807,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["getallconversations",{"_index":621,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@body",{"_index":679,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(dto",{"_index":646,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversationsdto",{"_index":2389,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsdto",{"_index":2390,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsofuser",{"_index":1362,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(userid",{"_index":1390,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1363,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(userid",{"_index":1393,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicpostsdto",{"_index":2391,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpublicusersdto",{"_index":2392,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallusers",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getconversationbyid",{"_index":622,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":651,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":473,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":237,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember",{"_index":1187,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmember(conversationid",{"_index":1190,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getoneconversationdto",{"_index":652,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1364,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(postid",{"_index":1396,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":1707,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":1714,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getters",{"_index":2540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":2027,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyemail",{"_index":1708,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1718,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofiledto",{"_index":2393,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gitbox",{"_index":2253,"title":{},"body":{"index.html":{}}}],["github",{"_index":1294,"title":{},"body":{"injectables/OauthService.html":{},"index.html":{},"properties.html":{}}}],["github2",{"_index":1921,"title":{},"body":{"dependencies.html":{}}}],["githubauthredirect",{"_index":1228,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(@query",{"_index":1263,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(req",{"_index":1231,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubredirect",{"_index":1274,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubredirect(req",{"_index":1279,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess",{"_index":1275,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess(token",{"_index":1281,"title":{},"body":{"injectables/OauthService.html":{}}}],["global",{"_index":1043,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["god",{"_index":1970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["google",{"_index":969,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["googleauth",{"_index":1229,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(@req",{"_index":1256,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(req",{"_index":1234,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect",{"_index":1230,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(@req",{"_index":1259,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(req",{"_index":1240,"title":{},"body":{"controllers/OauthController.html":{}}}],["googlelogin",{"_index":1276,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlelogin(req",{"_index":1283,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlestrategy",{"_index":962,"title":{"injectables/GoogleStrategy.html":{}},"body":{"injectables/GoogleStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2297,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2136,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group01",{"_index":747,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["group01'})@isstring()@isnotempty()@length(3",{"_index":759,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["grow",{"_index":2225,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1617,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["hand",{"_index":365,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handle",{"_index":830,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":188,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":202,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse",{"_index":190,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(request",{"_index":204,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hash",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1626,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":2115,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":938,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":991,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheck",{"_index":998,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":999,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1000,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":989,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["height",{"_index":1977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":245,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["helmet",{"_index":1916,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["help",{"_index":2094,"title":{},"body":{"index.html":{}}}],["here",{"_index":2233,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["hereby",{"_index":2296,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2179,"title":{},"body":{"index.html":{}}}],["high_school",{"_index":1959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["history",{"_index":2531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hmr.config.ts",{"_index":1885,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["holders",{"_index":2341,"title":{},"body":{"license.html":{}}}],["home",{"_index":2533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["homepage",{"_index":255,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":240,"title":{},"body":{"controllers/AppController.html":{}}}],["host",{"_index":197,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":209,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":213,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":2143,"title":{},"body":{"index.html":{}}}],["http",{"_index":1161,"title":{},"body":{"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpargumentshost",{"_index":207,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcode",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":196,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorsIntereptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception('new",{"_index":833,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpexceptionfilter",{"_index":1017,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":490,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://api.github.com/user",{"_index":1302,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/access_token?client_id=${process.env.github_client_id}&client_secret=${process.env.github_secret}&code=${requesttoken",{"_index":1297,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email",{"_index":1293,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2377,"title":{},"body":{"properties.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":675,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":834,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpstatus.internal_server_error",{"_index":225,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["husky",{"_index":1918,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iarrayfile",{"_index":893,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["icreatecomment",{"_index":1423,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["icreatepost",{"_index":1417,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["id",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiokresponse({description",{"_index":1376,"title":{},"body":{"controllers/PostsController.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id.decorator.ts",{"_index":1870,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":2236,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1816,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1493,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.authorid",{"_index":1494,"title":{},"body":{"injectables/PostsService.html":{}}}],["identify.length",{"_index":1785,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":1786,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifinduserbyemail",{"_index":1735,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetcomment",{"_index":1424,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpostofuser",{"_index":1418,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpublicpost",{"_index":1419,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetuserprofile",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":1042,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreexpiration",{"_index":394,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["ignoreglobalprefix",{"_index":1027,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ijwtpayload",{"_index":379,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":2026,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":878,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":1864,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["impact",{"_index":2284,"title":{},"body":{"index.html":{}}}],["implements",{"_index":184,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implicit",{"_index":2506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implied",{"_index":2332,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["import('../views/about.vue",{"_index":2536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('../views/home.vue",{"_index":2535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import.meta.env.vite_base_url",{"_index":2465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imported",{"_index":1034,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":71,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":2052,"title":{},"body":{"index.html":{}}}],["include",{"_index":1028,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":1040,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2308,"title":{},"body":{"license.html":{}}}],["increment",{"_index":2544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":91,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1525,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":654,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":2252,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":280,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":253,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{}}}],["infrastructure/auth/guards",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/oauth/oauth.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/prisma/prisma.module",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":806,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["init",{"_index":2188,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":1844,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":498,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":76,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputs",{"_index":2130,"title":{},"body":{"index.html":{}}}],["inspect",{"_index":2134,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":1039,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2237,"title":{},"body":{"index.html":{}}}],["install",{"_index":2186,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2184,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2102,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":219,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["int.pipe.ts",{"_index":1323,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1328,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2202,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2160,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2132,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":820,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":821,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":265,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1547,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["interface",{"_index":1022,"title":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":895,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":52,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["internal_server_error",{"_index":2449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":1588,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["ipublicuser",{"_index":154,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":765,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isarray",{"_index":588,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray()@isnotempty",{"_index":582,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["isboolean",{"_index":1352,"title":{},"body":{"classes/PostEntity.html":{}}}],["isboolean()@isnotempty",{"_index":1346,"title":{},"body":{"classes/PostEntity.html":{}}}],["isdate",{"_index":1591,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":766,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isglobal",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":894,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":589,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isjson()@isnotempty",{"_index":584,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":2025,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1333,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":590,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1686,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":1678,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isstring",{"_index":577,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1682,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnumber",{"_index":1353,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isnumber()@isnotempty",{"_index":1348,"title":{},"body":{"classes/PostEntity.html":{}}}],["isobject",{"_index":591,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isoptional",{"_index":1320,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":366,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":592,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":579,"title":{},"body":{"classes/CommentEntity.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":1311,"title":{},"body":{"classes/PaginationDto.html":{}}}],["istyping",{"_index":1148,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":1023,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item.id",{"_index":1216,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item.text",{"_index":1218,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item1item2",{"_index":2063,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":911,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":913,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":914,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":915,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":916,"title":{},"body":{"controllers/FileController.html":{}}}],["items",{"_index":1314,"title":{},"body":{"classes/PaginationDto.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecomment",{"_index":1425,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatecover",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatepost",{"_index":1420,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatereaction",{"_index":1421,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["java",{"_index":2268,"title":{},"body":{"index.html":{}}}],["john",{"_index":1196,"title":{},"body":{"injectables/MessagesService.html":{}}}],["join",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["joinconversation",{"_index":1125,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["joinconversation(conversationid",{"_index":1141,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["jpeg|jpg|gif|png",{"_index":2023,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["json.stringify(exception.getresponse",{"_index":220,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":386,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":389,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":488,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":491,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["keywords",{"_index":2374,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2331,"title":{},"body":{"license.html":{}}}],["large",{"_index":2458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":984,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["latest",{"_index":2241,"title":{},"body":{"index.html":{}}}],["league",{"_index":2273,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2261,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2257,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2275,"title":{},"body":{"index.html":{}}}],["length",{"_index":767,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(3",{"_index":773,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":1699,"title":{},"body":{"classes/UserEntity.html":{}}}],["letter",{"_index":1693,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":2345,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2342,"title":{},"body":{"license.html":{}}}],["library",{"_index":2093,"title":{},"body":{"index.html":{}}}],["license",{"_index":2285,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2224,"title":{},"body":{"index.html":{}}}],["life",{"_index":2048,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1309,"title":{},"body":{"classes/PaginationDto.html":{}}}],["limitation",{"_index":2309,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2333,"title":{},"body":{"license.html":{}}}],["linter",{"_index":2165,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":2163,"title":{},"body":{"index.html":{}}}],["list",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["list.authorid",{"_index":1487,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":730,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list['creator",{"_index":728,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter((admin",{"_index":732,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["literal",{"_index":2403,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":1032,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2201,"title":{},"body":{"index.html":{}}}],["log",{"_index":1078,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":1088,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":194,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":2012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":1073,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":1074,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":291,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":1856,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":2011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":297,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":192,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1059,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logindto",{"_index":415,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":753,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["looking",{"_index":2280,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2126,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":2046,"title":{},"body":{"index.html":{}}}],["male",{"_index":1580,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["many",{"_index":50,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":1615,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marital_status",{"_index":1978,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maritalstatus",{"_index":1979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["marriagestatus",{"_index":1548,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["married",{"_index":1963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["master",{"_index":2260,"title":{},"body":{"index.html":{}}}],["match",{"_index":1965,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["matchemail",{"_index":1792,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":1794,"title":{},"body":{"injectables/UsersService.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1198,"title":{},"body":{"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1608,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1611,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxcount",{"_index":912,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":768,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1602,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(121",{"_index":778,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["maxlength(151",{"_index":1609,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":776,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["maxlength(46",{"_index":1595,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["media",{"_index":2461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1201,"title":{},"body":{"injectables/MessagesService.html":{}}}],["member",{"_index":668,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["members",{"_index":599,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["members[clientid",{"_index":1207,"title":{},"body":{"injectables/MessagesService.html":{}}}],["memory",{"_index":1004,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1001,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":2335,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2312,"title":{},"body":{"license.html":{}}}],["message",{"_index":218,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["message.dto",{"_index":1654,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":786,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:5",{"_index":788,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":789,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":790,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1651,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.ts",{"_index":1845,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["message['conversationid",{"_index":1221,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message['messageid",{"_index":1222,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagebody",{"_index":1157,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1165,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1173,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1166,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messages",{"_index":1195,"title":{},"body":{"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1185,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.push(message",{"_index":1212,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages.service",{"_index":1160,"title":{},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1121,"title":{"classes/MessagesGateway.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":266,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1130,"title":{"injectables/MessagesService.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2251,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1326,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1804,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["method_not_allowed",{"_index":2453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodkey",{"_index":1056,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["middleware",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2194,"title":{},"body":{"index.html":{}}}],["min",{"_index":1592,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["min(0",{"_index":1610,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(17",{"_index":1607,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minlength",{"_index":769,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(2",{"_index":774,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":1701,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":1937,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2223,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":2206,"title":{},"body":{"index.html":{}}}],["models",{"_index":1038,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2311,"title":{},"body":{"license.html":{}}}],["module",{"_index":56,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":58,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2232,"title":{},"body":{"index.html":{}}}],["ms",{"_index":2019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":2113,"title":{},"body":{"index.html":{}}}],["multi",{"_index":870,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":890,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":2013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multipart/form",{"_index":940,"title":{},"body":{"classes/FileService.html":{}}}],["music",{"_index":1598,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mustermann",{"_index":1199,"title":{},"body":{"injectables/MessagesService.html":{}}}],["name",{"_index":85,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":985,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":983,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["nest",{"_index":2074,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":826,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":2375,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":208,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":489,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1652,"title":{},"body":{"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":357,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":885,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1159,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":845,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":2038,"title":{},"body":{"index.html":{}}}],["never",{"_index":1956,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["new",{"_index":229,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":1790,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":714,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":1791,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":1658,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["newprofile",{"_index":1788,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":822,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1616,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(timeout(1000",{"_index":1643,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["nextfunction",{"_index":842,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2292,"title":{},"body":{"license.html":{},"properties.html":{}}}],["nice",{"_index":1200,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node",{"_index":2522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.js",{"_index":2109,"title":{},"body":{"index.html":{}}}],["nodeexternals",{"_index":1886,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":2067,"title":{},"body":{"index.html":{}}}],["non",{"_index":1972,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["non_religions",{"_index":1971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":2338,"title":{},"body":{"license.html":{}}}],["not_acceptable",{"_index":2454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_author",{"_index":2443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_creator",{"_index":2439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":2438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notacceptableexception",{"_index":1771,"title":{},"body":{"injectables/UsersService.html":{}}}],["notacceptableexception(auth_error.password_not_match",{"_index":1795,"title":{},"body":{"injectables/UsersService.html":{}}}],["notedev",{"_index":2256,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":846,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":849,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["notfoundexception(post_error.empty",{"_index":1483,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(post_error.not_found",{"_index":1486,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(user_error.not_found",{"_index":1482,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2326,"title":{},"body":{"license.html":{}}}],["now",{"_index":1112,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1116,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2185,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2189,"title":{},"body":{"index.html":{}}}],["null",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/imageValidator.html":{}}}],["nullable",{"_index":608,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{}}}],["number",{"_index":581,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1777,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1776,"title":{},"body":{"injectables/UsersService.html":{}}}],["oauth",{"_index":1227,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["oauth.controller",{"_index":1270,"title":{},"body":{"modules/OauthModule.html":{}}}],["oauth.service",{"_index":1248,"title":{},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{}}}],["oauth2",{"_index":2376,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":970,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["oauthcontroller",{"_index":1225,"title":{"controllers/OauthController.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":267,"title":{"modules/OauthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OauthModule.html":{},"modules.html":{},"overview.html":{}}}],["oauthservice",{"_index":1247,"title":{"injectables/OauthService.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["object",{"_index":1808,"title":{},"body":{"injectables/ValidationPipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.values",{"_index":1206,"title":{},"body":{"injectables/MessagesService.html":{}}}],["observable",{"_index":825,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2301,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2149,"title":{},"body":{"index.html":{}}}],["official",{"_index":2030,"title":{},"body":{"index.html":{},"properties.html":{}}}],["old",{"_index":1560,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["old!'})@max(101",{"_index":1559,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["oldpassword",{"_index":1657,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["one",{"_index":638,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":1521,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1522,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onuploadprogress",{"_index":922,"title":{},"body":{"classes/FileService.html":{}}}],["oop",{"_index":2266,"title":{},"body":{"index.html":{}}}],["open",{"_index":2198,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":1053,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":1029,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":2152,"title":{},"body":{"index.html":{}}}],["option",{"_index":2470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":86,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":2085,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1310,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":1779,"title":{},"body":{"injectables/UsersService.html":{}}}],["oriented",{"_index":2262,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1164,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":953,"title":{},"body":{"classes/FilesService.html":{}}}],["otherwise",{"_index":2350,"title":{},"body":{"license.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2358,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1889,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1312,"title":{},"body":{"classes/PaginationDto.html":{},"index.html":{}}}],["pagecurrent",{"_index":1784,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":1781,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":1783,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":113,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('conversationid",{"_index":689,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":1743,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":682,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('postid",{"_index":1435,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["param('useridorusername",{"_index":1740,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":84,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":2114,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1332,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1321,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":1911,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1412,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":2111,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":812,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createconversationdto",{"_index":813,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2337,"title":{},"body":{"license.html":{}}}],["parttern",{"_index":1865,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":385,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["passportstrategy",{"_index":382,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":388,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":396,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["password",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1712,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":1683,"title":{},"body":{"classes/UserEntity.html":{}}}],["password123'})@length(8",{"_index":1687,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_not_match",{"_index":2437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":2095,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":770,"title":{"classes/passwordValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":691,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":642,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":688,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":662,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":693,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":666,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":684,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":658,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":1745,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":1730,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1437,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1410,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":1994,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["payload",{"_index":381,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["payload_too_large",{"_index":2457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pending",{"_index":1966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":1315,"title":{},"body":{"classes/PaginationDto.html":{}}}],["perform",{"_index":2099,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2295,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2319,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2300,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2320,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1549,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1594,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["photos",{"_index":980,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":987,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picktype",{"_index":736,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/LoginDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(commententity",{"_index":738,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(postentity",{"_index":797,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":1665,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(userentity",{"_index":1120,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["picture",{"_index":986,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pipe",{"_index":831,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["pipe(tap",{"_index":1114,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":2161,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1330,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":2101,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":1806,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1809,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":2039,"title":{},"body":{"index.html":{}}}],["playground",{"_index":2167,"title":{},"body":{"index.html":{}}}],["please",{"_index":2231,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":2526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugins",{"_index":2066,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2329,"title":{},"body":{"license.html":{}}}],["post",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiokresponse({description",{"_index":1381,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('avatar",{"_index":901,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":858,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1448,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1369,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":904,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":864,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":910,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":869,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":907,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":877,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1430,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1391,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1442,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1401,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1375,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":628,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":794,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:6",{"_index":817,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post_error",{"_index":1473,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postentity",{"_index":795,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2178,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1533,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":573,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2175,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1356,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":1459,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1414,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1354,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":268,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1413,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":2049,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2271,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":1075,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":1853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":1934,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":2032,"title":{},"body":{"index.html":{}}}],["primary",{"_index":1957,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["print",{"_index":2125,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":1925,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1517,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1530,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/prisma.module",{"_index":700,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["prisma/prisma.service",{"_index":87,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["prisma:generate",{"_index":2193,"title":{},"body":{"index.html":{}}}],["prisma:migrate",{"_index":2195,"title":{},"body":{"index.html":{}}}],["prisma:pull",{"_index":2192,"title":{},"body":{"index.html":{}}}],["prisma:push",{"_index":2197,"title":{},"body":{"index.html":{}}}],["prisma:studiorunning",{"_index":2200,"title":{},"body":{"index.html":{}}}],["prisma@latest",{"_index":2187,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1519,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":269,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":81,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":187,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":2157,"title":{},"body":{"index.html":{}}}],["process.env.app_secret",{"_index":393,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["process.env.database_url",{"_index":1534,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.google_callback_url",{"_index":977,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_client_id",{"_index":973,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":975,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.white_list",{"_index":2473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2208,"title":{},"body":{"index.html":{}}}],["profile",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/GoogleStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profileentity",{"_index":1539,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["profileentity:101",{"_index":1667,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:111",{"_index":1669,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:121",{"_index":1673,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:35",{"_index":1672,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:43",{"_index":1668,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:51",{"_index":1671,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:58",{"_index":1675,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:65",{"_index":1674,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:75",{"_index":1666,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:83",{"_index":1676,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:88",{"_index":1670,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["programming",{"_index":2053,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2240,"title":{},"body":{"index.html":{}}}],["project",{"_index":2142,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":572,"title":{"properties.html":{}},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["property",{"_index":1679,"title":{},"body":{"classes/UserEntity.html":{}}}],["provide",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":2010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1387,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":1719,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":1715,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get('users/all')@apioperation({summary",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":238,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":873,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":881,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":2313,"title":{},"body":{"license.html":{}}}],["published",{"_index":1339,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["pull",{"_index":2211,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":2036,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposeid",{"_index":1981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["put",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1450,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1406,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":1746,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":1725,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":1747,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":1727,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":131,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["query",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["quickly",{"_index":2156,"title":{},"body":{"index.html":{}}}],["randomint",{"_index":1861,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomint(min",{"_index":2015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rapidy",{"_index":2173,"title":{},"body":{"index.html":{}}}],["reach",{"_index":2283,"title":{},"body":{"index.html":{}}}],["react",{"_index":1402,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1503,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":2061,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1365,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1443,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1399,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":574,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1400,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1340,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":2123,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["readiness",{"_index":992,"title":{},"body":{"controllers/HealthController.html":{}}}],["readonly",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["recompile",{"_index":2145,"title":{},"body":{"index.html":{}}}],["redirect",{"_index":1245,"title":{},"body":{"controllers/OauthController.html":{}}}],["redirect('/success",{"_index":1261,"title":{},"body":{"controllers/OauthController.html":{}}}],["references",{"_index":2168,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1926,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1177,"title":{},"body":{"classes/MessagesGateway.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{}}}],["refreshtoken",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["religion",{"_index":1973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["reload",{"_index":2144,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1126,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["remove(@messagebody",{"_index":1180,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["remove(message",{"_index":1144,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":2127,"title":{},"body":{"index.html":{}}}],["replace('bearer",{"_index":1637,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["replies",{"_index":575,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":2077,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":844,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.params.userid",{"_index":847,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["req.user",{"_index":1289,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.email",{"_index":1290,"title":{},"body":{"injectables/OauthService.html":{}}}],["req['code",{"_index":1296,"title":{},"body":{"injectables/OauthService.html":{}}}],["request",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/OauthService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":233,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1625,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_timeout",{"_index":2456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod",{"_index":1756,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":51,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requesttoken",{"_index":1295,"title":{},"body":{"injectables/OauthService.html":{}}}],["require('run",{"_index":2524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('webpack",{"_index":2521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":614,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{}}}],["requiredroles",{"_index":1622,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":841,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":205,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":2467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.status(status).json",{"_index":1021,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":234,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":223,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responses_message",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responses_message.create_user",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["responses_message.delete_comment",{"_index":1512,"title":{},"body":{"injectables/PostsService.html":{}}}],["responses_message.delete_user",{"_index":1797,"title":{},"body":{"injectables/UsersService.html":{}}}],["rest",{"_index":2488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2307,"title":{},"body":{"license.html":{}}}],["result",{"_index":2131,"title":{},"body":{"index.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"controllers/HealthController.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2310,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1928,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roledecorator",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(role.admin",{"_index":54,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roles",{"_index":2177,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["roles.enum",{"_index":1621,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":302,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":1033,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["rt",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":439,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":482,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2191,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":829,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1108,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":1851,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["same_password",{"_index":2435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sample_image",{"_index":2060,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":2071,"title":{},"body":{"index.html":{}}}],["scale",{"_index":2092,"title":{},"body":{"index.html":{}}}],["schema",{"_index":2081,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":978,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1097,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scopes",{"_index":2509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":2525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secondary",{"_index":1958,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secret",{"_index":493,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":391,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":2118,"title":{},"body":{"index.html":{}}}],["see",{"_index":2064,"title":{},"body":{"index.html":{}}}],["select",{"_index":723,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2317,"title":{},"body":{"license.html":{}}}],["senderid",{"_index":787,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["serialize",{"_index":2104,"title":{},"body":{"index.html":{}}}],["serve",{"_index":2139,"title":{},"body":{"index.html":{}}}],["server",{"_index":53,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servestaticmodule",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":1914,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":1044,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setcontact",{"_index":2491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":1046,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setmetadata('ispublic",{"_index":2528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":1079,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1090,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setting",{"_index":2120,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1842,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["setup(app",{"_index":2016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.6.0",{"_index":2496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2327,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":2041,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":2246,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2243,"title":{},"body":{"index.html":{}}}],["short",{"_index":750,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["side",{"_index":2072,"title":{},"body":{"index.html":{}}}],["signed",{"_index":2116,"title":{},"body":{"index.html":{}}}],["signin",{"_index":2057,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":495,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":2058,"title":{},"body":{"index.html":{}}}],["signup",{"_index":2056,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":420,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocaldto",{"_index":2394,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["single",{"_index":1597,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1585,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["singlefielddecorator",{"_index":889,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":902,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":905,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":2017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":957,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":2051,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1775,"title":{},"body":{"injectables/UsersService.html":{}}}],["snake",{"_index":2264,"title":{},"body":{"index.html":{}}}],["social",{"_index":2181,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1135,"title":{},"body":{"classes/MessagesGateway.html":{},"properties.html":{}}}],["socket.io",{"_index":1162,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2303,"title":{},"body":{"license.html":{}}}],["sometime",{"_index":1954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sometimes",{"_index":1953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":2140,"title":{},"body":{"index.html":{}}}],["special",{"_index":1694,"title":{},"body":{"classes/UserEntity.html":{}}}],["specification",{"_index":1041,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2227,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1599,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":1997,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../axios.ts",{"_index":2414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":2006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../enum.ts",{"_index":1940,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../fullname.validator.ts",{"_index":2426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.validator.ts",{"_index":2425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":2001,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":2000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1999,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../multi",{"_index":2002,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../password.validator.ts",{"_index":2428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":2003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../repl.ts",{"_index":1998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":2431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1951,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../setup.config.ts",{"_index":2004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../single",{"_index":2005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":2412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":236,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":249,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":270,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:65",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":341,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":342,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":343,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/common/pagination.dto",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/common/pagination.dto.ts",{"_index":1308,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/core/common/pagination.dto.ts:13",{"_index":1313,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/pagination.dto.ts:23",{"_index":1316,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/pagination.dto.ts:33",{"_index":1319,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/configs/cors.config.ts",{"_index":1836,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":1024,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/setup.config.ts",{"_index":1841,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/configs/swagger.config.ts",{"_index":1843,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants/enum.ts",{"_index":1952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":183,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":193,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":199,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:26",{"_index":203,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:38",{"_index":206,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":1018,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":1019,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{}}}],["src/core/helpers/age.ts",{"_index":1847,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/axios.ts",{"_index":1849,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":1772,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":1850,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/exception.interceptor.ts",{"_index":819,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["src/core/interceptors/exception.interceptor.ts:13",{"_index":824,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":1057,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":1060,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1105,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1106,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1641,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1642,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":1062,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1613,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1644,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":1852,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":1068,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":1070,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":1854,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":1076,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1089,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1087,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1095,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1083,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1093,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1096,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1091,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":836,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/logger",{"_index":1063,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1322,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":1800,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":1805,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":1803,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":1857,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.enum.ts",{"_index":1982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1618,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:6",{"_index":1619,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:9",{"_index":1620,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/utils/delay.ts",{"_index":1858,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random.ts",{"_index":1860,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":772,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":1862,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":1990,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":1987,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":1863,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":2022,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":2020,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":1866,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2363,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2362,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":1867,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2369,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2368,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":1868,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2409,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2408,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/health.controller.ts",{"_index":990,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:25",{"_index":996,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infrastructure/admin/admin",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":83,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:111",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:71",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:80",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:89",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:99",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1758,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":483,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:111",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:123",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:143",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:20",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:28",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:54",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:66",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:91",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1732,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":1869,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":1872,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto/request",{"_index":1733,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":1655,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1117,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":1639,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":348,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:12",{"_index":354,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:6",{"_index":351,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1630,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:3",{"_index":1631,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":372,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:19",{"_index":380,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:8",{"_index":376,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1632,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:21",{"_index":1635,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:8",{"_index":1633,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":616,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:107",{"_index":655,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:122",{"_index":659,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:137",{"_index":639,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:152",{"_index":663,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:171",{"_index":644,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:190",{"_index":669,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:82",{"_index":633,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:94",{"_index":650,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":698,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":701,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:104",{"_index":704,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:121",{"_index":709,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:136",{"_index":705,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:169",{"_index":710,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:17",{"_index":702,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:20",{"_index":703,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:35",{"_index":706,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:63",{"_index":707,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:89",{"_index":708,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":739,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":802,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":960,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":809,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":595,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:11",{"_index":609,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:14",{"_index":603,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:17",{"_index":605,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":613,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:23",{"_index":611,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:26",{"_index":606,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:29",{"_index":602,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:5",{"_index":610,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:8",{"_index":612,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":1874,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":1876,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":1877,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":851,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:115",{"_index":874,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:73",{"_index":862,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:84",{"_index":867,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:95",{"_index":882,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":946,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":948,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":950,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":952,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":951,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":949,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/create",{"_index":785,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/update",{"_index":1650,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1122,"title":{},"body":{"classes/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:15",{"_index":1131,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:19",{"_index":1143,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1140,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:37",{"_index":1137,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:52",{"_index":1150,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:66",{"_index":1154,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:73",{"_index":1146,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1184,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1186,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:32",{"_index":1192,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:42",{"_index":1189,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:47",{"_index":1191,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:52",{"_index":1188,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:68",{"_index":1194,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1202,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:81",{"_index":1193,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts",{"_index":1226,"title":{},"body":{"controllers/OauthController.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:67",{"_index":1239,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:82",{"_index":1244,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:88",{"_index":1233,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.module.ts",{"_index":1269,"title":{},"body":{"modules/OauthModule.html":{}}}],["src/infrastructure/oauth/oauth.service.ts",{"_index":1273,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:11",{"_index":1284,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:27",{"_index":1280,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:43",{"_index":1282,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:8",{"_index":1278,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts",{"_index":963,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:19",{"_index":968,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:9",{"_index":964,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/posts/dto/comment/request/create",{"_index":734,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/delete",{"_index":801,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/update",{"_index":1645,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":793,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":816,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1612,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":571,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:12",{"_index":578,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":586,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:20",{"_index":587,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:24",{"_index":580,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:28",{"_index":583,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:32",{"_index":585,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":796,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1336,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:12",{"_index":1350,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:16",{"_index":1342,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:20",{"_index":1344,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:24",{"_index":1347,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:28",{"_index":1341,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:32",{"_index":1345,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:36",{"_index":1343,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:40",{"_index":1349,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:44",{"_index":1351,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1355,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:113",{"_index":1392,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:126",{"_index":1395,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:138",{"_index":1398,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:150",{"_index":1411,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:160",{"_index":1385,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:173",{"_index":1403,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:183",{"_index":1389,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:196",{"_index":1373,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:209",{"_index":1407,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:221",{"_index":1382,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:97",{"_index":1378,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1458,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1460,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:129",{"_index":1469,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:147",{"_index":1472,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:178",{"_index":1465,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:204",{"_index":1470,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:232",{"_index":1466,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:243",{"_index":1462,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:265",{"_index":1471,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:280",{"_index":1464,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:38",{"_index":1461,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:41",{"_index":1463,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:75",{"_index":1467,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:93",{"_index":1468,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/prisma/prisma.module",{"_index":485,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/infrastructure/prisma/prisma.module.ts",{"_index":1516,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/infrastructure/prisma/prisma.service",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts",{"_index":1518,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:13",{"_index":1523,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:25",{"_index":1529,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:29",{"_index":1528,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:33",{"_index":1526,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/users/dto/request/update",{"_index":1662,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1540,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:101",{"_index":1561,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:111",{"_index":1566,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:121",{"_index":1583,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:35",{"_index":1579,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:43",{"_index":1563,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:51",{"_index":1572,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:58",{"_index":1586,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:65",{"_index":1584,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:75",{"_index":1555,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:83",{"_index":1589,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:88",{"_index":1571,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/user.entity",{"_index":1656,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/users/entities/user.entity.ts",{"_index":1677,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:22",{"_index":1681,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:41",{"_index":1696,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:50",{"_index":1685,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:59",{"_index":1684,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:78",{"_index":1698,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1705,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:106",{"_index":1724,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:117",{"_index":1731,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:131",{"_index":1726,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:145",{"_index":1728,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:157",{"_index":1713,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:80",{"_index":1716,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:93",{"_index":1722,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1754,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":1755,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1760,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:114",{"_index":1770,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:134",{"_index":1768,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:163",{"_index":1769,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:192",{"_index":1762,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:225",{"_index":1763,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:32",{"_index":1761,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:35",{"_index":1764,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:60",{"_index":1765,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:80",{"_index":1766,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:95",{"_index":1767,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":1881,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/repl.ts",{"_index":1883,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":2204,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2207,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":2209,"title":{},"body":{"index.html":{}}}],["started",{"_index":2028,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":2076,"title":{},"body":{"index.html":{}}}],["state",{"_index":2539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.counter",{"_index":2542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1817,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":189,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":256,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["status_message",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["status_message.success",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":224,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":2234,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":487,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/google.strategy",{"_index":1271,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategy",{"_index":384,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":2065,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2199,"title":{},"body":{"index.html":{}}}],["style",{"_index":2244,"title":{},"body":{"index.html":{}}}],["sub",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2322,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2315,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1156,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1136,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1139,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('joinconversation",{"_index":1142,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1145,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1149,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('updatemessage",{"_index":1153,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["substantial",{"_index":2328,"title":{},"body":{"license.html":{}}}],["success",{"_index":107,"title":{},"body":{"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["successfuly",{"_index":1377,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":360,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":370,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1103,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1101,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1100,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1104,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1102,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":2117,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2355,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1031,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2196,"title":{},"body":{"index.html":{}}}],["system",{"_index":1006,"title":{},"body":{"controllers/HealthController.html":{}}}],["system'})@healthcheck",{"_index":995,"title":{},"body":{"controllers/HealthController.html":{}}}],["system_error",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["system_error.conflict",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.forbidden",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.internal_server_error",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.method_not_allowed",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_acceptable",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_found",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.payload_too_large",{"_index":897,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["system_error.request_timeout",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.too_many_requests",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unauthorized",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unsupported_media_type",{"_index":898,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["t",{"_index":1614,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1888,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1887,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":2082,"title":{},"body":{"index.html":{}}}],["take",{"_index":1778,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":2128,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1107,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["templates",{"_index":2182,"title":{},"body":{"index.html":{}}}],["teneno",{"_index":239,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":2138,"title":{},"body":{"index.html":{}}}],["terminusmodule",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":2219,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2222,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2221,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2218,"title":{},"body":{"index.html":{}}}],["text",{"_index":576,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateMessageDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["thanks",{"_index":2226,"title":{},"body":{"index.html":{}}}],["then(async",{"_index":2466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thinking",{"_index":2054,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":2043,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1535,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1536,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1537,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":257,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(payload",{"_index":1292,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.signuplocal(dto",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(payload",{"_index":1291,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.updatepassword(dto",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('app_secret",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversations",{"_index":1210,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.find((element",{"_index":1203,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.foreach((element",{"_index":1213,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversationsservice",{"_index":676,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":678,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":687,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":692,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(dto",{"_index":680,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":683,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":685,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":690,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":694,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.counter",{"_index":2545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.disk.checkstorage('storage",{"_index":1014,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":903,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":906,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":917,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":909,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findallmessages(message['conversationid",{"_index":1224,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.findallmessages(updatemessagedto['conversationid",{"_index":1220,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmember(conversationid",{"_index":1208,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1485,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":1789,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens(newuser.id",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.githubsuccess(data.access_token",{"_index":1300,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.handlemessage(exception",{"_index":216,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.health.check",{"_index":1007,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.signasync",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":222,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":347,"title":{},"body":{"injectables/AppService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":1011,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('mem_rss",{"_index":1008,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagesservice.createmessage",{"_index":1171,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.findallmessages(conversationid",{"_index":1170,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.getmember",{"_index":1174,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.joinconversation",{"_index":1167,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.remove(message",{"_index":1181,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.updatemessage(updatemessagedto",{"_index":1178,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.oauthservice.githubredirect(req",{"_index":1264,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.googlelogin(req",{"_index":1260,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.postsservice.addcomment(userid",{"_index":1449,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(userid",{"_index":1429,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1454,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":1441,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1447,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(userid",{"_index":1431,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1433,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1436,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1444,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1451,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1439,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1098,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1507,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1511,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1509,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":715,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":729,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":721,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":727,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.update",{"_index":725,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.post.create",{"_index":1474,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1495,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1480,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1484,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1490,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1504,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1498,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1774,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":1798,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":1796,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":1787,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":367,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":1623,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server.emit('message",{"_index":1172,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.server.emit('refresh",{"_index":1179,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.tovalidate(metatype",{"_index":1807,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1738,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":1749,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":181,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":1741,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":1744,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["thresholdpercent",{"_index":1015,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":1045,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":828,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["thuong",{"_index":2293,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2289,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2212,"title":{},"body":{"index.html":{}}}],["time",{"_index":2148,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["timeoutinterceptor",{"_index":1640,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":228,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":2169,"title":{},"body":{"index.html":{}}}],["title",{"_index":798,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":2045,"title":{},"body":{"index.html":{}}}],["token",{"_index":363,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/OauthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["too_many_requests",{"_index":2452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":2151,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2349,"title":{},"body":{"license.html":{}}}],["total",{"_index":1773,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2235,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1801,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1802,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1086,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trading",{"_index":2242,"title":{},"body":{"index.html":{}}}],["training",{"_index":2270,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2291,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1324,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1325,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1590,"title":{},"body":{"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":1061,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["travel",{"_index":1600,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":1638,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"classes/PaginationDto.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty()@length(3",{"_index":748,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["truong",{"_index":2294,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["tslint",{"_index":1932,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":2190,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2263,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2250,"title":{},"body":{"index.html":{}}}],["type",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2380,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1653,"title":{},"body":{"classes/UpdateMessageDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":1813,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":1901,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2075,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1127,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["typing(conversationid",{"_index":1147,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["ui/ux",{"_index":2272,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apicreatedresponse({description",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["undefined})@apicreatedresponse({type",{"_index":631,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["undefined})@apioperation({summary",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@arrayfielddecorator('files",{"_index":879,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":743,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["undefined})@multifielddecorator(['undefined",{"_index":872,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/avatars",{"_index":861,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/covers",{"_index":866,"title":{},"body":{"controllers/FileController.html":{}}}],["under",{"_index":2287,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2217,"title":{},"body":{"index.html":{}}}],["university",{"_index":1961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unknown",{"_index":634,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":2460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported_media_type",{"_index":2459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["update(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1366,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(dto",{"_index":1404,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1405,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":623,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":656,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":657,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateconversationmembersdto",{"_index":2396,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updateconversationroles",{"_index":2397,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updated",{"_index":724,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":600,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":624,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":660,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":661,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updatemessage",{"_index":1128,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@messagebody",{"_index":1176,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["updatemessage(updatemessagedto",{"_index":1151,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":1152,"title":{"classes/UpdateMessageDto.html":{}},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto['conversationid",{"_index":1214,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['messageid",{"_index":1217,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['text",{"_index":1219,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updateoneconversationbyiddto",{"_index":2398,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updatepassword",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":428,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1367,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1438,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1408,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1409,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostsdto",{"_index":2399,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updaterolesconversation",{"_index":625,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":664,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":665,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuseravatardto",{"_index":130,"title":{"classes/UpdateUserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusercoverdto",{"_index":136,"title":{"classes/UpdateUserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":125,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusersavatar",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1709,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1729,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":859,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":852,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadavatar(data",{"_index":920,"title":{},"body":{"classes/FileService.html":{}}}],["uploadavatar(file",{"_index":856,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatardto",{"_index":921,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadcover",{"_index":853,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadcover(data",{"_index":924,"title":{},"body":{"classes/FileService.html":{}}}],["uploadcover(file",{"_index":863,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcoverdto",{"_index":925,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadedfile",{"_index":883,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":884,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":2014,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":854,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":868,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpost",{"_index":919,"title":{},"body":{"classes/FileService.html":{}}}],["uploadpost(data",{"_index":927,"title":{},"body":{"classes/FileService.html":{}}}],["uploadposts",{"_index":855,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":875,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpostsdto",{"_index":928,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":1692,"title":{},"body":{"classes/UserEntity.html":{}}}],["upsertreactpostdto",{"_index":2401,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uptest",{"_index":2216,"title":{},"body":{"index.html":{}}}],["url",{"_index":933,"title":{},"body":{"classes/FileService.html":{},"injectables/OauthService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/variables.html":{}}}],["url'})@isstring()@isnotempty",{"_index":1562,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["use",{"_index":838,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":840,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["useclass",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["usecounterstore",{"_index":1833,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":1051,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["usefactory",{"_index":492,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["useguards(authguard('google",{"_index":1254,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(rtguard",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenamevalidator",{"_index":771,"title":{"classes/usenameValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiokresponse({description",{"_index":1372,"title":{},"body":{"controllers/PostsController.html":{}}}],["user)'})@apiokresponse({description",{"_index":630,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":649,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":871,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1871,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":1757,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":837,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":839,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":843,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1629,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.includes(role",{"_index":1628,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1627,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user01",{"_index":779,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user02",{"_index":780,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user:read",{"_index":2511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user:write",{"_index":2510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_error",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":1118,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":848,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":1717,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1703,"title":{},"body":{"classes/UserEntity.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1697,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":75,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:108",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:122",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:136",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:72",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:83",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:94",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.dto.ts",{"_index":1663,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["users.length",{"_index":1782,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":1734,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/request",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":157,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/entities/user.entity",{"_index":1119,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["users/users.module",{"_index":74,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["userscontroller",{"_index":1704,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":63,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":158,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usually",{"_index":1955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uuid",{"_index":712,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["v4",{"_index":711,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["val",{"_index":1331,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":373,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/CreateConversationDto.html":{},"injectables/GoogleStrategy.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(accesstoken",{"_index":965,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(fullnamevalidator",{"_index":1596,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":2021,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":1811,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1702,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":378,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1604,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":1634,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":1989,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":777,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["validation",{"_index":2100,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":1986,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":1799,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":593,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":1991,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":1983,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":1048,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1819,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2410,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":2084,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":1080,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1092,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":2097,"title":{},"body":{"index.html":{}}}],["verifycallback",{"_index":967,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["versa",{"_index":2103,"title":{},"body":{"index.html":{}}}],["version",{"_index":2372,"title":{},"body":{"properties.html":{}}}],["view",{"_index":2490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":201,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":2255,"title":{},"body":{"index.html":{}}}],["wait",{"_index":1859,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":2018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":1081,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1094,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":2447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":2334,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2330,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2205,"title":{},"body":{"index.html":{}}}],["web",{"_index":2258,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":2037,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":1884,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["websocketgateway",{"_index":1155,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["websocketserver",{"_index":1132,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["whether",{"_index":2346,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":1838,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":2306,"title":{},"body":{"license.html":{}}}],["world",{"_index":246,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{}}}],["writtenposts",{"_index":1481,"title":{},"body":{"injectables/PostsService.html":{}}}],["x",{"_index":2162,"title":{},"body":{"index.html":{}}}],["years",{"_index":1558,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["yes",{"_index":1084,"title":{},"body":{"injectables/LoggerService.html":{}}}],["you'd",{"_index":2230,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2367,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2364,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2365,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":1992,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2366,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ROLE, RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@RoleDecorator(ROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AdminModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n  constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { PaginationDto } from 'src/core/common/pagination.dto';\nimport { ROLE, RoleDecorator } from 'src/core/roles';\nimport { Public } from '../auth/decorators';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from '../users/dto/request';\nimport {\n  IAllUsers,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@RoleDecorator(ROLE.ADMIN)\n@Controller('admin')\nexport class AdminUsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Get('users/all')\n  @ApiOperation({ summary: 'Get list all public users' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getAllUsers(@Query() dto: PaginationDto): Promise {\n    return this.usersService.getAllUsers(dto);\n  }\n\n  @Public()\n  @Get('users/:userId')\n  @ApiOperation({\n    summary: 'Get user profile by user-id',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getUserProfile(\n    @Param('userId') userId: string,\n  ): Promise {\n    return this.usersService.getUserProfile(userId);\n  }\n\n  @Patch('users/profile/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async update(\n    @Param('userId') userId: string,\n    @Body() dto: UpdateUserProfileDto,\n  ): Promise {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('users/avatar/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersAvatar(\n    @Param() userId: string,\n    @Body() dto: UpdateUserAvatarDto,\n  ): Promise {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('users/cover/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersCover(\n    @Param() userId: string,\n    @Body() dto: UpdateUserCoverDto,\n  ): Promise {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('users/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user by user-id' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deleteUserById(@Param('userId') userId: string): Promise {\n    return this.usersService.deleteUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(request, response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    request: Request,\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        timestamp: new Date().toISOString(),\n        message: exception.stack,\n        path: request.url,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: '{code: 1, data: {Hello world}, message: \"\"'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@Controller('/')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Teneno homepage' })\n  @ApiResponse({\n    status: 200,\n    description: '{code: 1, data: {Hello world}, message: \"\"',\n  })\n  @ApiResponse({ status: 404, description: 'Not found' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            OauthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './infrastructure/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\nimport { OauthModule } from './infrastructure/oauth/oauth.module';\nimport { join } from 'path';\n\n@Module({\n    imports: [\n        InterceptorModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            // envFilePath: ['.env'],\n            // envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n        }),\n        LoggerModule.forRoot(),\n        ServeStaticModule.forRoot({\n            rootPath: `${__dirname}/../docs`,\n            // rootPath: join(__dirname, '..', 'docs'),\n            renderPath: '/',\n            // exclude: ['/api*'],\n        }),\n        PrismaModule,\n        TerminusModule,\n        AuthModule,\n        OauthModule,\n        AdminModule,\n        UsersModule,\n        FilesModule,\n        PostsModule,\n        ConversationsModule,\n        MessagesModule,\n    ],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n        {\n            provide: APP_GUARD,\n            useClass: AtGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: RolesGuard,\n        },\n    ],\n})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer.apply(LoggerContextMiddleware).forRoutes('*');\n        //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n        //   .forRoutes(UsersController);\n        // .forRoutes('users');\n        // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n        // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\nexport class AppService {\n  constructor(@Logger('AppService') private logger: LoggerService) {}\n\n  getHello(): string {\n    this.logger.log('Hello World', '200');\n    return 'Hello World from Teneno!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    // if true will enter with access-token , and another hand\n    public canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride('isPublic', [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n        if (isPublic) return true;\n\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(private config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            ignoreExpiration: false,\n            passReqToCallback: false,\n        });\n    }\n\n    validate(payload: IJwtPayload): IJwtPayload {\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: undefined})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account.'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: undefined, type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { ITokens } from './dto/response';\nimport {\n  RESPONSES_MESSAGE,\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {\n    this.authService = authService;\n  }\n\n  @Public()\n  @Post('signup')\n  @ApiOperation({ summary: 'Create new user account.' })\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiCreatedResponse({\n    description: RESPONSES_MESSAGE.CREATE_USER,\n    type: SignupDto,\n  })\n  async signupLocal(@Body() dto: SignupDto): Promise {\n    return this.authService.signupLocal(dto);\n  }\n\n  @Public()\n  @Post('signin')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Login to user account' })\n  async signinLocal(@Body() dto: LoginDto): Promise {\n    return this.authService.signinLocal(dto);\n  }\n\n  @Post('logout')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Logout user account (user)' })\n  async logout(@GetCurrentUserId() userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @Post('refresh')\n  @ApiBearerAuth()\n  @UseGuards(RtGuard)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Logout account on all devices' })\n  async refreshToken(\n    @GetCurrentUserId() userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    return this.authService.refreshToken(userId, refreshToken);\n  }\n\n  @Put('password')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Update user password' })\n  async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n    return this.authService.updatePassWord(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n    imports: [\n        PrismaModule,\n        JwtModule,\n        // HttpModule,\n        // JwtModule.registerAsync({\n        //   imports: [ConfigModule],\n        //   useFactory: async (configService: ConfigService) => ({\n        //     secret: configService.get(\"APP_SECRET\"),\n        //     signOptions: { expiresIn: configService.get(\"EXPIRE_AT_TIME\") },\n        //   }),\n        //   inject: [ConfigService],\n        // })\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, AtStrategy, RtStrategy],\n    exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ConflictException,\n    ForbiddenException,\n    Inject,\n    Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport { ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport {\n    AUTH_ERROR,\n    SYSTEM_ERROR,\n    USER_ERROR,\n} from 'src/core/constants/status-message';\nimport { comparePassword, hashPassword } from 'src/core/helpers';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(ConfigService)\n        private configService: ConfigService,\n        private prismaService: PrismaService,\n        private jwtService: JwtService,\n    ) {}\n\n    async getTokens(userId: string, email: string): Promise {\n        const [at, rt] = await Promise.all([\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n                },\n            ),\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n                },\n            ),\n        ]);\n        return { accessToken: at, refreshToken: rt };\n    }\n\n    async updateRtHash(userId: string, rt: string) {\n        const hash = await hashPassword(rt);\n        await this.prismaService.user.update({\n            where: {\n                id: userId,\n            },\n            data: {\n                hashedRefreshToken: hash,\n            },\n        });\n    }\n\n    async signupLocal(dto: SignupDto): Promise {\n        const hash = await hashPassword(dto.password);\n\n        const userExist = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ email: dto.email }, { username: dto.username }],\n            },\n        });\n\n        if (userExist.length > 0)\n            throw new ConflictException(USER_ERROR.DUPLICATE);\n\n        const newUser = await this.prismaService.user.create({\n            data: {\n                email: dto.email,\n                password: hash,\n                username: dto.username,\n            },\n        });\n\n        const tokens = await this.getTokens(newUser.id, newUser.email);\n        await this.updateRtHash(newUser.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async signinLocal(dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const passwordMatches = await comparePassword(\n            dto.password,\n            user.password,\n        );\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async logout(userId: string): Promise {\n        await this.prismaService.user.updateMany({\n            where: {\n                id: userId,\n                hashedRefreshToken: {\n                    not: null,\n                },\n            },\n            data: { hashedRefreshToken: null },\n        });\n    }\n\n    async refreshToken(userId: string, refreshToken: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n        if (!user || !user.hashedRefreshToken)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const hashMatches = await comparePassword(\n            refreshToken,\n            user.hashedRefreshToken,\n        );\n        if (!hashMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async updatePassWord(dto: UpdatePasswordDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n\n        const passwordMatches = await comparePassword(\n            dto.oldPassword,\n            user.password,\n        );\n\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (dto.newPassword === dto.oldPassword)\n            throw new ForbiddenException(AUTH_ERROR.SAME_PASSWORD);\n\n        if (passwordMatches) {\n            await this.prismaService.user.update({\n                where: { email: dto.email },\n                data: {\n                    password: await hashPassword(dto.newPassword),\n                },\n            });\n        }\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\n\nexport class CommentEntity {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  reactions: number[];\n\n  @IsJSON()\n  @IsNotEmpty()\n  replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ConversationEntity {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty({ required: false, nullable: true })\n  description: string | null;\n\n  @ApiProperty()\n  avatar: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  @ApiProperty()\n  members: string[];\n\n  @ApiProperty()\n  creator: string;\n\n  @ApiProperty()\n  admins: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\nimport { ConversationsService } from './conversations.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n  constructor(private readonly conversationsService: ConversationsService) {\n    this.conversationsService = conversationsService;\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new conversation (user)' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  @ApiCreatedResponse({\n    type: ConversationEntity,\n    description: 'The new conversation has been created.',\n  })\n  async createConversation(@Body() dto: CreateConversationDto) {\n    return await this.conversationsService.createConversation(dto);\n  }\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    isArray: true,\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllConversations(@Body() dto: GetAllConversationDto) {\n    return this.conversationsService.getAllConversations(dto);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getConversationById(\n    @Param('id') id: string,\n    @Body() dto: GetOneConversationDto,\n  ) {\n    return this.conversationsService.getConversationById(id, dto);\n  }\n\n  @Patch(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  updateConversationById(\n    @Param('id') id: string,\n    @Body() dto: UpdateConversationDto,\n  ) {\n    return this.conversationsService.updateConversationById(id, dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Delete one conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteConversationById(\n    @Param('id') id: string,\n    @Body() dto: DeleteConversationDto,\n  ) {\n    return this.conversationsService.deleteConversationById(id, dto);\n  }\n\n  @Patch(':conversationId/updateMembers')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update members list of current conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateMembersConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateMembersConversationDto,\n  ) {\n    return this.conversationsService.updateMembersConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/deleteAdmins')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Delete one admin of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteOneAdminConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: DeleteOneAdminConversationDto,\n  ) {\n    return this.conversationsService.deleteOneAdminConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/updateRoles')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Change role of any member of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateRolesConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateRolesConversationDto,\n  ) {\n    return this.conversationsService.updateRolesConversation(\n      conversationId,\n      dto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_imports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [ConversationsController],\n  providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\nimport { CONVERSATION_ERROR } from 'src/core/constants/status-message';\n\n@Injectable()\nexport class ConversationsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createConversation(dto: CreateConversationDto) {\n    const newConversation = await this.prismaService.conversation.create({\n      data: {\n        id: uuid(),\n        name: dto.name,\n        description: dto.description,\n        avatar: '',\n        members: dto.members,\n        admins: dto.admins,\n        creator: dto.creator,\n      },\n    });\n    return newConversation;\n  }\n\n  async getAllConversations(dto: GetAllConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n      },\n      select: {\n        id: true,\n        name: true,\n        avatar: true,\n      },\n    });\n    return list;\n  }\n\n  async getConversationById(id: string, dto: GetOneConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n        AND: {\n          id: id,\n        },\n      },\n    });\n    return list;\n  }\n\n  updateConversationById(id: string, dto: UpdateConversationDto) {\n    const updated = this.prismaService.conversation.update({\n      where: {\n        id: id,\n      },\n      data: {\n        name: dto.name,\n        description: dto.description,\n        avatar: dto.avatar,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteConversationById(id: string, dto: DeleteConversationDto) {\n    const list = await this.prismaService.conversation.findUnique({\n      where: {\n        id: id,\n      },\n    });\n    if (list['creator'] === dto.userId) {\n      await this.prismaService.conversation.delete({\n        where: {\n          id: id,\n        },\n      });\n      return '';\n    }\n    return false;\n  }\n\n  async updateMembersConversation(\n    conversationId: string,\n    dto: UpdateMembersConversationDto,\n  ) {\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteOneAdminConversation(\n    conversationId: string,\n    dto: DeleteOneAdminConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n\n    if (list.length === 0) {\n      return CONVERSATION_ERROR.NOT_CREATOR;\n    }\n    const updated = list[0]['admins'].filter((admin) => admin !== dto.userId);\n\n    await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: updated,\n      },\n    });\n    return updated;\n  }\n\n  async updateRolesConversation(\n    conversationId: string,\n    dto: UpdateRolesConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n    if (list.length === 0) {\n      return CONVERSATION_ERROR.NOT_CREATOR;\n    }\n\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: dto.admins,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'creator01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01', required: false, nullable: true})@IsString()@IsNotEmpty()@Length(3, 120)@MinLength(2, {message: 'Description is too short, must be at least 3 characters!'})@MaxLength(121, {message: 'Description is too long, must be at most 120 characters!'})@Validate(usenameValidator, {message: 'Description must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01'})@IsString()@IsNotEmpty()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class CreateConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Name must be not begin with number!',\n  })\n  name: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n    required: false,\n    nullable: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 120)\n  @MinLength(2, {\n    message: 'Description is too short, must be at least 3 characters!',\n  })\n  @MaxLength(121, {\n    message: 'Description is too long, must be at most 120 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Description must be not begin with number!',\n  })\n  description?: string;\n\n  @ApiProperty({\n    type: String,\n    example: ['user01', 'user02'],\n  })\n  @IsArray()\n  members: string[];\n\n  @ApiProperty({\n    type: String,\n    example: ['admin01', 'admin02'],\n  })\n  @IsArray()\n  admins: string[];\n\n  @ApiProperty({\n    type: String,\n    example: 'creator01',\n  })\n  @IsString()\n  creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels } from '@nestjs/swagger';\n\n@ApiExtraModels()\nexport class CreateMessageDto {\n  id: string;\n  senderId: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetAllConversationDto } from './get-conversation.dto';\n\nexport class DeleteConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsIntereptor.html":{"url":"injectables/ErrorsIntereptor.html","title":"injectable - ErrorsIntereptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsIntereptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/exception.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable()\nexport class ErrorsIntereptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError((err) =>\n          throwError(\n            () => new HttpException('New message', HttpStatus.BAD_GATEWAY),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n    constructor(private prismaService: PrismaService) {}\n\n    async use(req: Request, res: Response, next: NextFunction) {\n        const userId = req.params.userId;\n        const userExist = await this.prismaService.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n            },\n        });\n        if (\n            userExist === null ||\n            userExist === undefined ||\n            userExist.id === ''\n        ) {\n            throw new NotFoundException('User not found');\n        }\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UploadedFile,\n  UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiPayloadTooLargeResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n  ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\nimport {\n  ArrayFieldDecorator,\n  SingleFieldDecorator,\n  MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n  description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('files')\nexport class FileController {\n  constructor(private readonly fileService: FilesService) {}\n\n  @Post('avatar')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @SingleFieldDecorator('./public/avatars')\n  async uploadAvatar(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadAvatar(file);\n  }\n\n  @Post('cover')\n  @ApiOperation({ summary: 'Upload cover file form data (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @SingleFieldDecorator('./public/covers')\n  async uploadCover(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadCover(file);\n  }\n\n  @Post('posts')\n  @ApiOperation({ summary: 'Upload post with multi images (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ArrayFieldDecorator('files', true, 10, './public/posts')\n  async uploadPosts(\n    @UploadedFiles() files: Array,\n  ): Promise {\n    return this.fileService.uploadPosts(files);\n  }\n\n  @Post('multi')\n  @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @MultiFieldDecorator(\n    [\n      { name: 'item_1', maxCount: 1, required: true },\n      { name: 'item_2', maxCount: 1 },\n      { name: 'item_3', maxCount: 1 },\n      { name: 'item_4', maxCount: 1 },\n      { name: 'item_5', maxCount: 1 },\n    ],\n    './public/multi',\n  )\n  async uploadMulti(\n    @UploadedFiles() files: Express.Multer.File[],\n  ): Promise {\n    return this.fileService.uploadMulti(files);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileService.html":{"url":"classes/FileService.html","title":"class - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/src/services/file.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadAvatar\n                            \n                            \n                                uploadCover\n                            \n                            \n                                uploadPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \nuploadAvatar(data: UploadAvatarDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/src/services/file.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadCover\n                        \n                    \n                \n            \n            \n                \nuploadCover(data: UploadCoverDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/src/services/file.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPost\n                        \n                    \n                \n            \n            \n                \nuploadPost(data: UploadPostsDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/src/services/file.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadPostsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { UploadAvatarDto, UploadCoverDto, UploadPostsDto } from '@/dto';\nimport axiosConfig from './axios.config';\n\nconst ENDPOINT = '/files';\n\nexport class FileService {\n  uploadAvatar(data: UploadAvatarDto, onUploadProgress: any) {\n    const url = `${ENDPOINT}/avatar`;\n\n    const formData = new FormData();\n    formData.append('file', data);\n\n    return axiosConfig.post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress,\n    });\n  }\n\n  uploadCover(data: UploadCoverDto, onUploadProgress: any) {\n    const url = `${ENDPOINT}/cover`;\n\n    const formData = new FormData();\n    formData.append('file', data);\n\n    return axiosConfig.post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress,\n    });\n  }\n\n  uploadPost(data: UploadPostsDto, onUploadProgress: any) {\n    const url = `${ENDPOINT}/posts`;\n\n    const formData = new FormData();\n    formData.append('files', data);\n\n    return axiosConfig.post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/get-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/google.strategy.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/google.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\nimport { Injectable } from '@nestjs/common';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n    constructor() {\n        super({\n            clientID: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: process.env.GOOGLE_CALLBACK_URL,\n            scope: ['email', 'profile'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: any,\n        done: VerifyCallback,\n    ): Promise {\n        const { name, emails, photos } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n            picture: photos[0].value,\n            accessToken,\n        };\n        done(null, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                readiness\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        readiness\n                        \n                    \n                \n            \n            \n                \n                    \n                    readiness()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Health check for server system'})@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n    DiskHealthIndicator,\n    HealthCheck,\n    HealthCheckResult,\n    HealthCheckService,\n    MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Health')\n@Public()\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private memory: MemoryHealthIndicator,\n        private disk: DiskHealthIndicator,\n    ) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Health check for server system' })\n    @HealthCheck()\n    async readiness(): Promise {\n        return await this.health.check([\n            async () => await this.memory.checkRSS('mem_rss', 768 * 2 ** 20),\n            async () =>\n                await this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n            async () =>\n                await this.disk.checkStorage('storage', {\n                    path: '/',\n                    thresholdPercent: 0.5,\n                }),\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesGateway.html":{"url":"classes/MessagesGateway.html","title":"class - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                typing\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(conversationId: string, createMessageDto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinConversation')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(conversationId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\n\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n  @WebSocketServer() server: Server;\n  constructor(private readonly messagesService: MessagesService) {}\n\n  @SubscribeMessage('joinConversation')\n  joinConversation(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('senderId') senderId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    return this.messagesService.joinConversation(\n      conversationId,\n      senderId,\n      client.id,\n    );\n  }\n\n  @SubscribeMessage('findAllMessages')\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\n    return this.messagesService.findAllMessages(conversationId);\n  }\n\n  @SubscribeMessage('createMessage')\n  async createMessage(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody() createMessageDto: CreateMessageDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const message = await this.messagesService.createMessage(\n      conversationId,\n      createMessageDto,\n      client.id,\n    );\n    this.server.emit('message', message);\n    return message;\n  }\n\n  @SubscribeMessage('typing')\n  async typing(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('isTyping') isTyping: boolean,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const name = await this.messagesService.getMember(\n      conversationId,\n      client.id,\n    );\n\n    client.broadcast.emit('typing', { senderId: name, isTyping });\n  }\n\n  @SubscribeMessage('updateMessage')\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n\n  @SubscribeMessage('removeMessage')\n  async remove(@MessageBody() message: string) {\n    const refresh = await this.messagesService.remove(message);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                getMember\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMessage\n                        \n                    \n                \n            \n            \n                \ncreateMessage(conversationId: string, createMessageDto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: any; senderId: any; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMember\n                        \n                    \n                \n            \n            \n                \ngetMember(conversationId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class MessagesService {\n  conversations = [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ];\n\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\n    this.conversations.find((element) => element.id === conversationId).members[\n      clientId\n    ] = senderId;\n    return Object.values(\n      this.conversations.find((element) => element.id === conversationId)\n        .members,\n    );\n  }\n\n  findAllMessages(conversationId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .messages;\n  }\n\n  getMember(conversationId: string, clientId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .members[clientId];\n  }\n\n  createMessage(\n    conversationId: string,\n    createMessageDto: CreateMessageDto,\n    clientId: string,\n  ) {\n    const message = {\n      id: uuid(),\n      senderId: this.getMember(conversationId, clientId),\n      text: createMessageDto.text,\n    };\n    this.conversations\n      .find((element) => element.id === conversationId)\n      .messages.push(message);\n    return message;\n  }\n\n  updateMessage(updateMessageDto: UpdateMessageDto) {\n    this.conversations.forEach((element) => {\n      if (element.id === updateMessageDto['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === updateMessageDto['messageId']) {\n            item.text = updateMessageDto['text'];\n          }\n        });\n      }\n    });\n    return this.findAllMessages(updateMessageDto['conversationId']);\n  }\n\n  async remove(message: string) {\n    this.conversations.forEach((element) => {\n      if (element.id === message['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === message['messageId']) {\n            element.messages.splice(element.messages.indexOf(item), 1);\n          }\n        });\n      }\n    });\n\n    return this.findAllMessages(message['conversationId']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OauthController.html":{"url":"controllers/OauthController.html","title":"controller - OauthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OauthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                githubAuthRedirect\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubAuthRedirect(req: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/redirect')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@ApiOAuth2(['user:read'])@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Google account (not execute directly).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthRedirect(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@ApiOAuth2(['user:write'])@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Google account (not execute directly).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Query,\n    Redirect,\n    Req,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOAuth2,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\nimport { Public } from '../auth/decorators';\nimport { OauthService } from './oauth.service';\n\n@ApiTags('OAuth')\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('oauth')\nexport class OauthController {\n    private access_token: string;\n    constructor(private readonly oauthService: OauthService) {}\n\n    @Get('google')\n    @ApiOAuth2(['user:read'])\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary: 'Connect to your Google account (not execute directly).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async googleAuth(@Req() req) {\n        return req;\n    }\n\n    @Get('google/redirect')\n    @ApiOAuth2(['user:write'])\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Google account (not execute directly).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async googleAuthRedirect(@Req() req) {\n        return this.oauthService.googleLogin(req);\n    }\n\n    @Get('github/redirect')\n    // @Redirect('/success', 302)\n    async githubAuthRedirect(@Query() req: string) {\n        return this.oauthService.githubRedirect(req);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OauthModule.html":{"url":"modules/OauthModule.html","title":"module - OauthModule","body":"\n                   \n\n\n\n\n    Modules\n    OauthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_OauthModule_imports\n\n\n\ncluster_OauthModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleStrategy\n                        \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OauthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OauthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OauthService } from './oauth.service';\nimport { OauthController } from './oauth.controller';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n    imports: [AuthModule],\n    controllers: [OauthController],\n    providers: [OauthService, GoogleStrategy],\n    exports: [OauthService],\n})\nexport class OauthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OauthService.html":{"url":"injectables/OauthService.html","title":"injectable - OauthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OauthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                githubRedirect\n                            \n                            \n                                    Async\n                                githubSuccess\n                            \n                            \n                                    Async\n                                googleLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/oauth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubRedirect(req: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubSuccess(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport axios from 'axios';\nimport { axiosRequest } from 'src/core/helpers';\nimport { AuthService } from '../auth/auth.service';\nimport { SignupDto } from '../auth/dto/request';\n\n@Injectable()\nexport class OauthService {\n    constructor(private readonly authService: AuthService) {}\n\n    async googleLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from google';\n        }\n\n        const payload = {\n            email: req.user.email,\n            password: req.user.email,\n            username: req.user.email,\n        } as SignupDto;\n\n        await this.authService.signupLocal(payload);\n\n        return await this.authService.signinLocal(payload);\n    }\n\n    async githubRedirect(req: string) {\n        // client must request to this url https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email\n        if (!req) {\n            return 'Not found user from github';\n        }\n\n        const requestToken = req['code'];\n\n        const data = await axiosRequest(\n            'post',\n            `https://github.com/login/oauth/access_token?client_id=${process.env.GITHUB_CLIENT_ID}&client_secret=${process.env.GITHUB_SECRET}&code=${requestToken}`,\n            { accept: 'application/json' },\n        );\n        return await this.githubSuccess(data.access_token);\n    }\n\n    async githubSuccess(token: string) {\n        const data = await axiosRequest('get', 'https://api.github.com/user', {\n            Authorization: 'token ' + token,\n        });\n        const payload = {\n            email: data.email || `${data.login}@gmail.com`,\n            password: data.id.toString(),\n            username: data.login,\n        } as SignupDto;\n        await this.authService.signupLocal(payload);\n        return await this.authService.signinLocal(payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                limit\n                            \n                            \n                                order\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 1, nullable: true, description: 'Page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 10, nullable: true, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, description: 'asc, desc', example: 'asc', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    example: 1,\n    nullable: true,\n    description: 'Page number',\n  })\n  current: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    example: 10,\n    nullable: true,\n    description: 'Number of items per page',\n  })\n  limit: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    description: 'asc, desc',\n    example: 'asc',\n    nullable: true,\n  })\n  order: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                published\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class PostEntity {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  files: string[];\n\n  @IsBoolean()\n  @IsNotEmpty()\n  published: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n  ParseUUIDPipe,\n  Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  UpdatePostDto,\n  ReactionsPost,\n} from './dto/post/request';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiPayloadTooLargeResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n  ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n  ICreatePost,\n  IGetPostOfUser,\n  IGetPublicPost,\n  IUpdatePost,\n  IUpdateReaction,\n} from './dto/post/response';\nimport {\n  ICreateComment,\n  IGetComment,\n  IUpdateComment,\n} from './dto/comment/response';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Posts')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n  description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('posts')\nexport class PostsController {\n  constructor(private postsService: PostsService) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Get all posts of user by user-id' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  @ApiCreatedResponse({ description: 'Create new post successfuly' })\n  async createPost(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: CreatePostDto,\n  ): Promise {\n    return this.postsService.createPost(userId, dto);\n  }\n\n  @Post('private/all')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get all public and private posts of user',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllPostsOfUser(\n    @GetCurrentUserId() userId: string,\n  ): Promise | null {\n    return this.postsService.getAllPostsOfUser(userId);\n  }\n\n  @Get(':userId/all')\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all public posts of user by user-id' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllPublicPosts(\n    @Param('userId', new ParseUUIDPipe()) userId: string,\n  ): Promise | null {\n    return this.postsService.getAllPublicPosts(userId);\n  }\n\n  @Get(':postId')\n  @Public()\n  @ApiOperation({ summary: 'Get one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getOnePostById(\n    @Param('postId', new ParseUUIDPipe()) postId: string,\n  ): Promise {\n    return this.postsService.getOnePostById(postId);\n  }\n\n  @Patch('update')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updatePost(@Body() dto: UpdatePostDto): Promise {\n    return this.postsService.updatePost(dto);\n  }\n\n  @Delete('delete')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deletePost(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: DeleteOnePost,\n  ): Promise {\n    return this.postsService.deletePost(userId, dto);\n  }\n\n  @Post('reaction')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'React to post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async reactionPost(@Body() dto: ReactionsPost): Promise {\n    return this.postsService.reactionPost(dto);\n  }\n\n  @Public()\n  @Get(':postId/comments')\n  @ApiOperation({ summary: 'Get all comments of the post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllComments(\n    @Param('postId', new ParseUUIDPipe()) postId: string,\n  ): Promise {\n    console.log(postId);\n    return this.postsService.getAllComments(postId);\n  }\n\n  @Post('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Add a new comment to post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async addComment(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: CreateCommentDto,\n  ): Promise {\n    return this.postsService.addComment(userId, dto);\n  }\n\n  @Put('comments/update/text')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update a comment in post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateComment(\n    @Body() dto: UpdateCommentTextDto,\n  ): Promise {\n    return this.postsService.updateComment(dto);\n  }\n\n  @Delete('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete a comment in post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteComment(@Body() dto: DeleteCommentDto): Promise {\n    return this.postsService.deleteComment(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:243\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  ReactionsPost,\n  UpdatePostDto,\n} from './dto/post/request';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n  ICreatePost,\n  IGetPostOfUser,\n  IGetPublicPost,\n  IUpdatePost,\n  IUpdateReaction,\n} from './dto/post/response';\nimport {\n  ICreateComment,\n  IGetComment,\n  IUpdateComment,\n} from './dto/comment/response';\nimport {\n  POST_ERROR,\n  RESPONSES_MESSAGE,\n  USER_ERROR,\n} from 'src/core/constants/status-message';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createPost(userId: string, dto: CreatePostDto): Promise {\n    const post = await this.prismaService.post.create({\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        authorId: userId,\n        // categories: {\n        //   create: [\n        //     {\n        //       createAt: new Date(),\n        //       category: {\n        //         create: {\n        //           id: uuid(),\n        //           name: 'New category',\n        //         },\n        //       },\n        //     },\n        //   ],\n        // },\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        published: true,\n        authorId: true,\n        createdAt: true,\n      },\n    });\n    return post;\n  }\n\n  async getAllPostsOfUser(userId: string): Promise | null {\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        published: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllPublicPosts(userId: string): Promise | null {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    }\n    if (list.length === 0) {\n      throw new NotFoundException(POST_ERROR.EMPTY);\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n        published: true,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getOnePostById(postId: string): Promise {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        published: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async updatePost(dto: UpdatePostDto): Promise {\n    const list = await this.getOnePostById(dto.postId);\n\n    if (!list) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n\n    if (list.authorId !== dto.authorId) {\n      throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n    }\n\n    return await this.prismaService.post.update({\n      where: {\n        id: dto.postId,\n      },\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        published: dto.published,\n      },\n      select: {\n        title: true,\n        description: true,\n        published: true,\n        files: true,\n        updatedAt: true,\n      },\n    });\n  }\n\n  async deletePost(userId: string, dto: DeleteOnePost): Promise {\n    const identify = await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n      select: {\n        authorId: true,\n      },\n    });\n\n    if (!identify) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n\n    if (identify.authorId !== userId) {\n      throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n    }\n\n    await this.prismaService.post.delete({\n      where: {\n        id: dto.postId,\n      },\n    });\n    return 'This post has been deleted!';\n  }\n\n  async reactionPost(dto: ReactionsPost): Promise {\n    const checkExist = await this.prismaService.reaction.findMany({\n      where: {\n        postId: dto.postId,\n        userId: dto.favouritorId,\n      },\n    });\n\n    if (checkExist.length > 0) {\n      throw new BadRequestException('You already reacted to this post');\n    }\n    await this.prismaService.reaction.create({\n      data: {\n        userId: dto.favouritorId,\n        postId: dto.postId,\n        type: dto.reactionType,\n      },\n    });\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n      select: {\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllComments(postId: string): Promise {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n      select: {\n        comments: true,\n      },\n    });\n  }\n\n  async addComment(\n    userId: string,\n    dto: CreateCommentDto,\n  ): Promise {\n    const checkPost = await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n    });\n\n    if (!checkPost) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n    return this.prismaService.comment.create({\n      data: {\n        text: dto.text,\n        postId: dto.postId,\n        authorId: userId,\n      },\n    });\n  }\n\n  async updateComment(dto: UpdateCommentTextDto): Promise {\n    return await this.prismaService.comment.update({\n      where: {\n        id: dto.id,\n      },\n      data: {\n        text: dto.text,\n      },\n      select: {\n        text: true,\n        updatedAt: true,\n      },\n    });\n  }\n\n  async deleteComment(dto: DeleteCommentDto): Promise {\n    await this.prismaService.comment.delete({\n      where: {\n        id: dto.id,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_COMMENT;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService, ConfigModule],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    super({\n      datasources: {\n        db: {\n          url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n          // url: process.env.DATABASE_URL,\n        },\n      },\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE } from './roles.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    // return false;\n    const { request } = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () => user.roles.some((role) => user.roles.includes(role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n    constructor(\n        @Inject(ConfigService)\n        private config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            passReqToCallback: true,\n        });\n    }\n\n    validate(req: Request, payload: any) {\n        const refreshToken = req\n            .get('authorization')\n            .replace('Bearer', '')\n            .trim();\n        return {\n            ...payload,\n            refreshToken,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(timeout(1000));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(\n  CreateMessageDto,\n) {\n  id: string;\n  conversationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from 'src/infrastructure/users/entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, [\n  'email',\n  'oldPassword',\n  'newPassword',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAvatarDto.html":{"url":"classes/UpdateUserAvatarDto.html","title":"class - UpdateUserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCoverDto.html":{"url":"classes/UpdateUserCoverDto.html","title":"class - UpdateUserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:75\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:101\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:111\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:88\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:51\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:65\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:58\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:83\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from './dto/request';\nimport { UsersService } from './users.service';\nimport {\n  IFindUserByEmail,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from './dto/response';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {\n    this.usersService = usersService;\n  }\n\n  @Public()\n  @Get('profile/:userIdOrUsername')\n  @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getPublicUserByIdOrUsername(\n    @Param('userIdOrUsername') userIdOrUsername: string,\n  ): Promise {\n    return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n  }\n\n  @Public()\n  @Get('find/:email')\n  @ApiOperation({ summary: 'Find user account by email' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getUserByEmail(\n    @Param('email') email: string,\n  ): Promise {\n    return this.usersService.getUserByEmail(email);\n  }\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Get user profile by user-id (all)',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async getUserProfile(\n    @GetCurrentUserId() userId: string,\n  ): Promise {\n    return this.usersService.getUserProfile(userId);\n  }\n\n  @Patch('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async updateUsersProfile(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserProfileDto,\n  ): Promise {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('profile/avatar')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateUsersAvatar(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserAvatarDto,\n  ): Promise {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('profile/cover')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image by user id' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateUsersCover(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserCoverDto,\n  ): Promise {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user profile by email & password' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async deleteUser(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: LoginDto,\n  ): Promise {\n    return this.usersService.deleteUser(userId, dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [PrismaModule, AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    // consumer\n    //   .apply(ExistedUserMiddleware)\n    //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  NotAcceptableException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from './dto/request';\nimport {\n  IAllUsers,\n  IFindUserByEmail,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from './dto/response';\nimport { PaginationDto } from 'src/core/common/pagination.dto';\nimport {\n  AUTH_ERROR,\n  RESPONSES_MESSAGE,\n  SYSTEM_ERROR,\n  USER_ERROR,\n} from 'src/core/constants/status-message';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prismaService: PrismaService) {}\n\n  async getAllUsers(dto: PaginationDto): Promise {\n    const total = await this.prismaService.user.count();\n    const users = await this.prismaService.user.findMany({\n      // skip: Number(dto.limit) * (Number(dto.current) - 1),\n      take: Number(dto.limit) || 10,\n      orderBy: {\n        id: dto.order as any,\n      },\n      select: {\n        id: true,\n        email: true,\n        username: true,\n        createdAt: true,\n      },\n    });\n    return {\n      total,\n      orderBy: dto.order || 'asc',\n      pageItems: users.length,\n      pageLimit: Number(dto.limit) || 10,\n      pageCurrent: Number(dto.current) || 1,\n      users: users,\n    };\n  }\n\n  async getPublicUserByIdOrUsername(\n    userIdOrUsername: string,\n  ): Promise {\n    const identify = await this.prismaService.user.findMany({\n      where: {\n        OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n      },\n    });\n    if (identify.length === 0)\n      throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return identify[0];\n  }\n\n  async getUserByEmail(email: string): Promise {\n    const identify = await this.prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n      select: {\n        username: true,\n        email: true,\n      },\n    });\n\n    if (!identify) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return identify;\n  }\n\n  async getUserProfile(userId: string): Promise {\n    const profile = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n\n    if (!profile) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return profile;\n  }\n\n  async updateUsersProfile(\n    userId: string,\n    dto: UpdateUserProfileDto,\n  ): Promise {\n    await this.prismaService.userProfile.upsert({\n      where: {\n        userId: userId,\n      },\n      create: {\n        ...dto,\n        userId: userId,\n      },\n      update: {\n        ...dto,\n      },\n    });\n    const newProfile = await this.getPublicUserByIdOrUsername(userId);\n    return newProfile;\n  }\n\n  async updateUsersAvatar(\n    userId: string,\n    dto: UpdateUserAvatarDto,\n  ): Promise {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newAvatar = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        profile: {\n          select: {\n            avatar: true,\n          },\n        },\n      },\n    });\n    return newAvatar;\n  }\n\n  async updateUsersCover(\n    userId: string,\n    dto: UpdateUserCoverDto,\n  ): Promise {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newCover = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        profile: {\n          select: {\n            cover: true,\n          },\n        },\n      },\n    });\n    return newCover;\n  }\n\n  async deleteUser(userId: string, dto: LoginDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        email: true,\n        password: true,\n      },\n    });\n\n    if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    const matchEmail: number = dto.password.localeCompare(user.password);\n    const matchPassword: boolean = await comparePassword(\n      dto.password,\n      user.password,\n    );\n\n    if (matchEmail === 0 || !matchPassword)\n      throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    if (!matchPassword)\n      throw new NotAcceptableException(AUTH_ERROR.PASSWORD_NOT_MATCH);\n\n    await this.prismaService.userProfile.delete({\n      where: {\n        userId: userId,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_USER;\n  }\n\n  async deleteUserById(userId: string): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n\n    await this.prismaService.user.delete({\n      where: {\n        id: userId,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_USER;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/src/main.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/router/index.ts\n            \n            variable\n            router\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/auth.service.ts\n            \n            class\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                client/src/services/auth.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/axios.config.ts\n            \n            variable\n            axiosConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/conversations.service.ts\n            \n            class\n            ConversationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                client/src/services/conversations.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/file.service.ts\n            \n            class\n            FileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                client/src/services/file.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/posts.service.ts\n            \n            class\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                client/src/services/posts.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/user.service.ts\n            \n            class\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                client/src/services/user.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/stores/counter.ts\n            \n            variable\n            useCounterStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/setup.config.ts\n            \n            function\n            setup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.config.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            AUTH_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            CONVERSATION_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            POST_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            RESPONSES_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            STATUS_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            SYSTEM_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            USER_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/axios.ts\n            \n            variable\n            axiosRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/exception.interceptor.ts\n            \n            injectable\n            ErrorsIntereptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            randomInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            class\n            MessagesGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.controller.ts\n            \n            controller\n            OauthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.service.ts\n            \n            injectable\n            OauthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            nodeExternals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            axios : ^0.27.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : ^4.2.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EAlcohol   (src/.../enum.ts)\n                        \n                        \n                            EEducation   (src/.../enum.ts)\n                        \n                        \n                            EGender   (src/.../enum.ts)\n                        \n                        \n                            EMaritalStatus   (src/.../enum.ts)\n                        \n                        \n                            ENotification   (src/.../enum.ts)\n                        \n                        \n                            EOrder   (src/.../enum.ts)\n                        \n                        \n                            EOtpStatus   (src/.../enum.ts)\n                        \n                        \n                            EReligion   (src/.../enum.ts)\n                        \n                        \n                            ESocial   (src/.../enum.ts)\n                        \n                        \n                            EUpdateUserProfile   (src/.../enum.ts)\n                        \n                        \n                            EUserRoles   (src/.../enum.ts)\n                        \n                        \n                            ROLE   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EAlcohol\n                    \n                \n                        \n                            \n                                 SOMETIMES\n                            \n                        \n                        \n                            \n                                Value : sometime\n                            \n                        \n                        \n                            \n                                 USUALLY\n                            \n                        \n                        \n                            \n                                Value : usually\n                            \n                        \n                        \n                            \n                                 NEVER\n                            \n                        \n                        \n                            \n                                Value : never\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EEducation\n                    \n                \n                        \n                            \n                                 PRIMARY\n                            \n                        \n                        \n                            \n                                Value : primary\n                            \n                        \n                        \n                            \n                                 SECONDARY\n                            \n                        \n                        \n                            \n                                Value : secondary\n                            \n                        \n                        \n                            \n                                 HIGH_SCHOOL\n                            \n                        \n                        \n                            \n                                Value : high_school\n                            \n                        \n                        \n                            \n                                 COLLEGE\n                            \n                        \n                        \n                            \n                                Value : college\n                            \n                        \n                        \n                            \n                                 UNIVERSITY\n                            \n                        \n                        \n                            \n                                Value : university\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EGender\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : femail\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EMaritalStatus\n                    \n                \n                        \n                            \n                                 SINGLE\n                            \n                        \n                        \n                            \n                                Value : single\n                            \n                        \n                        \n                            \n                                 MARRIED\n                            \n                        \n                        \n                            \n                                Value : married\n                            \n                        \n                        \n                            \n                                 DIVORCED\n                            \n                        \n                        \n                            \n                                Value : divorced\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ENotification\n                    \n                \n                        \n                            \n                                 LIKE\n                            \n                        \n                        \n                            \n                                Value : like\n                            \n                        \n                        \n                            \n                                 MESSAGE\n                            \n                        \n                        \n                            \n                                Value : message\n                            \n                        \n                        \n                            \n                                 MATCH\n                            \n                        \n                        \n                            \n                                Value : match\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EOrder\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EOtpStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : approved\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EReligion\n                    \n                \n                        \n                            \n                                 BUDDHISM\n                            \n                        \n                        \n                            \n                                Value : buddhism\n                            \n                        \n                        \n                            \n                                 GOD\n                            \n                        \n                        \n                            \n                                Value : god\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 NON_RELIGIONS\n                            \n                        \n                        \n                            \n                                Value : non-religion\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ESocial\n                    \n                \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EUpdateUserProfile\n                    \n                \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 GENDER\n                            \n                        \n                        \n                            \n                                Value : gender\n                            \n                        \n                        \n                            \n                                 DESCRIPTION\n                            \n                        \n                        \n                            \n                                Value : description\n                            \n                        \n                        \n                            \n                                 CHILDREN\n                            \n                        \n                        \n                            \n                                Value : children\n                            \n                        \n                        \n                            \n                                 ALCOHOL\n                            \n                        \n                        \n                            \n                                Value : alcohol\n                            \n                        \n                        \n                            \n                                 RELIGION\n                            \n                        \n                        \n                            \n                                Value : religion\n                            \n                        \n                        \n                            \n                                 HEIGHT\n                            \n                        \n                        \n                            \n                                Value : height\n                            \n                        \n                        \n                            \n                                 MARITAL_STATUS\n                            \n                        \n                        \n                            \n                                Value : maritalStatus\n                            \n                        \n                        \n                            \n                                 EDUCATION\n                            \n                        \n                        \n                            \n                                Value : education\n                            \n                        \n                        \n                            \n                                 PURPOSEID\n                            \n                        \n                        \n                            \n                                Value : purposeId\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EUserRoles\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    src/core/roles/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            randomInt   (src/.../random.ts)\n                        \n                        \n                            setup   (src/.../setup.config.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInt\n                        \n                    \n                \n            \n            \n                \nrandomInt(min: number, max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/configs/setup.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setup\n                        \n                    \n                \n            \n            \n                \nsetup(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\n\n\nDatabase diagram\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAdmin\nAuth\n\n\n\n\n✅ Get list all users\n✅ Signup\n\n\n✅ Get user profile by id\n✅ Signin\n\n\n✅ Update user profile\n✅ Signout\n\n\n✅ Delete user by user-id\n✅ Refresh access-token\n\n\n\n✅  Update password\n\n\n\n\n\n\nOAuth\nFiles\n\n\n\n\n✅ Google signin\n✅ Upload single file (avatar, cover)\n\n\n⬜️ Facebook signin\n✅ Upload multi files\n\n\n✅ Github signin\n✅ Upload array-field files (post, sample_image)\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅ Create a new post\n\n\n✅ Find user account by email\n✅ Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅ Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅ Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅ Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅ Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\nWebpack hot-reload auto recompile the entire project each time a change occurs\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nPostgre x Heroku\nNest x Prisma\nDatabase for chat\nDatabase for social\n\nExample templates\n\nNest example\nNest awesome\nNest structure\nNest auth example\nNest social login\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nnpm run prisma:pull\n\n# generate the Prisma Client\nnpm run prisma:generate\n\n# Create env and migrate db\nnpm run prisma:migrate\n\n# Sync migrate change to db\nnpm run prisma:push# Open prisma studio\nnpm run prisma:studioRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OauthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    46 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.6.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github, chat, socket, passport, jwt, oauth2\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CreateNewConversationDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteConversationAdminsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteOnePostDto   (client/.../posts.dto.ts)\n                        \n                        \n                            DeleteUserProfile   (client/.../users.dto.ts)\n                        \n                        \n                            GetAllConversationsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            GetAllPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicUsersDto   (client/.../users.dto.ts)\n                        \n                        \n                            GetUserProfileDto   (client/.../users.dto.ts)\n                        \n                        \n                            SignUpLocalDto   (client/.../auth.dto.ts)\n                        \n                        \n                            UpdateConversationMembersDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateConversationRoles   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateOneConversationByIdDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdatePostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            UploadAvatarDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadCoverDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            UploadPostsDto   (client/.../files.dto.ts)\n                        \n                        \n                            UpsertReactPostDto   (client/.../posts.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/src/dto/conversations.dto.ts\n    \n    \n        \n            \n                \n                    \n                    CreateNewConversationDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteConversationAdminsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllConversationsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationMembersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationRoles\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateOneConversationByIdDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/src/dto/posts.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteOnePostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdatePostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpsertReactPostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/src/dto/users.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteUserProfile\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicUsersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetUserProfileDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/src/dto/auth.dto.ts\n    \n    \n        \n            \n                \n                    \n                    SignUpLocalDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/src/dto/files.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UploadAvatarDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadCoverDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            app   (client/.../main.ts)\n                        \n                        \n                            AUTH_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            axiosConfig   (client/.../axios.config.ts)\n                        \n                        \n                            axiosRequest   (src/.../axios.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            CONVERSATION_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            ENDPOINT   (client/.../auth.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../conversations.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../file.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../posts.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../user.service.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.config.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            nodeExternals   (webpack-hmr.config.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            POST_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSES_MESSAGE   (src/.../status-message.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            router   (client/.../index.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            STATUS_MESSAGE   (src/.../status-message.ts)\n                        \n                        \n                            SYSTEM_ERROR   (src/.../status-message.ts)\n                        \n                        \n                               (webpack-hmr.config.ts)\n                        \n                        \n                            useCounterStore   (client/.../counter.ts)\n                        \n                        \n                            USER_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createApp(App)\n                    \n                \n\n\n        \n    \n\n    src/core/constants/status-message.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SAME_PASSWORD: 'New password must be different from old password',\n  PASSWORD_NOT_MATCH: 'Password does not match',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CONVERSATION_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'Conversation not found',\n  NOT_CREATOR: 'You are not creator of this conversation',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'Post not found',\n  EMPTY: 'User not have post',\n  DUPLICATE: 'Post already exist',\n  NOT_AUTHOR: 'You are not author of this post',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSES_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  CREATE_USER: 'The new account has been created.',\n  DELETE_USER: 'The user account has been deleted.',\n  DELETE_COMMENT: 'The comment has been deleted.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATUS_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SUCCESS: 'Success.',\n  ERROR: 'Errors.',\n  WARNING: 'Warning.',\n  INFO: 'Info.',\n  UNKNOWN: 'Unknown.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  FORBIDDEN: 'Access denied',\n  NOT_FOUND: 'Not found',\n  INTERNAL_SERVER_ERROR: 'Internal server error',\n  BAD_REQUEST: 'Bad request',\n  UNAUTHORIZED: 'Unauthorized',\n  CONFLICT: 'Conflict',\n  TOO_MANY_REQUESTS: 'Too many requests',\n  METHOD_NOT_ALLOWED: 'Method not allowed',\n  NOT_ACCEPTABLE: 'Provided fields are not acceptable',\n  REQUEST_TIMEOUT: 'Request timeout',\n  PAYLOAD_TOO_LARGE: 'Payload too large',\n  UNSUPPORTED_MEDIA_TYPE: 'Unsupported media type',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'User not found',\n  DUPLICATE: 'User already exist',\n}\n                    \n                \n\n\n        \n    \n\n    client/src/services/axios.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                \n                    \n                        Default value : axios.create({\n  baseURL: import.meta.env.VITE_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n  },\n}) as AxiosInstance\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/axios.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    method: string,\n    url: string,\n    headers?: any,\n) => {\n    return await axios({\n        method: method,\n        url: url,\n        headers: headers,\n    }).then(async (response: any) => {\n        return await response.data;\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    client/src/services/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/auth'\n                    \n                \n\n\n        \n    \n\n    client/src/services/conversations.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/conversations'\n                    \n                \n\n\n        \n    \n\n    client/src/services/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/files'\n                    \n                \n\n\n        \n    \n\n    client/src/services/posts.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/posts'\n                    \n                \n\n\n        \n    \n\n    client/src/services/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/users'\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n    const config: ConfigService = app.get(ConfigService);\n\n    const swaggerConfig = new DocumentBuilder()\n        .setTitle('Teneno API')\n        .setDescription(\n            `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n        )\n        .setContact(\n            'Thuong Truong',\n            'https://github.com/thuongtruong1009',\n            'ititiu19228@student.hcmiu.edu.vn',\n        )\n        .addServer(config.get('BASE_URL'))\n        .addServer(config.get('HOST_URL'))\n        .setVersion('1.6.0')\n        .addTag('cats', 'default description')\n        .addBearerAuth({\n            type: 'http',\n            scheme: 'Bearer',\n            bearerFormat: 'JWT',\n            description: 'Paste a valid access token here.',\n            in: 'Header',\n        })\n        .addOAuth2({\n            type: 'oauth2',\n            description: 'Login with Google account',\n            flows: {\n                implicit: {\n                    authorizationUrl: config.get('GOOGLE_CALLBACK_URL'),\n                    scopes: {\n                        'user:write': 'create your account',\n                        'user:read': 'read your account',\n                    },\n                },\n            },\n        })\n        .addCookieAuth('optional-session-id')\n        .addBasicAuth()\n        .addSecurity('api_key', {\n            type: 'apiKey',\n            name: 'api_key',\n            in: 'header',\n        })\n        .build();\n\n    const options: ISwaggerOptions = {\n        operationIdFactory: (controllerKey: string, methodKey: string) =>\n            methodKey,\n    };\n    const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n    SwaggerModule.setup('api', app, document, {\n        swaggerOptions: {\n            persistAuthorization: true,\n        },\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    webpack-hmr.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodeExternals\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('webpack-node-externals')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('run-script-webpack-plugin')\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: ROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    client/src/router/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: () => import('../views/home.vue'),\n    },\n    {\n      path: '/about',\n      name: 'about',\n      component: () => import('../views/about.vue'),\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n\n    client/src/stores/counter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useCounterStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore({\n  id: 'counter',\n  state: () => ({\n    counter: 0,\n  }),\n  getters: {\n    doubleCount: (state) => state.counter * 2,\n  },\n  actions: {\n    increment() {\n      this.counter++;\n    },\n  },\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
