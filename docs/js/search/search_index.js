var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.192,1,2.296]],["body/classes/Admin.html",[0,0.302,1,4.19,2,1.45,3,0.147,4,0.147,5,0.132,6,6.194,7,0.176,8,0.008,9,0.008,10,0.008]],["title/controllers/AdminController.html",[11,1.572,12,3.333]],["body/controllers/AdminController.html",[0,0.241,1,2.883,3,0.117,4,0.117,5,0.105,7,0.14,8,0.009,9,0.007,10,0.007,11,1.974,12,5.3,13,2.025,14,4.934,15,2.694,16,0.294,17,0.916,18,4.475,19,4.094,20,4.475,21,4.094,22,4.273,23,4.273,24,4.273,25,4.094,26,2.989,27,4.094,28,4.475,29,1.293,30,3.929,31,2.785,32,2.192,33,4.185,34,4.505,35,4.934,36,2.538,37,3.534,38,3.534,39,3.375,40,0.509,41,2.529,42,3.375,43,3.375,44,3.233,45,3.233,46,3.233,47,3.233,48,4.934,49,4.934]],["title/modules/AdminModule.html",[50,1.424,51,3.129]],["body/modules/AdminModule.html",[0,0.247,1,2.963,3,0.12,4,0.12,5,0.108,7,0.144,8,0.009,9,0.007,10,0.007,12,5.89,13,2.609,16,0.305,17,0.941,50,2.304,51,6.251,52,2.6,53,3.471,54,5.072,55,5.072,56,5.072,57,5.012,58,6.092,59,3.851,60,2.963,61,2.862,62,5.741,63,3.588,64,5.89,65,4.165,66,5.741,67,5.741,68,4.302,69,5.072]],["title/injectables/AdminService.html",[58,3.129,70,0.747]],["body/injectables/AdminService.html",[0,0.276,3,0.134,4,0.134,5,0.12,7,0.161,8,0.009,9,0.007,10,0.007,16,0.277,17,1.05,40,0.583,58,5.413,70,1.292,71,2.1,72,5.655,73,2.654,74,4.259,75,4.589,76,0.819,77,6.401,78,1.208,79,0.907,80,0.977,81,5.164,82,2.731]],["title/controllers/AdminUsersController.html",[11,1.572,64,3.333]],["body/controllers/AdminUsersController.html",[0,0.119,1,1.424,3,0.058,4,0.058,5,0.052,7,0.069,8,0.009,9,0.004,10,0.004,11,0.975,13,1,15,1.33,16,0.272,17,0.452,18,4.069,19,2.482,20,2.714,21,2.482,22,2.591,23,2.591,24,2.591,25,2.482,26,1.476,27,2.482,28,2.714,29,0.639,30,1.94,31,1.375,32,1.082,33,2.067,34,2.225,35,2.436,36,2.351,37,1.745,38,1.745,39,1.666,40,0.647,41,1.249,42,1.666,43,1.666,44,1.596,45,1.596,46,1.596,47,1.596,48,2.436,49,2.436,64,3.214,76,0.871,78,1.284,79,0.965,80,1.039,82,1.177,83,6.278,84,2.436,85,0.275,86,0.791,87,2.408,88,3.789,89,3.789,90,4.245,91,4.368,92,4.245,93,4.245,94,2.436,95,1.454,96,2.533,97,2.758,98,3.702,99,2.82,100,3.789,101,2.825,102,2.758,103,3.027,104,1.226,105,2.97,106,2.436,107,4.176,108,2.758,109,2.591,110,2.773,111,2.758,112,2.758,113,4.223,114,2.225,115,2.758,116,3.502,117,2.758,118,2.758,119,3.587,120,2.758,121,2.758,122,3.017,123,2.758,124,2.225,125,3.587,126,2.758,127,1.942,128,4.289,129,2.758,130,2.225,131,3.587,132,2.758,133,2.482,134,2.758,135,4.176,136,1.596,137,1.533,138,3.702,139,2.067,140,2.067,141,2.067,142,4.294,143,3.951,144,2.436,145,1.533,146,2.067,147,2.758,148,2.436,149,2.225,150,2.225,151,2.225,152,2.225,153,2.758,154,3.18,155,2.436,156,1.533,157,2.758,158,3.785,159,1.666,160,3.941,161,3.885,162,2.758,163,1.44,164,2.758,165,2.758,166,1.555,167,3.789,168,2.436,169,2.758,170,2.436,171,2.758,172,2.854,173,2.436,174,2.758,175,2.436,176,2.758,177,2.758,178,2.758]],["title/interfaces/Alert.html",[179,1.845,180,3.129]],["body/interfaces/Alert.html",[3,0.153,4,0.088,5,0.08,7,0.183,8,0.009,9,0.006,10,0.006,16,0.212,40,0.616,41,2.663,85,0.674,95,1.533,122,4.137,166,2.956,179,2.439,180,4.756,181,2.264,182,2.977,183,1.393,184,5.848,185,2.027,186,3.276,187,3.738,188,3.738,189,3.738,190,3.413,191,4.498,192,5.065,193,4.407,194,3.413,195,4.744,196,2.836,197,4.744,198,4.407,199,1.859,200,3.489,201,5.474,202,1.984,203,4.407,204,2.264,205,1.66,206,3.413,207,3.17,208,3.413,209,3.413,210,3.17,211,3.413,212,3.413,213,6.528,214,3.413,215,4.744,216,3.413,217,3.413,218,3.413,219,5.893,220,3.17,221,3.413,222,3.413,223,3.413,224,3.413,225,3.413,226,2.836,227,3.413,228,5.196,229,3.738]],["title/interfaces/AlertOptions.html",[179,1.845,184,3.129]],["body/interfaces/AlertOptions.html",[3,0.15,4,0.085,5,0.076,7,0.18,8,0.009,9,0.005,10,0.005,16,0.205,40,0.688,41,2.582,80,1.254,85,0.659,95,1.447,122,4.011,166,2.598,179,2.364,180,4.011,181,2.167,182,2.848,183,0.959,184,5.783,185,1.965,186,2.433,187,3.576,188,3.576,189,3.576,190,3.266,191,4.392,192,5.66,193,4.273,194,3.266,195,6.093,196,3.779,197,6.093,198,5.66,199,2.9,200,3.407,201,6.033,202,1.946,203,4.273,204,2.167,205,1.588,206,3.266,207,3.033,208,3.266,209,3.266,210,3.033,211,3.266,212,3.266,213,6.478,214,3.266,215,4.6,216,3.266,217,3.266,218,3.266,219,5.78,220,3.033,221,3.266,222,3.266,223,3.266,224,3.266,225,3.266,226,2.75,227,3.266,228,5.037,229,3.576]],["title/classes/AllExceptionsFilter.html",[0,0.192,230,3.333]],["body/classes/AllExceptionsFilter.html",[0,0.126,2,0.604,3,0.061,4,0.061,5,0.055,7,0.073,8,0.009,9,0.004,10,0.004,16,0.238,17,0.479,40,0.558,41,3.785,73,1.212,76,0.929,78,1.155,79,0.867,80,0.934,82,1.247,85,0.292,86,0.827,95,0.96,99,1.007,104,0.983,137,2.493,163,0.618,185,1.546,186,2.612,202,2.086,230,3.361,231,2.582,232,1.76,233,3.84,234,4.474,235,5.692,236,5.458,237,5.458,238,5.458,239,4.938,240,4.485,241,5.458,242,2.582,243,3.874,244,2.922,245,2.984,246,3.632,247,2.817,248,2.922,249,2.922,250,2.922,251,3.618,252,7.237,253,4.822,254,5.408,255,2.922,256,5.562,257,4.2,258,4.485,259,2.922,260,2.922,261,3.994,262,3.976,263,2.922,264,4.485,265,2.922,266,2.922,267,1.457,268,3.84,269,2.056,270,2.922,271,2.922,272,4.485,273,2.582,274,2.582,275,2.582,276,2.582,277,2.922,278,2.922,279,3.962,280,2.984,281,5.834,282,2.922,283,4.485,284,2.922,285,5.458,286,2.922,287,2.922,288,5.754,289,4.485,290,6.604,291,2.922,292,2.582,293,2.922,294,2.922,295,2.922,296,6.604,297,2.922,298,2.922,299,2.922,300,4.485,301,1.691,302,2.582,303,3.874,304,2.922,305,2.19,306,1.087,307,1.691,308,1.691,309,2.838,310,2.357,311,2.922,312,2.922,313,2.922,314,2.357,315,2.922,316,2.922,317,2.922,318,2.922,319,2.922,320,4.09,321,1.625]],["title/controllers/AppController.html",[11,1.572,322,3.333]],["body/controllers/AppController.html",[0,0.169,3,0.082,4,0.082,5,0.074,7,0.099,8,0.009,9,0.005,10,0.005,11,1.972,13,1.423,16,0.287,17,0.644,26,2.1,29,0.909,36,2.01,40,0.591,76,0.955,78,1.224,79,0.919,80,0.99,82,1.675,85,0.392,86,1.028,87,1.846,95,1.142,96,2.63,104,1.345,105,2.076,109,3.37,110,2.606,136,2.272,137,2.182,143,3.101,156,2.182,158,2.182,159,3.37,160,2.272,163,1.495,246,3.712,247,2.026,257,2.272,261,3.741,262,3.979,267,1.957,280,3.712,301,2.272,314,3.166,322,4.18,323,3.467,324,7.067,325,7.067,326,4.928,327,5.579,328,5.579,329,3.925,330,3.925,331,3.925,332,3.467,333,5.235,334,3.925,335,3.925,336,3.925,337,4.928,338,3.925,339,5.579,340,3.925,341,3.925,342,4.318,343,3.925,344,5.579,345,3.925,346,3.925,347,5.579,348,3.925,349,2.371,350,2.941,351,3.166,352,4.928,353,6.49,354,4.928,355,2.612,356,4.318,357,3.467,358,2.941,359,3.925,360,3.925,361,3.467,362,3.925,363,3.925,364,2.761,365,3.925,366,5.579,367,4.928,368,4.928,369,3.467,370,3.925,371,3.467,372,3.925,373,3.925,374,3.925,375,3.925,376,3.925,377,5.579,378,3.925,379,5.734,380,5.579,381,3.925,382,3.925,383,3.925,384,2.941]],["title/modules/AppModule.html",[50,1.424,385,3.333]],["body/modules/AppModule.html",[0,0.121,3,0.059,4,0.059,5,0.053,7,0.071,8,0.009,9,0.004,10,0.005,13,1.578,16,0.315,17,0.461,40,0.256,50,1.394,51,4.827,52,1.273,53,2.099,57,3.971,59,2.329,60,1.451,61,1.401,63,2.17,65,3.083,76,0.557,78,0.53,79,0.398,80,0.429,86,0.518,99,1.5,104,0.506,110,2.033,159,2.63,205,2.09,230,3.261,232,1.103,235,1.977,257,2.519,261,2.099,301,3.083,303,3.37,306,1.046,322,3.991,355,1.87,356,4.566,357,2.483,385,6.647,386,2.483,387,2.483,388,2.483,389,4.341,390,4.827,391,4.827,392,4.827,393,4.827,394,4.827,395,4.827,396,4.827,397,3.971,398,2.811,399,2.483,400,3.845,401,5.298,402,2.811,403,2.483,404,3.261,405,2.811,406,4.352,407,4.352,408,5.997,409,3.845,410,1.977,411,2.811,412,2.811,413,3.261,414,2.811,415,2.267,416,2.811,417,2.811,418,3.511,419,3.544,420,1.87,421,4.352,422,2.267,423,2.811,424,2.106,425,2.811,426,2.811,427,2.811,428,2.811,429,2.811,430,2.106,431,2.811,432,2.811,433,2.483,434,2.811,435,3.062,436,2.811,437,2.811,438,2.811,439,3.511,440,2.811,441,2.811,442,2.811,443,1.778,444,2.483,445,1.87,446,3.845,447,2.811,448,2.267,449,2.811,450,2.811,451,2.811,452,2.811,453,2.811,454,2.17,455,4.352,456,4.352,457,3.845,458,2.811,459,2.811,460,2.811,461,2.811,462,2.811,463,2.811,464,2.811,465,2.811,466,4.352,467,2.811,468,1.87,469,2.811,470,2.811,471,2.106,472,4.352,473,3.845,474,2.811,475,2.811,476,2.811,477,4.352,478,2.811,479,2.811,480,2.811,481,2.811,482,4.352,483,2.106,484,5.731,485,5.731,486,2.483,487,2.811,488,2.811,489,2.267,490,2.811,491,2.811,492,3.845,493,2.811,494,2.811,495,3.845,496,3.261,497,4.352,498,3.845,499,2.811,500,4.352,501,2.811,502,2.811,503,1.563]],["title/injectables/AppService.html",[70,0.747,356,2.96]],["body/injectables/AppService.html",[0,0.205,3,0.099,4,0.099,5,0.09,7,0.119,8,0.009,9,0.006,10,0.006,16,0.276,17,0.78,40,0.581,50,1.524,60,2.457,70,1.07,71,1.561,73,2.643,76,0.815,78,1.202,79,0.903,80,0.972,85,0.475,86,1.175,87,2.044,101,2.091,104,0.857,105,2.371,163,1.007,186,2.031,202,1.731,226,3.073,234,3.41,242,4.205,243,4.855,245,4.78,326,5.63,332,5.63,333,5.795,335,3.348,337,4.205,342,3.167,356,4.24,404,3.566,443,3.011,471,6.3,504,4.205,505,6.347,506,4.759,507,4.759,508,4.205,509,4.205,510,4.759,511,4.759,512,3.839,513,4.205,514,4.759,515,4.205,516,4.759,517,5.63,518,7.673,519,3.253,520,7.673,521,4.759,522,6.373,523,3.167,524,6.373,525,4.205,526,4.759,527,3.839,528,4.759,529,3.566,530,4.759,531,4.205,532,4.759,533,4.759,534,4.759,535,4.759,536,4.759,537,4.759,538,4.759]],["title/injectables/AtGuard.html",[70,0.747,413,3.333]],["body/injectables/AtGuard.html",[0,0.213,3,0.163,4,0.103,5,0.093,7,0.124,8,0.009,9,0.006,10,0.006,16,0.28,17,0.81,32,1.939,40,0.595,70,1.097,71,1.621,73,2.049,76,0.937,78,1.381,79,1.037,80,1.117,82,2.109,85,0.493,86,1.205,99,2.792,104,1.177,110,3.419,163,1.548,183,1.171,202,1.342,205,2.564,306,1.839,320,5.485,321,2.747,410,3.477,413,4.896,489,6.713,539,4.366,540,5.773,541,5.773,542,4.366,543,4.942,544,5.773,545,4.169,546,4.942,547,2.645,548,6.534,549,4.942,550,5.773,551,3.987,552,2.86,553,3.127,554,4.942,555,3.127,556,4.942,557,3.987,558,3.288,559,4.942,560,4.942,561,6.534,562,4.366,563,4.942,564,4.366,565,4.366,566,4.942]],["title/injectables/AtStrategy.html",[70,0.747,567,3.129]],["body/injectables/AtStrategy.html",[0,0.227,3,0.11,4,0.11,5,0.099,7,0.132,8,0.009,9,0.006,10,0.006,16,0.304,17,0.862,32,2.063,40,0.62,70,1.142,71,1.725,73,2.18,76,0.871,78,1.284,79,0.964,80,1.038,85,0.525,86,1.254,87,2.146,104,0.947,105,2.532,163,1.112,183,1.245,200,3.512,234,2.814,419,5.308,420,3.498,443,3.327,445,4.527,552,3.043,553,3.327,555,3.327,567,4.787,568,4.645,569,3.512,570,4.645,571,5.258,572,6.804,573,7.978,574,5.258,575,4.787,576,3.939,577,4.645,578,3.939,579,3.327,580,3.327,581,3.327,582,5.258,583,5.258,584,5.258,585,4.645,586,4.645,587,6.011,588,4.645,589,4.645,590,5.258,591,4.645]],["title/controllers/AuthController.html",[11,1.572,592,3.333]],["body/controllers/AuthController.html",[0,0.117,3,0.057,4,0.057,5,0.051,7,0.068,8,0.009,9,0.004,10,0.004,11,0.962,13,0.987,15,1.313,16,0.27,17,0.446,18,3.729,19,2.457,20,2.686,21,2.457,22,2.565,23,2.565,24,2.565,25,2.457,26,1.457,27,2.457,28,2.686,29,0.63,31,1.357,32,1.068,36,2.366,37,1.722,38,1.722,39,1.644,40,0.685,41,1.232,42,1.644,43,1.644,44,1.575,45,1.575,46,1.575,47,1.575,76,0.866,78,1.277,79,0.959,80,1.033,82,1.161,85,0.272,86,0.783,87,2.403,91,2.457,95,1.323,96,2.631,99,2.742,101,1.865,103,2.313,104,1.22,105,2.96,110,2.437,113,3.776,135,1.915,136,1.575,137,1.513,140,2.039,142,4.273,143,3.932,145,1.513,156,1.513,158,3.764,160,3.699,161,4.091,163,1.432,202,0.739,262,2.939,267,1.357,306,1.579,350,4.789,351,2.195,384,4.789,404,2.039,468,1.811,496,2.039,509,2.404,513,2.404,519,1.922,581,1.722,592,3.181,593,2.404,594,6.248,595,4.975,596,3.75,597,3.75,598,3.75,599,3.75,600,2.404,601,2.722,602,4.61,603,4.475,604,2.722,605,2.404,606,2.722,607,2.722,608,4.245,609,2.722,610,2.404,611,3.561,612,2.722,613,4.417,614,2.722,615,2.404,616,4.147,617,2.722,618,2.722,619,2.722,620,2.404,621,4.505,622,2.722,623,2.047,624,2.722,625,2.404,626,2.722,627,2.404,628,4.147,629,2.722,630,2.191,631,2.722,632,1.457,633,3.181,634,3.729,635,2.404,636,2.195,637,3.472,638,2.039,639,2.404,640,1.811,641,2.404,642,1.811,643,2.722,644,2.722,645,2.722,646,2.722,647,2.039,648,2.404,649,2.722,650,2.722,651,2.722,652,2.722,653,2.722,654,4.245,655,2.722,656,2.722,657,2.722,658,1.915,659,2.722,660,2.722,661,2.722,662,2.404,663,2.722,664,2.722,665,2.722,666,2.722,667,2.722,668,2.722,669,2.722,670,2.722,671,2.722]],["title/modules/AuthModule.html",[50,1.424,389,2.815]],["body/modules/AuthModule.html",[0,0.204,3,0.099,4,0.099,5,0.089,7,0.119,8,0.009,9,0.006,10,0.006,13,2.303,16,0.307,17,0.777,34,3.821,50,2.034,52,2.145,53,3.064,59,3.4,60,2.445,61,2.362,63,3.167,65,4.148,87,1.348,205,1.859,342,3.152,389,5.65,397,4.759,418,3.821,419,4.769,435,4.469,443,2.997,444,4.185,552,2.742,567,5.784,592,5.371,634,5.615,635,4.185,672,4.185,673,4.737,674,4.185,675,4.185,676,5.784,677,4.737,678,4.469,679,4.185,680,4.737,681,4.737,682,6.353,683,3.821,684,4.737,685,4.737,686,4.737,687,4.185,688,4.737,689,4.737,690,4.185,691,4.737]],["title/injectables/AuthService.html",[70,0.747,634,2.815]],["body/injectables/AuthService.html",[0,0.09,3,0.043,4,0.043,5,0.039,7,0.052,8,0.009,9,0.003,10,0.003,16,0.254,17,0.34,31,1.035,32,0.815,40,0.674,70,0.574,71,0.681,73,1.417,75,3.273,76,0.927,78,1.366,79,1.026,80,1.105,85,0.207,86,0.63,87,2.405,95,1.507,99,1.922,103,2.773,104,1.273,105,2.886,110,2.034,113,2.879,163,1.341,166,1.579,202,2.197,234,2.7,262,1.035,306,2.554,321,3.683,419,3.991,420,1.382,443,1.314,468,1.382,471,4.179,505,3.847,508,1.835,512,1.675,515,1.835,519,3.863,581,1.314,594,3.019,595,4.461,596,3.019,597,3.019,598,3.019,599,3.019,600,3.019,605,3.019,610,3.019,611,3.048,615,1.835,616,3.063,620,3.019,621,3.357,627,3.019,628,3.55,630,2.604,634,2.162,640,1.382,641,1.835,658,3.063,683,1.675,687,3.847,690,3.019,692,1.835,693,3.417,694,4.354,695,3.417,696,4.354,697,2.077,698,6.341,699,2.077,700,3.417,701,2.077,702,2.077,703,2.077,704,4.094,705,4.751,706,2.077,707,2.077,708,2.077,709,2.077,710,2.077,711,2.077,712,2.077,713,3.417,714,5.577,715,2.077,716,2.077,717,2.077,718,1.556,719,2.077,720,1.675,721,1.556,722,2.077,723,2.077,724,1.461,725,1.461,726,3.781,727,1.675,728,1.835,729,2.756,730,1.835,731,2.077,732,3.417,733,3.417,734,3.417,735,2.077,736,2.077,737,1.675,738,4.07,739,2.077,740,3.019,741,2.433,742,4.354,743,2.077,744,1.835,745,1.675,746,5.577,747,1.978,748,3.417,749,2.077,750,1.111,751,2.077,752,2.077,753,2.077,754,6.063,755,2.077,756,2.077,757,2.077,758,2.077,759,2.077,760,5.046,761,3.262,762,4.927,763,5.577,764,1.835,765,3.019,766,4.354,767,4.354,768,4.354,769,4.354,770,2.077,771,3.417,772,3.019,773,2.077,774,2.077,775,2.077,776,1.835,777,2.077,778,2.077,779,2.077,780,2.077,781,1.382,782,2.077,783,2.077,784,1.675,785,2.077,786,2.077,787,2.077,788,2.077,789,2.077,790,2.077,791,2.077,792,2.162,793,3.417,794,3.417,795,3.417,796,2.077,797,2.077,798,2.077,799,2.077,800,2.077,801,2.077]],["title/classes/CommentEntity.html",[0,0.192,802,2.96]],["body/classes/CommentEntity.html",[0,0.21,2,0.673,3,0.068,4,0.068,5,0.061,7,0.082,8,0.009,9,0.005,10,0.005,16,0.175,29,0.754,36,1.97,40,0.817,76,0.963,85,0.325,95,1.558,96,2.802,99,1.122,101,2.138,103,2.287,166,3.241,172,3.238,185,1.677,186,3.608,199,2.138,204,4.434,454,4.018,523,2.166,632,4.03,781,3.238,802,3.238,803,2.875,804,3.374,805,6.652,806,5.829,807,4.079,808,5.188,809,6.479,810,3.908,811,4.304,812,4.304,813,4.299,814,3.647,815,3.255,816,5.829,817,3.878,818,3.255,819,3.255,820,2.875,821,3.255,822,3.255,823,4.847,824,4.867,825,3.255,826,3.255,827,3.255,828,4.299,829,4.299,830,3.255,831,5.111,832,3.255,833,4.205,834,3.424,835,4.867,836,4.304,837,3.888,838,1.35,839,1.81]],["title/classes/ConversationEntity.html",[0,0.192,840,2.296]],["body/classes/ConversationEntity.html",[0,0.198,2,0.625,3,0.063,4,0.063,5,0.057,7,0.076,8,0.009,9,0.004,10,0.004,16,0.2,29,0.7,36,2.445,40,0.802,76,0.992,79,1.139,80,0.702,85,0.301,91,2.663,95,1.521,96,2.885,101,2.448,103,1.185,109,3.763,127,3.324,166,2.662,183,0.716,185,1.586,186,3.013,200,2.374,204,2.462,205,1.185,226,3.004,307,4.577,454,4.285,623,2.219,792,2.911,808,5.67,810,4.777,811,5.424,812,5.262,833,4.487,834,3.919,836,3.463,837,3.333,838,1.253,839,2.557,840,2.374,841,2.669,842,4.241,843,3.707,844,4.082,845,3.88,846,3.919,847,6.112,848,3.021,849,3.021,850,5.024,851,6.229,852,6.229,853,3.021,854,3.021,855,3.021,856,3.021,857,4.064,858,3.021,859,3.021,860,4.667,861,5.571,862,5.022,863,3.021,864,3.021,865,3.021,866,3.021,867,3.021,868,3.021,869,3.021,870,4.6,871,3.021,872,4.922,873,3.021,874,3.021,875,3.711,876,1.185,877,3.711,878,2.437,879,2.437,880,2.437,881,2.125,882,2.669,883,2.669,884,3.021,885,3.021,886,3.021,887,3.021,888,3.021,889,3.021,890,3.021,891,3.021,892,3.021]],["title/controllers/ConversationsController.html",[11,1.572,893,3.333]],["body/controllers/ConversationsController.html",[0,0.097,1,1.889,3,0.047,4,0.047,5,0.043,7,0.057,8,0.009,9,0.003,10,0.003,11,0.798,13,0.819,15,1.089,16,0.236,17,0.37,18,2.316,19,2.118,20,2.316,21,2.118,22,2.211,23,2.211,24,2.211,25,2.118,26,1.209,27,2.118,28,2.316,29,0.523,31,1.126,32,0.886,36,2.373,37,1.429,38,1.429,39,1.365,40,0.69,41,1.023,42,1.365,43,1.365,44,1.307,45,1.307,46,1.307,47,1.307,76,0.876,78,1.291,79,0.97,80,1.044,82,0.964,85,0.225,86,0.675,87,2.373,91,3.071,95,1.468,96,2.547,98,4.101,99,2.694,101,2.888,103,1.436,104,1.233,109,2.211,113,4.439,135,4.624,136,1.307,137,1.256,138,1.589,139,1.693,142,4.273,143,3.932,145,1.256,146,1.693,156,1.256,158,3.805,160,3.804,161,4.135,163,1.448,166,2.263,205,1.436,306,1.974,308,3.804,519,1.023,623,1.765,632,1.959,633,2.742,637,1.503,647,1.693,834,2.575,840,3.392,844,3.47,845,2.118,847,5.905,893,2.742,894,1.996,895,3.722,896,3.233,897,4.076,898,4.076,899,3.233,900,4.076,901,4.076,902,4.076,903,4.076,904,1.996,905,3.071,906,2.259,907,6.241,908,2.259,909,3.233,910,2.259,911,1.996,912,3.733,913,2.259,914,4.815,915,2.259,916,1.996,917,3.206,918,2.259,919,5.33,920,2.259,921,4.975,922,1.996,923,2.259,924,3.66,925,2.259,926,1.996,927,3.53,928,2.259,929,4.687,930,2.259,931,1.996,932,3.206,933,2.259,934,2.259,935,1.996,936,3.206,937,2.259,938,2.259,939,1.996,940,3.206,941,2.259,942,3.233,943,2.952,944,3.233,945,2.259,946,3.53,947,1.996,948,1.589,949,1.307,950,2.259,951,2.259,952,2.259,953,2.259,954,2.259,955,2.259,956,2.259,957,2.259,958,2.259,959,4.614,960,2.259,961,2.259,962,2.259,963,2.259,964,2.259,965,2.259,966,4.614,967,2.259,968,2.259,969,2.259,970,2.259,971,2.259]],["title/modules/ConversationsModule.html",[50,1.424,390,3.129]],["body/modules/ConversationsModule.html",[0,0.244,3,0.118,4,0.118,5,0.107,7,0.142,8,0.009,9,0.007,10,0.007,13,2.587,16,0.304,17,0.928,50,2.284,52,2.564,53,3.441,57,4.995,59,3.818,60,2.923,61,2.823,63,3.557,65,4.129,68,4.243,390,6.337,397,4.995,415,4.567,893,5.853,946,5.742,947,5.002,972,5.002,973,5.002,974,5.662,975,5.662,976,5.662]],["title/injectables/ConversationsService.html",[70,0.747,946,2.96]],["body/injectables/ConversationsService.html",[0,0.105,1,2.009,3,0.051,4,0.051,5,0.046,7,0.061,8,0.009,9,0.004,10,0.004,16,0.218,17,0.4,32,0.957,36,1.107,40,0.678,70,0.653,71,0.8,73,1.011,74,1.622,75,3.334,76,0.929,78,1.369,79,1.096,80,1.107,81,1.967,82,1.04,85,0.243,86,0.717,87,2.404,95,1.487,103,2.378,104,1.268,109,4.096,113,4.335,127,2.199,163,1.607,166,3.003,190,1.967,191,3.232,200,1.258,202,2.021,205,2.66,226,1.176,308,3.924,519,3.37,741,2.923,750,2.083,807,1.216,842,3.834,843,1.622,844,3.369,845,3.739,846,1.715,896,3.438,897,3.438,898,4.291,899,3.438,900,3.438,901,3.438,902,4.291,903,4.291,904,3.438,905,3.209,911,3.438,912,3.901,916,2.154,917,3.35,921,5.346,922,3.438,926,3.438,927,3.69,931,3.438,932,3.35,935,2.154,936,3.35,939,2.154,940,3.35,946,2.59,977,2.154,978,2.438,979,2.438,980,2.438,981,2.438,982,2.438,983,2.438,984,2.438,985,2.438,986,2.438,987,1.967,988,3.892,989,2.438,990,3.892,991,3.438,992,5.545,993,3.892,994,4.857,995,5.545,996,2.738,997,1.715,998,2.154,999,1.967,1000,1.967,1001,1.715,1002,6.06,1003,6.412,1004,5.545,1005,2.438,1006,2.154,1007,2.438,1008,2.438,1009,3.438,1010,3.892,1011,2.438]],["title/classes/CreateCommentDto.html",[0,0.192,1012,3.129]],["body/classes/CreateCommentDto.html",[0,0.286,2,1.37,3,0.139,4,0.139,5,0.125,7,0.166,8,0.009,9,0.007,10,0.007,16,0.283,29,1.535,183,1.57,802,4.41,804,3.836,807,3.305,876,2.601,1012,5.526,1013,5.855,1014,4.966,1015,5.347,1016,5.347]],["title/classes/CreateConversationDto.html",[0,0.192,905,2.575]],["body/classes/CreateConversationDto.html",[0,0.287,2,1.375,3,0.139,4,0.139,5,0.125,7,0.167,8,0.009,9,0.007,10,0.007,16,0.283,29,1.54,166,2.411,183,1.575,840,3.432,905,4.555,949,3.849,1017,5.874,1018,3.849,1019,5.364,1020,6.65]],["title/classes/CreateMessageDto.html",[0,0.192,1021,3.129]],["body/classes/CreateMessageDto.html",[0,0.287,2,1.375,3,0.139,4,0.139,5,0.125,7,0.167,8,0.009,9,0.007,10,0.007,16,0.283,29,1.54,166,2.411,183,1.575,1019,5.364,1021,5.537,1022,5.874,1023,5.364,1024,7.87,1025,4.678,1026,5.874,1027,5.874]],["title/classes/CreatePostDto.html",[0,0.192,1028,3.129]],["body/classes/CreatePostDto.html",[0,0.285,2,1.366,3,0.138,4,0.138,5,0.124,7,0.166,8,0.009,9,0.007,10,0.007,16,0.282,29,1.53,36,1.879,183,1.565,876,2.592,1028,5.516,1029,5.837,1030,4.648,1031,4.396,1032,5.329,1033,5.329,1034,4.648,1035,3.536]],["title/classes/CustomDto.html",[0,0.192,881,3.129]],["body/classes/CustomDto.html",[0,0.28,2,1.014,3,0.103,4,0.103,5,0.092,7,0.123,8,0.009,9,0.006,10,0.006,16,0.234,29,1.136,36,2.209,40,0.708,76,0.832,80,1.185,85,0.49,95,1.57,96,2.42,99,2.965,103,2.862,166,3.297,185,2.242,186,3.314,204,3.48,454,3.873,810,4.693,811,5.168,812,4.327,814,4.873,833,4.222,836,4.055,837,3.904,838,2.035,881,4.575,1001,5.132,1036,4.335,1037,4.327,1038,8.603,1039,5.745,1040,4.907,1041,4.907]],["title/interfaces/CustomHttpExceptionResponse.html",[179,1.845,268,3.129]],["body/interfaces/CustomHttpExceptionResponse.html",[3,0.127,4,0.127,5,0.114,7,0.187,8,0.009,9,0.007,10,0.007,40,0.734,41,2.745,85,0.605,95,1.565,179,3.087,181,3.244,183,1.763,185,2.566,199,2.664,256,4.034,268,5.237,269,5.667,288,4.542,301,4.862,303,5.315,305,6.295,307,4.662,1042,4.89,1043,4.89]],["title/classes/DefaultDto.html",[0,0.192,1044,3.588]],["body/classes/DefaultDto.html",[0,0.278,2,1.332,3,0.135,4,0.135,5,0.121,7,0.162,8,0.008,9,0.007,10,0.007,40,0.704,76,0.988,80,1.308,85,0.643,185,2.662,307,4.963,843,5.503,846,5.819,1044,6.23,1045,5.691,1046,6.442,1047,6.442]],["title/classes/DeleteCommentDto.html",[0,0.192,1048,3.129]],["body/classes/DeleteCommentDto.html",[0,0.286,2,1.37,3,0.139,4,0.139,5,0.125,7,0.166,8,0.009,9,0.007,10,0.007,16,0.283,29,1.535,166,2.403,183,1.57,802,4.41,804,3.836,876,2.601,1014,4.966,1015,5.347,1016,5.347,1048,5.526,1049,5.855]],["title/classes/DeleteConversationDto.html",[0,0.192,912,3.129]],["body/classes/DeleteConversationDto.html",[0,0.287,2,1.375,3,0.139,4,0.139,5,0.125,7,0.167,8,0.009,9,0.007,10,0.007,16,0.283,29,1.54,103,2.609,183,1.575,840,3.432,876,2.609,912,5.537,949,3.849,1018,3.849,1050,5.874,1051,4.207]],["title/classes/DeleteMessageDto.html",[0,0.192,1052,3.129]],["body/classes/DeleteMessageDto.html",[0,0.286,2,1.37,3,0.139,4,0.139,5,0.125,7,0.166,8,0.009,9,0.007,10,0.007,16,0.283,29,1.535,40,0.604,183,1.57,807,3.305,1019,5.347,1023,5.347,1025,4.663,1026,5.855,1027,5.855,1052,5.526,1053,5.855]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.192,917,2.687]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.358,2,1.214,3,0.123,4,0.123,5,0.111,7,0.209,8,0.009,9,0.007,10,0.007,16,0.286,29,1.36,36,1.67,79,0.832,95,1.398,103,2.304,127,2.659,183,1.968,623,2.832,840,3.031,842,3.715,844,4.058,845,4.224,876,3.116,905,4.596,917,4.409,932,3.548,936,3.548,940,3.548,949,3.399,1018,3.399,1051,3.715,1054,4.131,1055,4.4,1056,4.4,1057,4.4]],["title/classes/DeleteOnePost.html",[0,0.192,1058,3.129]],["body/classes/DeleteOnePost.html",[0,0.332,2,1.328,3,0.134,4,0.134,5,0.121,7,0.161,8,0.009,9,0.007,10,0.007,16,0.231,40,0.585,76,0.822,85,0.641,95,1.356,96,2.389,185,2.657,804,4.781,836,4.285,837,4.125,838,2.663,1030,4.517,1058,5.423,1059,6.81,1060,6.421,1061,6.421]],["title/injectables/ErrorsInterceptor.html",[70,0.747,1062,3.333]],["body/injectables/ErrorsInterceptor.html",[0,0.246,3,0.119,4,0.119,5,0.107,7,0.143,8,0.009,9,0.007,10,0.007,16,0.282,17,0.936,40,0.52,70,1.204,71,1.873,76,0.73,78,1.077,79,0.809,80,0.871,85,0.57,86,1.322,104,1.028,163,1.207,232,2.24,261,2.753,306,2.124,545,4.402,547,3.055,1062,5.374,1063,5.044,1064,4.772,1065,5.045,1066,4.969,1067,5.473,1068,5.709,1069,4.538,1070,4.772,1071,5.709,1072,5.785,1073,3.174,1074,5.044,1075,3.799,1076,4.278,1077,5.709,1078,5.044,1079,5.709]],["title/classes/ExceptionFilter.html",[0,0.192,233,3.129]],["body/classes/ExceptionFilter.html",[0,0.256,2,1.228,3,0.124,4,0.124,5,0.112,7,0.149,8,0.009,9,0.007,10,0.007,16,0.287,17,0.974,40,0.541,76,0.76,78,1.121,79,0.842,80,0.906,85,0.593,86,1.355,104,1.07,163,1.256,232,2.884,233,5.171,239,6.439,251,5.929,256,3.952,1069,4.62,1072,5.929,1073,3.302,1080,6.494,1081,5.247,1082,7.983,1083,8.341,1084,5.94,1085,3.952,1086,5.94,1087,5.94]],["title/injectables/ExcludeNullInterceptor.html",[70,0.747,1088,3.333]],["body/injectables/ExcludeNullInterceptor.html",[0,0.248,3,0.12,4,0.12,5,0.108,7,0.145,8,0.009,9,0.007,10,0.007,16,0.283,17,0.944,40,0.525,70,1.21,71,1.889,76,0.737,78,1.086,79,0.816,80,0.878,85,0.574,86,1.329,104,1.037,163,1.218,232,2.259,247,3.721,545,4.415,547,3.081,792,3.643,1064,4.797,1065,5.072,1066,4.984,1067,5.489,1069,4.555,1070,4.797,1073,3.201,1075,3.831,1076,4.314,1088,5.402,1089,5.086,1090,5.757,1091,4.644,1092,5.757]],["title/injectables/ExistedUserMiddleware.html",[70,0.747,1093,3.333]],["body/injectables/ExistedUserMiddleware.html",[0,0.216,3,0.105,4,0.105,5,0.094,7,0.126,8,0.009,9,0.006,10,0.006,16,0.265,17,0.82,40,0.6,70,1.106,71,1.641,73,2.074,74,3.328,75,4.31,76,0.843,78,1.243,79,0.933,80,1.005,82,2.134,85,0.499,86,1.214,87,2.095,101,2.198,103,2.584,104,0.901,166,2.388,202,1.789,205,1.963,232,1.963,261,3.774,262,3.902,267,2.494,306,1.861,321,2.781,340,3.519,349,3.022,350,5.518,519,2.265,721,3.748,744,6.506,761,3.748,792,3.165,996,3.519,1066,4.728,1093,4.935,1094,5.94,1095,4.419,1096,4.935,1097,5.002,1098,5.819,1099,7.826,1100,5.002,1101,5.819,1102,4.035,1103,5.002,1104,5.002,1105,5.002]],["title/injectables/FacebookStrategy.html",[70,0.747,1106,3.129]],["body/injectables/FacebookStrategy.html",[0,0.209,3,0.135,4,0.101,5,0.091,7,0.122,8,0.009,9,0.006,10,0.006,16,0.278,17,0.795,32,1.903,40,0.442,70,1.083,71,1.591,73,3.007,76,0.826,78,0.915,79,1.027,80,0.74,85,0.484,86,1.189,87,2.063,95,1.457,99,2.499,104,0.873,105,2.401,116,5.709,183,1.149,202,1.97,257,3.735,320,4.835,552,2.806,553,3.068,555,3.068,569,3.743,575,4.539,576,4.835,578,4.835,579,3.068,595,5.102,704,3.453,737,5.85,1106,4.539,1107,4.284,1108,4.849,1109,4.284,1110,6.406,1111,4.849,1112,4.849,1113,4.849,1114,3.226,1115,3.226,1116,4.849,1117,3.911,1118,4.849,1119,4.284,1120,4.849,1121,4.284,1122,4.849,1123,3.911,1124,4.849,1125,5.7,1126,4.284,1127,4.284,1128,4.284,1129,4.284,1130,4.284,1131,4.284]],["title/controllers/FileController.html",[11,1.572,1132,3.333]],["body/controllers/FileController.html",[0,0.131,3,0.063,4,0.063,5,0.146,7,0.076,8,0.009,9,0.004,10,0.004,11,1.072,13,1.1,15,1.463,16,0.273,17,0.497,18,2.921,19,2.672,20,2.921,21,2.672,22,2.789,23,2.789,24,2.789,25,2.672,26,1.624,27,2.672,28,2.921,29,0.703,31,1.513,32,1.191,36,2.395,37,1.92,38,1.92,39,1.833,40,0.612,41,1.374,42,1.833,43,1.833,44,1.756,45,1.756,46,1.756,47,1.756,76,0.799,78,1.178,79,1.1,80,0.952,82,1.295,85,0.303,86,0.851,87,2.321,96,2.499,99,1.591,101,2.951,104,1.124,105,2.82,127,2.09,133,2.672,136,1.756,137,1.687,142,4.058,143,3.734,145,1.687,156,1.687,158,3.471,160,3.613,161,3.772,163,1.32,181,1.624,204,1.624,205,1.811,226,3.239,267,2.785,632,2.99,741,3.411,784,5.706,839,3.106,1035,3.594,1132,3.459,1133,2.681,1134,4.506,1135,4.506,1136,4.935,1137,4.935,1138,2.681,1139,6.858,1140,3.034,1141,6.695,1142,3.034,1143,3.034,1144,3.034,1145,2.681,1146,3.034,1147,2.681,1148,3.034,1149,3.034,1150,2.681,1151,3.034,1152,5.515,1153,4.078,1154,4.078,1155,3.034,1156,4.616,1157,3.034,1158,2.681,1159,3.034,1160,4.616,1161,3.034,1162,3.247,1163,4.616,1164,3.034,1165,5.586,1166,5.586,1167,2.681,1168,4.078,1169,4.078,1170,2.448,1171,2.448,1172,3.723,1173,3.071,1174,2.681,1175,2.681,1176,2.681,1177,3.034,1178,2.681,1179,2.681,1180,3.034,1181,2.274,1182,3.034,1183,3.034,1184,3.034,1185,3.034,1186,3.034,1187,3.034,1188,3.034,1189,3.034,1190,3.034,1191,3.034,1192,3.034,1193,5.933,1194,3.034,1195,3.034,1196,3.034,1197,3.034,1198,3.034]],["title/classes/FileService.html",[0,0.192,1181,3.333]],["body/classes/FileService.html",[0,0.197,2,0.945,3,0.095,4,0.095,5,0.086,7,0.115,8,0.009,9,0.006,10,0.006,16,0.223,40,0.758,76,0.9,78,1.328,79,0.997,80,1.073,85,0.456,86,1.143,104,1.268,113,2.358,163,1.488,202,2.26,306,2.618,309,4.453,741,4.139,772,7.582,781,4.682,1035,2.445,1134,5.001,1135,5.001,1181,4.646,1199,3.686,1200,6.2,1201,6.2,1202,6.667,1203,8.824,1204,4.569,1205,6.2,1206,6.667,1207,4.569,1208,6.2,1209,6.667,1210,4.569,1211,3.686,1212,4.569,1213,3.686,1214,4.569,1215,6.2,1216,7.037,1217,5.676,1218,7.037,1219,4.569,1220,4.569,1221,4.569]],["title/modules/FilesModule.html",[50,1.424,391,3.129]],["body/modules/FilesModule.html",[0,0.264,3,0.128,4,0.128,5,0.115,7,0.154,8,0.009,9,0.007,10,0.007,13,2.714,16,0.291,17,1.003,50,2.396,52,2.769,53,3.609,59,4.005,60,3.157,61,3.049,63,3.049,65,4.332,391,6.188,1132,6.06,1173,5.927,1174,5.403,1222,5.403,1223,5.403,1224,6.116,1225,6.116]],["title/classes/FilesService.html",[0,0.192,1173,2.96]],["body/classes/FilesService.html",[0,0.202,2,0.968,3,0.098,4,0.098,5,0.134,7,0.118,8,0.009,9,0.006,10,0.006,16,0.168,40,0.695,76,0.975,78,1.438,79,1.08,80,1.163,85,0.467,86,1.162,87,2.52,104,1.373,105,3.168,163,1.683,181,2.507,839,3.962,1035,4.258,1134,5.085,1135,5.085,1136,5.569,1137,5.569,1138,5.569,1139,7.621,1145,5.569,1150,5.569,1158,5.569,1173,4.195,1175,4.138,1176,4.138,1226,4.138,1227,4.684,1228,4.684,1229,4.684,1230,4.684,1231,7.126,1232,7.126,1233,7.126,1234,7.126,1235,7.126,1236,7.126,1237,4.684]],["title/classes/GetAllConversationDto.html",[0,0.192,948,3.129]],["body/classes/GetAllConversationDto.html",[0,0.334,2,1.336,3,0.135,4,0.135,5,0.122,7,0.194,8,0.009,9,0.007,10,0.007,16,0.278,29,1.496,103,3.036,183,1.833,840,3.335,876,2.535,927,4.299,948,5.443,949,3.74,1018,3.74,1051,4.896,1238,5.212]],["title/classes/GetOneConversationDto.html",[0,0.192,927,2.96]],["body/classes/GetOneConversationDto.html",[0,0.334,2,1.336,3,0.135,4,0.135,5,0.122,7,0.194,8,0.009,9,0.007,10,0.007,16,0.278,29,1.496,103,3.036,183,1.833,840,3.335,876,2.535,927,5.148,948,4.546,949,3.74,1018,3.74,1051,4.896,1238,5.212]],["title/injectables/GoogleStrategy.html",[70,0.747,1239,3.129]],["body/injectables/GoogleStrategy.html",[0,0.214,3,0.104,4,0.104,5,0.093,7,0.124,8,0.009,9,0.006,10,0.006,16,0.292,17,0.812,32,1.944,40,0.451,70,1.099,71,1.625,73,3.039,76,0.837,78,0.935,79,0.927,80,0.756,85,0.494,86,1.207,87,2.085,95,1.465,99,2.256,104,0.892,105,2.435,116,5.394,183,1.173,202,1.778,445,4.355,552,2.867,553,3.134,555,3.134,569,3.783,576,4.904,578,4.904,579,3.134,595,5.156,704,3.503,737,5.912,1109,4.376,1110,6.475,1117,3.996,1119,4.376,1121,4.376,1123,3.996,1125,4.376,1126,4.376,1127,4.376,1128,4.376,1129,4.376,1130,4.376,1131,4.376,1239,4.604,1240,4.376,1241,4.954,1242,7.797,1243,4.954,1244,3.134,1245,4.376,1246,4.954,1247,4.954,1248,4.954,1249,4.954,1250,4.954,1251,4.954,1252,4.954,1253,4.954]],["title/controllers/HealthController.html",[11,1.572,1254,3.588]],["body/controllers/HealthController.html",[0,0.219,3,0.106,4,0.106,5,0.096,7,0.128,8,0.009,9,0.006,10,0.006,11,1.799,13,1.845,15,2.454,16,0.283,17,0.834,26,2.723,29,1.178,73,2.11,76,0.651,85,0.508,86,1.228,87,2.387,96,1.893,104,0.917,105,2.479,110,3.111,143,3.703,158,2.829,163,1.076,234,3.974,280,4.432,301,2.945,361,4.495,364,3.58,422,4.105,519,3.567,1254,5.373,1255,4.495,1256,7.879,1257,7.879,1258,5.089,1259,5.885,1260,5.089,1261,5.089,1262,6.661,1263,6.661,1264,5.089,1265,6.661,1266,6.661,1267,5.089,1268,5.089,1269,5.089,1270,5.089,1271,4.105,1272,5.089,1273,5.089,1274,5.089,1275,3.813,1276,5.089,1277,4.105,1278,6.661,1279,5.089,1280,5.089,1281,5.089]],["title/injectables/HttpCacheInterceptor.html",[70,0.747,1282,3.588]],["body/injectables/HttpCacheInterceptor.html",[0,0.241,3,0.117,4,0.117,5,0.105,7,0.14,8,0.009,9,0.007,10,0.007,16,0.201,17,0.916,40,0.509,70,1.188,71,1.832,76,0.715,78,1.054,79,0.791,80,0.852,85,0.557,86,1.304,95,1.245,101,3.41,104,1.006,163,1.496,183,1.675,202,2.216,261,2.694,404,5.816,545,4.367,547,2.989,1282,5.705,1283,6.248,1284,4.934,1285,7.073,1286,7.073,1287,5.585,1288,4.934,1289,5.585,1290,5.585,1291,7.762,1292,5.585,1293,5.585,1294,5.585,1295,5.585]],["title/classes/HttpExceptionFilter.html",[0,0.192,1296,3.588]],["body/classes/HttpExceptionFilter.html",[0,0.241,2,1.158,3,0.117,4,0.117,5,0.105,7,0.141,8,0.009,9,0.007,10,0.007,16,0.255,17,0.918,40,0.51,76,0.717,78,1.057,79,0.793,80,0.854,85,0.559,86,1.306,104,1.009,202,2.218,232,2.78,233,5.467,239,6.269,251,5.715,252,7.216,253,6.866,254,7.216,256,3.727,257,3.242,261,3.417,262,3.533,267,2.792,273,4.948,274,4.948,275,4.948,276,4.948,288,4.197,292,4.948,301,3.242,302,4.948,305,4.197,306,2.084,372,4.984,1296,5.715,1297,4.948,1298,5.601,1299,5.601,1300,5.601,1301,5.601]],["title/interfaces/HttpExceptionResponse.html",[179,1.845,269,3.129]],["body/interfaces/HttpExceptionResponse.html",[3,0.13,4,0.13,5,0.117,7,0.19,8,0.009,9,0.007,10,0.007,40,0.689,41,3.839,85,0.621,95,1.529,179,3.138,181,3.333,183,1.475,185,2.608,199,3.581,256,4.143,268,4.381,269,5.734,288,6.353,301,3.604,303,3.94,305,4.666,307,3.604,1042,5.023,1043,5.023]],["title/interfaces/IApp.html",[179,1.845,1302,3.588]],["body/interfaces/IApp.html",[3,0.106,4,0.106,5,0.095,7,0.167,8,0.009,9,0.006,10,0.006,16,0.182,40,0.716,79,1.21,85,0.505,95,1.437,101,2.225,163,1.071,179,2.1,181,2.71,185,2.289,202,2.012,306,1.884,340,3.562,523,3.369,831,5.744,997,3.562,1076,3.794,1114,3.369,1302,5.976,1303,4.085,1304,4.975,1305,6.343,1306,5.064,1307,6.64,1308,4.085,1309,5.551,1310,5.064,1311,3.562,1312,4.473,1313,4.473,1314,5.064,1315,5.064,1316,5.064,1317,4.473,1318,5.064,1319,5.064,1320,5.064,1321,6.64,1322,3.794,1323,4.085,1324,5.064,1325,6.947,1326,4.473,1327,5.064,1328,5.064,1329,3.794,1330,5.064,1331,5.064,1332,5.064,1333,5.064,1334,5.064,1335,5.064,1336,5.064]],["title/interfaces/ISwaggerOptions.html",[179,1.845,1337,3.333]],["body/interfaces/ISwaggerOptions.html",[3,0.095,4,0.095,5,0.085,7,0.114,8,0.009,9,0.006,10,0.006,15,2.972,40,0.717,52,3.674,80,1.321,85,0.452,95,1.233,109,3.723,179,1.878,181,2.424,185,2.124,196,3.913,205,2.95,246,4.101,247,2.338,303,3.899,1114,5.621,1337,4.618,1338,4.001,1339,7.519,1340,7.519,1341,7.519,1342,8.449,1343,7.168,1344,6.643,1345,6.163,1346,5.444,1347,6.163,1348,6.163,1349,6.163,1350,6.163,1351,6.163,1352,5.444,1353,7.519,1354,6.163,1355,5.444,1356,5.444,1357,5.444,1358,6.163,1359,6.163,1360,6.163,1361,4.971,1362,4.971,1363,6.163,1364,4.971,1365,6.189,1366,6.189]],["title/modules/InterceptorModule.html",[50,1.424,392,3.129]],["body/modules/InterceptorModule.html",[0,0.244,3,0.118,4,0.118,5,0.107,7,0.142,8,0.009,9,0.007,10,0.007,16,0.315,17,0.928,50,2.284,52,2.564,63,2.823,392,5.019,409,7.624,410,3.983,484,7.467,485,7.467,1062,5.346,1088,5.346,1367,5.662,1368,5.346,1369,5.662,1370,5.019,1371,5.662,1372,5.662,1373,5.662,1374,5.346,1375,5.662]],["title/injectables/LoggerContextMiddleware.html",[70,0.747,424,3.333]],["body/injectables/LoggerContextMiddleware.html",[0,0.248,3,0.12,4,0.12,5,0.108,7,0.145,8,0.009,9,0.007,10,0.007,16,0.259,17,0.944,40,0.525,70,1.21,71,1.889,76,0.737,78,1.086,79,0.816,80,0.878,85,0.574,86,1.329,104,1.037,163,1.218,232,2.259,257,4.775,261,3.978,262,4.113,267,2.87,349,4.355,350,6.181,424,5.402,1066,4.984,1096,5.402,1098,6.369,1101,6.369,1114,3.831,1376,6.369,1377,5.086,1378,5.757,1379,5.757,1380,5.757]],["title/classes/LoggerModule.html",[0,0.192,430,3.333]],["body/classes/LoggerModule.html",[0,0.259,2,1.242,3,0.126,4,0.126,5,0.113,7,0.151,8,0.009,9,0.007,10,0.007,16,0.289,17,0.985,50,1.924,63,2.996,76,0.769,85,0.6,86,1.365,104,1.082,163,1.271,202,1.632,235,5.645,243,5.077,430,6.012,678,4.227,1381,5.309,1382,8.375,1383,6.009,1384,8.024,1385,5.972,1386,6.009,1387,6.009,1388,8.024]],["title/injectables/LoggerService.html",[70,0.747,243,2.815]],["body/injectables/LoggerService.html",[0,0.177,3,0.086,4,0.086,5,0.077,7,0.103,8,0.009,9,0.005,10,0.005,15,4.411,16,0.147,17,0.672,40,0.736,41,2.603,70,0.965,71,1.344,76,1.034,78,1.484,79,1.114,80,1.258,85,0.409,86,1.06,95,1.613,104,1.417,183,1.362,185,1.982,186,3.447,220,4.308,234,3.555,243,3.638,245,4.42,257,4.553,1123,4.638,1389,3.619,1390,5.75,1391,5.75,1392,5.75,1393,5.75,1394,5.75,1395,5.75,1396,4.097,1397,7.866,1398,7.203,1399,4.097,1400,5.75,1401,4.097,1402,5.75,1403,4.097,1404,5.75,1405,4.097,1406,5.75,1407,4.097,1408,4.097,1409,4.097,1410,6.644,1411,5.75,1412,4.097,1413,4.097,1414,4.097,1415,4.097,1416,4.097]],["title/injectables/LoggingInterceptor.html",[70,0.747,1368,3.333]],["body/injectables/LoggingInterceptor.html",[0,0.245,3,0.119,4,0.119,5,0.107,7,0.143,8,0.009,9,0.007,10,0.007,16,0.281,17,0.931,40,0.517,70,1.2,71,1.863,76,0.726,78,1.071,79,0.804,80,0.866,85,0.567,86,1.317,104,1.023,163,1.201,202,1.542,232,2.228,545,4.393,547,3.039,1064,4.755,1065,5.028,1066,4.959,1067,5.462,1069,4.527,1070,4.755,1073,3.157,1075,3.778,1076,4.254,1368,5.355,1417,5.016,1418,5.678,1419,5.678,1420,5.678,1421,5.678,1422,5.678,1423,5.678,1424,6.314,1425,5.678,1426,5.678,1427,5.678]],["title/classes/LoginDto.html",[0,0.192,611,2.687]],["body/classes/LoginDto.html",[0,0.289,2,1.384,3,0.14,4,0.14,5,0.126,7,0.168,8,0.009,9,0.008,10,0.008,16,0.284,29,1.55,183,1.585,611,4.773,630,3.454,704,3.582,876,2.626,1428,5.913,1429,4.453,1430,5.913,1431,5.399]],["title/controllers/MathController.html",[11,1.572,1432,3.333]],["body/controllers/MathController.html",[0,0.194,3,0.094,4,0.094,5,0.085,7,0.113,8,0.009,9,0.006,10,0.006,11,1.59,13,1.631,15,2.17,16,0.298,17,0.738,19,3.551,21,3.551,25,3.551,26,2.408,27,3.551,29,1.042,31,2.243,32,1.765,36,2.232,40,0.41,44,2.604,45,2.604,46,2.604,47,2.604,76,0.785,78,0.849,79,0.637,80,0.686,85,0.449,86,1.131,96,2.283,104,1.105,110,2.866,136,2.604,137,2.501,142,3.707,143,3.411,145,2.501,156,2.501,158,2.501,160,2.604,161,2.718,163,1.298,199,3.448,202,1.666,226,2.17,234,2.408,364,3.165,443,2.847,503,3.881,602,3.975,741,3.616,1069,4.041,1073,2.501,1085,2.994,1259,5.42,1311,3.165,1323,6.049,1432,4.597,1433,3.975,1434,4.499,1435,8.288,1436,4.499,1437,6.135,1438,4.499,1439,6.135,1440,4.499,1441,4.499,1442,6.135,1443,6.135,1444,3.975,1445,3.371,1446,3.975,1447,4.499,1448,4.499,1449,4.499,1450,2.994,1451,6.135,1452,4.499,1453,4.499,1454,4.499,1455,4.499,1456,4.949]],["title/modules/MathModule.html",[50,1.424,393,3.129]],["body/modules/MathModule.html",[0,0.268,3,0.13,4,0.13,5,0.117,7,0.156,8,0.009,9,0.007,10,0.007,13,2.739,16,0.305,17,1.018,50,2.418,52,2.811,65,3.593,79,0.88,393,5.313,1085,4.131,1432,6.1,1445,5.659,1446,5.485,1457,6.209,1458,6.209,1459,7.553,1460,6.209,1461,6.209,1462,6.209]],["title/classes/MessageEntity.html",[0,0.192,1025,3.129]],["body/classes/MessageEntity.html",[0,0.261,2,0.912,3,0.092,4,0.092,5,0.083,7,0.111,8,0.009,9,0.006,10,0.006,16,0.218,29,1.022,36,2.452,40,0.785,76,0.997,85,0.44,95,1.517,96,2.9,99,2.563,166,3.181,172,4.028,185,2.087,186,3.435,454,3.886,517,5.348,529,4.536,807,4.187,810,4.864,811,5.357,812,5.357,828,5.348,829,3.898,833,4.66,836,4.476,837,4.309,838,1.83,847,5.232,921,4.862,1001,4.862,1025,4.259,1463,3.898,1464,6.287,1465,6.911,1466,4.413,1467,4.413,1468,4.413,1469,4.413,1470,4.413,1471,4.413,1472,4.413]],["title/controllers/MessagesGateway.html",[11,1.572,1473,3.333]],["body/controllers/MessagesGateway.html",[0,0.163,3,0.079,4,0.079,5,0.071,7,0.095,8,0.009,9,0.005,10,0.005,11,1.339,13,1.373,15,1.827,16,0.291,17,0.621,40,0.634,76,0.89,78,1.312,79,1.086,80,1.061,82,1.616,85,0.378,86,1.003,87,2.43,95,1.349,96,2.588,104,1.253,105,3.006,113,3.801,156,2.106,163,1.346,186,2.715,196,3.069,202,1.728,280,4.234,354,4.805,355,2.52,519,2.881,581,2.397,640,2.52,921,3.826,997,2.665,1001,4.476,1021,4.892,1052,4.892,1450,5.101,1473,4.075,1474,3.346,1475,5.621,1476,5.621,1477,5.621,1478,6.363,1479,3.346,1480,6.977,1481,5.439,1482,3.788,1483,3.346,1484,5.439,1485,3.788,1486,3.346,1487,5.439,1488,3.788,1489,3.788,1490,6.954,1491,5.439,1492,3.788,1493,5.439,1494,3.788,1495,6.363,1496,5.439,1497,6.363,1498,3.346,1499,4.234,1500,3.346,1501,3.055,1502,3.346,1503,3.346,1504,3.346,1505,3.788,1506,3.788,1507,3.055,1508,3.346,1509,3.788,1510,3.788,1511,3.788,1512,3.788,1513,3.788,1514,3.788,1515,3.788,1516,3.788,1517,3.788,1518,6.363,1519,3.788,1520,3.788]],["title/modules/MessagesModule.html",[50,1.424,394,3.129]],["body/modules/MessagesModule.html",[0,0.264,3,0.128,4,0.128,5,0.115,7,0.154,8,0.009,9,0.007,10,0.007,13,2.719,16,0.291,17,1.006,50,2.401,52,2.778,53,3.616,59,4.013,60,3.166,61,3.059,63,3.738,394,6.192,1473,6.32,1499,5.857,1500,5.419,1521,5.419,1522,5.419,1523,6.135,1524,6.135]],["title/injectables/MessagesService.html",[70,0.747,1499,2.96]],["body/injectables/MessagesService.html",[0,0.17,3,0.082,4,0.082,5,0.074,7,0.099,8,0.009,9,0.005,10,0.005,16,0.255,17,0.647,36,1.123,40,0.708,70,0.94,71,1.295,73,1.637,74,2.627,75,4.012,76,0.957,78,1.412,79,1.101,80,1.141,82,1.684,85,0.394,86,1.033,87,2.448,95,1.462,99,1.361,104,1.276,105,3.039,113,3.36,127,1.787,163,1.499,166,2.569,202,1.768,205,3.306,519,3.519,581,2.498,640,2.627,721,2.958,741,1.904,747,2.285,761,2.958,807,1.968,842,2.498,843,2.627,844,2.195,845,2.285,921,4.58,996,3.941,997,2.777,1001,2.777,1006,3.487,1021,4.985,1052,4.985,1117,6.036,1475,5.752,1476,4.948,1477,4.948,1479,3.487,1483,4.948,1486,4.948,1499,3.727,1503,3.487,1504,3.487,1525,3.487,1526,5.601,1527,3.947,1528,3.947,1529,3.947,1530,5.601,1531,3.947,1532,3.947,1533,4.197,1534,3.947,1535,3.947,1536,3.947,1537,3.947,1538,3.947,1539,3.487,1540,3.947,1541,3.947,1542,5.601,1543,3.947,1544,3.487]],["title/classes/NatsStrategy.html",[0,0.192,1545,3.333]],["body/classes/NatsStrategy.html",[0,0.241,2,1.158,3,0.117,4,0.117,5,0.105,7,0.178,8,0.009,9,0.007,10,0.007,16,0.201,40,0.51,76,0.717,78,1.057,79,0.793,80,0.854,85,0.559,86,1.306,95,1.368,104,1.009,179,2.322,183,1.678,202,1.924,247,4.011,257,3.242,503,3.114,1085,3.727,1450,3.727,1545,5.309,1546,4.518,1547,6.866,1548,7.085,1549,6.259,1550,5.601,1551,5.309,1552,5.823,1553,6.259,1554,4.948,1555,4.948,1556,4.948,1557,4.948,1558,4.948,1559,4.948,1560,4.948,1561,4.948,1562,4.948,1563,4.948,1564,4.948]],["title/interfaces/NatsSubscriber.html",[179,1.845,1551,3.333]],["body/interfaces/NatsSubscriber.html",[0,0.241,3,0.117,4,0.117,5,0.105,7,0.178,8,0.009,9,0.007,10,0.007,16,0.201,40,0.744,85,0.559,95,1.483,179,2.322,181,2.997,183,1.327,185,2.442,202,1.924,247,4.442,503,3.114,1085,3.727,1304,5.309,1545,4.197,1546,4.518,1547,6.259,1549,4.948,1551,5.823,1552,6.448,1553,6.259,1554,4.948,1555,4.948,1556,4.948,1557,4.948,1558,4.948,1559,4.948,1560,4.948,1561,4.948,1562,4.948,1563,4.948,1564,4.948]],["title/controllers/OauthController.html",[11,1.572,1565,3.333]],["body/controllers/OauthController.html",[0,0.136,3,0.066,4,0.066,5,0.059,7,0.079,8,0.009,9,0.005,10,0.005,11,1.112,13,1.141,15,1.517,16,0.268,17,0.516,19,2.745,21,2.745,22,2.866,23,2.866,24,2.866,25,2.745,26,1.683,27,2.745,29,0.728,31,1.568,32,1.234,36,2.34,39,1.9,40,0.622,41,1.424,42,1.9,43,1.9,44,1.821,45,1.821,46,1.821,47,1.821,76,0.873,78,1.2,79,0.901,80,0.97,82,1.342,85,0.314,86,0.874,87,2.411,95,1.005,96,2.539,101,2.998,104,1.229,105,2.851,110,2.215,136,1.821,137,1.749,141,2.357,142,3.45,143,3.987,145,1.749,146,2.357,156,1.749,158,3.793,160,2.745,161,2.866,163,1.443,261,3.854,267,1.568,308,1.821,349,4.828,351,2.537,551,2.537,552,1.821,603,5.056,613,5.374,623,3.459,633,4.764,642,2.093,647,4.279,648,5.045,1115,4.231,1244,4.023,1323,6.446,1329,5.112,1565,3.554,1566,2.779,1567,2.779,1568,4.743,1569,5.617,1570,4.743,1571,4.743,1572,4.743,1573,3.146,1574,3.146,1575,6.336,1576,7.059,1577,5.71,1578,3.146,1579,3.146,1580,5.617,1581,4.743,1582,3.146,1583,3.146,1584,3.146,1585,3.554,1586,3.146,1587,3.146,1588,3.146,1589,3.146,1590,3.146,1591,3.146,1592,3.146,1593,3.799,1594,2.779,1595,3.146,1596,3.146,1597,3.146,1598,4.743,1599,3.146,1600,3.146,1601,3.146,1602,3.146,1603,3.146,1604,4.743,1605,3.146,1606,3.146,1607,3.146,1608,3.146,1609,3.146,1610,3.146,1611,3.146]],["title/modules/OauthModule.html",[50,1.424,395,3.129]],["body/modules/OauthModule.html",[0,0.222,3,0.107,4,0.107,5,0.097,7,0.129,8,0.009,9,0.006,10,0.006,13,2.431,16,0.308,17,0.843,50,2.147,52,2.327,53,3.233,57,4.869,59,3.588,60,2.653,61,2.562,63,3.343,65,3.88,68,3.851,389,5.323,395,6.408,678,4.717,1106,5.918,1239,5.918,1565,5.591,1593,5.978,1594,4.54,1612,4.54,1613,4.54,1614,4.54,1615,5.139,1616,5.139,1617,5.139,1618,5.139,1619,5.139,1620,5.139]],["title/injectables/OauthService.html",[70,0.747,1593,2.96]],["body/injectables/OauthService.html",[0,0.154,3,0.075,4,0.075,5,0.067,7,0.09,8,0.009,9,0.005,10,0.005,16,0.259,17,0.588,40,0.656,70,0.877,71,1.176,73,2.167,76,0.922,78,1.359,79,1.021,80,1.099,85,0.358,86,0.963,87,2.404,95,1.324,99,2.125,104,1.221,154,4.691,155,3.166,156,2.905,163,1.744,202,2.204,234,2.796,261,1.728,308,3.922,309,2.267,340,4.338,349,4.094,519,3.826,558,4.103,575,4.338,621,4.509,630,3.183,632,1.918,634,4.759,662,3.166,704,3.3,728,3.166,741,2.52,747,3.569,1115,2.384,1244,2.267,1450,2.384,1533,5.636,1569,4.616,1585,2.685,1593,3.476,1621,3.166,1622,5.225,1623,5.225,1624,5.225,1625,3.583,1626,3.583,1627,5.225,1628,3.583,1629,5.225,1630,3.583,1631,5.225,1632,3.583,1633,5.225,1634,3.583,1635,4.215,1636,3.583,1637,3.583,1638,5.225,1639,6.166,1640,6.166,1641,6.166,1642,6.166,1643,6.166,1644,3.583,1645,3.583,1646,3.583,1647,3.583,1648,3.166,1649,3.166,1650,3.583,1651,3.583,1652,3.583,1653,3.583,1654,3.583,1655,3.583,1656,3.583]],["title/classes/PaginationDto.html",[0,0.192,107,3.129]],["body/classes/PaginationDto.html",[0,0.265,2,0.737,3,0.074,4,0.074,5,0.067,7,0.089,8,0.009,9,0.005,10,0.005,16,0.243,29,0.825,32,1.399,36,2.136,40,0.738,76,0.92,80,1.321,85,0.356,95,1.469,96,2.515,107,3.662,156,3.418,163,0.754,185,1.794,186,3.308,199,3.667,205,2.946,210,3.9,226,4.026,246,5.393,247,3.173,448,6.254,454,3.743,468,2.372,527,7.068,837,3.618,838,1.478,857,6.633,872,4.598,875,5.8,877,5.8,919,5.454,999,5.453,1000,5.8,1162,5.058,1657,3.149,1658,7.753,1659,5.205,1660,5.431,1661,4.959,1662,6.148,1663,3.565,1664,4.959,1665,3.565,1666,5.205,1667,3.565,1668,3.565,1669,5.431,1670,4.598,1671,5.205,1672,4.959,1673,3.565,1674,3.565,1675,3.565,1676,3.565,1677,4.199,1678,3.565,1679,3.565,1680,3.565,1681,3.565,1682,2.508,1683,3.565,1684,5.205,1685,2.876,1686,3.565,1687,3.565,1688,3.565,1689,3.565,1690,3.565]],["title/injectables/ParseIntPipe.html",[70,0.747,1691,3.588]],["body/injectables/ParseIntPipe.html",[0,0.251,3,0.122,4,0.122,5,0.11,7,0.146,8,0.009,9,0.007,10,0.007,16,0.209,17,0.955,40,0.53,70,1.219,71,1.91,76,0.745,78,1.098,79,0.825,80,0.888,85,0.581,86,1.338,87,2.25,95,1.392,104,1.049,163,1.231,202,1.581,232,2.285,247,3.005,306,2.166,308,3.37,321,3.237,718,4.363,823,5.928,1162,4.096,1322,4.363,1691,5.856,1692,6.414,1693,5.144,1694,5.856,1695,6.414,1696,7.317,1697,5.822,1698,6.414,1699,7.26,1700,5.822,1701,5.822,1702,5.144]],["title/classes/PostEntity.html",[0,0.192,1031,2.96]],["body/classes/PostEntity.html",[0,0.179,2,0.549,3,0.055,4,0.055,5,0.097,7,0.067,8,0.009,9,0.004,10,0.004,16,0.185,29,0.615,36,2.437,40,0.784,76,0.954,85,0.265,95,1.571,96,2.776,101,1.166,103,1.042,166,3.222,183,0.629,185,1.435,186,3.562,196,3.046,199,2.555,204,4.291,205,1.042,372,4.715,454,4.194,632,4.891,750,1.421,781,4.827,804,2.973,810,4.507,811,5.078,812,4.203,814,1.989,817,4.203,820,2.345,831,5.103,833,4.417,834,2.929,836,4.243,837,3.75,838,1.101,839,2.314,876,1.042,881,1.868,882,2.345,883,2.345,1031,2.77,1034,5.473,1035,3.992,1037,4.963,1039,2.345,1703,2.345,1704,3.848,1705,4.143,1706,3.848,1707,4.143,1708,5.136,1709,2.655,1710,4.163,1711,4.691,1712,2.655,1713,7.254,1714,2.655,1715,6.702,1716,2.655,1717,2.655,1718,2.655,1719,2.655,1720,2.655,1721,5.137,1722,2.655,1723,2.655,1724,5.137,1725,2.655,1726,2.655,1727,2.655,1728,4.163,1729,3.678,1730,4.163,1731,2.655,1732,2.655]],["title/controllers/PostsController.html",[11,1.572,1733,3.333]],["body/controllers/PostsController.html",[0,0.087,3,0.042,4,0.042,5,0.038,7,0.051,8,0.009,9,0.003,10,0.003,11,0.712,13,0.73,15,0.971,16,0.244,17,0.33,18,4.293,19,1.928,20,2.108,21,1.928,22,2.013,23,2.013,24,2.013,25,1.928,26,1.078,27,1.928,28,2.108,29,0.466,31,1.004,32,0.79,36,2.355,37,1.274,38,1.274,39,1.217,40,0.668,41,0.912,42,1.217,43,1.217,44,1.165,45,1.165,46,1.165,47,1.165,76,0.918,78,1.353,79,1.016,80,1.094,82,0.859,85,0.201,86,0.614,87,2.46,91,2.866,95,1.437,96,2.668,98,3.859,99,2.615,101,3.072,103,2.744,104,1.292,105,3.06,110,3.056,113,4.184,135,3.859,136,1.165,137,1.119,138,1.417,139,1.509,140,1.509,142,4.427,143,4.074,145,1.119,146,1.509,158,3.987,160,1.928,161,4.333,163,1.517,166,1.208,167,1.779,234,1.783,306,2.328,623,1.607,625,1.779,632,4.219,633,2.496,637,3.65,647,1.509,792,3.133,804,2.866,809,4.158,914,4.158,1012,3.484,1028,3.484,1048,3.484,1058,3.484,1168,2.943,1169,2.943,1178,1.779,1179,1.779,1733,2.496,1734,1.779,1735,4.687,1736,3.764,1737,3.764,1738,2.943,1739,3.764,1740,3.764,1741,3.764,1742,3.764,1743,3.764,1744,2.943,1745,3.764,1746,2.943,1747,1.779,1748,2.014,1749,2.943,1750,5.91,1751,2.014,1752,1.779,1753,2.014,1754,3.332,1755,3.332,1756,2.014,1757,1.779,1758,2.014,1759,4.261,1760,2.014,1761,1.779,1762,2.014,1763,2.014,1764,1.779,1765,2.014,1766,2.687,1767,2.014,1768,1.779,1769,2.014,1770,2.014,1771,1.779,1772,2.014,1773,2.014,1774,1.779,1775,2.014,1776,2.014,1777,1.779,1778,3.295,1779,2.014,1780,3.332,1781,2.014,1782,1.779,1783,3.484,1784,2.014,1785,2.014,1786,1.779,1787,3.295,1788,2.014,1789,2.014,1790,4.952,1791,2.835,1792,1.779,1793,1.779,1794,1.779,1795,1.779,1796,1.779,1797,1.779,1798,1.779,1799,1.779,1800,1.779,1801,1.779,1802,1.779,1803,1.779,1804,1.779,1805,2.014,1806,2.014,1807,2.014,1808,2.014,1809,2.014,1810,2.014,1811,2.014,1812,2.014,1813,3.332,1814,2.014,1815,2.014,1816,2.014,1817,2.014,1818,2.014,1819,2.014,1820,2.014,1821,2.014,1822,2.014,1823,2.014,1824,2.014,1825,2.014,1826,2.014,1827,2.014,1828,2.014,1829,2.014,1830,2.014,1831,2.014,1832,2.014]],["title/modules/PostsModule.html",[50,1.424,396,3.129]],["body/modules/PostsModule.html",[0,0.244,3,0.118,4,0.118,5,0.107,7,0.142,8,0.009,9,0.007,10,0.007,13,2.587,16,0.304,17,0.928,50,2.284,52,2.564,53,3.441,57,4.995,59,3.818,60,2.923,61,2.823,63,3.557,65,4.129,68,4.243,396,6.337,397,4.995,415,4.567,1733,5.853,1791,5.742,1792,5.002,1833,5.002,1834,5.662,1835,5.002,1836,5.662,1837,5.662]],["title/injectables/PostsService.html",[70,0.747,1791,2.96]],["body/injectables/PostsService.html",[0,0.084,3,0.041,4,0.041,5,0.037,7,0.049,8,0.009,9,0.003,10,0.003,16,0.222,17,0.321,32,0.768,36,1.757,40,0.675,70,0.546,71,0.642,73,0.811,74,1.302,75,3.007,76,0.929,78,1.37,79,1.049,80,1.108,81,1.578,82,0.835,85,0.195,86,0.6,87,2.451,95,1.429,103,2.954,104,1.28,105,3.044,109,2.939,113,3.821,163,1.502,166,2.806,191,1.302,202,1.582,205,3.459,306,2.575,307,1.132,321,3.595,519,3.505,623,1.569,632,2.603,642,1.302,718,1.466,720,1.578,725,1.376,741,2.604,745,1.578,750,1.741,792,3.078,804,3.574,805,4.297,807,2.081,843,3.236,846,2.288,991,2.873,996,4.998,1009,1.728,1012,3.422,1028,3.422,1034,4.344,1035,3.305,1048,3.422,1058,3.422,1102,1.578,1533,2.437,1539,2.873,1544,2.873,1704,5.029,1706,4.366,1736,3.688,1737,2.873,1738,2.873,1739,2.873,1740,2.873,1741,2.873,1742,2.873,1743,2.873,1744,2.873,1745,2.873,1746,2.873,1747,1.728,1752,2.873,1757,2.873,1761,2.873,1764,2.873,1766,1.578,1768,2.873,1771,2.873,1774,2.873,1777,2.873,1778,3.236,1782,2.873,1783,3.422,1786,2.873,1787,3.236,1791,2.164,1793,1.728,1794,1.728,1795,1.728,1796,1.728,1797,1.728,1798,1.728,1799,1.728,1800,1.728,1801,1.728,1802,1.728,1803,1.728,1804,1.728,1838,1.728,1839,1.956,1840,1.956,1841,1.956,1842,1.956,1843,1.956,1844,1.956,1845,1.956,1846,1.956,1847,1.956,1848,1.956,1849,1.956,1850,1.956,1851,1.578,1852,1.956,1853,3.253,1854,3.253,1855,1.956,1856,1.956,1857,2.873,1858,3.253,1859,1.956,1860,1.728,1861,1.956,1862,5.399,1863,1.956,1864,4.175,1865,1.956,1866,1.956,1867,3.253,1868,1.956,1869,6.466,1870,1.956,1871,1.956,1872,1.956,1873,1.728,1874,1.956,1875,1.956,1876,3.253,1877,1.956,1878,1.956,1879,1.728,1880,1.956,1881,1.956,1882,1.956,1883,3.253,1884,1.956,1885,1.956,1886,1.956,1887,1.956]],["title/modules/PrismaModule.html",[50,1.424,397,2.575]],["body/modules/PrismaModule.html",[0,0.258,3,0.125,4,0.125,5,0.112,7,0.15,8,0.009,9,0.007,10,0.007,16,0.288,17,0.98,50,2.362,52,2.705,53,3.558,59,3.948,60,3.084,61,2.979,63,3.678,75,4.734,397,5.13,418,5.951,420,3.975,678,5.19,1355,6.517,1888,5.278,1889,5.278,1890,5.278,1891,5.974,1892,5.974]],["title/injectables/PrismaService.html",[70,0.747,75,2.296]],["body/injectables/PrismaService.html",[0,0.22,3,0.107,4,0.107,5,0.096,7,0.128,8,0.009,9,0.006,10,0.006,16,0.24,17,0.838,40,0.466,70,1.122,71,1.678,73,3.087,75,3.449,76,1.01,78,0.965,79,0.725,80,0.78,85,0.51,86,1.232,87,2.519,104,1.341,105,2.937,183,1.583,232,2.007,309,4.228,519,3.371,555,3.236,1309,3.832,1893,4.518,1894,7.444,1895,6.683,1896,8.401,1897,8.401,1898,5.114,1899,6.683,1900,6.367,1901,5.114,1902,5.114,1903,5.114,1904,4.125,1905,5.114,1906,4.518,1907,5.114,1908,5.114,1909,5.114,1910,5.114,1911,5.114,1912,5.114]],["title/classes/ProfileEntity.html",[0,0.192,1913,2.96]],["body/classes/ProfileEntity.html",[0,0.193,2,0.446,3,0.045,4,0.045,5,0.041,7,0.054,8,0.009,9,0.003,10,0.003,16,0.205,29,0.5,32,0.846,36,2.337,40,0.778,76,0.938,79,1.06,80,1.092,85,0.215,95,1.551,96,2.727,99,2.467,101,1.549,127,3.319,133,4.242,185,1.215,186,3.752,199,3.61,204,1.154,226,3.109,307,4.242,309,3.267,364,2.48,372,4.297,454,4.221,468,1.435,529,3.868,569,1.113,603,2.231,750,1.887,810,2.13,817,1.435,833,2.988,834,2.48,836,2.485,837,3.599,838,0.894,839,1.96,850,2.844,860,5.039,862,4.83,875,5.613,877,5.613,878,1.74,879,1.74,880,1.74,1037,2.346,1275,2.642,1277,2.844,1311,2.48,1456,2.844,1464,1.74,1661,5.424,1664,2.844,1677,2.844,1682,1.518,1685,1.74,1729,3.95,1913,2.346,1914,1.906,1915,6.723,1916,5.028,1917,6.723,1918,3.606,1919,3.95,1920,3.95,1921,3.95,1922,3.95,1923,6.138,1924,3.114,1925,3.114,1926,2.844,1927,3.95,1928,4.561,1929,1.906,1930,4.561,1931,2.157,1932,1.906,1933,1.906,1934,2.844,1935,4.561,1936,1.906,1937,3.35,1938,2.157,1939,2.157,1940,4.561,1941,3.606,1942,1.906,1943,2.157,1944,3.114,1945,3.114,1946,4.561,1947,1.906,1948,2.157,1949,2.157,1950,5.363,1951,1.906,1952,1.906,1953,2.844,1954,1.906,1955,3.95,1956,1.906,1957,2.844,1958,2.157,1959,3.114,1960,3.114,1961,1.906,1962,2.157,1963,5.396,1964,1.906,1965,1.906,1966,2.157,1967,3.606,1968,3.868,1969,5.396,1970,2.844,1971,1.906,1972,2.157,1973,3.114,1974,1.906,1975,1.906,1976,2.844,1977,2.157,1978,3.525,1979,1.616,1980,1.616,1981,1.906,1982,1.906,1983,1.906,1984,2.157,1985,2.157,1986,1.906,1987,1.906,1988,2.157,1989,2.157,1990,2.157,1991,1.906,1992,2.157,1993,2.157,1994,2.157,1995,2.157,1996,2.157,1997,2.157,1998,2.157]],["title/classes/ReactionsPost.html",[0,0.192,1778,2.96]],["body/classes/ReactionsPost.html",[0,0.329,2,1.307,3,0.132,4,0.132,5,0.119,7,0.192,8,0.009,9,0.007,10,0.007,16,0.275,29,1.464,36,1.799,183,1.809,804,4.42,876,2.481,1030,4.448,1031,4.207,1032,5.1,1033,6.16,1034,4.448,1035,3.384,1704,4.738,1705,5.1,1706,4.738,1707,5.1,1778,5.081,1787,4.207,1999,5.1]],["title/classes/RecaptchaDto.html",[0,0.192,616,3.129]],["body/classes/RecaptchaDto.html",[0,0.3,2,1.127,3,0.114,4,0.114,5,0.103,7,0.137,8,0.009,9,0.007,10,0.007,16,0.276,29,1.263,36,1.551,40,0.699,76,0.698,85,0.544,95,1.471,96,2.029,183,1.65,185,2.401,186,2.972,454,3.473,558,5.687,611,4.637,616,4.9,658,5.4,808,4.085,817,3.628,833,4.031,836,3.872,837,3.728,838,2.261,1711,5.619,2000,4.817,2001,8.546,2002,6.965,2003,6.965,2004,6.965,2005,6.965,2006,6.965,2007,6.965,2008,6.965,2009,5.452,2010,5.452,2011,5.452,2012,5.452]],["title/interfaces/Response.html",[179,1.845,262,2.218]],["body/interfaces/Response.html",[0,0.255,3,0.124,4,0.124,5,0.111,7,0.184,8,0.009,9,0.007,10,0.007,16,0.287,17,0.971,40,0.54,70,1.232,85,0.591,163,1.253,179,2.456,181,3.17,185,2.529,232,2.324,262,3.658,545,3.927,547,3.17,741,4.131,1064,3.941,1066,3.578,1067,4.882,1069,4.247,1070,4.882,1073,3.293,1075,3.941,1091,4.778,1370,4.167,2013,4.778,2014,7.043,2015,5.232]],["title/guards/RolesGuard.html",[435,3.129,2016,3.588]],["body/guards/RolesGuard.html",[0,0.186,3,0.09,4,0.09,5,0.081,7,0.108,8,0.009,9,0.006,10,0.006,16,0.278,17,0.708,30,5.442,40,0.623,70,1.002,73,1.791,76,0.943,78,1.391,79,1.044,80,1.124,82,1.843,85,0.431,86,1.1,95,1.203,104,1.231,105,2.22,163,1.559,196,3.296,200,2.23,202,1.856,205,2.341,232,1.695,261,2.083,306,1.607,321,2.402,410,3.039,435,4.197,489,6.452,540,6.833,542,3.816,544,3.816,545,3.945,547,3.193,550,3.816,558,2.874,562,3.816,564,3.816,565,3.816,639,3.816,705,3.237,724,3.039,741,2.083,943,6.24,1069,3.956,1073,2.402,2017,3.816,2018,5.966,2019,5.966,2020,4.32,2021,4.32,2022,5.966,2023,4.32,2024,5.966,2025,4.32,2026,4.32,2027,4.813,2028,4.32,2029,5.966,2030,4.32,2031,4.32,2032,4.32,2033,4.32,2034,4.32,2035,4.32,2036,4.32,2037,4.32,2038,4.32,2039,4.32,2040,4.32,2041,4.32,2042,4.32,2043,3.816,2044,4.32,2045,4.32,2046,4.32]],["title/classes/RtGuard.html",[0,0.192,638,3.333]],["body/classes/RtGuard.html",[0,0.282,2,1.353,3,0.137,4,0.137,5,0.123,7,0.164,8,0.009,9,0.007,10,0.007,16,0.28,32,2.568,73,3.453,76,0.837,183,1.55,551,5.279,552,3.787,553,4.14,555,4.14,638,5.841,2047,5.781,2048,6.544,2049,6.544]],["title/injectables/RtStrategy.html",[70,0.747,676,3.129]],["body/injectables/RtStrategy.html",[0,0.218,3,0.106,4,0.106,5,0.095,7,0.127,8,0.009,9,0.006,10,0.006,16,0.301,17,0.83,32,1.987,40,0.605,70,1.115,71,1.661,73,2.753,76,0.85,78,1.253,79,0.941,80,1.013,85,0.505,86,1.224,87,2.107,104,0.912,163,1.071,183,1.199,202,1.375,205,1.987,234,2.71,261,3.792,267,2.525,308,2.931,349,4.011,419,5.232,420,3.369,443,3.204,445,4.418,552,2.931,553,3.204,555,3.204,569,3.427,570,4.473,575,5.532,576,4.975,577,4.473,578,4.975,579,3.204,580,3.204,585,4.473,586,4.473,587,5.866,588,4.473,589,4.473,591,4.473,595,4.671,676,4.671,730,4.473,2050,4.473,2051,5.064,2052,6.64,2053,5.064,2054,5.064,2055,5.064,2056,5.064,2057,5.064]],["title/classes/SignupDto.html",[0,0.192,621,2.96]],["body/classes/SignupDto.html",[0,0.286,2,1.37,3,0.139,4,0.139,5,0.125,7,0.166,8,0.009,9,0.007,10,0.007,16,0.283,29,1.535,183,1.57,621,5.227,630,3.421,704,3.547,747,3.836,876,2.601,1429,4.41,1430,5.855,1431,5.347,2058,5.855]],["title/injectables/ThrottlerBehindProxyGuard.html",[70,0.747,358,3.333]],["body/injectables/ThrottlerBehindProxyGuard.html",[0,0.253,3,0.123,4,0.123,5,0.111,7,0.147,8,0.009,9,0.007,10,0.007,16,0.263,17,0.963,40,0.535,70,1.225,71,1.926,76,0.751,78,1.108,79,0.832,80,0.896,85,0.586,86,1.345,95,1.284,104,1.058,163,1.242,183,1.729,333,6.406,349,3.548,355,3.907,358,5.469,439,6.406,2059,5.887,2060,5.188,2061,7.942,2062,7.299,2063,7.299,2064,5.872,2065,5.872,2066,5.872,2067,5.872,2068,5.872,2069,5.188,2070,5.872,2071,5.872,2072,5.872]],["title/injectables/TimeoutInterceptor.html",[70,0.747,1374,3.333]],["body/injectables/TimeoutInterceptor.html",[0,0.239,3,0.116,4,0.116,5,0.104,7,0.139,8,0.009,9,0.007,10,0.007,16,0.278,17,0.908,40,0.505,70,1.181,71,1.818,76,0.709,78,1.045,79,0.785,80,0.845,85,0.553,86,1.297,104,0.998,163,1.635,198,4.151,232,2.174,281,4.895,306,2.062,320,5.273,545,4.354,547,2.965,1064,4.682,1065,4.95,1066,4.672,1067,5.413,1069,4.476,1070,4.682,1072,6.238,1073,3.08,1074,4.895,1075,3.686,1078,4.895,1374,5.273,2073,4.895,2074,5.54,2075,7.037,2076,7.037,2077,5.54,2078,5.54]],["title/injectables/TransformInterceptor.html",[70,0.747,1370,3.129]],["body/injectables/TransformInterceptor.html",[0,0.246,3,0.119,4,0.119,5,0.107,7,0.18,8,0.009,9,0.007,10,0.007,16,0.282,17,0.936,40,0.52,70,1.204,71,1.873,76,0.73,78,1.077,79,0.809,80,0.871,85,0.57,86,1.322,104,1.028,163,1.207,179,2.367,232,2.24,262,2.847,545,4.402,547,3.838,741,3.459,1064,5.217,1065,4.017,1066,4.737,1067,5.473,1069,4.538,1070,4.772,1073,3.174,1075,3.799,1091,4.605,1370,5.045,2013,4.605,2014,5.044,2015,5.044,2079,5.709]],["title/classes/UpdateCommentTextDto.html",[0,0.192,1783,3.129]],["body/classes/UpdateCommentTextDto.html",[0,0.286,2,1.37,3,0.139,4,0.139,5,0.125,7,0.166,8,0.009,9,0.007,10,0.007,16,0.283,29,1.535,166,2.403,183,1.57,802,4.41,807,3.305,876,2.601,1014,4.966,1015,5.347,1016,5.347,1783,5.526,2080,5.855]],["title/classes/UpdateConversationDto.html",[0,0.192,932,2.687]],["body/classes/UpdateConversationDto.html",[0,0.347,2,1.11,3,0.112,4,0.112,5,0.101,7,0.202,8,0.009,9,0.007,10,0.007,16,0.274,29,1.243,36,2.167,40,0.694,76,0.975,79,1.079,80,1.298,85,0.536,95,1.498,103,2.106,127,3.45,183,1.904,185,2.377,623,2.588,840,2.77,842,3.396,844,3.833,845,3.991,876,2.989,905,4.409,917,3.243,932,4.166,936,3.243,940,3.243,949,3.106,1018,3.106,1051,3.396,1054,5.656,1055,4.022,1056,4.022,1057,4.022,2081,5.367,2082,5.367,2083,5.367]],["title/classes/UpdateMembersConversationDto.html",[0,0.192,936,2.687]],["body/classes/UpdateMembersConversationDto.html",[0,0.358,2,1.214,3,0.123,4,0.123,5,0.111,7,0.209,8,0.009,9,0.007,10,0.007,16,0.286,29,1.36,36,1.67,79,0.832,95,1.398,103,2.304,127,2.659,183,1.968,623,2.832,840,3.031,842,3.715,844,4.058,845,4.224,876,3.116,905,4.596,917,3.548,932,3.548,936,4.409,940,3.548,949,3.399,1018,3.399,1051,3.715,1054,4.131,1055,4.4,1056,4.4,1057,4.4]],["title/classes/UpdatePasswordDto.html",[0,0.192,628,3.129]],["body/classes/UpdatePasswordDto.html",[0,0.299,2,1.118,3,0.113,4,0.113,5,0.102,7,0.136,8,0.009,9,0.007,10,0.007,16,0.275,29,1.253,36,2.294,40,0.735,76,0.887,85,0.54,95,1.545,96,2.579,99,2.779,183,1.281,185,2.389,306,2.579,454,4.02,628,4.875,630,4.162,704,2.895,833,4.426,836,4.251,837,4.092,838,2.243,876,2.123,1037,4.611,1429,3.599,1431,4.363,1937,5.193,2084,4.779,2085,7.647,2086,7.647,2087,6.93,2088,5.409,2089,5.409,2090,5.409,2091,6.122]],["title/classes/UpdatePostDto.html",[0,0.192,1787,2.96]],["body/classes/UpdatePostDto.html",[0,0.329,2,1.307,3,0.132,4,0.132,5,0.119,7,0.192,8,0.009,9,0.007,10,0.007,16,0.275,29,1.464,36,1.799,183,1.809,804,4.42,876,2.481,1030,4.448,1031,4.207,1032,5.1,1033,6.16,1034,4.448,1035,3.384,1704,4.738,1705,5.1,1706,4.738,1707,5.1,1778,4.207,1787,5.081,1999,5.1]],["title/classes/UpdateRolesConversationDto.html",[0,0.192,940,2.687]],["body/classes/UpdateRolesConversationDto.html",[0,0.358,2,1.214,3,0.123,4,0.123,5,0.111,7,0.209,8,0.009,9,0.007,10,0.007,16,0.286,29,1.36,36,1.67,79,0.832,95,1.398,103,2.304,127,2.659,183,1.968,623,2.832,840,3.031,842,3.715,844,4.058,845,4.224,876,3.116,905,4.596,917,3.548,932,3.548,936,3.548,940,4.409,949,3.399,1018,3.399,1051,3.715,1054,4.131,1055,4.4,1056,4.4,1057,4.4]],["title/classes/UpdateUserAvatarDto.html",[0,0.192,125,2.687]],["body/classes/UpdateUserAvatarDto.html",[0,0.356,2,1.328,3,0.134,4,0.134,5,0.121,7,0.207,8,0.009,9,0.007,10,0.007,16,0.277,29,1.487,119,3.88,125,4.657,127,2.908,131,3.88,133,3.717,183,1.957,876,2.52,1913,5.129,2092,4.812,2093,4.812,2094,5.18,2095,6.218]],["title/classes/UpdateUserCoverDto.html",[0,0.192,131,2.687]],["body/classes/UpdateUserCoverDto.html",[0,0.356,2,1.328,3,0.134,4,0.134,5,0.121,7,0.207,8,0.009,9,0.007,10,0.007,16,0.277,29,1.487,119,3.88,125,3.88,127,2.908,131,4.657,133,3.717,183,1.957,876,2.52,1913,5.129,2092,4.812,2093,4.812,2094,5.18,2095,6.218]],["title/classes/UpdateUserProfileDto.html",[0,0.192,119,2.687]],["body/classes/UpdateUserProfileDto.html",[0,0.25,2,0.668,3,0.067,4,0.067,5,0.061,7,0.146,8,0.009,9,0.005,10,0.005,16,0.174,29,0.748,36,2.288,40,0.762,76,1.045,79,1.026,80,0.738,85,0.322,95,1.509,96,3.039,99,1.113,101,2.126,119,2.923,125,1.951,127,3.401,131,1.951,133,4.347,183,1.526,185,1.668,186,3.37,199,3.534,226,2.798,307,3.994,309,3.061,364,2.272,372,4.081,454,4.124,529,3.625,603,2.043,750,1.728,810,1.951,817,2.149,850,2.605,860,4.828,862,3.625,876,1.267,1037,3.219,1275,2.42,1277,2.605,1311,2.272,1456,2.605,1464,2.605,1661,6.23,1664,3.903,1677,2.605,1913,5.618,1915,6.635,1916,5.125,1917,6.635,1918,3.903,1919,4.274,1920,4.274,1921,4.274,1922,4.274,1923,6.058,1924,2.853,1925,2.853,1926,2.605,1927,5.125,1928,5.692,1929,2.853,1930,4.274,1932,2.853,1933,2.853,1934,2.605,1935,4.274,1936,2.853,1937,2.42,1940,4.274,1941,4.68,1942,2.853,1944,2.853,1945,2.853,1946,4.274,1947,2.853,1950,5.171,1951,2.853,1952,2.853,1953,2.605,1954,2.853,1955,2.853,1956,2.853,1957,2.605,1959,2.853,1960,2.853,1961,2.853,1963,5.125,1964,2.853,1965,2.853,1967,2.605,1968,3.625,1969,5.125,1970,2.605,1971,2.853,1973,2.853,1974,2.853,1975,2.853,1976,2.605,2092,2.42,2093,2.42,2094,2.605,2095,3.903,2096,8.167,2097,3.229,2098,3.229,2099,3.229,2100,3.229,2101,3.229,2102,3.229,2103,3.229,2104,3.229,2105,3.229,2106,3.229,2107,3.229]],["title/classes/UserEntity.html",[0,0.192,1429,2.96]],["body/classes/UserEntity.html",[0,0.22,2,0.718,3,0.073,4,0.073,5,0.065,7,0.087,8,0.009,9,0.005,10,0.005,16,0.218,29,0.805,36,2.188,40,0.734,76,0.854,79,0.946,85,0.347,95,1.552,96,2.485,99,2.776,166,3.01,185,1.761,186,3.762,199,2.934,204,4.223,454,3.934,569,1.793,630,4.378,704,4.116,747,4.805,808,2.603,810,3.086,811,3.399,812,3.399,813,3.07,814,3.827,817,2.312,833,4.118,836,3.956,837,3.574,838,1.441,860,5.004,862,5.004,878,2.803,879,2.803,880,2.803,914,5.234,1037,4.03,1275,5.331,1311,3.594,1429,3.399,1941,2.803,1953,5.387,1957,4.12,1976,4.12,1981,3.07,1982,3.07,1983,3.07,1991,4.513,2091,3.07,2108,3.07,2109,6.678,2110,3.475,2111,3.475,2112,3.475,2113,3.475,2114,3.475,2115,3.475,2116,3.475,2117,4.513,2118,5.108,2119,3.475,2120,5.108,2121,5.108,2122,5.108,2123,5.108,2124,5.108,2125,3.475,2126,5.108,2127,3.475,2128,3.475,2129,3.475,2130,3.475,2131,5.108,2132,5.108,2133,2.603,2134,2.603,2135,3.475,2136,3.475,2137,3.475,2138,3.475,2139,3.475,2140,3.475,2141,3.475]],["title/controllers/UsersController.html",[11,1.572,2142,3.333]],["body/controllers/UsersController.html",[0,0.108,3,0.052,4,0.052,5,0.047,7,0.063,8,0.009,9,0.004,10,0.004,11,0.882,13,0.904,15,1.203,16,0.255,17,0.409,18,4.128,19,2.294,20,2.507,21,2.294,22,2.394,23,2.394,24,2.394,25,2.294,26,1.335,27,2.294,28,2.507,29,0.578,31,1.244,32,0.979,36,2.326,37,1.578,38,1.578,39,1.507,40,0.647,41,1.129,42,1.507,43,1.507,44,1.444,45,1.444,46,1.444,47,1.444,76,0.875,78,1.29,79,0.969,80,1.043,82,1.064,85,0.249,86,0.731,87,2.413,90,3.978,91,3.776,92,3.978,93,3.978,95,1.493,96,2.545,98,3.469,99,2.993,100,2.203,101,3.005,103,2.94,104,1.232,105,2.978,110,2.862,113,4.22,114,2.012,116,4.341,119,3.394,124,2.012,125,3.394,127,1.794,130,2.012,131,3.394,133,2.294,135,4.311,136,1.444,137,1.387,138,1.755,139,1.869,140,1.869,141,1.869,142,4.288,143,3.946,145,1.387,149,2.012,150,2.012,151,2.012,152,2.012,154,3.394,158,3.803,159,1.507,160,3.959,161,4.133,163,1.447,166,2.651,168,2.203,170,2.203,172,3.737,173,2.203,175,2.203,581,1.578,603,2.507,611,3.394,630,1.287,637,4.341,640,1.66,704,3.28,747,2.294,1147,3.501,1154,3.501,1444,2.203,2142,2.969,2143,2.203,2144,4.356,2145,4.356,2146,4.356,2147,4.356,2148,2.203,2149,2.494,2150,2.494,2151,2.494,2152,2.203,2153,2.494,2154,2.494,2155,3.501,2156,2.203,2157,2.494,2158,3.501,2159,2.494,2160,2.494,2161,2.494,2162,2.494,2163,2.494,2164,2.494,2165,2.494,2166,2.494,2167,2.203,2168,2.494,2169,2.494,2170,2.203,2171,2.203,2172,2.203,2173,2.494,2174,2.494,2175,2.494,2176,2.494,2177,2.494,2178,2.494,2179,2.494,2180,2.494,2181,2.494,2182,2.494,2183,2.494,2184,2.494,2185,2.494,2186,2.494]],["title/modules/UsersModule.html",[50,1.424,57,2.575]],["body/modules/UsersModule.html",[0,0.213,3,0.103,4,0.103,5,0.093,7,0.124,8,0.009,9,0.006,10,0.006,13,2.365,16,0.299,17,0.808,40,0.449,50,2.089,52,2.232,53,3.146,57,5.134,59,3.491,60,2.545,61,2.458,63,3.253,65,3.776,69,4.356,76,0.631,78,0.93,79,0.698,80,0.752,86,0.909,104,0.888,110,3.047,154,5.395,159,2.979,257,3.776,301,2.854,303,3.119,389,5.262,397,4.813,399,4.356,400,5.764,401,6.875,403,5.764,492,4.356,495,4.356,678,4.59,679,4.356,1093,3.694,1094,3.977,2142,5.479,2171,4.356,2187,4.356,2188,4.356,2189,4.93,2190,4.356,2191,4.93,2192,4.93,2193,4.93,2194,4.93,2195,4.93,2196,4.93]],["title/injectables/UsersService.html",[70,0.747,154,2.687]],["body/injectables/UsersService.html",[0,0.094,3,0.045,4,0.045,5,0.041,7,0.055,8,0.009,9,0.003,10,0.003,16,0.243,17,0.356,31,1.083,32,0.853,40,0.654,70,0.595,71,0.713,73,0.901,74,1.446,75,3.164,76,0.918,78,1.354,79,1.017,80,1.094,82,0.927,85,0.217,86,0.654,87,2.433,88,3.133,89,3.133,90,2.861,91,2.601,92,3.625,93,3.625,94,3.133,95,1.484,99,1.787,103,3.291,104,1.257,105,3.012,106,3.133,107,3.648,113,4.139,114,2.861,116,4.642,119,3.133,124,1.753,125,3.133,127,0.984,130,1.753,131,3.133,133,1.258,144,1.92,148,1.92,149,1.753,150,1.753,151,1.753,152,1.753,154,2.143,159,2.715,163,1.476,166,2.765,196,1.048,199,0.955,202,2.036,205,3.251,226,1.71,306,2.406,321,3.595,519,3.593,581,1.375,611,3.133,623,1.048,630,1.122,640,1.446,642,1.446,704,3.609,720,1.753,721,1.628,724,1.529,725,1.529,726,2.657,740,3.133,741,1.71,745,2.861,747,3.307,750,1.898,761,4.593,762,3.133,764,1.92,765,1.92,843,2.99,846,1.529,996,4.908,998,3.133,1000,1.753,1102,1.753,1162,2.495,1533,3.886,1660,1.92,1669,1.92,1672,1.753,1860,4.581,2144,3.133,2145,3.97,2146,3.133,2147,3.97,2148,3.133,2152,1.92,2155,4.581,2156,3.133,2167,1.92,2170,1.92,2172,1.92,2197,1.92,2198,2.173,2199,2.173,2200,2.173,2201,2.173,2202,2.173,2203,2.173,2204,2.173,2205,2.173,2206,2.173,2207,2.173,2208,2.173,2209,2.173,2210,3.547,2211,2.173,2212,4.493,2213,3.547,2214,3.547,2215,2.173,2216,2.173,2217,2.173,2218,2.173,2219,2.173,2220,2.173,2221,2.173,2222,3.547,2223,2.173,2224,3.547,2225,3.547,2226,3.547,2227,2.173,2228,4.493,2229,2.173,2230,2.173,2231,3.547,2232,2.173]],["title/injectables/ValidationPipe.html",[70,0.747,2233,3.588]],["body/injectables/ValidationPipe.html",[0,0.314,3,0.103,4,0.103,5,0.092,7,0.123,8,0.009,9,0.006,10,0.006,16,0.262,17,0.805,40,0.772,70,1.092,71,1.61,76,0.832,78,1.227,79,0.921,80,0.992,85,0.49,86,1.199,87,2.075,95,0.863,104,1.171,163,1.543,196,3.518,199,2.156,202,2.11,232,1.925,234,3.904,247,4.009,306,1.826,308,2.84,321,2.728,519,2.222,523,4.327,569,2.533,718,3.677,750,2.626,823,5.82,838,2.035,839,2.728,1322,3.677,1682,3.452,1694,5.246,1695,5.745,1696,6.862,1698,5.745,1702,4.335,2233,5.246,2234,4.335,2235,6.503,2236,6.503,2237,4.907,2238,7.767,2239,4.907,2240,4.907,2241,4.907,2242,4.907,2243,4.335,2244,4.907,2245,4.907,2246,3.958,2247,4.907]],["title/injectables/WsThrottlerGuard.html",[70,0.747,2248,3.588]],["body/injectables/WsThrottlerGuard.html",[0,0.229,3,0.111,4,0.111,5,0.1,7,0.133,8,0.009,9,0.007,10,0.007,16,0.246,17,0.871,40,0.484,70,1.15,71,1.743,76,0.68,78,1.002,79,0.753,80,0.81,85,0.53,86,1.263,87,2.157,95,0.935,104,0.957,105,2.549,163,1.123,183,1.622,199,3.729,202,2.175,205,2.084,306,1.976,321,2.953,355,3.534,439,6.115,446,7.075,448,6.46,519,3.101,541,6.697,545,4.286,547,3.666,1450,3.534,1552,3.98,2059,5.525,2069,6.051,2248,5.525,2249,4.693,2250,5.312,2251,5.312,2252,5.312,2253,5.312,2254,5.312,2255,5.312,2256,5.312,2257,5.312,2258,5.312,2259,5.312,2260,4.285,2261,5.312]],["title/changelog.html",[2262,2.99,2263,2.99,2264,3.275]],["body/changelog.html",[1,3.284,4,0.16,5,0.12,8,0.007,9,0.007,10,0.007,50,2.454,91,3.682,310,6.183,623,3.697,632,3.405,809,4.476,1362,5.132,1364,5.132,1735,4.767,2264,6.772,2265,6.362,2266,5.62,2267,6.183,2268,6.362,2269,5.62,2270,6.362,2271,6.362,2272,6.362,2273,5.62,2274,6.362,2275,5.132,2276,6.362,2277,6.362,2278,6.362,2279,5.132,2280,6.362,2281,5.132,2282,5.62,2283,4.476,2284,6.362,2285,6.362]],["title/coverage.html",[2286,4.911]],["body/coverage.html",[0,0.378,1,0.825,5,0.03,6,1.412,8,0.009,9,0.003,10,0.003,11,2.401,12,1.197,14,1.412,31,0.797,33,1.197,40,0.146,50,0.512,58,1.124,64,1.197,70,1.364,72,1.412,75,0.825,83,1.412,84,1.412,99,0.551,107,1.124,110,0.746,119,0.965,125,0.965,131,0.965,145,0.888,154,1.656,179,2.454,180,1.124,182,3.003,184,1.124,203,1.197,207,1.197,230,1.197,231,1.412,233,1.124,243,1.011,245,1.063,256,1.824,262,0.797,268,1.124,269,1.124,306,0.595,322,1.197,323,1.412,356,1.063,358,1.197,413,1.197,424,1.197,430,1.197,435,1.124,503,2.373,504,1.412,539,1.412,567,1.124,568,1.412,592,1.197,593,1.412,611,0.965,616,1.124,621,1.063,628,1.124,634,1.735,636,1.289,637,1.063,638,1.197,642,1.063,676,1.124,692,1.412,724,1.124,725,1.124,726,1.197,727,1.289,750,4.999,802,1.063,803,1.412,840,0.825,841,1.412,881,1.124,893,1.197,894,1.412,905,0.925,912,1.124,917,0.965,919,1.929,927,1.063,932,0.965,936,0.965,940,0.965,946,1.824,948,1.124,977,1.412,987,1.289,1012,1.124,1013,1.412,1014,2.698,1017,1.412,1018,3.425,1021,1.124,1022,1.412,1023,2.212,1025,1.124,1028,1.124,1029,1.412,1030,3.003,1031,1.063,1036,1.412,1042,2.212,1043,2.212,1044,1.289,1045,1.412,1048,1.124,1049,1.412,1050,1.412,1052,1.124,1053,1.412,1054,3.003,1058,1.124,1059,1.412,1062,1.197,1063,1.412,1080,1.412,1081,1.412,1088,1.197,1089,1.412,1093,1.197,1094,1.289,1095,1.412,1106,1.124,1107,1.412,1114,4.88,1132,1.197,1133,1.412,1170,1.289,1171,1.289,1172,1.289,1173,1.063,1181,1.197,1199,2.212,1211,1.289,1213,3.876,1226,1.412,1238,2.212,1239,1.124,1240,1.412,1254,1.289,1255,1.412,1282,1.289,1283,1.412,1284,1.412,1296,1.289,1297,1.412,1302,1.289,1303,2.212,1305,1.289,1308,1.289,1337,1.197,1338,1.412,1368,1.197,1370,1.124,1374,1.197,1376,1.412,1377,1.412,1381,1.412,1385,1.289,1389,1.412,1417,1.412,1428,1.412,1429,1.063,1432,1.197,1433,1.412,1445,1.197,1463,1.412,1473,1.197,1474,1.412,1499,1.063,1525,1.412,1545,1.197,1546,2.212,1551,1.197,1565,1.197,1566,1.412,1593,1.063,1621,1.412,1635,1.289,1657,1.412,1691,1.289,1692,1.412,1693,1.412,1703,1.412,1733,1.197,1734,1.412,1778,1.063,1783,1.124,1787,1.063,1791,1.824,1838,1.412,1851,1.289,1893,1.412,1913,1.063,1914,1.412,1979,1.197,1980,1.197,1999,2.212,2000,1.412,2013,2.212,2016,1.289,2017,1.412,2027,1.289,2047,1.412,2050,1.412,2058,1.412,2059,2.212,2060,1.412,2073,1.412,2080,1.412,2084,1.412,2092,2.698,2093,2.698,2108,1.412,2133,1.197,2134,1.197,2142,1.197,2143,1.412,2197,1.412,2233,1.289,2234,1.412,2248,1.289,2249,1.412,2283,1.124,2286,1.289,2287,1.598,2288,1.598,2289,1.412,2290,1.412,2291,9.07,2292,1.412,2293,8.63,2294,1.412,2295,1.412,2296,1.412,2297,7.702,2298,1.412,2299,1.412,2300,2.054,2301,1.412,2302,2.422,2303,1.412,2304,1.412,2305,2.422,2306,5.243,2307,1.412,2308,2.422,2309,2.742,2310,4.269,2311,2.422,2312,4.805,2313,2.422,2314,3.6,2315,5.918,2316,1.412,2317,7.702,2318,2.422,2319,1.412,2320,1.412,2321,1.598,2322,1.598,2323,1.412,2324,1.289,2325,1.412,2326,1.412,2327,4.955,2328,4.955,2329,1.412,2330,1.412,2331,1.412,2332,3.181,2333,1.412,2334,2.212,2335,1.412,2336,3.181,2337,1.412,2338,1.412,2339,2.422,2340,1.412,2341,1.412,2342,1.412,2343,1.412,2344,2.212,2345,2.212,2346,1.289,2347,1.289,2348,2.212,2349,2.212,2350,2.212,2351,4.269,2352,2.422,2353,1.412,2354,1.412,2355,1.412,2356,3.6,2357,1.412,2358,2.904,2359,1.289,2360,1.412,2361,1.598,2362,1.598,2363,2.212,2364,2.422,2365,1.412,2366,2.212,2367,2.422,2368,1.412,2369,1.598,2370,1.598]],["title/dependencies.html",[53,2.582,2371,3.275]],["body/dependencies.html",[0,0.274,8,0.009,9,0.006,10,0.006,17,0.779,29,1.1,53,2.29,191,3.159,235,3.34,267,3.172,342,3.159,355,3.159,384,3.558,410,3.34,420,3.159,422,3.83,433,4.195,445,3.159,471,3.558,512,3.83,552,2.748,579,5.058,580,4.026,683,3.83,729,3.83,823,3.558,838,1.969,1073,2.64,1085,3.159,1115,4.234,1167,5.621,1244,3.004,1245,4.195,1498,4.195,1502,5.621,1507,3.83,1682,3.34,1904,3.83,2246,3.83,2372,4.748,2373,6.363,2374,4.748,2375,4.748,2376,7.993,2377,4.748,2378,4.748,2379,4.748,2380,6.363,2381,7.176,2382,4.748,2383,4.748,2384,4.748,2385,6.363,2386,4.748,2387,4.748,2388,4.748,2389,4.195,2390,4.748,2391,4.748,2392,4.748,2393,4.748,2394,4.195,2395,4.748,2396,4.195,2397,4.748,2398,4.748,2399,4.748,2400,4.748,2401,4.748,2402,4.195,2403,4.748,2404,4.195,2405,4.748,2406,4.748,2407,4.748,2408,4.748,2409,4.748,2410,4.748,2411,4.748,2412,4.748,2413,4.748,2414,4.748,2415,4.748,2416,4.748,2417,6.363,2418,4.748,2419,4.195,2420,4.748,2421,4.748]],["title/miscellaneous/enumerations.html",[2422,2.239,2423,4.73]],["body/miscellaneous/enumerations.html",[1,3.808,8,0.009,9,0.007,10,0.007,30,5.19,85,0.596,99,2.543,247,4.713,553,4.668,580,5.064,999,5.951,1115,4.908,1244,4.668,1670,6.517,1672,5.951,1967,5.951,1968,5.528,1970,5.951,1986,6.517,2422,3.609,2423,5.278,2424,8.358,2425,5.974,2426,5.974,2427,5.278]],["title/classes/fullNameValidator.html",[0,0.192,1979,3.333]],["body/classes/fullNameValidator.html",[0,0.301,2,1.133,3,0.115,4,0.115,5,0.103,7,0.138,8,0.009,9,0.007,10,0.007,16,0.197,40,0.637,76,0.894,78,1.318,79,1.148,80,1.066,85,0.547,86,1.288,87,1.559,95,1.426,104,1.259,163,1.478,196,3.371,200,2.829,202,1.489,232,2.742,503,3.047,569,3.607,807,2.733,838,2.273,1950,4.107,1979,5.237,2344,4.422,2428,5.413,2429,4.917,2430,4.917,2431,6.119,2432,5.481,2433,6.021,2434,5.237,2435,5.481,2436,4.917,2437,4.422,2438,4.107,2439,4.107,2440,3.856]],["title/miscellaneous/functions.html",[2422,2.239,2441,4.319]],["body/miscellaneous/functions.html",[8,0.009,9,0.006,10,0.006,15,3.502,40,0.777,78,1.608,79,1.207,80,1.3,85,0.416,95,1.575,104,1.425,105,2.496,196,2.808,199,3.639,204,3.116,243,3.684,245,4.464,246,2.775,247,2.153,301,4.42,468,3.875,839,2.319,1170,4.697,1171,4.697,1172,4.697,1193,5.144,1303,3.365,1305,5.411,1308,5.411,1309,3.126,1385,5.411,1685,3.365,1900,4.697,2289,3.685,2290,5.927,2298,3.685,2299,5.144,2300,3.126,2323,3.685,2324,4.697,2334,3.365,2336,3.685,2337,5.144,2338,5.144,2340,3.685,2341,5.144,2342,3.685,2343,5.144,2357,3.685,2358,6.382,2359,3.365,2360,3.685,2363,3.365,2364,6.989,2365,3.685,2422,2.52,2441,3.365,2442,4.171,2443,4.171,2444,3.685,2445,4.171,2446,4.171,2447,6.709,2448,3.685,2449,3.685,2450,4.171,2451,4.171,2452,4.171,2453,3.365,2454,4.171,2455,4.171,2456,4.171,2457,4.171,2458,4.171,2459,4.171,2460,4.171,2461,4.171,2462,4.171,2463,4.171,2464,4.171,2465,3.685,2466,4.171,2467,4.171,2468,4.171,2469,4.171,2470,4.171]],["title/classes/imageValidator.html",[0,0.192,2346,3.588]],["body/classes/imageValidator.html",[0,0.292,2,1.081,3,0.109,4,0.109,5,0.098,7,0.131,8,0.009,9,0.006,10,0.006,16,0.188,40,0.618,76,0.868,78,1.279,79,1.066,80,1.035,85,0.522,86,1.25,87,1.488,95,1.452,104,1.222,105,2.523,163,1.434,172,5.007,196,3.271,200,3.5,202,1.842,205,2.052,232,2.661,569,3.884,792,3.31,838,2.169,2345,4.219,2346,5.471,2347,4.219,2428,5.294,2429,4.771,2430,4.771,2431,6.053,2433,5.947,2436,4.771,2440,3.68,2471,5.231,2472,5.231,2473,5.231,2474,4.621,2475,5.231,2476,7.526,2477,5.231]],["title/index.html",[85,0.37,2262,2.99,2263,2.99]],["body/index.html",[0,0.18,1,1.683,4,0.041,5,0.092,8,0.009,9,0.003,10,0.003,13,1.182,36,0.927,40,0.179,53,1.572,61,0.978,63,0.978,79,0.278,86,0.601,91,3.579,98,4.35,99,2.729,104,0.353,109,1.97,110,0.916,116,3.598,127,1.476,133,1.135,141,1.47,159,2.527,166,2.512,172,1.305,186,1.785,201,1.47,213,1.47,226,0.946,235,2.294,245,1.305,261,1.572,262,0.978,267,0.978,280,1.305,306,2.409,310,3.374,314,1.583,335,3.804,342,1.305,367,1.733,368,1.733,379,2.88,384,3.134,454,2.429,457,1.733,473,1.733,483,2.443,486,1.733,496,2.443,498,3.695,523,2.783,527,1.583,557,2.63,558,1.305,579,1.241,580,2.063,603,1.241,613,1.47,623,2.608,630,1.683,632,3.89,658,1.38,704,1.745,705,1.47,738,1.583,741,1.572,747,1.135,754,1.733,776,1.733,781,1.305,784,1.583,809,2.943,838,0.814,839,1.091,844,1.813,845,1.135,847,4.874,895,2.63,914,1.38,919,3.428,929,3.695,942,3.695,943,1.583,997,2.943,1003,1.733,1035,2.239,1096,1.47,1115,1.305,1141,5.154,1152,1.733,1217,1.583,1244,1.241,1312,1.733,1313,1.733,1317,1.733,1329,1.47,1344,1.733,1346,1.733,1357,2.88,1361,1.583,1362,3.931,1364,2.63,1450,1.305,1501,1.583,1507,2.63,1567,1.733,1576,1.733,1580,2.88,1585,2.443,1682,1.38,1694,1.583,1724,1.733,1735,2.443,1749,1.733,1766,1.583,1857,1.733,1904,1.583,1906,2.88,1950,1.47,1968,3.134,1987,1.733,2158,2.88,2246,1.583,2260,2.63,2267,4.706,2269,1.733,2273,1.733,2275,1.583,2279,1.583,2281,1.583,2282,5.935,2283,2.294,2286,1.583,2324,1.583,2366,1.583,2389,1.733,2394,1.733,2396,2.88,2402,1.733,2404,1.733,2419,1.733,2427,1.733,2441,1.583,2478,1.962,2479,1.733,2480,4.777,2481,1.962,2482,3.26,2483,4.183,2484,4.183,2485,1.733,2486,1.733,2487,1.962,2488,1.962,2489,1.962,2490,1.962,2491,1.962,2492,1.962,2493,1.962,2494,1.962,2495,3.26,2496,1.962,2497,1.962,2498,1.962,2499,1.962,2500,3.26,2501,1.962,2502,3.26,2503,1.962,2504,1.962,2505,1.962,2506,4.873,2507,2.88,2508,1.962,2509,1.962,2510,1.962,2511,1.733,2512,1.962,2513,4.183,2514,1.962,2515,1.962,2516,3.26,2517,1.962,2518,1.962,2519,3.26,2520,3.26,2521,1.962,2522,1.962,2523,1.962,2524,1.962,2525,3.26,2526,1.733,2527,1.733,2528,5.935,2529,1.962,2530,3.26,2531,1.962,2532,4.183,2533,1.962,2534,1.962,2535,3.26,2536,1.962,2537,1.962,2538,1.962,2539,1.962,2540,1.962,2541,3.26,2542,1.962,2543,1.962,2544,3.26,2545,1.962,2546,1.962,2547,1.962,2548,1.962,2549,3.26,2550,1.962,2551,1.962,2552,1.962,2553,1.962,2554,1.962,2555,1.962,2556,1.962,2557,1.962,2558,1.962,2559,1.962,2560,1.962,2561,1.962,2562,3.26,2563,1.962,2564,1.962,2565,1.733,2566,4.305,2567,1.962,2568,1.962,2569,1.962,2570,1.962,2571,1.962,2572,2.88,2573,1.962,2574,1.962,2575,1.962,2576,1.962,2577,1.962,2578,1.962,2579,1.962,2580,1.962,2581,3.26,2582,1.962,2583,1.962,2584,1.733,2585,1.962,2586,1.962,2587,3.26,2588,1.962,2589,1.962,2590,1.962,2591,1.962,2592,1.962,2593,1.962,2594,1.962,2595,1.962,2596,1.962,2597,3.26,2598,7.269,2599,1.962,2600,1.962,2601,1.962,2602,1.962,2603,1.962,2604,1.962,2605,1.962,2606,1.962,2607,1.962,2608,1.962,2609,1.962,2610,1.962,2611,1.962,2612,1.733,2613,1.962,2614,1.962,2615,1.962,2616,1.962,2617,1.962,2618,1.962,2619,1.962,2620,1.962,2621,1.962,2622,1.962,2623,1.962,2624,1.733,2625,1.962,2626,1.962,2627,3.26,2628,1.962,2629,1.962,2630,1.962,2631,1.962,2632,1.962,2633,3.26,2634,1.962,2635,1.962,2636,1.962,2637,1.962,2638,1.962,2639,1.962,2640,1.962,2641,1.962,2642,1.962,2643,1.962,2644,1.962,2645,5.408,2646,1.962,2647,1.962,2648,1.962,2649,1.962,2650,1.962,2651,1.962,2652,1.962,2653,1.733,2654,1.733,2655,1.962,2656,1.962,2657,1.962,2658,1.962,2659,1.733,2660,1.962,2661,1.962,2662,1.962,2663,1.962,2664,1.962,2665,7.41,2666,3.26,2667,1.962,2668,3.26,2669,1.962,2670,1.962,2671,1.962,2672,1.962,2673,3.26,2674,1.962,2675,1.962,2676,1.962,2677,3.26,2678,1.962,2679,1.962,2680,1.962,2681,1.962,2682,1.962,2683,3.26,2684,1.962,2685,3.26,2686,1.962,2687,1.962,2688,1.962,2689,3.695,2690,3.26,2691,1.962,2692,1.962,2693,1.962,2694,1.962,2695,1.962,2696,1.962,2697,3.26,2698,3.26,2699,1.962,2700,1.962,2701,1.962,2702,2.443,2703,1.962,2704,1.962,2705,1.962,2706,3.26,2707,1.962,2708,1.962,2709,1.962,2710,1.962,2711,1.962,2712,1.962,2713,1.962,2714,1.962,2715,1.962,2716,1.962,2717,1.962,2718,1.962,2719,1.962,2720,1.962,2721,1.962,2722,1.962,2723,1.962,2724,1.962,2725,3.26,2726,3.26,2727,1.962,2728,1.962,2729,1.962,2730,1.962,2731,1.962,2732,1.962,2733,1.962,2734,1.962,2735,3.26,2736,3.26,2737,1.962,2738,1.962,2739,1.962,2740,3.26,2741,1.962,2742,1.962,2743,3.26,2744,1.962,2745,1.962,2746,1.962,2747,1.962,2748,1.962,2749,1.962,2750,1.962,2751,3.26,2752,3.26,2753,3.26,2754,3.26,2755,1.962,2756,1.962,2757,1.962,2758,1.962,2759,1.962,2760,2.294,2761,1.962,2762,1.962,2763,1.733,2764,1.962]],["title/license.html",[2262,2.99,2263,2.99,2760,2.608]],["body/license.html",[8,0.007,9,0.007,10,0.007,61,2.711,267,2.711,369,6.772,1035,2.91,1096,5.21,1352,4.804,1721,4.804,1926,4.387,2275,4.387,2283,3.826,2485,4.804,2702,4.075,2760,3.826,2763,6.772,2765,4.804,2766,4.804,2767,4.387,2768,4.387,2769,6.954,2770,5.438,2771,5.438,2772,5.438,2773,5.438,2774,4.804,2775,5.438,2776,6.954,2777,8.878,2778,5.438,2779,5.438,2780,5.438,2781,6.954,2782,5.438,2783,5.438,2784,5.438,2785,5.438,2786,5.438,2787,5.438,2788,5.438,2789,5.438,2790,6.954,2791,5.438,2792,5.438,2793,5.438,2794,5.438,2795,5.438,2796,5.438,2797,5.438,2798,6.954,2799,6.954,2800,5.438,2801,5.438,2802,4.804,2803,5.438,2804,5.438,2805,5.438,2806,5.438,2807,5.438,2808,5.438,2809,5.438,2810,5.438,2811,5.438,2812,5.438,2813,5.438,2814,5.438,2815,5.438,2816,5.438,2817,5.438,2818,5.438,2819,5.438,2820,5.438,2821,5.438,2822,5.438,2823,5.438,2824,5.438,2825,5.438,2826,5.438]],["title/modules.html",[52,2.756]],["body/modules.html",[8,0.007,9,0.007,10,0.007,51,4.227,52,2.721,57,3.478,385,4.503,389,3.802,390,4.227,391,4.227,392,4.227,393,4.227,394,4.227,395,4.227,396,4.227,397,3.478,2566,8.031,2584,6.541,2827,9.091,2828,9.091,2829,9.178,2830,7.404]],["title/overview.html",[2831,5.378]],["body/overview.html",[2,0.782,8,0.009,9,0.005,10,0.005,13,1.371,51,5.553,52,1.712,53,2.619,54,3.34,55,3.34,56,3.34,57,5.024,58,4.472,59,2.907,60,1.951,61,1.885,71,1.24,75,4.074,154,4.769,181,2.023,226,1.823,356,4.229,385,6.817,386,3.34,387,3.34,388,3.34,389,5.492,390,5.786,391,5.177,392,4.472,393,4.472,394,5.177,395,6.106,396,5.786,397,4.831,567,4.472,634,4.994,672,3.34,674,3.34,675,3.34,676,4.472,946,4.229,972,3.34,973,3.34,1106,4.472,1173,4.229,1222,3.34,1223,3.34,1239,4.472,1499,4.229,1521,3.34,1522,3.34,1593,5.252,1612,3.34,1613,3.34,1614,3.34,1791,4.229,1833,3.34,1835,3.34,1888,3.34,1889,3.34,1890,3.34,1934,4.381,2016,3.05,2117,3.34,2187,3.34,2188,3.34,2190,3.34,2831,3.34,2832,3.781,2833,3.781]],["title/classes/passwordValidator.html",[0,0.192,2133,3.333]],["body/classes/passwordValidator.html",[0,0.3,2,1.124,3,0.114,4,0.114,5,0.102,7,0.137,8,0.009,9,0.007,10,0.007,16,0.196,40,0.634,76,0.89,78,1.312,79,1.086,80,1.061,85,0.543,86,1.282,87,1.547,95,1.469,104,1.252,163,1.471,196,3.354,200,2.807,202,1.477,232,2.728,503,3.023,569,3.589,630,2.807,807,2.711,838,2.255,2133,5.21,2348,4.387,2428,5.393,2429,4.892,2430,4.892,2431,6.108,2433,6.008,2434,5.21,2436,4.892,2438,4.075,2439,4.075,2440,3.826,2834,5.438,2835,5.438,2836,4.804,2837,4.804,2838,4.804,2839,4.804]],["title/classes/phoneNumberValidator.html",[0,0.192,1980,3.333]],["body/classes/phoneNumberValidator.html",[0,0.3,2,1.124,3,0.114,4,0.114,5,0.102,7,0.137,8,0.009,9,0.007,10,0.007,16,0.196,40,0.634,76,0.89,78,1.312,79,1.086,80,1.061,85,0.543,86,1.282,87,1.547,95,1.469,104,1.252,163,1.471,196,3.354,199,2.389,200,2.807,202,1.477,232,2.728,503,3.023,569,3.589,750,2.91,807,2.711,838,2.255,1923,4.387,1980,5.21,2349,4.387,2428,5.393,2429,4.892,2430,4.892,2431,6.108,2433,6.008,2434,5.21,2436,4.892,2438,4.075,2439,4.075,2440,3.826,2840,5.438,2841,5.438,2842,4.804,2843,4.804]],["title/properties.html",[185,1.846,2371,3.275]],["body/properties.html",[8,0.009,9,0.007,10,0.007,36,1.793,185,2.173,267,3.143,335,5.363,352,5.569,371,5.569,483,6.14,579,3.988,580,3.988,831,4.435,1480,5.569,1585,4.723,2479,5.569,2480,5.569,2526,5.569,2527,5.569,2528,5.569,2659,5.569,2689,5.569,2702,4.723,2760,4.435,2765,5.569,2766,5.569,2767,5.085,2768,5.085,2844,6.304,2845,6.304,2846,5.569,2847,6.304,2848,5.569,2849,6.734,2850,6.304]],["title/miscellaneous/typealiases.html",[2422,2.239,2851,5.355]],["body/miscellaneous/typealiases.html",[3,0.103,8,0.008,9,0.006,10,0.006,40,0.836,41,2.227,85,0.491,122,3.46,182,3.46,192,4.881,193,3.685,194,3.967,1202,5.754,1206,5.754,1209,5.754,1271,3.967,1304,6.858,2300,3.685,2358,5.254,2359,3.967,2422,2.972,2449,4.345,2453,5.254,2465,5.754,2852,4.918,2853,4.345,2854,6.514,2855,8.311,2856,6.514,2857,6.514,2858,8.088,2859,6.514,2860,7.303,2861,6.514,2862,6.514,2863,6.514,2864,6.514,2865,6.514,2866,6.514,2867,6.514,2868,6.514,2869,4.918,2870,6.514,2871,6.514,2872,6.514,2873,6.514,2874,7.303,2875,6.514,2876,4.918,2877,4.918,2878,4.918,2879,5.754,2880,5.754,2881,4.345,2882,4.918,2883,4.918]],["title/classes/usenameValidator.html",[0,0.192,2134,3.333]],["body/classes/usenameValidator.html",[0,0.301,2,1.133,3,0.115,4,0.115,5,0.103,7,0.138,8,0.009,9,0.007,10,0.007,16,0.197,40,0.637,76,0.894,78,1.318,79,1.09,80,1.066,85,0.547,86,1.288,87,1.559,95,1.473,104,1.259,163,1.478,196,3.371,200,2.829,202,1.489,232,2.742,503,3.047,569,3.607,747,3.172,807,2.733,838,2.273,2134,5.237,2350,4.422,2428,5.413,2429,4.917,2430,4.917,2431,6.119,2433,6.021,2434,5.237,2436,4.917,2437,4.422,2438,4.107,2439,4.107,2440,3.856,2884,5.481,2885,5.481]],["title/miscellaneous/variables.html",[2422,2.239,2886,4.73]],["body/miscellaneous/variables.html",[1,0.799,3,0.087,8,0.009,9,0.003,10,0.003,30,1.089,31,1.33,33,1.998,36,1,40,0.736,41,1.591,50,0.854,79,0.73,85,0.351,87,0.44,95,1.382,99,2.009,101,1.172,110,1.246,122,2.472,138,1.089,145,1.483,159,0.935,163,1.167,166,1.515,180,1.089,182,1.089,184,3.315,186,0.66,191,1.03,192,1.16,193,2.633,195,1.248,197,1.248,198,1.998,199,2.07,200,1.814,201,2.633,202,1.973,203,2.633,204,0.828,205,1.639,206,1.248,207,1.998,208,1.248,209,1.248,210,1.16,211,1.248,212,1.248,213,5.259,214,1.248,215,2.151,216,1.248,217,1.248,218,1.248,219,3.37,220,1.16,221,1.248,222,1.248,223,1.248,224,1.248,225,1.248,226,1.695,227,1.248,246,5.719,247,4.425,261,2.015,262,0.772,279,1.367,280,1.03,303,2.644,306,2.053,307,0.896,308,1.544,309,2.224,335,1.876,340,2.939,342,1.03,349,0.935,419,1.03,445,1.03,483,2.633,496,1.16,503,3.241,519,1.208,523,3.672,525,1.367,531,1.367,545,1.427,547,1.427,557,2.151,558,1.03,575,1.089,580,0.979,603,2.981,613,1.16,623,0.746,630,1.814,632,2.236,636,2.151,637,1.775,642,1.775,658,1.089,705,2.633,724,1.876,725,1.876,726,1.998,727,2.151,729,1.248,738,2.151,741,2.273,750,1.427,781,1.03,807,2.083,809,1.089,831,1.089,839,0.86,844,0.86,847,2.472,895,1.248,909,1.367,914,1.089,919,3.624,944,1.367,987,2.151,1035,0.828,1114,1.775,1153,1.367,1162,1.089,1199,1.248,1211,2.151,1213,5.106,1217,3.37,1244,0.979,1271,2.151,1288,2.356,1304,1.16,1309,1.998,1322,1.16,1325,1.367,1326,1.367,1329,1.16,1337,1.16,1343,1.367,1356,2.356,1361,1.248,1365,1.367,1366,2.356,1424,2.356,1445,2.633,1501,1.248,1508,2.356,1552,3.131,1575,1.367,1635,2.151,1648,1.367,1649,2.356,1711,1.248,1735,1.16,1851,2.151,1873,2.356,1879,2.356,1900,1.248,1918,1.248,1937,1.16,2027,2.151,2043,1.367,2243,1.367,2260,1.248,2266,1.367,2267,1.248,2279,1.248,2281,2.151,2283,1.876,2292,1.367,2294,2.356,2295,1.367,2296,2.356,2300,1.16,2301,2.356,2302,1.367,2303,2.356,2304,2.356,2305,1.367,2307,1.367,2308,1.367,2311,1.367,2313,1.367,2316,1.367,2318,1.367,2319,2.356,2320,2.356,2325,1.367,2326,2.356,2327,1.367,2328,5.15,2329,1.367,2330,2.356,2331,1.367,2332,1.367,2333,3.105,2334,1.248,2335,2.356,2339,1.367,2344,1.248,2345,1.248,2347,2.151,2348,1.248,2349,1.248,2350,1.248,2352,2.356,2353,2.356,2354,2.356,2355,1.367,2363,1.248,2366,3.37,2367,3.105,2368,2.356,2422,0.935,2437,2.151,2444,1.367,2448,1.367,2453,1.248,2474,1.367,2486,1.367,2507,1.367,2511,1.367,2565,2.356,2572,1.367,2612,1.367,2624,2.356,2653,1.367,2654,1.367,2702,1.16,2760,1.089,2767,1.248,2768,1.248,2774,1.367,2802,1.367,2836,1.367,2837,1.367,2838,1.367,2839,1.367,2842,1.367,2843,1.367,2846,1.367,2848,1.367,2849,1.367,2853,2.356,2879,2.356,2880,2.356,2881,2.356,2886,1.367,2887,5.518,2888,1.548,2889,1.548,2890,3.514,2891,2.667,2892,2.667,2893,1.548,2894,1.548,2895,1.548,2896,1.548,2897,1.548,2898,1.548,2899,2.667,2900,1.548,2901,1.548,2902,1.548,2903,1.548,2904,1.548,2905,1.548,2906,1.548,2907,1.548,2908,2.667,2909,1.548,2910,1.548,2911,1.548,2912,1.548,2913,1.548,2914,1.548,2915,1.548,2916,4.178,2917,1.548,2918,1.548,2919,2.667,2920,2.667,2921,1.548,2922,1.548,2923,1.548,2924,1.548,2925,1.548,2926,1.548,2927,1.548,2928,1.548,2929,1.548,2930,2.667,2931,1.548,2932,1.548,2933,1.548,2934,1.548,2935,1.548,2936,1.548,2937,1.548,2938,1.548,2939,1.548,2940,1.548,2941,1.548,2942,1.548,2943,2.667,2944,1.548,2945,1.548,2946,1.548,2947,1.548,2948,1.548,2949,1.548,2950,1.548,2951,4.178,2952,1.548,2953,1.548,2954,1.548,2955,1.548,2956,1.548,2957,1.548,2958,1.548,2959,1.548,2960,1.548,2961,2.667,2962,1.548,2963,1.548,2964,1.548,2965,1.548,2966,2.667,2967,1.548,2968,1.548,2969,1.548,2970,1.548,2971,1.548,2972,1.548,2973,1.548,2974,1.548,2975,1.548,2976,1.548,2977,1.548,2978,1.548,2979,1.548,2980,1.548,2981,1.548,2982,1.548,2983,1.548,2984,1.548,2985,1.548,2986,1.548,2987,1.548,2988,1.548,2989,1.548,2990,1.548,2991,1.548,2992,1.548,2993,1.548,2994,1.548,2995,1.548,2996,1.548,2997,1.548,2998,1.548,2999,1.548,3000,1.548,3001,1.548,3002,1.548,3003,1.548,3004,1.548,3005,1.548,3006,1.548,3007,1.548,3008,1.548,3009,1.548,3010,1.548,3011,1.548,3012,1.548,3013,2.667,3014,4.178,3015,2.667,3016,1.548,3017,1.548,3018,1.548,3019,1.548,3020,1.548,3021,1.548,3022,1.548,3023,1.548,3024,1.548,3025,1.548,3026,1.548,3027,2.667,3028,1.548,3029,1.548,3030,1.548,3031,1.548,3032,2.667,3033,1.548,3034,2.667,3035,1.548,3036,3.514,3037,1.548,3038,1.548,3039,1.548,3040,1.548]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":750,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.12",{"_index":2408,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2412,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2393,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":2388,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1281,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":2392,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2406,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2291,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2356,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2362,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2351,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2361,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2317,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2297,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2310,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2315,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2306,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2314,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2312,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2309,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":851,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["01t00:00:00.000z",{"_index":852,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["02t05:01:03.938z",{"_index":1945,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["03",{"_index":2277,"title":{},"body":{"changelog.html":{}}}],["03anyolqtms4nv1u0xnktfzxsjthwjrliuvxjabk18zqsuc8imkuz_mvv7tk6aobulne66mrwpoe9ypfs6epl76uxlyj4qqkywwabx",{"_index":2002,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["07",{"_index":1944,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["09",{"_index":2276,"title":{},"body":{"changelog.html":{}}}],["09999999999",{"_index":1973,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["0})@isnumber()@isnotempty({message",{"_index":1725,"title":{},"body":{"classes/PostEntity.html":{}}}],["1",{"_index":226,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AppService.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.11.0",{"_index":2400,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":2401,"title":{},"body":{"dependencies.html":{}}}],["1.18.0",{"_index":2420,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2397,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2274,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":2844,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":2395,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1162,"title":{},"body":{"controllers/FileController.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1930,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1024",{"_index":1278,"title":{},"body":{"controllers/HealthController.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(50)@isoptional({message",{"_index":1678,"title":{},"body":{"classes/PaginationDto.html":{}}}],["12",{"_index":1934,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"overview.html":{}}}],["123",{"_index":810,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["150",{"_index":1277,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["17.0.3",{"_index":2373,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1993,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":2960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@isoptional({message",{"_index":1932,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1})@isnumber()@isnotempty()@min(0)@max(2",{"_index":1961,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2",{"_index":364,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2.0.0",{"_index":2409,"title":{},"body":{"dependencies.html":{}}}],["2.1.11",{"_index":2386,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2377,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":2398,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1275,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["20)@minlength(2",{"_index":2128,"title":{},"body":{"classes/UserEntity.html":{}}}],["200",{"_index":337,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":850,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2022",{"_index":2275,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["21",{"_index":2138,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":2116,"title":{},"body":{"classes/UserEntity.html":{}}}],["255",{"_index":861,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["255)@maxlength(256",{"_index":859,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["27",{"_index":2832,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1311,"title":{},"body":{"interfaces/IApp.html":{},"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["3.0.0",{"_index":2381,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2414,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":2387,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":206,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":1452,"title":{},"body":{"controllers/MathController.html":{}}}],["4.0.0",{"_index":2410,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2391,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":2384,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":2416,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":339,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1955,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1952,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["456",{"_index":811,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["5",{"_index":1453,"title":{},"body":{"controllers/MathController.html":{}}}],["5.0.1",{"_index":2390,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":2322,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":872,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{}}}],["50)@minlength(0",{"_index":869,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["51",{"_index":2833,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":2403,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":2382,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":2418,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2415,"title":{},"body":{"dependencies.html":{}}}],["768",{"_index":1274,"title":{},"body":{"controllers/HealthController.html":{}}}],["789",{"_index":812,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["789'})@isnotempty({message",{"_index":1039,"title":{},"body":{"classes/CustomDto.html":{},"classes/PostEntity.html":{}}}],["789'})@isstring({message",{"_index":1708,"title":{},"body":{"classes/PostEntity.html":{}}}],["8",{"_index":2117,"title":{},"body":{"classes/UserEntity.html":{},"overview.html":{}}}],["8.0.1",{"_index":2405,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2421,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":2321,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":2376,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":2379,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":2380,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":2383,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2843,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2842,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../docs",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":500,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1940,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["abcedf",{"_index":1730,"title":{},"body":{"classes/PostEntity.html":{}}}],["abcedf'})@isstring({message",{"_index":1710,"title":{},"body":{"classes/PostEntity.html":{}}}],["above",{"_index":2797,"title":{},"body":{"license.html":{}}}],["abstraction/microservices/math/math.module",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction/prisma/prisma.module",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["abstraction/prisma/prisma.service",{"_index":81,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["accept",{"_index":1648,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["acceptable",{"_index":2936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accepthmrupdate",{"_index":187,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["access",{"_index":557,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":1659,"title":{},"body":{"classes/PaginationDto.html":{}}}],["accesstoken",{"_index":737,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["account.'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":2820,"title":{},"body":{"license.html":{}}}],["actions",{"_index":211,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":1749,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":2996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1736,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(userid",{"_index":1747,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcookieauth('optional",{"_index":2995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["added",{"_index":2278,"title":{},"body":{"changelog.html":{}}}],["additional",{"_index":1348,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["addoauth2",{"_index":2987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1915,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adheres",{"_index":2271,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["admin.controller",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin1",{"_index":891,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["admin2",{"_index":892,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":51,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":842,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":58,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":64,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["age",{"_index":1916,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["age=0",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{}}}],["age=604800",{"_index":801,"title":{},"body":{"injectables/AuthService.html":{}}}],["agedate",{"_index":2957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["alert",{"_index":180,"title":{"interfaces/Alert.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertoptions",{"_index":184,"title":{"interfaces/AlertOptions.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertstyle",{"_index":192,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2852,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":1142,"title":{},"body":{"controllers/FileController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1147,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":230,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["allexceptionsfilter.handlemessageresponse(request",{"_index":278,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":2934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allows",{"_index":2611,"title":{},"body":{"index.html":{}}}],["already",{"_index":1879,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":2707,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":2638,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2788,"title":{},"body":{"license.html":{}}}],["another",{"_index":559,"title":{},"body":{"injectables/AtGuard.html":{}}}],["any,info",{"_index":1112,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":1111,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["api",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2850,"title":{},"body":{"properties.html":{}}}],["api/blob/main/license",{"_index":2976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api:latest",{"_index":2692,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":2478,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":1024,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":1168,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":833,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({description",{"_index":808,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({example",{"_index":1464,"title":{},"body":{"classes/MessageEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apiproperty({type",{"_index":1037,"title":{},"body":{"classes/CustomDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["apipropertyoptional",{"_index":875,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["apipropertyoptional({description",{"_index":856,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apipropertyoptional({minimum",{"_index":1676,"title":{},"body":{"classes/PaginationDto.html":{}}}],["apipropertyoptional({type",{"_index":1661,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":2539,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":950,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":1177,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('health",{"_index":1267,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('home",{"_index":362,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('microservices",{"_index":1447,"title":{},"body":{"controllers/MathController.html":{}}}],["apitags('oauth",{"_index":1595,"title":{},"body":{"controllers/OauthController.html":{}}}],["apitags('posts",{"_index":1805,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":2173,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":1169,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["app",{"_index":1309,"title":{},"body":{"interfaces/IApp.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1912,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.module.ts",{"_index":538,"title":{},"body":{"injectables/AppService.html":{}}}],["app.service",{"_index":357,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["app_filter",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":322,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2480,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application/json",{"_index":1649,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["application/x",{"_index":782,"title":{},"body":{"injectables/AuthService.html":{}}}],["applications",{"_index":2525,"title":{},"body":{"index.html":{}}}],["apply",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":2196,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":385,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":2568,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":356,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appsetup",{"_index":1308,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["architecture",{"_index":2754,"title":{},"body":{"index.html":{}}}],["args",{"_index":2433,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1696,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":254,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2824,"title":{},"body":{"license.html":{}}}],["array",{"_index":839,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array'})@isnotempty({message",{"_index":820,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["array'})@isoptional({message",{"_index":1965,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.from(previousnames.value",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":1170,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":1189,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":2456,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":999,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":2778,"title":{},"body":{"license.html":{}}}],["async",{"_index":87,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["atguard",{"_index":413,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":567,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["attach",{"_index":1715,"title":{},"body":{"classes/PostEntity.html":{}}}],["attacks",{"_index":2632,"title":{},"body":{"index.html":{}}}],["audio",{"_index":829,"title":{},"body":{"classes/CommentEntity.html":{},"classes/MessageEntity.html":{}}}],["audio'})@isnotempty()@isstring",{"_index":1471,"title":{},"body":{"classes/MessageEntity.html":{}}}],["auth",{"_index":496,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":680,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":1619,"title":{},"body":{"modules/OauthModule.html":{}}}],["auth/auth.service",{"_index":1636,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth/decorators",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["auth/dto/request",{"_index":1637,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth_error",{"_index":724,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":592,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":2559,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":551,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{}}}],["authguard(estrategy.jwt",{"_index":554,"title":{},"body":{"injectables/AtGuard.html":{}}}],["authguard(estrategy.jwt_refresh",{"_index":2049,"title":{},"body":{"classes/RtGuard.html":{}}}],["authmodule",{"_index":389,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":831,"title":{},"body":{"classes/CommentEntity.html":{},"interfaces/IApp.html":{},"classes/PostEntity.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":1704,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authorization",{"_index":662,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OauthService.html":{}}}],["authorization=${tokendata",{"_index":799,"title":{},"body":{"injectables/AuthService.html":{}}}],["authorizationurl",{"_index":2990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":2813,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":634,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":2530,"title":{},"body":{"index.html":{}}}],["available",{"_index":2830,"title":{},"body":{"modules.html":{}}}],["availablethemes",{"_index":2301,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["await",{"_index":519,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["awesome",{"_index":1312,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["axios",{"_index":729,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.config",{"_index":1212,"title":{},"body":{"classes/FileService.html":{}}}],["axios.create",{"_index":2944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axios.post",{"_index":777,"title":{},"body":{"injectables/AuthService.html":{}}}],["axiosconfig",{"_index":1211,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosconfig.post(url",{"_index":1216,"title":{},"body":{"classes/FileService.html":{}}}],["axiosinstance",{"_index":2943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosrequest",{"_index":1635,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosrequest('get",{"_index":1651,"title":{},"body":{"injectables/OauthService.html":{}}}],["axiosrequest('post",{"_index":779,"title":{},"body":{"injectables/AuthService.html":{}}}],["b",{"_index":1456,"title":{},"body":{"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["backend",{"_index":2499,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2708,"title":{},"body":{"index.html":{}}}],["bad",{"_index":2929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request",{"_index":2928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badgatewayexception",{"_index":1071,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badgatewayexception('bad",{"_index":1079,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badrequestexception",{"_index":718,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1702,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1878,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2658,"title":{},"body":{"index.html":{}}}],["base64').tostring",{"_index":2046,"title":{},"body":{"guards/RolesGuard.html":{}}}],["based",{"_index":1364,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["baseurl",{"_index":2945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":2389,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2742,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2716,"title":{},"body":{"index.html":{}}}],["before",{"_index":1326,"title":{},"body":{"interfaces/IApp.html":{},"miscellaneous/variables.html":{}}}],["begin",{"_index":1957,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["begining",{"_index":2731,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2744,"title":{},"body":{"index.html":{}}}],["better",{"_index":2756,"title":{},"body":{"index.html":{}}}],["bindevents",{"_index":1548,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["bindevents(client",{"_index":1549,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["bingbot/2.0",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["bio",{"_index":1917,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birth",{"_index":1946,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birthdate",{"_index":1918,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["blank",{"_index":870,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["bodies",{"_index":2571,"title":{},"body":{"index.html":{}}}],["body",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["bodyformdata",{"_index":771,"title":{},"body":{"injectables/AuthService.html":{}}}],["bodyformdata.append",{"_index":773,"title":{},"body":{"injectables/AuthService.html":{}}}],["bodyformdata.append('response",{"_index":775,"title":{},"body":{"injectables/AuthService.html":{}}}],["boolean",{"_index":196,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/ISwaggerOptions.html":{},"controllers/MessagesGateway.html":{},"classes/PostEntity.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["boolean'})@isnotempty({message",{"_index":1722,"title":{},"body":{"classes/PostEntity.html":{}}}],["bootstrap",{"_index":2364,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2829,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2827,"title":{},"body":{"modules.html":{}}}],["brute",{"_index":2630,"title":{},"body":{"index.html":{}}}],["buffer.from(token.split('.')[1",{"_index":2045,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bug",{"_index":1319,"title":{},"body":{"interfaces/IApp.html":{}}}],["build",{"_index":2653,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":2529,"title":{},"body":{"index.html":{}}}],["building",{"_index":2521,"title":{},"body":{"index.html":{}}}],["built",{"_index":2641,"title":{},"body":{"index.html":{}}}],["c",{"_index":1926,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"license.html":{}}}],["cache",{"_index":471,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["cache.interceptor.ts",{"_index":1284,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:5",{"_index":1287,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_manager",{"_index":508,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["cached",{"_index":532,"title":{},"body":{"injectables/AppService.html":{}}}],["cacheinterceptor",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["cachemanager",{"_index":505,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["cachemodule",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["cachetoken",{"_index":520,"title":{},"body":{"injectables/AppService.html":{}}}],["calculate",{"_index":1437,"title":{},"body":{"controllers/MathController.html":{}}}],["call",{"_index":2585,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1575,"title":{},"body":{"controllers/OauthController.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":1121,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["called",{"_index":2604,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":1067,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":540,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":544,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":2299,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["capitalize(str",{"_index":2458,"title":{},"body":{"miscellaneous/functions.html":{}}}],["card",{"_index":2752,"title":{},"body":{"index.html":{}}}],["catch",{"_index":239,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":251,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1299,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(rpcexception",{"_index":1086,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["catcherror",{"_index":1074,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":1078,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["categories",{"_index":1855,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1857,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["centers",{"_index":2599,"title":{},"body":{"index.html":{}}}],["change",{"_index":942,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["changelog",{"_index":2264,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":2266,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["character",{"_index":2124,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":862,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(21",{"_index":2118,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1954,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@maxlength(51",{"_index":871,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1956,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":2119,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(phonenumbervalidator",{"_index":1975,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":2129,"title":{},"body":{"classes/UserEntity.html":{}}}],["charge",{"_index":2773,"title":{},"body":{"license.html":{}}}],["chat",{"_index":2847,"title":{},"body":{"properties.html":{}}}],["chats",{"_index":2512,"title":{},"body":{"index.html":{}}}],["check",{"_index":1259,"title":{},"body":{"controllers/HealthController.html":{},"controllers/MathController.html":{}}}],["checkexist",{"_index":1874,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1877,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1883,"title":{},"body":{"injectables/PostsService.html":{}}}],["child",{"_index":1328,"title":{},"body":{"interfaces/IApp.html":{}}}],["city",{"_index":1924,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["claim",{"_index":2816,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessageEntity.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessageEntity.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":2649,"title":{},"body":{"index.html":{}}}],["client",{"_index":1450,"title":{},"body":{"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"injectables/OauthService.html":{},"injectables/WsThrottlerGuard.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1517,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["client.conn.remoteaddress",{"_index":2254,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["client.id",{"_index":1512,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["client.subscribe",{"_index":1561,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["client/.../alertsstore.ts",{"_index":2853,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../app.ts",{"_index":2442,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../auth.dto.ts",{"_index":2869,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../auth.service.ts",{"_index":2894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../axios.config.ts",{"_index":2888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../conversations.dto.ts",{"_index":2855,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../conversations.service.ts",{"_index":2895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../count.ts",{"_index":2454,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../file.service.ts",{"_index":2896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../files.dto.ts",{"_index":2874,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../pageview.ts",{"_index":2892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../posts.dto.ts",{"_index":2858,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../posts.service.ts",{"_index":2897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../str.ts",{"_index":2446,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../theme.ts",{"_index":2453,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../user.service.ts",{"_index":2898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../user.ts",{"_index":2910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../users.dto.ts",{"_index":2860,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../usesticky.ts",{"_index":2909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/composables/count.ts",{"_index":2289,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/composables/user.ts",{"_index":2295,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/composables/usesticky.ts",{"_index":2292,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/dto/auth.dto.ts",{"_index":2882,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/conversations.dto.ts",{"_index":2876,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/files.dto.ts",{"_index":2883,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/posts.dto.ts",{"_index":2877,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/users.dto.ts",{"_index":2878,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/helpers/app.ts",{"_index":1303,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/str.ts",{"_index":2298,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/theme.ts",{"_index":2300,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/server/api/pageview.ts",{"_index":2302,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/auth.service.ts",{"_index":2305,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/axios.config.ts",{"_index":2307,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/conversations.service.ts",{"_index":2308,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts",{"_index":1199,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts:21",{"_index":1207,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:35",{"_index":1210,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:7",{"_index":1204,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/posts.service.ts",{"_index":2311,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/user.service.ts",{"_index":2313,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/stores/alertsstore.ts",{"_index":182,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":1117,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/MessagesService.html":{}}}],["clientproxy",{"_index":1442,"title":{},"body":{"controllers/MathController.html":{}}}],["clientsecret",{"_index":1119,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsmodule",{"_index":1458,"title":{},"body":{"modules/MathModule.html":{}}}],["clientsmodule.register",{"_index":1461,"title":{},"body":{"modules/MathModule.html":{}}}],["closable",{"_index":197,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["cluster_adminmodule",{"_index":54,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":55,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":56,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":672,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":674,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":673,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":675,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":972,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":974,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":973,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1222,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1223,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1521,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1522,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_oauthmodule",{"_index":1612,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_exports",{"_index":1614,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_imports",{"_index":1615,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":1613,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1833,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1834,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1835,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1888,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1889,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1890,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2187,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2190,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2189,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2188,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":1451,"title":{},"body":{"controllers/MathController.html":{}}}],["code",{"_index":310,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"changelog.html":{},"index.html":{}}}],["commands",{"_index":2625,"title":{},"body":{"index.html":{}}}],["comment",{"_index":809,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":1014,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":802,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1766,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commitlint",{"_index":2647,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":2372,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":2374,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2757,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":726,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compatible",{"_index":457,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["compodoc",{"_index":2589,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2694,"title":{},"body":{"index.html":{}}}],["compress",{"_index":2570,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2394,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computed",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["computer",{"_index":2753,"title":{},"body":{"index.html":{}}}],["concept",{"_index":2600,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2796,"title":{},"body":{"license.html":{}}}],["config",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('app_secret",{"_index":588,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["config.get('google_callback_url",{"_index":2991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('throttle_limit",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_ttl",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":419,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"app_secret",{"_index":688,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"expire_at_time",{"_index":691,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":399,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":400,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":2930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":719,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(user_error.duplicate",{"_index":751,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1580,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["connectedsocket",{"_index":1497,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["connection",{"_index":2825,"title":{},"body":{"license.html":{}}}],["console",{"_index":522,"title":{},"body":{"injectables/AppService.html":{}}}],["console.log",{"_index":2039,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log('before",{"_index":1420,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":1421,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1426,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`cookies",{"_index":376,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log(`request",{"_index":1379,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":1380,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`signed",{"_index":378,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log(postid",{"_index":1824,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(res.getheader('set",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(response.cookie('key",{"_index":382,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log(response.getheader('set",{"_index":383,"title":{},"body":{"controllers/AppController.html":{}}}],["const",{"_index":202,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"classes/FileService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":2026,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constants/math.constant",{"_index":1446,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(configservice",{"_index":584,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["constructor(@inject(math_service",{"_index":1449,"title":{},"body":{"controllers/MathController.html":{}}}],["constructor(authservice",{"_index":1625,"title":{},"body":{"injectables/OauthService.html":{}}}],["constructor(config",{"_index":570,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":697,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":242,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(prismaservice",{"_index":74,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":542,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":2120,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2693,"title":{},"body":{"index.html":{}}}],["content",{"_index":781,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/FileService.html":{},"classes/PostEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":547,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":565,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1422,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":564,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1377,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1378,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1288,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest().secret",{"_index":2030,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtows().getclient",{"_index":2253,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["continuous",{"_index":2642,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2821,"title":{},"body":{"license.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":951,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":1180,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":1268,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('math",{"_index":1448,"title":{},"body":{"controllers/MathController.html":{}}}],["controller('messages",{"_index":1506,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["controller('oauth",{"_index":1596,"title":{},"body":{"controllers/OauthController.html":{}}}],["controller('posts",{"_index":1806,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":2174,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":1365,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":1359,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":2375,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":2633,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":847,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/MessageEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversation.dto",{"_index":1056,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":1018,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:6",{"_index":2083,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":2082,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":2081,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation_error",{"_index":987,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversation_error.not_creator",{"_index":1010,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationentity",{"_index":840,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversationid",{"_index":921,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["conversations",{"_index":895,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversations.controller",{"_index":976,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":947,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":893,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":390,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":946,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":384,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":379,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["copies",{"_index":2790,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2776,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2763,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/filters/exception.filter",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["core/interceptors/interceptor.module",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":510,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":511,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["core/security/throttle",{"_index":359,"title":{},"body":{"controllers/AppController.html":{}}}],["cors",{"_index":1507,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":2319,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":2303,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1925,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["course",{"_index":2734,"title":{},"body":{"index.html":{}}}],["cover",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coverage",{"_index":2286,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create_user",{"_index":2922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createat",{"_index":1856,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":1012,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":896,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":954,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":904,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":905,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["createcookie",{"_index":693,"title":{},"body":{"injectables/AuthService.html":{}}}],["createcookie(tokendata",{"_index":700,"title":{},"body":{"injectables/AuthService.html":{}}}],["created",{"_index":909,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":843,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DefaultDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":2337,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":2460,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":1385,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1475,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(dto",{"_index":1479,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":1021,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["createnewconversationdto",{"_index":2854,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["createparamdecorator",{"_index":2961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1737,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":1752,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":1028,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["creator",{"_index":844,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["criteria",{"_index":2558,"title":{},"body":{"index.html":{}}}],["critical",{"_index":286,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["cross",{"_index":2618,"title":{},"body":{"index.html":{}}}],["crud",{"_index":2654,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["crypto",{"_index":2544,"title":{},"body":{"index.html":{}}}],["csrf",{"_index":2617,"title":{},"body":{"index.html":{}}}],["csurf",{"_index":2399,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":273,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":275,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":276,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":919,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":2330,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":1360,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":3009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customdto",{"_index":881,"title":{"classes/CustomDto.html":{}},"body":{"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/PostEntity.html":{},"coverage.html":{}}}],["customeimage",{"_index":2475,"title":{},"body":{"classes/imageValidator.html":{}}}],["customhttpexceptionresponse",{"_index":268,"title":{"interfaces/CustomHttpExceptionResponse.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["customtext",{"_index":2438,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["damages",{"_index":2817,"title":{},"body":{"license.html":{}}}],["dark",{"_index":2879,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":741,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"controllers/MathController.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":1653,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.id",{"_index":2034,"title":{},"body":{"guards/RolesGuard.html":{}}}],["data.id.tostring",{"_index":1655,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.key",{"_index":2032,"title":{},"body":{"guards/RolesGuard.html":{}}}],["data.login",{"_index":1656,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login}@gmail.com",{"_index":1654,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.role",{"_index":2038,"title":{},"body":{"guards/RolesGuard.html":{}}}],["database",{"_index":2483,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1905,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":307,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ConversationEntity.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"interfaces/HttpExceptionResponse.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":1301,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1424,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1906,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2779,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2826,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1390,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1395,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":2548,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":2549,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CustomDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":1339,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":246,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"interfaces/ISwaggerOptions.html":{},"classes/PaginationDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultdto",{"_index":1044,"title":{"classes/DefaultDto.html":{}},"body":{"classes/DefaultDto.html":{},"coverage.html":{}}}],["defaultmessage",{"_index":2429,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":2430,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultoptions",{"_index":203,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":76,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definestore",{"_index":188,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["definestore('alertsstore",{"_index":208,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["definestore('user",{"_index":3025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defining",{"_index":2601,"title":{},"body":{"index.html":{}}}],["definition",{"_index":2537,"title":{},"body":{"index.html":{}}}],["delete",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":963,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":913,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1830,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1758,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1818,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1762,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":2185,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":2149,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete_comment",{"_index":2924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_user",{"_index":2923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecomment",{"_index":1738,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1831,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1757,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":1048,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationadminsdto",{"_index":2856,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deleteconversationbyid",{"_index":897,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":911,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":912,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1873,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["deletemessagedto",{"_index":1052,"title":{"classes/DeleteMessageDto.html":{}},"body":{"classes/DeleteMessageDto.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["deleteoneadminconversation",{"_index":898,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":916,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":917,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":1058,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteonepostdto",{"_index":2857,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deletepost",{"_index":1739,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(userid",{"_index":1761,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":2144,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":2148,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":88,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserprofile",{"_index":2859,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["denied",{"_index":2926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":2583,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1670,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":2536,"title":{},"body":{"index.html":{}}}],["description",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":2557,"title":{},"body":{"index.html":{}}}],["design",{"_index":2538,"title":{},"body":{"index.html":{}}}],["development",{"_index":2682,"title":{},"body":{"index.html":{}}}],["devices",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":2484,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":2612,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["directly",{"_index":1576,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["disable",{"_index":537,"title":{},"body":{"injectables/AppService.html":{}}}],["discription",{"_index":2136,"title":{},"body":{"classes/UserEntity.html":{}}}],["disk",{"_index":1270,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1262,"title":{},"body":{"controllers/HealthController.html":{}}}],["distribute",{"_index":2786,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2761,"title":{},"body":{"index.html":{}}}],["divorced",{"_index":1986,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/enumerations.html":{}}}],["divorced]'})@isoptional({message",{"_index":1971,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["docker",{"_index":2689,"title":{},"body":{"index.html":{},"properties.html":{}}}],["docs",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":2281,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["document.documentelement.scrolltop",{"_index":3017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":2283,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documented",{"_index":2268,"title":{},"body":{"changelog.html":{}}}],["don't",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["done",{"_index":1110,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":1131,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["dontskip",{"_index":324,"title":{},"body":{"controllers/AppController.html":{}}}],["doskip",{"_index":325,"title":{},"body":{"controllers/AppController.html":{}}}],["dotenv",{"_index":1246,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto",{"_index":113,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/FileService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":993,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1866,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":1005,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.conversationid",{"_index":1540,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto.creator",{"_index":994,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":991,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":746,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1876,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1854,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1544,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/PostsService.html":{}}}],["dto.members",{"_index":992,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":990,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":796,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":795,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":2214,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":764,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":2227,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1869,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.published",{"_index":1870,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1882,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.senderid}:${sendername",{"_index":1541,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto.text",{"_index":1539,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/PostsService.html":{}}}],["dto.title",{"_index":1853,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.type",{"_index":1538,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto.userid",{"_index":1002,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.username",{"_index":748,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment/request",{"_index":1794,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/comment/response",{"_index":1804,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/request",{"_index":1793,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/response",{"_index":1800,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/request",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/response",{"_index":581,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":2919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":1384,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2722,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":2699,"title":{},"body":{"index.html":{}}}],["each",{"_index":2594,"title":{},"body":{"index.html":{}}}],["easily",{"_index":2496,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":2522,"title":{},"body":{"index.html":{}}}],["el",{"_index":2043,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["el.classlist.add('sticky",{"_index":3018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classlist.remove('sticky",{"_index":3019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":704,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":2159,"title":{},"body":{"controllers/UsersController.html":{}}}],["emails",{"_index":1125,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":1126,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emaritalstatus",{"_index":1967,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["empty",{"_index":1711,"title":{},"body":{"classes/PostEntity.html":{},"classes/RecaptchaDto.html":{},"miscellaneous/variables.html":{}}}],["enable",{"_index":2534,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1895,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1899,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2726,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1213,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2279,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["endpoint}/avatar",{"_index":1214,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/cover",{"_index":1219,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/posts",{"_index":1220,"title":{},"body":{"classes/FileService.html":{}}}],["enhance",{"_index":2724,"title":{},"body":{"index.html":{}}}],["enter",{"_index":556,"title":{},"body":{"injectables/AtGuard.html":{}}}],["entire",{"_index":2593,"title":{},"body":{"index.html":{}}}],["entities/comment.entity",{"_index":1015,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/conversation.entity",{"_index":949,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["entities/message.entity",{"_index":1026,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["entities/profile.entity",{"_index":2094,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["enum",{"_index":1671,"title":{},"body":{"classes/PaginationDto.html":{}}}],["enumerations",{"_index":2423,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":473,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2581,"title":{},"body":{"index.html":{}}}],["eorder",{"_index":1672,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["eorder.asc",{"_index":1669,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{}}}],["erole",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":320,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/TimeoutInterceptor.html":{}}}],["error",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"controllers/FileController.html":{},"interfaces/HttpExceptionResponse.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error(auth_error.recaptcha_failed",{"_index":787,"title":{},"body":{"injectables/AuthService.html":{}}}],["error(message",{"_index":220,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["errorlog",{"_index":296,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errormessage",{"_index":300,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errorresponse",{"_index":290,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["errors",{"_index":2243,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors.interceptor",{"_index":1372,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["errors.length",{"_index":2245,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsinterceptor",{"_index":1062,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["error}\\n",{"_index":317,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["eslint",{"_index":2637,"title":{},"body":{"index.html":{}}}],["estrategy",{"_index":553,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["estrategy.facebook",{"_index":1116,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["estrategy.google",{"_index":1247,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["estrategy.jwt",{"_index":583,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["estrategy.jwt_refresh",{"_index":2054,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["ev",{"_index":1333,"title":{},"body":{"interfaces/IApp.html":{}}}],["ev.preventdefault",{"_index":1335,"title":{},"body":{"interfaces/IApp.html":{}}}],["eval",{"_index":2573,"title":{},"body":{"index.html":{}}}],["event",{"_index":2812,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2489,"title":{},"body":{"index.html":{}}}],["example",{"_index":454,"title":{},"body":{"modules/AppModule.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["example@gmail.com",{"_index":2135,"title":{},"body":{"classes/UserEntity.html":{}}}],["example@gmail.com'})@isnotempty({message",{"_index":2110,"title":{},"body":{"classes/UserEntity.html":{}}}],["exception",{"_index":256,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["exception.filter.ts",{"_index":1081,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:7",{"_index":1084,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.geterror",{"_index":1087,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.getresponse",{"_index":291,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":292,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":294,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack",{"_index":316,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":283,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":233,"title":{"classes/ExceptionFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["excludenullinterceptor",{"_index":1088,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["excludepaths",{"_index":1293,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths.includes(httpadapter.getrequesturl(request",{"_index":1294,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["execute",{"_index":1323,"title":{},"body":{"interfaces/IApp.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{}}}],["executes",{"_index":2578,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":545,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":2920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existedusermiddleware",{"_index":1093,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["experiences",{"_index":2493,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":690,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["exploit",{"_index":2622,"title":{},"body":{"index.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":678,"title":{},"body":{"modules/AuthModule.html":{},"classes/LoggerModule.html":{},"modules/OauthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":267,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":1139,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":2562,"title":{},"body":{"index.html":{}}}],["extends",{"_index":183,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/FacebookStrategy.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"classes/PostEntity.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/WsThrottlerGuard.html":{}}}],["externals",{"_index":3005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1349,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extraction",{"_index":2070,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["extractjwt",{"_index":577,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":586,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":1340,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":1115,"title":{},"body":{"injectables/FacebookStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["facebookauthredirect",{"_index":1568,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookauthredirect(@req",{"_index":1601,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookauthredirect(req",{"_index":1573,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebooklogin",{"_index":1569,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["facebooklogin(req",{"_index":1627,"title":{},"body":{"injectables/OauthService.html":{}}}],["facebookstrategy",{"_index":1106,"title":{"injectables/FacebookStrategy.html":{}},"body":{"injectables/FacebookStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["failed",{"_index":1322,"title":{},"body":{"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":200,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favourite",{"_index":1713,"title":{},"body":{"classes/PostEntity.html":{}}}],["favouritorid",{"_index":1705,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":2504,"title":{},"body":{"index.html":{}}}],["feels",{"_index":2491,"title":{},"body":{"index.html":{}}}],["female",{"_index":1960,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["field",{"_index":2509,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":2358,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":2457,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":1153,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":1234,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":1232,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":1236,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":1132,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":1233,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":1035,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.controller",{"_index":1225,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":1237,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":1174,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":1181,"title":{"classes/FileService.html":{}},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"coverage.html":{}}}],["filesmodule",{"_index":391,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1173,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":2440,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["find",{"_index":2158,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["firstname",{"_index":1127,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2809,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2656,"title":{},"body":{"index.html":{}}}],["flip",{"_index":2751,"title":{},"body":{"index.html":{}}}],["flows",{"_index":2988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fo",{"_index":2749,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2717,"title":{},"body":{"index.html":{}}}],["following",{"_index":2795,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":2925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":720,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(auth_error.same_password",{"_index":797,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(post_error.not_author",{"_index":1867,"title":{},"body":{"injectables/PostsService.html":{}}}],["forbiddenexception(system_error.forbidden",{"_index":762,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["force",{"_index":2631,"title":{},"body":{"index.html":{}}}],["forgery",{"_index":2620,"title":{},"body":{"index.html":{}}}],["form",{"_index":784,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"index.html":{}}}],["format",{"_index":2269,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["formattedmessage",{"_index":1411,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":2636,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":772,"title":{},"body":{"injectables/AuthService.html":{},"classes/FileService.html":{}}}],["formdata.append('file",{"_index":1215,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('files",{"_index":1221,"title":{},"body":{"classes/FileService.html":{}}}],["forroot",{"_index":1382,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":495,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":340,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"interfaces/IApp.html":{},"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":2520,"title":{},"body":{"index.html":{}}}],["free",{"_index":2772,"title":{},"body":{"license.html":{}}}],["front",{"_index":2725,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2482,"title":{},"body":{"index.html":{}}}],["fs",{"_index":272,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["fs.appendfile('error.log",{"_index":318,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["full",{"_index":1950,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1919,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1979,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":1114,"title":{},"body":{"injectables/FacebookStrategy.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2441,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":2793,"title":{},"body":{"license.html":{}}}],["game",{"_index":2740,"title":{},"body":{"index.html":{}}}],["gender",{"_index":1920,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["generate",{"_index":1362,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["generated",{"_index":2531,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":958,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":928,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1812,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1775,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1823,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1810,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1772,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('authorization",{"_index":2055,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["get('cookie/custom",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["get('cookie/server",{"_index":344,"title":{},"body":{"controllers/AppController.html":{}}}],["get('facebook",{"_index":1597,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook')@useguards(undefined)@apioperation({summary",{"_index":1579,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect",{"_index":1600,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect')@useguards(undefined)@apioperation({summary",{"_index":1574,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('find/:email",{"_index":2179,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('github/redirect",{"_index":1609,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('github/redirect')@apioperation({summary",{"_index":1584,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google",{"_index":1603,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google')@useguards(undefined)@apioperation({summary",{"_index":1588,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect",{"_index":1606,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect')@useguards(undefined)@apioperation({summary",{"_index":1591,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('profile/:useridorusername",{"_index":2176,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":157,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":2161,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":1258,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1436,"title":{},"body":{"controllers/MathController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":923,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1740,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(postid",{"_index":1764,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":948,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversations",{"_index":899,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@getcurrentuserid",{"_index":956,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(userid",{"_index":922,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversationsdto",{"_index":2861,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallmessages",{"_index":1476,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["getallmessages(conversationid",{"_index":1483,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["getallpostsdto",{"_index":2862,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsofuser",{"_index":1741,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(userid",{"_index":1768,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1742,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(userid",{"_index":1771,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicpostsdto",{"_index":2863,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpublicusersdto",{"_index":2864,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallusers",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getclientname",{"_index":1526,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getclientname(clientid",{"_index":1530,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getconversationbyid",{"_index":900,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":926,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":636,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["geterrorlog",{"_index":236,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["geterrorresponse",{"_index":237,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["gethello",{"_index":326,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethello(@session",{"_index":373,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello(session",{"_index":332,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getoneconversationdto",{"_index":927,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1743,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(postid",{"_index":1774,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":2145,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":2152,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getskip",{"_index":1680,"title":{},"body":{"classes/PaginationDto.html":{}}}],["getting",{"_index":2262,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":694,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":703,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettracker",{"_index":2062,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["gettracker(req",{"_index":2063,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["getuserbyemail",{"_index":2146,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":2156,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofiledto",{"_index":2865,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gi",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["gitbox",{"_index":2730,"title":{},"body":{"index.html":{}}}],["github",{"_index":1585,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{},"index.html":{},"properties.html":{}}}],["github2",{"_index":2407,"title":{},"body":{"dependencies.html":{}}}],["githubauthredirect",{"_index":1570,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(@query",{"_index":1610,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(req",{"_index":1583,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubredirect",{"_index":1622,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubredirect(req",{"_index":1629,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess",{"_index":1623,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess(token",{"_index":1631,"title":{},"body":{"injectables/OauthService.html":{}}}],["gkxj824bp14bwarpwxdxztu59nvfqhe99nz0mygvg39s8m86czarkzwgizumq2",{"_index":2008,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["global",{"_index":1355,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["google",{"_index":1244,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["googleauth",{"_index":1571,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(@req",{"_index":1605,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(req",{"_index":1587,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect",{"_index":1572,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(@req",{"_index":1607,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(req",{"_index":1590,"title":{},"body":{"controllers/OauthController.html":{}}}],["googlebot",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["googlebot/2.1",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["googlebot/gi",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["googlelogin",{"_index":1624,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlelogin(req",{"_index":1633,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlestrategy",{"_index":1239,"title":{"injectables/GoogleStrategy.html":{}},"body":{"injectables/GoogleStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2771,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2584,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":2704,"title":{},"body":{"index.html":{}}}],["grpc",{"_index":2597,"title":{},"body":{"index.html":{}}}],["guard",{"_index":2016,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["hand",{"_index":560,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handle",{"_index":1076,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessagelog",{"_index":240,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessagelog(exception",{"_index":258,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessageresponse",{"_index":241,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessageresponse(request",{"_index":260,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlerequest",{"_index":541,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["handlerequest(context",{"_index":2250,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["handlerequest(err",{"_index":548,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handlers",{"_index":1556,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["handlers.foreach",{"_index":1560,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["hash",{"_index":738,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":742,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":794,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":727,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":798,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":743,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":739,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":2565,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":1217,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":1256,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheck",{"_index":1263,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":1264,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1265,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1254,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":529,"title":{},"body":{"injectables/AppService.html":{},"classes/MessageEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["helmet",{"_index":2402,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["help",{"_index":2542,"title":{},"body":{"index.html":{}}}],["here",{"_index":1329,"title":{},"body":{"interfaces/IApp.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["here).'})@httpcode(httpstatus.created)@apicreatedresponse({description",{"_index":1577,"title":{},"body":{"controllers/OauthController.html":{}}}],["here).'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1581,"title":{},"body":{"controllers/OauthController.html":{}}}],["hereby",{"_index":2770,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2660,"title":{},"body":{"index.html":{}}}],["hmr.config.ts",{"_index":2367,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["hobbies",{"_index":1963,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["holders",{"_index":2814,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":371,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":336,"title":{},"body":{"controllers/AppController.html":{}}}],["hooks",{"_index":3021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":253,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":266,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":274,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":2590,"title":{},"body":{"index.html":{}}}],["html",{"_index":195,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["htmlelement",{"_index":3012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":1501,"title":{},"body":{"controllers/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["http://www.bing.com/bingbot.htm",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["http://www.google.com/bot.html",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["httpadapter",{"_index":1289,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod(request",{"_index":1292,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request",{"_index":1295,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpargumentshost",{"_index":264,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcacheinterceptor",{"_index":1282,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpcode",{"_index":136,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":252,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1296,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpexceptionresponse",{"_index":269,"title":{"interfaces/HttpExceptionResponse.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["httpexceptionresponse).error",{"_index":293,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httponly",{"_index":800,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://api.github.com/user",{"_index":1652,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/access_token?client_id=${process.env.github_client_id}&client_secret=${process.env.github_secret}&code=${requesttoken",{"_index":1647,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email",{"_index":1644,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2849,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["https://github.com/viandwi24",{"_index":1315,"title":{},"body":{"interfaces/IApp.html":{}}}],["https://www.google.com/recaptcha/api/siteverify?secret=${process.env.google_recaptcha_secret}&response=${capcha",{"_index":780,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":952,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":289,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.ok",{"_index":1599,"title":{},"body":{"controllers/OauthController.html":{}}}],["husky",{"_index":2404,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iapp",{"_index":1302,"title":{"interfaces/IApp.html":{}},"body":{"interfaces/IApp.html":{},"coverage.html":{}}}],["iarrayfile",{"_index":1175,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["icreatecomment",{"_index":1801,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["icreatemessage",{"_index":1503,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["icreatepost",{"_index":1795,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["id",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CustomDto.html":{},"classes/DeleteCommentDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiokresponse({description",{"_index":1754,"title":{},"body":{"controllers/PostsController.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id'})@isnotempty()@isstring",{"_index":1465,"title":{},"body":{"classes/MessageEntity.html":{}}}],["id.decorator.ts",{"_index":2353,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["id1",{"_index":1731,"title":{},"body":{"classes/PostEntity.html":{}}}],["id2",{"_index":1732,"title":{},"body":{"classes/PostEntity.html":{}}}],["idea",{"_index":2714,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":2287,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1533,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.authorid",{"_index":1871,"title":{},"body":{"injectables/PostsService.html":{}}}],["identify.length",{"_index":2219,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":2220,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifailrecaptcha",{"_index":722,"title":{},"body":{"injectables/AuthService.html":{}}}],["ifinduserbyemail",{"_index":2172,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetallmessages",{"_index":1504,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["igetcomment",{"_index":1802,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpostofuser",{"_index":1796,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpublicpost",{"_index":1797,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetuserprofile",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":1354,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreexpiration",{"_index":590,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["ignoreglobalprefix",{"_index":1341,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreuseragents",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["ijwtpayload",{"_index":573,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/CommentEntity.html":{},"classes/MessageEntity.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":2477,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":1160,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":2346,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["impact",{"_index":2759,"title":{},"body":{"index.html":{}}}],["implements",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implicit",{"_index":2989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implied",{"_index":2805,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["import.meta.env.vite_base_url",{"_index":2946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import.meta.hot",{"_index":228,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["import.meta.hot.accept(accepthmrupdate(usealertsstore",{"_index":229,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["imported",{"_index":1347,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MathModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":2501,"title":{},"body":{"index.html":{}}}],["in')}\\n",{"_index":315,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["include",{"_index":1342,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":1352,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2781,"title":{},"body":{"license.html":{}}}],["index",{"_index":85,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":2614,"title":{},"body":{"index.html":{}}}],["individualize",{"_index":2068,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["inestapplication",{"_index":1900,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["info(message",{"_index":222,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":929,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":2729,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":361,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{}}}],["infrastructure/auth/guards",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/oauth/oauth.module",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":2096,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["init",{"_index":2668,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":2326,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":443,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MathController.html":{},"injectables/RtStrategy.html":{}}}],["inject(cache_manager",{"_index":515,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["inject(configservice",{"_index":730,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"overview.html":{}}}],["inputs",{"_index":2579,"title":{},"body":{"index.html":{}}}],["insertbefore",{"_index":1324,"title":{},"body":{"interfaces/IApp.html":{}}}],["inserted",{"_index":1327,"title":{},"body":{"interfaces/IApp.html":{}}}],["inspect",{"_index":2582,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":1351,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2715,"title":{},"body":{"index.html":{}}}],["install",{"_index":2666,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2664,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2554,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":281,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["int.pipe.ts",{"_index":1693,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1697,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2681,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2643,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2580,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1064,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1065,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":533,"title":{},"body":{"injectables/AppService.html":{}}}],["interceptormodule",{"_index":392,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1921,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["interface",{"_index":179,"title":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":181,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":279,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["internal_server_error",{"_index":2927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":1976,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["ip",{"_index":2069,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["ipublicuser",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":2131,"title":{},"body":{"classes/UserEntity.html":{}}}],["isarray",{"_index":834,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray({message",{"_index":819,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isboolean",{"_index":1728,"title":{},"body":{"classes/PostEntity.html":{}}}],["isdate",{"_index":1978,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":2132,"title":{},"body":{"classes/UserEntity.html":{}}}],["isenum",{"_index":1683,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isenum(eorder",{"_index":1686,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isgetrequest",{"_index":1291,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["isglobal",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":1176,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isint",{"_index":1684,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isjson",{"_index":835,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isjson({message",{"_index":822,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":2476,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1701,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":836,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["isnumber",{"_index":1729,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isoptional",{"_index":877,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":561,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":837,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":1060,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["istyping",{"_index":1490,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["isuccessrecaptcha",{"_index":723,"title":{},"body":{"injectables/AuthService.html":{}}}],["iswaggeroptions",{"_index":1337,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1558,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["item.id",{"_index":225,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["item1item2",{"_index":2514,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":1192,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":1194,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":1195,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":1196,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":1197,"title":{},"body":{"controllers/FileController.html":{}}}],["items",{"_index":210,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/PaginationDto.html":{},"miscellaneous/variables.html":{}}}],["itheme",{"_index":2866,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ithemesettingoptions",{"_index":2867,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecomment",{"_index":1803,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatecover",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatepost",{"_index":1798,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatereaction",{"_index":1799,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["java",{"_index":2743,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":2546,"title":{},"body":{"index.html":{}}}],["join",{"_index":2513,"title":{},"body":{"index.html":{}}}],["join(__dirname",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["jpeg|jpg|gif|png",{"_index":2474,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":2545,"title":{},"body":{"index.html":{}}}],["json",{"_index":824,"title":{},"body":{"classes/CommentEntity.html":{}}}],["json.parse",{"_index":2044,"title":{},"body":{"guards/RolesGuard.html":{}}}],["json.parse(item",{"_index":1559,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["json.stringify(errorresponse)}\\n",{"_index":312,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["json.stringify(exception.getresponse",{"_index":282,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["json.stringify(request.user",{"_index":313,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":580,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["jwt_refresh",{"_index":2426,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jwtfromrequest",{"_index":585,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":682,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":686,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":698,"title":{},"body":{"injectables/AuthService.html":{}}}],["keep",{"_index":2270,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":1552,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["keywords",{"_index":2845,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2804,"title":{},"body":{"license.html":{}}}],["large",{"_index":2939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":1129,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["latest",{"_index":2719,"title":{},"body":{"index.html":{}}}],["league",{"_index":2748,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2736,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2733,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2750,"title":{},"body":{"index.html":{}}}],["length",{"_index":878,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(0",{"_index":887,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["length(1",{"_index":884,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["length(3",{"_index":1982,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":2137,"title":{},"body":{"classes/UserEntity.html":{}}}],["letter",{"_index":2122,"title":{},"body":{"classes/UserEntity.html":{}}}],["lgdlkq3qzudg1akl95fwu80ywkmgofbjd2aftdlesmh9r2yu3bi05nqj_682aenaiwy5qe0j3cqz234tjqxyhihpfi2txvanbyg_z53xetts9wo95nzq_ntxgoz",{"_index":2006,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["liability",{"_index":2818,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2815,"title":{},"body":{"license.html":{}}}],["library",{"_index":2541,"title":{},"body":{"index.html":{}}}],["license",{"_index":2760,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["licensed",{"_index":2703,"title":{},"body":{"index.html":{}}}],["life",{"_index":2497,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":3020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["light",{"_index":2880,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"classes/PaginationDto.html":{},"injectables/WsThrottlerGuard.html":{}}}],["limitation",{"_index":2782,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2806,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":368,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["link",{"_index":1307,"title":{},"body":{"interfaces/IApp.html":{}}}],["linter",{"_index":2648,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":2646,"title":{},"body":{"index.html":{}}}],["list",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["list.authorid",{"_index":1865,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":1009,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list['creator",{"_index":1007,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter",{"_index":1011,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["literal",{"_index":1304,"title":{},"body":{"interfaces/IApp.html":{},"interfaces/NatsSubscriber.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":1345,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2680,"title":{},"body":{"index.html":{}}}],["log",{"_index":1391,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":1400,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":245,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger('appservice",{"_index":514,"title":{},"body":{"injectables/AppService.html":{}}}],["logger(prefix",{"_index":2463,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":1386,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":1387,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":424,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":2338,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":2462,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":430,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":243,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1368,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logindto",{"_index":611,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RecaptchaDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(userid",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":860,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["looking",{"_index":2755,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2575,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":2495,"title":{},"body":{"index.html":{}}}],["male",{"_index":1959,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["malicious",{"_index":2621,"title":{},"body":{"index.html":{}}}],["manager",{"_index":512,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["many",{"_index":2932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":1091,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marriagestatus",{"_index":1922,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["married",{"_index":1970,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["master",{"_index":2735,"title":{},"body":{"index.html":{}}}],["match",{"_index":2511,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["matched",{"_index":2040,"title":{},"body":{"guards/RolesGuard.html":{}}}],["matchemail",{"_index":2226,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":2228,"title":{},"body":{"injectables/UsersService.html":{}}}],["matchroles",{"_index":2018,"title":{},"body":{"guards/RolesGuard.html":{}}}],["matchroles(roles",{"_index":2022,"title":{},"body":{"guards/RolesGuard.html":{}}}],["math",{"_index":1434,"title":{},"body":{"controllers/MathController.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.controller",{"_index":1460,"title":{},"body":{"modules/MathModule.html":{}}}],["math_service",{"_index":1445,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mathcontroller",{"_index":1432,"title":{"controllers/MathController.html":{}},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{}}}],["mathmodule",{"_index":393,"title":{"modules/MathModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MathModule.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1995,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1998,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(50",{"_index":1688,"title":{},"body":{"classes/PaginationDto.html":{}}}],["maxcount",{"_index":1193,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maximum",{"_index":1677,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["maxlength",{"_index":879,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1990,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(151",{"_index":1996,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":1991,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(256",{"_index":888,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["maxlength(46",{"_index":1984,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(51",{"_index":886,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["media",{"_index":2942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":2071,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["member",{"_index":944,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["member1",{"_index":889,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["member2",{"_index":890,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["members",{"_index":845,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["memory",{"_index":1269,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1266,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":2808,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2785,"title":{},"body":{"license.html":{}}}],["message",{"_index":186,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["message.dto.ts",{"_index":1023,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{},"coverage.html":{}}}],["message.enum.ts",{"_index":2328,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["messagebody",{"_index":1495,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1509,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1515,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1514,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messageentity",{"_index":1025,"title":{"classes/MessageEntity.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{},"classes/MessageEntity.html":{},"coverage.html":{}}}],["messagepattern",{"_index":1443,"title":{},"body":{"controllers/MathController.html":{}}}],["messagepattern({cmd",{"_index":1440,"title":{},"body":{"controllers/MathController.html":{}}}],["messages",{"_index":997,"title":{},"body":{"injectables/ConversationsService.html":{},"interfaces/IApp.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1524,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.includes(ev.message",{"_index":1334,"title":{},"body":{"interfaces/IApp.html":{}}}],["messages.service",{"_index":1500,"title":{},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1473,"title":{"controllers/MessagesGateway.html":{}},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":394,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1499,"title":{"injectables/MessagesService.html":{}},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2728,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":823,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":2238,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":303,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["method_not_allowed",{"_index":2933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodkey",{"_index":1366,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":86,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["microservice",{"_index":2661,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":498,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2673,"title":{},"body":{"index.html":{}}}],["min",{"_index":1685,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["min(0",{"_index":1997,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(1",{"_index":1687,"title":{},"body":{"classes/PaginationDto.html":{}}}],["min(11",{"_index":1994,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minimum",{"_index":1662,"title":{},"body":{"classes/PaginationDto.html":{}}}],["minlength",{"_index":880,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(0",{"_index":885,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["minlength(2",{"_index":1983,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":2139,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":2422,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2702,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2685,"title":{},"body":{"index.html":{}}}],["model/http",{"_index":270,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["models",{"_index":1350,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2784,"title":{},"body":{"license.html":{}}}],["module",{"_index":50,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2711,"title":{},"body":{"index.html":{}}}],["mozilla/5.0",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["ms",{"_index":2470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":2563,"title":{},"body":{"index.html":{}}}],["multi",{"_index":1152,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":1172,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":2464,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multipart/form",{"_index":1218,"title":{},"body":{"classes/FileService.html":{}}}],["multiple",{"_index":2607,"title":{},"body":{"index.html":{}}}],["music",{"_index":1987,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mvc",{"_index":2610,"title":{},"body":{"index.html":{}}}],["name",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":1130,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":1128,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["named",{"_index":3026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natsstrategy",{"_index":1545,"title":{"classes/NatsStrategy.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["natssubscriber",{"_index":1551,"title":{"interfaces/NatsSubscriber.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["needs",{"_index":2072,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["nest",{"_index":2282,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nestinterceptor",{"_index":1070,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":2846,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":265,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":410,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":683,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2378,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":1085,"title":{},"body":{"classes/ExceptionFilter.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":552,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1167,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":355,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/MessagesGateway.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1498,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1101,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":406,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":2487,"title":{},"body":{"index.html":{}}}],["new",{"_index":306,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"classes/UpdatePasswordDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":2224,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":988,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":2225,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":2085,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["newprofile",{"_index":2222,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":752,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":757,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.id",{"_index":756,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.role",{"_index":758,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":1066,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":2077,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":2015,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nextfunction",{"_index":1099,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2766,"title":{},"body":{"license.html":{},"properties.html":{}}}],["node",{"_index":1325,"title":{},"body":{"interfaces/IApp.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":2560,"title":{},"body":{"index.html":{}}}],["nodeexternals",{"_index":2368,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":2519,"title":{},"body":{"index.html":{}}}],["non",{"_index":2550,"title":{},"body":{"index.html":{}}}],["none",{"_index":194,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{}}}],["noninfringement",{"_index":2811,"title":{},"body":{"license.html":{}}}],["not_acceptable",{"_index":2935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_admin",{"_index":2915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_author",{"_index":2921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_creator",{"_index":2917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":2916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_member",{"_index":2918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notable",{"_index":2265,"title":{},"body":{"changelog.html":{}}}],["notacceptableexception",{"_index":2208,"title":{},"body":{"injectables/UsersService.html":{}}}],["notacceptableexception(auth_error.password_not_match",{"_index":2229,"title":{},"body":{"injectables/UsersService.html":{}}}],["note",{"_index":530,"title":{},"body":{"injectables/AppService.html":{}}}],["notedev",{"_index":2732,"title":{},"body":{"index.html":{}}}],["notfounderror",{"_index":1321,"title":{},"body":{"interfaces/IApp.html":{}}}],["notfoundexception",{"_index":1102,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":1105,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["notfoundexception(post_error.empty",{"_index":1861,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(post_error.not_found",{"_index":1864,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(user_error.not_found",{"_index":1860,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2798,"title":{},"body":{"license.html":{}}}],["notify(message",{"_index":212,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["now",{"_index":1423,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1427,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2665,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2669,"title":{},"body":{"index.html":{}}}],["nuk",{"_index":2012,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["nuk'})@isstring({message",{"_index":2009,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["null",{"_index":792,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/imageValidator.html":{}}}],["null.interceptor",{"_index":1373,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["nullable",{"_index":857,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{}}}],["number",{"_index":199,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"controllers/MathController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number'})@isstring({message",{"_index":1663,"title":{},"body":{"classes/PaginationDto.html":{}}}],["number(dto.current",{"_index":2213,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":2212,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(process.env.cache_max",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["number(process.env.cache_ttl",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["number(this.current",{"_index":1689,"title":{},"body":{"classes/PaginationDto.html":{}}}],["nuxt",{"_index":1310,"title":{},"body":{"interfaces/IApp.html":{}}}],["oauth",{"_index":1567,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["oauth.controller",{"_index":1617,"title":{},"body":{"modules/OauthModule.html":{}}}],["oauth.service",{"_index":1594,"title":{},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{}}}],["oauth2",{"_index":2848,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":1245,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["oauthcontroller",{"_index":1565,"title":{"controllers/OauthController.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":395,"title":{"modules/OauthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OauthModule.html":{},"modules.html":{},"overview.html":{}}}],["oauthservice",{"_index":1593,"title":{"injectables/OauthService.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["object",{"_index":523,"title":{},"body":{"injectables/AppService.html":{},"classes/CommentEntity.html":{},"interfaces/IApp.html":{},"injectables/ValidationPipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object'})@isnotempty({message",{"_index":825,"title":{},"body":{"classes/CommentEntity.html":{}}}],["observable",{"_index":1069,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2775,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":287,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["occurs",{"_index":2596,"title":{},"body":{"index.html":{}}}],["official",{"_index":2479,"title":{},"body":{"index.html":{},"properties.html":{}}}],["offset",{"_index":3013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["old",{"_index":1937,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["old!'})@max(101",{"_index":1936,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["oldpassword",{"_index":2086,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["omittype",{"_index":1019,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["omittype(conversationentity",{"_index":1020,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["omittype(messageentity",{"_index":1027,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["one",{"_index":914,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["onmoduledestroy",{"_index":1896,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1897,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onscroll",{"_index":3014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onunmounted",{"_index":3023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onuploadprogress",{"_index":1203,"title":{},"body":{"classes/FileService.html":{}}}],["oop",{"_index":2741,"title":{},"body":{"index.html":{}}}],["open",{"_index":2677,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":1363,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":1343,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":2635,"title":{},"body":{"index.html":{}}}],["option",{"_index":2951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"classes/DefaultDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["optional'})@isenum(eorder",{"_index":1674,"title":{},"body":{"classes/PaginationDto.html":{}}}],["optional'})@isstring({message",{"_index":1928,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["optional'})@maxlength(151",{"_index":1942,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["optional'})@min(11",{"_index":1933,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["options",{"_index":213,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options.timeout",{"_index":215,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1658,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":998,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["oriented",{"_index":2737,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1508,"title":{},"body":{"controllers/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":1231,"title":{},"body":{"classes/FilesService.html":{}}}],["othernames",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":2823,"title":{},"body":{"license.html":{}}}],["out",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2831,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2371,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":527,"title":{},"body":{"injectables/AppService.html":{},"classes/PaginationDto.html":{},"index.html":{}}}],["page'})@isstring({message",{"_index":1667,"title":{},"body":{"classes/PaginationDto.html":{}}}],["pagecurrent",{"_index":2218,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":2215,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":2217,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":107,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["param('conversationid",{"_index":966,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":2180,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":959,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('postid",{"_index":1813,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["param('useridorusername",{"_index":2177,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":2564,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1700,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1691,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parsejwt",{"_index":2019,"title":{},"body":{"guards/RolesGuard.html":{}}}],["parsejwt(token",{"_index":2024,"title":{},"body":{"guards/RolesGuard.html":{}}}],["parser",{"_index":2396,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1790,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":2561,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1055,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(conversationentity",{"_index":1057,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2810,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":2608,"title":{},"body":{"index.html":{}}}],["parttern",{"_index":2347,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":579,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["passportmodule",{"_index":684,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":685,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":576,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":582,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["passreqtocallback",{"_index":591,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["password",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":2150,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":2091,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["password123'})@isnotempty()@isstring",{"_index":2087,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["password123'})@isnotempty({message",{"_index":2114,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_not_match",{"_index":2912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":763,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":2543,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":2133,"title":{"classes/passwordValidator.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":968,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":918,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":965,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":937,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":970,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":941,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":961,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":933,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":2182,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":2168,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1815,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1788,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":301,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":503,"title":{},"body":{"modules/AppModule.html":{},"controllers/MathController.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":2439,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["patterns",{"_index":1554,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["patterns.map((item",{"_index":1557,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["payload",{"_index":575,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["payload_too_large",{"_index":2938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":1666,"title":{},"body":{"classes/PaginationDto.html":{}}}],["perform",{"_index":2551,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2769,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2791,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":3003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2774,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["persons",{"_index":2792,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1923,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1980,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["photos",{"_index":1251,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":1253,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picktype",{"_index":876,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(commententity",{"_index":1016,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(conversationentity",{"_index":1051,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["picktype(customdto",{"_index":883,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PostEntity.html":{}}}],["picktype(postentity",{"_index":1033,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":2095,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(userentity",{"_index":1431,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["picture",{"_index":1252,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pinia",{"_index":189,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["pipe",{"_index":1077,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["pipe(map((value",{"_index":1092,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipe(tap",{"_index":1425,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":2644,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1698,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":2553,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":2240,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":2242,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":2488,"title":{},"body":{"index.html":{}}}],["playground",{"_index":2650,"title":{},"body":{"index.html":{}}}],["please",{"_index":2710,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":3008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugins",{"_index":2518,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2801,"title":{},"body":{"license.html":{}}}],["post",{"_index":632,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/OauthService.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiokresponse({description",{"_index":1759,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('avatar",{"_index":1182,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1140,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1826,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1748,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":1185,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":1146,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":1191,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":1151,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":1188,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":1159,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1808,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1769,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1820,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1779,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin/recaptcha",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin/recaptcha')@apioperation({summary",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":646,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1753,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":906,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":1030,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:6",{"_index":1061,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post_error",{"_index":1851,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postentity",{"_index":1031,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2659,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1907,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":804,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2657,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1735,"title":{},"body":{"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":1837,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1792,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1733,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":396,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1791,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":2498,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2746,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":1388,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":2335,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":2419,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":2481,"title":{},"body":{"index.html":{}}}],["previousnames",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previousnames.value.add(savedname.value",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["print",{"_index":2574,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":2528,"title":{},"body":{"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1892,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1904,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma:generate",{"_index":2672,"title":{},"body":{"index.html":{}}}],["prisma:migrate",{"_index":2674,"title":{},"body":{"index.html":{}}}],["prisma:pull",{"_index":2671,"title":{},"body":{"index.html":{}}}],["prisma:push",{"_index":2676,"title":{},"body":{"index.html":{}}}],["prisma:studiorunning",{"_index":2679,"title":{},"body":{"index.html":{}}}],["prisma@latest",{"_index":2667,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1894,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":397,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":75,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":234,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":2640,"title":{},"body":{"index.html":{}}}],["process.env.admin_key",{"_index":2033,"title":{},"body":{"guards/RolesGuard.html":{}}}],["process.env.admin_sub",{"_index":2035,"title":{},"body":{"guards/RolesGuard.html":{}}}],["process.env.app_secret",{"_index":589,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["process.env.cache_ttl",{"_index":534,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.database_url",{"_index":1908,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.facebook_callback_url",{"_index":1122,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_id",{"_index":1118,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_secret",{"_index":1120,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.google_callback_url",{"_index":1250,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_client_id",{"_index":1248,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":1249,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.public_guard",{"_index":563,"title":{},"body":{"injectables/AtGuard.html":{}}}],["process.env.white_list",{"_index":2954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2687,"title":{},"body":{"index.html":{}}}],["profile",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profileentity",{"_index":1913,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["profileentity:111",{"_index":2097,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:129",{"_index":2107,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:140",{"_index":2101,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:156",{"_index":2098,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:172",{"_index":2100,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:183",{"_index":2104,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:42",{"_index":2103,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:55",{"_index":2099,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:68",{"_index":2102,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:82",{"_index":2106,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:95",{"_index":2105,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profilefields",{"_index":1124,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["programming",{"_index":2502,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2718,"title":{},"body":{"index.html":{}}}],["project",{"_index":2267,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":731,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":185,"title":{"properties.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteOnePost.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"interfaces/NatsSubscriber.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["property",{"_index":2109,"title":{},"body":{"classes/UserEntity.html":{}}}],["protect",{"_index":2629,"title":{},"body":{"index.html":{}}}],["protected",{"_index":2061,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["provide",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":2802,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":2461,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":63,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["proxy.guard",{"_index":360,"title":{},"body":{"controllers/AppController.html":{}}}],["proxy.guard.ts",{"_index":2060,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["proxy.guard.ts:6",{"_index":2064,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["public",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1765,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":2157,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":2153,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@post('signin')@useinterceptors(cacheinterceptor)@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":1156,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":1163,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":1721,"title":{},"body":{"classes/PostEntity.html":{},"license.html":{}}}],["published",{"_index":1706,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["pull",{"_index":2690,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":2485,"title":{},"body":{"index.html":{},"license.html":{}}}],["put",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1828,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1784,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":2183,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":2163,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":2184,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":2165,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["query",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["queue",{"_index":1553,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["quickly",{"_index":2639,"title":{},"body":{"index.html":{}}}],["randomint",{"_index":2343,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomint(min",{"_index":2466,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rapidy",{"_index":2655,"title":{},"body":{"index.html":{}}}],["rate",{"_index":367,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["reach",{"_index":2758,"title":{},"body":{"index.html":{}}}],["react",{"_index":1780,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1880,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":1724,"title":{},"body":{"classes/PostEntity.html":{},"index.html":{}}}],["reactionpost",{"_index":1744,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1821,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1777,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":805,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1778,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1707,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":2572,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["readiness",{"_index":1257,"title":{},"body":{"controllers/HealthController.html":{}}}],["readme",{"_index":2280,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{}}}],["realtime",{"_index":2881,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["recapcha",{"_index":2001,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["recaptcha",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RecaptchaDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["recaptcha'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{}}}],["recaptcha_failed",{"_index":2913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recaptcha_not_person",{"_index":2914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recaptchadto",{"_index":616,"title":{"classes/RecaptchaDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RecaptchaDto.html":{},"coverage.html":{}}}],["recompile",{"_index":2592,"title":{},"body":{"index.html":{}}}],["record",{"_index":333,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["reduce((a",{"_index":1455,"title":{},"body":{"controllers/MathController.html":{}}}],["ref",{"_index":3028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref(new",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":2651,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":2411,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":489,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":2427,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["refreshtoken",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["regexp('bingbot",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["relational",{"_index":2517,"title":{},"body":{"index.html":{}}}],["relationship",{"_index":1969,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["reload",{"_index":2591,"title":{},"body":{"index.html":{}}}],["remotely",{"_index":2605,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1518,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["remove(id",{"_index":223,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["removemessage",{"_index":1477,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["removemessage(dto",{"_index":1486,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":481,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":2576,"title":{},"body":{"index.html":{}}}],["replace('bearer",{"_index":2056,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["replies",{"_index":806,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":2527,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":349,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"miscellaneous/variables.html":{}}}],["req.ip",{"_index":2067,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ips.length",{"_index":2065,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ips[0",{"_index":2066,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.params.userid",{"_index":1103,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["req.user",{"_index":1638,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.email",{"_index":1643,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.user.email",{"_index":1639,"title":{},"body":{"injectables/OauthService.html":{}}}],["req['code",{"_index":1646,"title":{},"body":{"injectables/OauthService.html":{}}}],["request",{"_index":261,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.method",{"_index":304,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.session.cookie",{"_index":377,"title":{},"body":{"controllers/AppController.html":{}}}],["request.signedcookies",{"_index":380,"title":{},"body":{"controllers/AppController.html":{}}}],["request.url",{"_index":302,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":2962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_timeout",{"_index":2937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["requestcookie",{"_index":327,"title":{},"body":{"controllers/AppController.html":{}}}],["requestcookie(@req",{"_index":375,"title":{},"body":{"controllers/AppController.html":{}}}],["requestcookie(request",{"_index":343,"title":{},"body":{"controllers/AppController.html":{}}}],["requestmethod",{"_index":2193,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":501,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":492,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":2260,"title":{},"body":{"injectables/WsThrottlerGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":2075,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["requesttoken",{"_index":1645,"title":{},"body":{"injectables/OauthService.html":{}}}],["require('run",{"_index":3006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('webpack",{"_index":3004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":204,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"controllers/FileController.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["required'})@isalphanumeric()@length(3",{"_index":2127,"title":{},"body":{"classes/UserEntity.html":{}}}],["required'})@isemail({discription",{"_index":2111,"title":{},"body":{"classes/UserEntity.html":{}}}],["required'})@isstring({message",{"_index":814,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CustomDto.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["required'})@length(3",{"_index":1951,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["requiredroles",{"_index":2029,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["res.setheader('set",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":262,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["response'})@apiresponse({status",{"_index":338,"title":{},"body":{"controllers/AppController.html":{}}}],["response.data",{"_index":2948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.interface",{"_index":271,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response.interface.ts",{"_index":1043,"title":{},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["response.status(status).json",{"_index":1300,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":299,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":285,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsecookie",{"_index":328,"title":{},"body":{"controllers/AppController.html":{}}}],["responsecookie(@res",{"_index":381,"title":{},"body":{"controllers/AppController.html":{}}}],["responsecookie(response",{"_index":346,"title":{},"body":{"controllers/AppController.html":{}}}],["responses_message",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responses_message.create_user",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["responses_message.delete_comment",{"_index":1887,"title":{},"body":{"injectables/PostsService.html":{}}}],["responses_message.delete_user",{"_index":2231,"title":{},"body":{"injectables/UsersService.html":{}}}],["rest",{"_index":2970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2780,"title":{},"body":{"license.html":{}}}],["result",{"_index":776,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["result?.data.score",{"_index":788,"title":{},"body":{"injectables/AuthService.html":{}}}],["result?.data.success",{"_index":786,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2783,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":2413,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":943,"title":{},"body":{"controllers/ConversationsController.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["roledecorator",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(erole.admin",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roledecorator(erole.admin)@get('users/all')@apioperation({summary",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["roles",{"_index":705,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles.decorator",{"_index":2028,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.find((el",{"_index":2042,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.includes(role",{"_index":2041,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles_key",{"_index":2027,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":435,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":1346,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["rpcexception",{"_index":1083,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rpcexceptionfilter",{"_index":1082,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rt",{"_index":714,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":638,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":676,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2598,"title":{},"body":{"index.html":{}}}],["running",{"_index":2615,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1073,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1075,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":2333,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["same_password",{"_index":2911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sample_image",{"_index":2510,"title":{},"body":{"index.html":{}}}],["savedname",{"_index":3027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["savedname.value",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saves",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":2523,"title":{},"body":{"index.html":{}}}],["scale",{"_index":2540,"title":{},"body":{"index.html":{}}}],["schema",{"_index":2532,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":1123,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1409,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scopes",{"_index":2992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":3007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrolltop",{"_index":3015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seconds",{"_index":535,"title":{},"body":{"injectables/AppService.html":{}}}],["secret",{"_index":687,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":587,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":2567,"title":{},"body":{"index.html":{}}}],["see",{"_index":2515,"title":{},"body":{"index.html":{}}}],["select",{"_index":996,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2789,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":2272,"title":{},"body":{"changelog.html":{}}}],["sender",{"_index":1038,"title":{},"body":{"classes/CustomDto.html":{}}}],["senderid",{"_index":1001,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["sendername",{"_index":1535,"title":{},"body":{"injectables/MessagesService.html":{}}}],["serialize",{"_index":2556,"title":{},"body":{"index.html":{}}}],["serve",{"_index":2587,"title":{},"body":{"index.html":{}}}],["server",{"_index":280,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servernats",{"_index":1547,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["servestaticmodule",{"_index":432,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":2602,"title":{},"body":{"index.html":{}}}],["session",{"_index":342,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["session.visits",{"_index":518,"title":{},"body":{"injectables/AppService.html":{}}}],["set",{"_index":1356,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["setcontact",{"_index":2972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":1358,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setlicense",{"_index":2975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('ispublic",{"_index":3010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":3011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname(name",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":1392,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1402,"title":{},"body":{"injectables/LoggerService.html":{}}}],["settimeout",{"_index":216,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":2569,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2324,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["setup(app",{"_index":2467,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.6.0",{"_index":2979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2799,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":2490,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":2723,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2721,"title":{},"body":{"index.html":{}}}],["short",{"_index":1953,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["side",{"_index":2524,"title":{},"body":{"index.html":{}}}],["sigin.dto",{"_index":2011,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["signed",{"_index":314,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"index.html":{}}}],["signin",{"_index":2506,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinrecaptcha",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinrecaptcha(@body",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinrecaptcha(dto",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":689,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":2508,"title":{},"body":{"index.html":{}}}],["signup",{"_index":2505,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":621,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocaldto",{"_index":2868,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["single",{"_index":1968,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["singlefielddecorator",{"_index":1171,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":1183,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":1186,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":2468,"title":{},"body":{"miscellaneous/functions.html":{}}}],["site",{"_index":2619,"title":{},"body":{"index.html":{}}}],["size",{"_index":1235,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":2500,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1660,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{}}}],["skipthrottle",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"controllers/MessagesGateway.html":{}}}],["skipthrottle(false",{"_index":365,"title":{},"body":{"controllers/AppController.html":{}}}],["skipthrottle(undefined",{"_index":329,"title":{},"body":{"controllers/AppController.html":{}}}],["snake",{"_index":2739,"title":{},"body":{"index.html":{}}}],["social",{"_index":2663,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1480,"title":{},"body":{"controllers/MessagesGateway.html":{},"properties.html":{}}}],["socket.io",{"_index":1502,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2777,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":2588,"title":{},"body":{"index.html":{}}}],["special",{"_index":2123,"title":{},"body":{"classes/UserEntity.html":{}}}],["specification",{"_index":1353,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2706,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1988,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":2893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":2443,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../axios.ts",{"_index":2889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":2455,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../fullname.validator.ts",{"_index":2903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.validator.ts",{"_index":2902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":2448,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":2447,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2444,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../math.constant.ts",{"_index":2901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../multi",{"_index":2449,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../options.enum.ts",{"_index":2424,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../password.validator.ts",{"_index":2904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":2450,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../repl.ts",{"_index":2445,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":2908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../setup.config.ts",{"_index":2451,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../single",{"_index":2452,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":2887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/constants/math.constant.ts",{"_index":2316,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/filters/rpc",{"_index":1080,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts",{"_index":1433,"title":{},"body":{"controllers/MathController.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:35",{"_index":1438,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:42",{"_index":1441,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.module.ts",{"_index":1457,"title":{},"body":{"modules/MathModule.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts",{"_index":1546,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts:12",{"_index":1550,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["src/abstraction/prisma/prisma.module",{"_index":679,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/abstraction/prisma/prisma.module.ts",{"_index":1891,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/abstraction/prisma/prisma.service",{"_index":721,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["src/abstraction/prisma/prisma.service.ts",{"_index":1893,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/abstraction/prisma/prisma.service.ts:13",{"_index":1898,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:25",{"_index":1903,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:29",{"_index":1902,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:33",{"_index":1901,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/app.controller.ts",{"_index":323,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:28",{"_index":330,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:32",{"_index":331,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:45",{"_index":341,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:50",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:57",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:107",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":504,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:14",{"_index":506,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:20",{"_index":507,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/common/dto",{"_index":882,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PostEntity.html":{}}}],["src/core/common/dto/custom.dto.ts",{"_index":1036,"title":{},"body":{"classes/CustomDto.html":{},"coverage.html":{}}}],["src/core/common/dto/custom.dto.ts:16",{"_index":1041,"title":{},"body":{"classes/CustomDto.html":{}}}],["src/core/common/dto/custom.dto.ts:29",{"_index":1040,"title":{},"body":{"classes/CustomDto.html":{}}}],["src/core/common/dto/default.dto.ts",{"_index":1045,"title":{},"body":{"classes/DefaultDto.html":{},"coverage.html":{}}}],["src/core/common/dto/default.dto.ts:2",{"_index":1046,"title":{},"body":{"classes/DefaultDto.html":{}}}],["src/core/common/dto/default.dto.ts:3",{"_index":1047,"title":{},"body":{"classes/DefaultDto.html":{}}}],["src/core/common/dto/pagination.dto",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/common/dto/pagination.dto.ts",{"_index":1657,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/core/common/dto/pagination.dto.ts:21",{"_index":1665,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:35",{"_index":1668,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:52",{"_index":1675,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:66",{"_index":1679,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:68",{"_index":1681,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/configs/cors.config.ts",{"_index":2318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":1338,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/setup.config.ts",{"_index":2323,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/configs/swagger.config.ts",{"_index":2325,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"injectables/GoogleStrategy.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/constants/options.enum.ts",{"_index":2425,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":2327,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:18",{"_index":244,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:21",{"_index":255,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:31",{"_index":259,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:43",{"_index":263,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:73",{"_index":249,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:85",{"_index":248,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:99",{"_index":250,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":1297,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":1298,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/filters/model/http",{"_index":1042,"title":{},"body":{"interfaces/CustomHttpExceptionResponse.html":{},"interfaces/HttpExceptionResponse.html":{},"coverage.html":{}}}],["src/core/helpers",{"_index":728,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{}}}],["src/core/helpers/age.ts",{"_index":2329,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/axios.ts",{"_index":2331,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":2209,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":2332,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/errors.interceptor.ts",{"_index":1063,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/errors.interceptor.ts:13",{"_index":1068,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["src/core/interceptors/http",{"_index":1283,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":1367,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":1369,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1417,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1418,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/null.interceptor.ts",{"_index":1089,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/null.interceptor.ts:12",{"_index":1090,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":2073,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":2074,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":1371,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":2013,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":2079,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":2334,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":1381,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":1383,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":2336,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":1389,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1401,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1399,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1407,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1396,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1405,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1408,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1403,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":1094,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/logger",{"_index":1376,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1692,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":2234,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":2239,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":2237,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"modules/AuthModule.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":2339,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":2017,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:13",{"_index":2020,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:16",{"_index":2021,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:41",{"_index":2023,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:46",{"_index":2025,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/security/throttle",{"_index":2059,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["src/core/utils/delay.ts",{"_index":2340,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random.ts",{"_index":2342,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":1981,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":2344,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":2435,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":2432,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":2345,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":2473,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":2471,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":2348,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2835,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2834,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":2349,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2841,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2840,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":2350,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2885,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2884,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/health.controller.ts",{"_index":1255,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:25",{"_index":1261,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infrastructure/admin/admin",{"_index":83,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":72,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:101",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:110",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:124",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:136",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:80",{"_index":626,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:90",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":2195,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":677,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":692,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:107",{"_index":709,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:128",{"_index":717,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:154",{"_index":710,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:160",{"_index":707,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:172",{"_index":708,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:192",{"_index":712,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:224",{"_index":701,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:25",{"_index":699,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:34",{"_index":706,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:66",{"_index":715,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:78",{"_index":711,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1444,"title":{},"body":{"controllers/MathController.html":{},"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":2352,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":2355,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto/request",{"_index":2170,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":2084,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts:13",{"_index":2089,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts:22",{"_index":2088,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/request/recaptcha.dto.ts",{"_index":2000,"title":{},"body":{"classes/RecaptchaDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/recaptcha.dto.ts:18",{"_index":2010,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1428,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":2058,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":539,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:11",{"_index":543,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:17",{"_index":546,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:27",{"_index":549,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":2047,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:4",{"_index":2048,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":568,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:20",{"_index":574,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:9",{"_index":571,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":2050,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:12",{"_index":2051,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:25",{"_index":2053,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":894,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:105",{"_index":930,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:120",{"_index":934,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:135",{"_index":915,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:150",{"_index":938,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:169",{"_index":920,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:188",{"_index":945,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:80",{"_index":910,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:92",{"_index":925,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":975,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":977,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:100",{"_index":984,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:115",{"_index":980,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:132",{"_index":985,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:147",{"_index":981,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:16",{"_index":978,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:182",{"_index":986,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:19",{"_index":979,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:34",{"_index":982,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:74",{"_index":983,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":1017,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":1050,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":1238,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":1054,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":841,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:21",{"_index":865,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:37",{"_index":873,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:52",{"_index":863,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:58",{"_index":849,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:64",{"_index":853,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:71",{"_index":874,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:79",{"_index":867,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:86",{"_index":848,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:95",{"_index":855,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":2357,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":2359,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":2360,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":1133,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:112",{"_index":1157,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:70",{"_index":1144,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:81",{"_index":1149,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:92",{"_index":1164,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":1224,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":1226,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":1228,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":1230,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":1229,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":1227,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/request/create",{"_index":1022,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/request/delete",{"_index":1053,"title":{},"body":{"classes/DeleteMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts",{"_index":1463,"title":{},"body":{"classes/MessageEntity.html":{},"coverage.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:11",{"_index":1467,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:19",{"_index":1472,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:27",{"_index":1470,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:35",{"_index":1466,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:43",{"_index":1468,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1474,"title":{},"body":{"controllers/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:25",{"_index":1485,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1482,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:45",{"_index":1492,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:56",{"_index":1488,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1523,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1525,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:10",{"_index":1529,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:30",{"_index":1531,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:38",{"_index":1528,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:54",{"_index":1532,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1527,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts",{"_index":1566,"title":{},"body":{"controllers/OauthController.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:102",{"_index":1592,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:115",{"_index":1586,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:63",{"_index":1582,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:77",{"_index":1578,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:88",{"_index":1589,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.module.ts",{"_index":1616,"title":{},"body":{"modules/OauthModule.html":{}}}],["src/infrastructure/oauth/oauth.service.ts",{"_index":1621,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:14",{"_index":1628,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:32",{"_index":1634,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:50",{"_index":1630,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:66",{"_index":1632,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:8",{"_index":1626,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts",{"_index":1107,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:10",{"_index":1108,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:21",{"_index":1113,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts",{"_index":1240,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:13",{"_index":1241,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:23",{"_index":1243,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/posts/dto/comment/request/create",{"_index":1013,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/delete",{"_index":1049,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/update",{"_index":2080,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":1029,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":1059,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1999,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":803,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":815,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:29",{"_index":830,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:42",{"_index":827,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:55",{"_index":832,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:68",{"_index":818,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:76",{"_index":821,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:84",{"_index":826,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":1032,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1703,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:101",{"_index":1719,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:114",{"_index":1714,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:125",{"_index":1726,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:23",{"_index":1718,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:36",{"_index":1727,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:49",{"_index":1712,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:62",{"_index":1717,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:75",{"_index":1723,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:88",{"_index":1709,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1734,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:110",{"_index":1770,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:123",{"_index":1773,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:135",{"_index":1776,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:147",{"_index":1789,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:157",{"_index":1763,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:170",{"_index":1781,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:180",{"_index":1767,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:193",{"_index":1751,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:206",{"_index":1785,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:218",{"_index":1760,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:94",{"_index":1756,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1836,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1838,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:125",{"_index":1847,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:143",{"_index":1850,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:174",{"_index":1843,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:200",{"_index":1848,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:228",{"_index":1844,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:239",{"_index":1840,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:261",{"_index":1849,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:276",{"_index":1842,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:34",{"_index":1839,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:37",{"_index":1841,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:71",{"_index":1845,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:89",{"_index":1846,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/users/dto/request/update",{"_index":2092,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1914,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:111",{"_index":1931,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:129",{"_index":1977,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:140",{"_index":1948,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:156",{"_index":1938,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:172",{"_index":1943,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:183",{"_index":1962,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:42",{"_index":1958,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:55",{"_index":1939,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:68",{"_index":1949,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:82",{"_index":1972,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:95",{"_index":1966,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/user.entity",{"_index":2090,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/users/entities/user.entity.ts",{"_index":2108,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:26",{"_index":2113,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:39",{"_index":2112,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:63",{"_index":2125,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:87",{"_index":2130,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":2143,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:103",{"_index":2162,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:114",{"_index":2169,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:128",{"_index":2164,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:142",{"_index":2166,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:154",{"_index":2151,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:77",{"_index":2154,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:90",{"_index":2160,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":2191,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":2192,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":2197,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:115",{"_index":2207,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:135",{"_index":2205,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:164",{"_index":2206,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:193",{"_index":2199,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:226",{"_index":2200,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:33",{"_index":2198,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:36",{"_index":2201,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:61",{"_index":2202,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:81",{"_index":2203,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:96",{"_index":2204,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":2363,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/repl.ts",{"_index":2365,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standards",{"_index":2547,"title":{},"body":{"index.html":{}}}],["start",{"_index":2683,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2686,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":2688,"title":{},"body":{"index.html":{}}}],["startat",{"_index":2304,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":2263,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1313,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["state",{"_index":209,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":2288,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":235,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":372,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["status_message",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["status_message.success",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":288,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{}}}],["stay",{"_index":2712,"title":{},"body":{"index.html":{}}}],["store",{"_index":2606,"title":{},"body":{"index.html":{}}}],["str",{"_index":2459,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strategies",{"_index":681,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/facebook.strategy",{"_index":1620,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategies/google.strategy",{"_index":1618,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategy",{"_index":578,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"guards/RolesGuard.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["string'})@isnotempty({message",{"_index":817,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["string'})@isoptional({message",{"_index":1664,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["string'})@length(8",{"_index":2115,"title":{},"body":{"classes/UserEntity.html":{}}}],["string'})@maxlength(101",{"_index":1929,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["string'})@maxlength(21",{"_index":1974,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["string})@isarray()@isnotempty",{"_index":854,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["string})@isnotempty({message",{"_index":813,"title":{},"body":{"classes/CommentEntity.html":{},"classes/UserEntity.html":{}}}],["string})@isstring()@isnotempty",{"_index":864,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["string})@isstring()@isnotempty()@length(1",{"_index":868,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["string})@isstring({message",{"_index":816,"title":{},"body":{"classes/CommentEntity.html":{}}}],["structure",{"_index":2516,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2678,"title":{},"body":{"index.html":{}}}],["style",{"_index":201,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":733,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2794,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2787,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1494,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1481,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1484,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1487,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1491,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["substantial",{"_index":2800,"title":{},"body":{"license.html":{}}}],["success",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["success(message",{"_index":218,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["successfuly",{"_index":1755,"title":{},"body":{"controllers/PostsController.html":{}}}],["sum",{"_index":1435,"title":{},"body":{"controllers/MathController.html":{}}}],["sum(data",{"_index":1439,"title":{},"body":{"controllers/MathController.html":{}}}],["summary",{"_index":158,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":555,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":566,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1415,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1413,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1412,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1416,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1414,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":2566,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2828,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1344,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":3000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":3001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":3002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2675,"title":{},"body":{"index.html":{}}}],["system",{"_index":1271,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["system'})@healthcheck",{"_index":1260,"title":{},"body":{"controllers/HealthController.html":{}}}],["system_error",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["system_error.conflict",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.forbidden",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.internal_server_error",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.method_not_allowed",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_acceptable",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_found",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.payload_too_large",{"_index":1178,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["system_error.request_timeout",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.too_many_requests",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unauthorized",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unsupported_media_type",{"_index":1179,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["t",{"_index":2014,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":2370,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2369,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":2533,"title":{},"body":{"index.html":{}}}],["take",{"_index":1000,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{}}}],["takes",{"_index":2577,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1419,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tar.gz",{"_index":2285,"title":{},"body":{"changelog.html":{}}}],["templates",{"_index":2662,"title":{},"body":{"index.html":{}}}],["teneno",{"_index":335,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":2586,"title":{},"body":{"index.html":{}}}],["terminusmodule",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["terms",{"_index":2603,"title":{},"body":{"index.html":{}}}],["test",{"_index":2698,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2701,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2700,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2697,"title":{},"body":{"index.html":{}}}],["text",{"_index":807,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteMessageDto.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["text'})@isnotempty()@isstring",{"_index":1469,"title":{},"body":{"classes/MessageEntity.html":{}}}],["thanks",{"_index":2705,"title":{},"body":{"index.html":{}}}],["theme",{"_index":1306,"title":{},"body":{"interfaces/IApp.html":{}}}],["thememanager",{"_index":1305,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["then(async",{"_index":2947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thinking",{"_index":2503,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":2492,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1909,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1910,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1911,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello(session",{"_index":374,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createcookie(a.accesstoken",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(payload",{"_index":1642,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.signinrecaptcha(dto",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(dto",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(payload",{"_index":1641,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.updatepassword(dto",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cachemanager.get",{"_index":521,"title":{},"body":{"injectables/AppService.html":{}}}],["this.cachemanager.set('cachetoken",{"_index":770,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.client.send(pattern",{"_index":1454,"title":{},"body":{"controllers/MathController.html":{}}}],["this.configservice.get('app_secret",{"_index":734,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":735,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":736,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('google_recaptcha_secret",{"_index":774,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('recaptcha_verify_url",{"_index":778,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversationsservice",{"_index":953,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":955,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":964,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":969,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(userid",{"_index":957,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":960,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":962,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":967,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":971,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.disk.checkstorage('storage",{"_index":1279,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":1184,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":1187,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":1198,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":1190,"title":{},"body":{"controllers/FileController.html":{}}}],["this.generatekey(context",{"_index":2255,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.getallmessages(dto.conversationid",{"_index":1542,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getclientname(dto.senderid",{"_index":1536,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.geterrorlog(errorresponse",{"_index":297,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.geterrorresponse",{"_index":295,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.getmessagehandler(key).bind(this",{"_index":1564,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1863,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":2223,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens",{"_index":755,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":766,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.githubsuccess(data.access_token",{"_index":1650,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.handlemessagelog(exception",{"_index":277,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.health.check",{"_index":1272,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpadapterhost",{"_index":1290,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.items.findindex((item",{"_index":224,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.push",{"_index":214,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.splice(index",{"_index":227,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.jwtservice.signasync",{"_index":732,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":284,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":516,"title":{},"body":{"injectables/AppService.html":{}}}],["this.matchroles(requiredroles",{"_index":2037,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":1276,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('mem_rss",{"_index":1273,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagehandlers.keys",{"_index":1555,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.messagesservice.createmessage",{"_index":1511,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.getallmessages(conversationid",{"_index":1510,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.getclientname(senderid",{"_index":1516,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.removemessage(dto",{"_index":1519,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.notify(message",{"_index":219,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.oauthservice.facebooklogin(req",{"_index":1602,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.githubredirect(req",{"_index":1611,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.googlelogin(req",{"_index":1608,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.parsejwt(request",{"_index":2031,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.postsservice.addcomment(userid",{"_index":1827,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(userid",{"_index":1807,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1832,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":1819,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1825,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(userid",{"_index":1809,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1811,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1814,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1822,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1829,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1817,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1410,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1884,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1886,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1885,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":989,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":1008,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":995,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":1006,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["this.prismaservice.conversation.update",{"_index":1004,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.message.create",{"_index":1537,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.prismaservice.message.delete",{"_index":1543,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.prismaservice.post.create",{"_index":1852,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1872,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1858,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1862,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1868,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1881,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1875,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":2211,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":753,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":2232,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":745,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":761,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":740,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":791,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":2230,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":2221,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride",{"_index":562,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["this.remove(id",{"_index":217,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.server.emit('message",{"_index":1513,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.server.emit('remove",{"_index":1520,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.signinlocal",{"_index":790,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.storageservice.addrecord(key",{"_index":2261,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.storageservice.getrecord(key",{"_index":2257,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.take",{"_index":1690,"title":{},"body":{"classes/PaginationDto.html":{}}}],["this.tovalidate(metatype",{"_index":2241,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":759,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":769,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":2175,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":2186,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":2178,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":2181,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(payload.email",{"_index":1640,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.verifyrecaptcha(dto.recaptcha",{"_index":789,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.writeerrorlogtofile(errorlog",{"_index":298,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["thresholdpercent",{"_index":1280,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttle",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlerbehindproxyguard",{"_index":358,"title":{"injectables/ThrottlerBehindProxyGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["throttlerexception",{"_index":2252,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["throttlerexception('many",{"_index":2259,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["throttlerguard",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["throttlermodule",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":1357,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":321,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{}}}],["throwerror",{"_index":1072,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["thuong",{"_index":2767,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2764,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2691,"title":{},"body":{"index.html":{}}}],["time",{"_index":2595,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":198,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["timeout(5000",{"_index":2078,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout.interceptor",{"_index":1375,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["timeouterror",{"_index":2076,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1374,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["times",{"_index":528,"title":{},"body":{"injectables/AppService.html":{}}}],["timestamp",{"_index":305,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{}}}],["tip",{"_index":536,"title":{},"body":{"injectables/AppService.html":{}}}],["tips",{"_index":2652,"title":{},"body":{"index.html":{}}}],["title",{"_index":1034,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":2494,"title":{},"body":{"index.html":{}}}],["token",{"_index":558,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/OauthService.html":{},"classes/RecaptchaDto.html":{},"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokendata",{"_index":702,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":754,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":760,"title":{},"body":{"injectables/AuthService.html":{}}}],["too_many_requests",{"_index":2931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":2634,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2822,"title":{},"body":{"license.html":{}}}],["total",{"_index":2210,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2713,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":2235,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":2236,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1398,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trackby",{"_index":1285,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1286,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trading",{"_index":2720,"title":{},"body":{"index.html":{}}}],["training",{"_index":2745,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2765,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1694,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1695,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1682,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":1370,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transition",{"_index":1318,"title":{},"body":{"interfaces/IApp.html":{}}}],["transmitted",{"_index":2626,"title":{},"body":{"index.html":{}}}],["transport",{"_index":1459,"title":{},"body":{"modules/MathModule.html":{}}}],["transport.tcp",{"_index":1462,"title":{},"body":{"modules/MathModule.html":{}}}],["travel",{"_index":1989,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":2057,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":205,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/AuthModule.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WsThrottlerGuard.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isboolean({message",{"_index":1720,"title":{},"body":{"classes/PostEntity.html":{}}}],["true})@isoptional()@isstring()@length(0",{"_index":858,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["truong",{"_index":2768,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["trusts",{"_index":2628,"title":{},"body":{"index.html":{}}}],["tslint",{"_index":2417,"title":{},"body":{"dependencies.html":{}}}],["ttl",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"injectables/WsThrottlerGuard.html":{}}}],["ttls",{"_index":2256,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["ttls.length",{"_index":2258,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["turn",{"_index":2670,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2738,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2727,"title":{},"body":{"index.html":{}}}],["type",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"interfaces/CustomHttpExceptionResponse.html":{},"classes/DefaultDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/HttpExceptionResponse.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2851,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1330,"title":{},"body":{"interfaces/IApp.html":{}}}],["types",{"_index":2246,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":2247,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":2385,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2526,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1478,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["typing(senderid",{"_index":1489,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["ui/ux",{"_index":2747,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":2624,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":550,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["unauthorizedexception(auth_error.not_admin",{"_index":2036,"title":{},"body":{"guards/RolesGuard.html":{}}}],["uncaught",{"_index":1320,"title":{},"body":{"interfaces/IApp.html":{}}}],["undefined",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"controllers/OauthController.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apicreatedresponse({description",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["undefined})@apicreatedresponse({type",{"_index":908,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["undefined})@apioperation({summary",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MathController.html":{}}}],["undefined})@arrayfielddecorator('files",{"_index":1161,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":866,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["undefined})@isarray({message",{"_index":1716,"title":{},"body":{"classes/PostEntity.html":{}}}],["undefined})@isstring({message",{"_index":1673,"title":{},"body":{"classes/PaginationDto.html":{}}}],["undefined})@multifielddecorator(['undefined",{"_index":1155,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/avatars",{"_index":1143,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/covers",{"_index":1148,"title":{},"body":{"controllers/FileController.html":{}}}],["under",{"_index":2762,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2696,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":308,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":2941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported_media_type",{"_index":2940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uoewsdcm7t6cs84zfpwaw7q3eh4hyo7tmhrhoiqtmh9cmfggyfn4mqohcsx0bhj",{"_index":2005,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["update",{"_index":91,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{}}}],["update(userid",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1745,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(dto",{"_index":1782,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1783,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":901,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":931,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":932,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateconversationmembersdto",{"_index":2870,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updateconversationroles",{"_index":2871,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updated",{"_index":1003,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":846,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DefaultDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":902,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":935,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":936,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateoneconversationbyiddto",{"_index":2872,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updatepassword",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":628,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1746,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1816,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1786,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1787,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostsdto",{"_index":2873,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updaterolesconversation",{"_index":903,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":939,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":940,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":695,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":713,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuseravatardto",{"_index":125,"title":{"classes/UpdateUserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusercoverdto",{"_index":131,"title":{"classes/UpdateUserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":119,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusersavatar",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":130,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":2147,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":2167,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":1141,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":1134,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadavatar(data",{"_index":1201,"title":{},"body":{"classes/FileService.html":{}}}],["uploadavatar(file",{"_index":1138,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatardto",{"_index":1202,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadcover",{"_index":1135,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadcover(data",{"_index":1205,"title":{},"body":{"classes/FileService.html":{}}}],["uploadcover(file",{"_index":1145,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcoverdto",{"_index":1206,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadedfile",{"_index":1165,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":1166,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":2465,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":1136,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":1150,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpost",{"_index":1200,"title":{},"body":{"classes/FileService.html":{}}}],["uploadpost(data",{"_index":1208,"title":{},"body":{"classes/FileService.html":{}}}],["uploadposts",{"_index":1137,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":1158,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpostsdto",{"_index":1209,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":2121,"title":{},"body":{"classes/UserEntity.html":{}}}],["upsertreactpostdto",{"_index":2875,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uptest",{"_index":2695,"title":{},"body":{"index.html":{}}}],["url",{"_index":309,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FileService.html":{},"injectables/OauthService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["urlencoded",{"_index":785,"title":{},"body":{"injectables/AuthService.html":{}}}],["url}\\n",{"_index":311,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["use",{"_index":1096,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":1098,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["usealertsstore",{"_index":207,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":485,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["usecount",{"_index":2290,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["used",{"_index":1361,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usednames",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usednames.value.filter((name",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useful",{"_index":2609,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["useguards(authguard('facebook",{"_index":1598,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(authguard('google",{"_index":1604,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(rtguard",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(throttlerbehindproxyguard",{"_index":363,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(wsthrottlerguard",{"_index":1505,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["useinterceptors",{"_index":509,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":513,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{}}}],["usenamevalidator",{"_index":2134,"title":{"classes/usenameValidator.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CustomDto.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"injectables/GoogleStrategy.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiokresponse({description",{"_index":1750,"title":{},"body":{"controllers/PostsController.html":{}}}],["user'})@isarray({message",{"_index":1964,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["user'})@isoptional({message",{"_index":1927,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["user'})@isstring({message",{"_index":1941,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["user'})@type(undefined)@isdate({message",{"_index":1947,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["user)'})@apiokresponse({description",{"_index":907,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":924,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1154,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":2354,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":767,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":793,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":2194,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":1095,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":1097,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":1100,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":765,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.role",{"_index":768,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":1534,"title":{},"body":{"injectables/MessagesService.html":{}}}],["user:read",{"_index":2994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user:write",{"_index":2993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_error",{"_index":725,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":1429,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":744,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":1104,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":749,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CustomDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":2155,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":747,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":2126,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":84,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:108",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:120",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:132",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:74",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:85",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:96",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.dto.ts",{"_index":2093,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["users.length",{"_index":2216,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":2171,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/request",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/entities/user.entity",{"_index":1430,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["users/users.module",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/OauthService.html":{}}}],["userscontroller",{"_index":2142,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":57,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":154,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"injectables/OauthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usestate('app",{"_index":1316,"title":{},"body":{"interfaces/IApp.html":{}}}],["usesticky",{"_index":2294,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["useuserstore",{"_index":2296,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utf8",{"_index":319,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["uuid",{"_index":191,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["v4",{"_index":190,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{}}}],["v9slimndming5jofjigpiqu",{"_index":2007,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["val",{"_index":1699,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":569,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(accesstoken",{"_index":1109,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(fullnamevalidator",{"_index":1985,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":2472,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":2244,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":2140,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":572,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1992,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":2052,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":2434,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":2141,"title":{},"body":{"classes/UserEntity.html":{}}}],["validation",{"_index":2552,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":2431,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":2233,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":838,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CustomDto.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/RecaptchaDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":2436,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":2428,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":247,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/ExcludeNullInterceptor.html":{},"interfaces/ISwaggerOptions.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.pattern",{"_index":1562,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["value.queue",{"_index":1563,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["variable",{"_index":2293,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2886,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":2535,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":1393,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1404,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":2507,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verifycallback",{"_index":1242,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["verifyrecaptcha",{"_index":696,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyrecaptcha(recaptcha",{"_index":716,"title":{},"body":{"injectables/AuthService.html":{}}}],["versa",{"_index":2555,"title":{},"body":{"index.html":{}}}],["version",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["version('1",{"_index":370,"title":{},"body":{"controllers/AppController.html":{}}}],["version('1')@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":334,"title":{},"body":{"controllers/AppController.html":{}}}],["versioning",{"_index":2273,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["versions",{"_index":2613,"title":{},"body":{"index.html":{}}}],["viandwi24",{"_index":1314,"title":{},"body":{"interfaces/IApp.html":{}}}],["video",{"_index":828,"title":{},"body":{"classes/CommentEntity.html":{},"classes/MessageEntity.html":{}}}],["view",{"_index":531,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["views",{"_index":524,"title":{},"body":{"injectables/AppService.html":{}}}],["visited",{"_index":526,"title":{},"body":{"injectables/AppService.html":{}}}],["void",{"_index":257,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/FacebookStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"classes/NatsStrategy.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":1317,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["vxan5gw4xpl7ps4_2pdzb1kiibdgn2zyt9bjikwislrvzxzencewwg4t7lens25p84d7n7s12dxikdqi2xaaemnas1lk",{"_index":2003,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["wait",{"_index":2341,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":2469,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":1394,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1406,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":193,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["warning(message",{"_index":221,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":2807,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2803,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2684,"title":{},"body":{"index.html":{}}}],["web",{"_index":2627,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":2486,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":2366,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":2623,"title":{},"body":{"index.html":{}}}],["websocket.guard.ts",{"_index":2249,"title":{},"body":{"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["websocket.guard.ts:6",{"_index":2251,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["websocketgateway",{"_index":1493,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["websocketserver",{"_index":1496,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["whether",{"_index":2819,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":2320,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["window",{"_index":1331,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('error",{"_index":1332,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('scroll",{"_index":3022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.location.reload",{"_index":1336,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.pageyoffset",{"_index":3016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.removeeventlistener('scroll",{"_index":3024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":2616,"title":{},"body":{"index.html":{}}}],["without",{"_index":369,"title":{},"body":{"controllers/AppController.html":{},"license.html":{}}}],["work",{"_index":366,"title":{},"body":{"controllers/AppController.html":{}}}],["world",{"_index":517,"title":{},"body":{"injectables/AppService.html":{},"classes/MessageEntity.html":{}}}],["writeerrorlogtofile",{"_index":238,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["writtenposts",{"_index":1859,"title":{},"body":{"injectables/PostsService.html":{}}}],["wsthrottlerguard",{"_index":2248,"title":{"injectables/WsThrottlerGuard.html":{}},"body":{"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["www",{"_index":783,"title":{},"body":{"injectables/AuthService.html":{}}}],["x",{"_index":2645,"title":{},"body":{"index.html":{}}}],["years",{"_index":1935,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["yes",{"_index":1397,"title":{},"body":{"injectables/LoggerService.html":{}}}],["you'd",{"_index":2709,"title":{},"body":{"index.html":{}}}],["you're",{"_index":525,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["ypqan3e8avyd_yctvzqkoeu9j_exvr",{"_index":2004,"title":{},"body":{"classes/RecaptchaDto.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2839,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2836,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2837,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":2437,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2838,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zip",{"_index":2284,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":59,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { EROLE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@RoleDecorator(EROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n    constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @RoleDecorator(EROLE.ADMIN)@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport { EROLE, STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\nimport { Public } from '../auth/decorators';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from '../users/dto/request';\nimport {\n    IAllUsers,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('admin')\nexport class AdminUsersController {\n    constructor(private readonly usersService: UsersService) {}\n\n    @RoleDecorator(EROLE.ADMIN)\n    @Get('users/all')\n    @ApiOperation({ summary: 'Get list all public users' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getAllUsers(@Query() dto: PaginationDto): Promise {\n        return this.usersService.getAllUsers(dto);\n    }\n\n    @Public()\n    @Get('users/:userId')\n    @ApiOperation({\n        summary: 'Get user profile by user-id',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @Param('userId') userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('users/profile/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: 'Success' })\n    async update(\n        @Param('userId') userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('users/avatar/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersAvatar(\n        @Param() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('users/cover/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersCover(\n        @Param() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('users/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user by user-id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUserById(@Param('userId') userId: string): Promise {\n        return this.usersService.deleteUserById(userId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Alert.html":{"url":"interfaces/Alert.html","title":"interface - Alert","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Alert\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AlertOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AlertOptions.html":{"url":"interfaces/AlertOptions.html","title":"interface - AlertOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlertOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            closable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            html\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        closable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        html\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        html:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:         AlertStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlertStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getErrorLog\n                            \n                            \n                                    Private\n                                    Static\n                                getErrorResponse\n                            \n                            \n                                    Private\n                                    Static\n                                writeErrorLogToFile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessageLog\n                            \n                            \n                                    Private\n                                    Static\n                                handleMessageResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getErrorLog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/exception.filter.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getErrorResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/exception.filter.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        writeErrorLogToFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/exception.filter.ts:99\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessageLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessageLog(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleMessageResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessageResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArgumentsHost,\n    Catch,\n    ExceptionFilter,\n    HttpException,\n    HttpStatus,\n    LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\nimport {\n    CustomHttpExceptionResponse,\n    HttpExceptionResponse,\n} from './model/http-exception-response.interface';\nimport * as fs from 'fs';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    constructor(private logger: LoggerService) {}\n\n    catch(exception: HttpException | Error, host: ArgumentsHost): void {\n        const ctx: HttpArgumentsHost = host.switchToHttp();\n        const request: Request = ctx.getRequest();\n        const response: Response = ctx.getResponse();\n\n        this.handleMessageLog(exception);\n\n        AllExceptionsFilter.handleMessageResponse(request, response, exception);\n    }\n\n    private handleMessageLog(exception: HttpException | Error): void {\n        let message = 'Internal Server Error';\n\n        if (exception instanceof HttpException) {\n            message = JSON.stringify(exception.getResponse());\n        } else if (exception instanceof Error) {\n            message = exception.stack.toString();\n        }\n\n        this.logger.error(message, exception);\n    }\n\n    private static handleMessageResponse(\n        request: Request,\n        response: Response,\n        exception: HttpException | Error,\n    ): void {\n        let responseBody: any = {\n            message: 'Critical internal server error occurred!',\n        };\n        let statusCode: HttpStatus.INTERNAL_SERVER_ERROR;\n\n        if (exception instanceof HttpException) {\n            const errorResponse = exception.getResponse();\n            statusCode = exception.getStatus();\n            responseBody =\n                (errorResponse as HttpExceptionResponse).error ||\n                exception.message;\n        } else if (exception instanceof Error) {\n            statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n\n        const errorResponse = this.getErrorResponse(\n            statusCode,\n            exception.stack.toString(),\n            responseBody,\n        );\n        const errorLog = this.getErrorLog(errorResponse, request, exception);\n        this.writeErrorLogToFile(errorLog);\n        response.status(statusCode).json(responseBody);\n    }\n\n    private static getErrorResponse = (\n        statusCode: HttpStatus,\n        errorMessage: string,\n        request: Request,\n    ): CustomHttpExceptionResponse => ({\n        statusCode: statusCode,\n        error: errorMessage,\n        path: request.url,\n        method: request.method,\n        timeStamp: new Date(),\n    });\n\n    private static getErrorLog = (\n        errorResponse: CustomHttpExceptionResponse,\n        request: Request,\n        exception: unknown,\n    ): string => {\n        const { statusCode, error } = errorResponse;\n        const { method, url } = request;\n        const errorLog = `Response Code: ${statusCode} - Method: ${method} - URL: ${url}\\n\n        ${JSON.stringify(errorResponse)}\\n\n        User: ${JSON.stringify(request.user ?? 'Not signed in')}\\n\n        ${exception instanceof HttpException ? exception.stack : error}\\n`;\n        return errorLog;\n    };\n\n    private static writeErrorLogToFile = (errorLog: string): void => {\n        fs.appendFile('error.log', errorLog, 'utf8', (err) => {\n            if (err) throw err;\n        });\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dontSkip\n                            \n                            \n                                doSkip\n                            \n                            \n                                    Async\n                                getHello\n                            \n                            \n                                requestCookie\n                            \n                            \n                                responseCookie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        dontSkip\n                        \n                    \n                \n            \n            \n                \ndontSkip()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SkipThrottle(undefined)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doSkip\n                        \n                    \n                \n            \n            \n                \ndoSkip()\n                \n            \n\n\n            \n                \n                    Defined in src/app.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello(session: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Version('1')@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: 'Default server response'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestCookie\n                        \n                    \n                \n            \n            \n                \nrequestCookie(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cookie/server')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        responseCookie\n                        \n                    \n                \n            \n            \n                \nresponseCookie(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cookie/custom')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Req,\n    Res,\n    Session,\n    UseGuards,\n    Version,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { SkipThrottle } from '@nestjs/throttler';\nimport { AppService } from './app.service';\nimport { ThrottlerBehindProxyGuard } from './core/security/throttle-proxy.guard';\nimport { Public } from './infrastructure/auth/decorators';\nimport { Request, Response } from 'express';\n\n@ApiTags('Home')\n@UseGuards(ThrottlerBehindProxyGuard)\n@SkipThrottle()\n@Public()\n@Controller({ version: '2', path: '/' })\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @SkipThrottle(false)\n    dontSkip() {\n        return 'List users work with Rate limiting.';\n    }\n\n    doSkip() {\n        return 'List users work without Rate limiting.';\n    }\n\n    @Version('1')\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Teneno homepage' })\n    @ApiResponse({\n        status: 200,\n        description: 'Default server response',\n    })\n    @ApiResponse({ status: 404, description: 'Not found' })\n    async getHello(@Session() session: Record): Promise {\n        return this.appService.getHello(session);\n    }\n\n    @Get('cookie/server')\n    requestCookie(@Req() request: Request) {\n        console.log(`Cookies: ${request.session.cookie}`);\n        console.log(`Signed cookies: ${request.signedCookies}`);\n        return `Cookies: ${request.session.cookie} Signed cookies: ${request.signedCookies}`;\n    }\n\n    @Get('cookie/custom')\n    responseCookie(@Res() response: Response) {\n        // console.log(response.cookie('key', 'value'));\n        console.log(response.getHeader('Set-Cookie'));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MathModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            OauthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n    CacheInterceptor,\n    CacheModule,\n    MiddlewareConsumer,\n    Module,\n    NestModule,\n} from '@nestjs/common';\nimport { APP_FILTER, APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './abstraction/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\nimport { OauthModule } from './infrastructure/oauth/oauth.module';\nimport { MathModule } from './abstraction/microservices/math/math.module';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { AllExceptionsFilter } from './core/filters/exception.filter';\n\n@Module({\n    imports: [\n        InterceptorModule,\n        PrismaModule,\n        TerminusModule,\n        ThrottlerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (config: ConfigService) => ({\n                ttl: config.get('THROTTLE_TTL'),\n                limit: config.get('THROTTLE_LIMIT'),\n                ignoreUserAgents: [\n                    // Don't throttle request that have 'googlebot' defined in them.\n                    // Example user agent: Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\n                    /googlebot/gi,\n                    // Example user agent: Mozilla/5.0 (compatible; Bingbot/2.0; +http://www.bing.com/bingbot.htm)\n                    new RegExp('bingbot', 'gi'),\n                ],\n            }),\n        }),\n        CacheModule.register({\n            isGlobal: true,\n            ttl: Number(process.env.CACHE_TTL),\n            max: +Number(process.env.CACHE_MAX),\n        }),\n        MathModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            cache: true,\n            // envFilePath: ['.env'],\n            envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n        }),\n        LoggerModule.forRoot(),\n        ServeStaticModule.forRoot({\n            rootPath: `${__dirname}/../docs`,\n            // rootPath: join(__dirname, '..', 'docs'),\n            renderPath: '/',\n            // exclude: ['/api*'],\n        }),\n        AuthModule,\n        OauthModule,\n        AdminModule,\n        UsersModule,\n        FilesModule,\n        PostsModule,\n        ConversationsModule,\n        MessagesModule,\n    ],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        {\n            provide: APP_GUARD,\n            useClass: ThrottlerGuard,\n        },\n        // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n        {\n            provide: APP_GUARD,\n            useClass: AtGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: RolesGuard,\n        },\n        {\n            provide: APP_INTERCEPTOR,\n            useClass: CacheInterceptor,\n        },\n        // {\n        //     provide: APP_FILTER,\n        //     useClass: AllExceptionsFilter,\n        // },\n    ],\n})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer.apply(LoggerContextMiddleware).forRoutes('*');\n        //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n        //   .forRoutes(UsersController);\n        // .forRoutes('users');\n        // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n        // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello(session: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CacheInterceptor,\n    CACHE_MANAGER,\n    Inject,\n    Injectable,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\n@UseInterceptors(CacheInterceptor)\nexport class AppService {\n    constructor(\n        @Logger('AppService') private logger: LoggerService,\n        @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    ) {}\n\n    async getHello(session: Record): Promise {\n        this.logger.log('Hello World', '200');\n        session.visits = (await session.visits) ? session.visits + 1 : 1;\n        const cacheToken = await this.cacheManager.get(\n            'cacheToken' || undefined,\n        );\n        const console: Object = {\n            Views: `You're visited this page ${await session.visits} times`,\n            Message: 'Hello World from Teneno!',\n            Note: `This view has been cached by Cache-Interceptor in ${process.env.CACHE_TTL} seconds.`,\n            Tip: 'Disable cache module in app.module.ts to reset views.',\n            CacheToken: cacheToken,\n        };\n        return console;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtGuard extends AuthGuard(ESTRATEGY.JWT) {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    // if true will enter with access-token , and another hand\n    public canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            process.env.PUBLIC_GUARD,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) return true;\n\n        return super.canActivate(context);\n    }\n\n    handleRequest(err, user, info) {\n        if (err || !user) {\n            throw err || new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, ESTRATEGY.JWT) {\n    constructor(@Inject(ConfigService) private config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: config.get('APP_SECRET'),\n            // secretOrKey: process.env.APP_SECRET,\n            ignoreExpiration: false,\n            passReqToCallback: false,\n        });\n    }\n\n    async validate(payload: IJwtPayload): Promise {\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signInRecaptcha\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: undefined})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@UseInterceptors(CacheInterceptor)@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signInRecaptcha\n                        \n                    \n                \n            \n            \n                \n                    \n                    signInRecaptcha(dto: RecaptchaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin/recaptcha')@ApiOperation({summary: 'Login user with recaptcha'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                RecaptchaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account.'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: undefined, type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    CacheInterceptor,\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    Put,\n    Res,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport {\n    LoginDto,\n    RecaptchaDto,\n    SignupDto,\n    UpdatePasswordDto,\n} from './dto/request';\nimport { ITokens } from './dto/response';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\nimport { Response } from 'express';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {\n        this.authService = authService;\n    }\n\n    @Public()\n    @Post('signup')\n    @ApiOperation({ summary: 'Create new user account.' })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n        type: SignupDto,\n    })\n    async signupLocal(@Body() dto: SignupDto): Promise {\n        return this.authService.signupLocal(dto);\n    }\n\n    @Public()\n    @Post('signin')\n    @UseInterceptors(CacheInterceptor)\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Login to user account' })\n    async signinLocal(@Body() dto: LoginDto): Promise {\n        // const cookie = this.authService.createCookie(a.accessToken);\n        // res.setHeader('Set-Cookie', [cookie]);\n        // console.log(res.getHeader('Set-Cookie'));\n        return await this.authService.signinLocal(dto);\n    }\n\n    @Post('signin/recaptcha')\n    @ApiOperation({ summary: 'Login user with recaptcha' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async signInRecaptcha(@Body() dto: RecaptchaDto): Promise {\n        return await this.authService.signInRecaptcha(dto);\n    }\n\n    @Post('logout')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Logout user account (user)' })\n    async logout(\n        @GetCurrentUserId() userId: string,\n        @Res() res: Response,\n    ): Promise {\n        res.setHeader('Set-Cookie', ['Authorization=; Max-age=0']);\n        return this.authService.logout(userId);\n    }\n\n    @Post('refresh')\n    @ApiBearerAuth()\n    @UseGuards(RtGuard)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Logout account on all devices' })\n    async refreshToken(\n        @GetCurrentUserId() userId: string,\n        @GetCurrentUser('refreshToken') refreshToken: string,\n    ): Promise {\n        return this.authService.refreshToken(userId, refreshToken);\n    }\n\n    @Put('password')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Update user password' })\n    async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n        return this.authService.updatePassWord(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { RolesGuard } from 'src/core/roles';\n\n@Module({\n    imports: [\n        PrismaModule,\n        JwtModule,\n        PassportModule.register({ session: true }),\n        // JwtModule.registerAsync({\n        //   imports: [ConfigModule],\n        //   useFactory: async (configService: ConfigService) => ({\n        //     secret: configService.get(\"APP_SECRET\"),\n        //     signOptions: { expiresIn: configService.get(\"EXPIRE_AT_TIME\") },\n        //   }),\n        //   inject: [ConfigService],\n        // })\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, AtStrategy, RtStrategy, RolesGuard],\n    exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createCookie\n                            \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signInRecaptcha\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                            \n                                    Async\n                                verifyRecaptcha\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createCookie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCookie(tokenData: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string, roles: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signInRecaptcha\n                        \n                    \n                \n            \n            \n                \n                    \n                    signInRecaptcha(dto: RecaptchaDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                RecaptchaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyRecaptcha\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyRecaptcha(recaptcha: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recaptcha\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    CACHE_MANAGER,\n    ConflictException,\n    ForbiddenException,\n    Inject,\n    Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport { IFailRecaptcha, ISuccessRecaptcha, ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    LoginDto,\n    RecaptchaDto,\n    SignupDto,\n    UpdatePasswordDto,\n} from './dto/request';\nimport { Cache } from 'cache-manager';\nimport { AUTH_ERROR, SYSTEM_ERROR, USER_ERROR } from 'src/core/constants';\nimport { comparePassword, hashPassword } from 'src/core/helpers';\nimport axios from 'axios';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(ConfigService)\n        private configService: ConfigService,\n        private prismaService: PrismaService,\n        private jwtService: JwtService,\n        @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    ) {}\n\n    async getTokens(\n        userId: string,\n        email: string,\n        roles: string[],\n    ): Promise {\n        const [at, rt] = await Promise.all([\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                    roles: roles,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n                },\n            ),\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                    roles: roles,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n                },\n            ),\n        ]);\n        return { accessToken: at, refreshToken: rt };\n    }\n\n    async updateRtHash(userId: string, rt: string) {\n        const hash = await hashPassword(rt);\n        await this.prismaService.user.update({\n            where: {\n                id: userId,\n            },\n            data: {\n                hashedRefreshToken: hash,\n            },\n        });\n    }\n\n    async signupLocal(dto: SignupDto): Promise {\n        const hash = await hashPassword(dto.password);\n\n        const userExist = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ email: dto.email }, { username: dto.username }],\n            },\n        });\n\n        if (userExist.length > 0)\n            throw new ConflictException(USER_ERROR.DUPLICATE);\n\n        const newUser = await this.prismaService.user.create({\n            data: {\n                email: dto.email,\n                password: hash,\n                username: dto.username,\n            },\n        });\n\n        const tokens = await this.getTokens(\n            newUser.id,\n            newUser.email,\n            newUser.role,\n        );\n        await this.updateRtHash(newUser.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async signinLocal(dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const passwordMatches = await comparePassword(\n            dto.password,\n            user.password,\n        );\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email, user.role);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        await this.cacheManager.set('cacheToken', tokens);\n        return tokens;\n    }\n\n    async verifyRecaptcha(\n        recaptcha: any,\n    ): Promise {\n        const bodyFormData: FormData = new FormData();\n        bodyFormData.append(\n            'secret',\n            this.configService.get('GOOGLE_RECAPTCHA_SECRET'),\n        );\n        bodyFormData.append('response', recaptcha);\n\n        const result = await axios.post(\n            `${this.configService.get('RECAPTCHA_VERIFY_URL')}`,\n            bodyFormData,\n        );\n\n        //     const response = await axiosRequest('post',\n        //       `https://www.google.com/recaptcha/api/siteverify?secret=${process.env.GOOGLE_RECAPTCHA_SECRET}&response=${capcha}`,\n        //       'Content-Type': 'application/x-www-form-urlencoded'\n        //     );\n        if (!result?.data.success) throw new Error(AUTH_ERROR.RECAPTCHA_FAILED);\n        if (result?.data.score  {\n        await this.verifyRecaptcha(dto.recaptcha);\n        const { email, password } = dto;\n        return await this.signinLocal({ email, password });\n    }\n\n    async logout(userId: string): Promise {\n        await this.prismaService.user.updateMany({\n            where: {\n                id: userId,\n                hashedRefreshToken: {\n                    not: null,\n                },\n            },\n            data: { hashedRefreshToken: null },\n        });\n    }\n\n    async refreshToken(userId: string, refreshToken: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n        if (!user || !user.hashedRefreshToken)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const hashMatches = await comparePassword(\n            refreshToken,\n            user.hashedRefreshToken,\n        );\n        if (!hashMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email, user.role);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async updatePassWord(dto: UpdatePasswordDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n\n        const passwordMatches = await comparePassword(\n            dto.oldPassword,\n            user.password,\n        );\n\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (dto.newPassword === dto.oldPassword)\n            throw new ForbiddenException(AUTH_ERROR.SAME_PASSWORD);\n\n        if (passwordMatches) {\n            await this.prismaService.user.update({\n                where: { email: dto.email },\n                data: {\n                    password: await hashPassword(dto.newPassword),\n                },\n            });\n        }\n\n        const tokens = await this.getTokens(user.id, user.email, user.role);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    public createCookie(tokenData: string): string {\n        return `Authorization=${tokenData}; HttpOnly; Max-Age=604800;`;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment id', example: 'comment-id-123-456-789', type: String})@IsNotEmpty({message: 'Comment-id is required'})@IsString({message: 'Comment-id must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment post-id', example: undefined, type: String})@IsString({message: 'Comment post id must be a string'})@IsNotEmpty({message: 'Comment post id is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray({message: 'Comment reactions must be an array'})@IsNotEmpty({message: 'Comment reactions is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON({message: 'Comment metadata must be a JSON object'})@IsNotEmpty({message: 'Comment metadata is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment content', example: 'This is a comment', type: String})@IsString({message: 'Comment text must be a string'})@IsNotEmpty({message: 'Comment text is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment type (text, image, video, audio)', example: 'text', type: String})@IsNotEmpty({message: 'Comment-type is required'})@IsString({message: 'Comment-type must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Comment author-id', example: undefined, type: String})@IsString({message: 'Comment author id must be a string'})@IsNotEmpty({message: 'Comment author id is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsArray, IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CommentEntity {\n    @ApiProperty({\n        description: 'Comment id',\n        example: 'comment-id-123-456-789',\n        type: String,\n    })\n    @IsNotEmpty({\n        message: 'Comment-id is required',\n    })\n    @IsString({\n        message: 'Comment-id must be a string',\n    })\n    id: string;\n\n    @ApiProperty({\n        description: 'Comment type (text, image, video, audio)',\n        example: 'text',\n        type: String,\n    })\n    @IsNotEmpty({\n        message: 'Comment-type is required',\n    })\n    @IsString({\n        message: 'Comment-type must be a string',\n    })\n    type: string;\n\n    @ApiProperty({\n        description: 'Comment content',\n        example: 'This is a comment',\n        type: String,\n    })\n    @IsString({\n        message: 'Comment text must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Comment text is required',\n    })\n    text: string;\n\n    @ApiProperty({\n        description: 'Comment author-id',\n        example: ['user-id-123-456-789'],\n        type: String,\n    })\n    @IsString({\n        message: 'Comment author id must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Comment author id is required',\n    })\n    userId: string;\n\n    @ApiProperty({\n        description: 'Comment post-id',\n        example: ['post-id-123-456-789'],\n        type: String,\n    })\n    @IsString({\n        message: 'Comment post id must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Comment post id is required',\n    })\n    postId: string;\n\n    @IsArray({\n        message: 'Comment reactions must be an array',\n    })\n    @IsNotEmpty({\n        message: 'Comment reactions is required',\n    })\n    reactions: number[];\n\n    @IsJSON({\n        message: 'Comment metadata must be a JSON object',\n    })\n    @IsNotEmpty({\n        message: 'Comment metadata is required',\n    })\n    replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The list all admins of the conversation', example: undefined, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The avatar of the conversation', example: 'avatar-123-456-789'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The create date of the conversation', example: '2021-01-01T00:00:00.000Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of conversation creator', example: 'creator-123-456-789', type: String})@IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The description of the conversation', example: 'description-123-456-789', type: String, required: false, nullable: true})@IsOptional()@IsString()@Length(0, 255)@MaxLength(256, {message: 'Description is too long, must be at most 255 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the conversation', example: 'id-123-456-789', type: String})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The list all members of the conversation', example: undefined, type: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the conversation', example: 'Conversation 1', type: String})@IsString()@IsNotEmpty()@Length(1, 50)@MinLength(0, {message: 'Name is not blank, must be at least 1 characters!'})@MaxLength(51, {message: 'Name is too long, must be at most 50 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The update date of the conversation', example: '2021-01-01T00:00:00.000Z', type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional, PickType } from '@nestjs/swagger';\nimport {\n    IsArray,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    Length,\n    MaxLength,\n    MinLength,\n} from 'class-validator';\nimport { CustomDto } from 'src/core/common/dto';\n\nexport class ConversationEntity extends PickType(CustomDto, ['userId']) {\n    @ApiProperty({\n        description: 'The id of the conversation',\n        example: 'id-123-456-789',\n        type: String,\n    })\n    @IsString()\n    @IsNotEmpty()\n    id: string;\n\n    @ApiProperty({\n        description: 'The name of the conversation',\n        example: 'Conversation 1',\n        type: String,\n    })\n    @IsString()\n    @IsNotEmpty()\n    @Length(1, 50)\n    @MinLength(0, {\n        message: 'Name is not blank, must be at least 1 characters!',\n    })\n    @MaxLength(51, {\n        message: 'Name is too long, must be at most 50 characters!',\n    })\n    name: string;\n\n    @ApiPropertyOptional({\n        description: 'The description of the conversation',\n        example: 'description-123-456-789',\n        type: String,\n        required: false,\n        nullable: true,\n    })\n    @IsOptional()\n    @IsString()\n    @Length(0, 255)\n    @MaxLength(256, {\n        message: 'Description is too long, must be at most 255 characters!',\n    })\n    description?: string | null;\n\n    @ApiProperty({\n        description: 'The avatar of the conversation',\n        example: 'avatar-123-456-789',\n    })\n    avatar: string;\n\n    @ApiProperty({\n        description: 'The create date of the conversation',\n        example: '2021-01-01T00:00:00.000Z',\n    })\n    createdAt: Date;\n\n    @ApiProperty({\n        description: 'The update date of the conversation',\n        example: '2021-01-01T00:00:00.000Z',\n        type: Date,\n    })\n    updatedAt: Date;\n\n    @ApiProperty({\n        description: 'The list all members of the conversation',\n        example: ['member1-123-456', 'member2-456-789'],\n        type: Array,\n    })\n    @IsArray()\n    members: string[];\n\n    @ApiProperty({\n        description: 'The list all admins of the conversation',\n        example: ['admin1-123-456', 'admin2-456-789'],\n        type: Array,\n    })\n    admins: string[];\n\n    @ApiProperty({\n        description: 'The name of conversation creator',\n        example: 'creator-123-456-789',\n        type: String,\n    })\n    @IsArray()\n    @IsNotEmpty()\n    creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { GetCurrentUserId } from '../auth/decorators';\nimport { ConversationsService } from './conversations.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetAllConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities/conversation.entity';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n    constructor(private readonly conversationsService: ConversationsService) {\n        this.conversationsService = conversationsService;\n    }\n\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create a new conversation (user)' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({\n        type: ConversationEntity,\n        description: 'The new conversation has been created.',\n    })\n    async createConversation(@Body() dto: CreateConversationDto) {\n        return await this.conversationsService.createConversation(dto);\n    }\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        isArray: true,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllConversations(@GetCurrentUserId() userId: string) {\n        return this.conversationsService.getAllConversations(userId);\n    }\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getConversationById(\n        @Param('id') id: string,\n        @Body() dto: GetOneConversationDto,\n    ) {\n        return this.conversationsService.getConversationById(id, dto);\n    }\n\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    updateConversationById(\n        @Param('id') id: string,\n        @Body() dto: UpdateConversationDto,\n    ) {\n        return this.conversationsService.updateConversationById(id, dto);\n    }\n\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Delete one conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteConversationById(\n        @Param('id') id: string,\n        @Body() dto: DeleteConversationDto,\n    ) {\n        return this.conversationsService.deleteConversationById(id, dto);\n    }\n\n    @Patch(':conversationId/updateMembers')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update members list of current conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateMembersConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateMembersConversationDto,\n    ) {\n        return this.conversationsService.updateMembersConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/deleteAdmins')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Delete one admin of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteOneAdminConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: DeleteOneAdminConversationDto,\n    ) {\n        return this.conversationsService.deleteOneAdminConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/updateRoles')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Change role of any member of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateRolesConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateRolesConversationDto,\n    ) {\n        return this.conversationsService.updateRolesConversation(\n            conversationId,\n            dto,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_ConversationsModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [ConversationsController],\n    providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\nimport { CONVERSATION_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class ConversationsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createConversation(dto: CreateConversationDto) {\n        const newConversation = await this.prismaService.conversation.create({\n            data: {\n                id: uuid(),\n                name: dto.name,\n                description: dto.description,\n                avatar: '',\n                members: dto.members,\n                admins: dto.admins,\n                creator: dto.creator,\n            },\n        });\n        return newConversation;\n    }\n\n    async getAllConversations(userId: string) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: userId,\n                    },\n                    {\n                        admins: {\n                            has: userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: userId,\n                        },\n                    },\n                ],\n            },\n            select: {\n                id: true,\n                name: true,\n                avatar: true,\n                messages: {\n                    orderBy: {\n                        createdAt: 'asc',\n                    },\n                    take: 1,\n                    select: {\n                        type: true,\n                        text: true,\n                        updatedAt: true,\n                        senderId: true,\n                    },\n                },\n            },\n        });\n        return { userId, list };\n    }\n\n    async getConversationById(id: string, dto: GetOneConversationDto) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.userId,\n                    },\n                    {\n                        admins: {\n                            has: dto.userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: dto.userId,\n                        },\n                    },\n                ],\n                AND: {\n                    id: id,\n                },\n            },\n        });\n        return list;\n    }\n\n    updateConversationById(id: string, dto: UpdateConversationDto) {\n        const updated = this.prismaService.conversation.update({\n            where: {\n                id: id,\n            },\n            data: {\n                name: dto.name,\n                description: dto.description,\n                avatar: dto.avatar,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteConversationById(id: string, dto: DeleteConversationDto) {\n        const list = await this.prismaService.conversation.findUnique({\n            where: {\n                id: id,\n            },\n        });\n        if (list['creator'] === dto.userId) {\n            await this.prismaService.conversation.delete({\n                where: {\n                    id: id,\n                },\n            });\n            return '';\n        }\n        return false;\n    }\n\n    async updateMembersConversation(\n        conversationId: string,\n        dto: UpdateMembersConversationDto,\n    ) {\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteOneAdminConversation(\n        conversationId: string,\n        dto: DeleteOneAdminConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n        const updated = list[0]['admins'].filter(\n            (admin) => admin !== dto.userId,\n        );\n\n        await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: updated,\n            },\n        });\n        return updated;\n    }\n\n    async updateRolesConversation(\n        conversationId: string,\n        dto: UpdateRolesConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: dto.admins,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class CreateConversationDto extends OmitType(ConversationEntity, [\n    'id',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/request/create-message.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, OmitType } from '@nestjs/swagger';\nimport { MessageEntity } from '../../entities/message.entity';\n\n@ApiExtraModels()\nexport class CreateMessageDto extends OmitType(MessageEntity, ['id']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomDto.html":{"url":"classes/CustomDto.html","title":"class - CustomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/custom.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                senderId\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of sender', example: 'sender-id-123-456-789'})@IsNotEmpty({message: 'Sender id is required'})@IsString({message: 'Sender id must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/custom.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of user', example: 'user-id-123-456-789'})@IsNotEmpty({message: 'User id is required'})@IsString({message: 'User id must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/custom.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CustomDto {\n    @ApiProperty({\n        type: String,\n        description: 'The id of user',\n        example: 'user-id-123-456-789',\n    })\n    @IsNotEmpty({\n        message: 'User id is required',\n    })\n    @IsString({\n        message: 'User id must be a string',\n    })\n    userId?: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The id of sender',\n        example: 'sender-id-123-456-789',\n    })\n    @IsNotEmpty({\n        message: 'Sender id is required',\n    })\n    @IsString({\n        message: 'Sender id must be a string',\n    })\n    senderId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomHttpExceptionResponse.html":{"url":"interfaces/CustomHttpExceptionResponse.html","title":"interface - CustomHttpExceptionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomHttpExceptionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/model/http-exception-response.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpExceptionResponse\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface HttpExceptionResponse {\n    statusCode: number;\n    error: string;\n}\n\nexport interface CustomHttpExceptionResponse extends HttpExceptionResponse {\n    path: string;\n    method: string;\n    timeStamp: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultDto.html":{"url":"classes/DefaultDto.html","title":"class - DefaultDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/default.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/default.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/default.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DefaultDto {\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class DeleteConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteMessageDto.html":{"url":"classes/DeleteMessageDto.html","title":"class - DeleteMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/request/delete-message.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { MessageEntity } from '../../entities/message.entity';\n\nexport class DeleteMessageDto extends OmitType(MessageEntity, [\n    'type',\n    'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/errors.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/errors.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    BadGatewayException,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(\n                catchError((err) =>\n                    throwError(() => new BadGatewayException('Bad request...')),\n                ),\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionFilter.html":{"url":"classes/ExceptionFilter.html","title":"class - ExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/filters/rpc-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            RpcExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: RpcException)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/filters/rpc-exception.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            RpcException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, RpcExceptionFilter } from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { Observable, throwError } from 'rxjs';\n\n@Catch(RpcException)\nexport class ExceptionFilter implements RpcExceptionFilter {\n    catch(exception: RpcException): Observable {\n        return throwError(() => exception.getError());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/null.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(map((value) => (value === null ? '' : value)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n    constructor(private prismaService: PrismaService) {}\n\n    async use(req: Request, res: Response, next: NextFunction) {\n        const userId = req.params.userId;\n        const userExist = await this.prismaService.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n            },\n        });\n        if (\n            userExist === null ||\n            userExist === undefined ||\n            userExist.id === ''\n        ) {\n            throw new NotFoundException('User not found');\n        }\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/facebook.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (err: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-facebook';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.FACEBOOK,\n) {\n    constructor() {\n        super({\n            clientID: process.env.FACEBOOK_CLIENT_ID,\n            clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\n            callbackURL: process.env.FACEBOOK_CALLBACK_URL,\n            scope: 'email',\n            profileFields: ['emails', 'name'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: Profile,\n        done: (err: any, user: any, info?: any) => void,\n    ): Promise {\n        const { name, emails } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n        };\n        const payload = {\n            user,\n            accessToken,\n        };\n\n        done(null, payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    UploadedFile,\n    UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport {\n    ArrayFieldDecorator,\n    SingleFieldDecorator,\n    MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('files')\nexport class FileController {\n    constructor(private readonly fileService: FilesService) {}\n\n    @Post('avatar')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/avatars')\n    async uploadAvatar(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadAvatar(file);\n    }\n\n    @Post('cover')\n    @ApiOperation({ summary: 'Upload cover file form data (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/covers')\n    async uploadCover(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadCover(file);\n    }\n\n    @Post('posts')\n    @ApiOperation({ summary: 'Upload post with multi images (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ArrayFieldDecorator('files', true, 10, './public/posts')\n    async uploadPosts(\n        @UploadedFiles() files: Array,\n    ): Promise {\n        return this.fileService.uploadPosts(files);\n    }\n\n    @Post('multi')\n    @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @MultiFieldDecorator(\n        [\n            { name: 'item_1', maxCount: 1, required: true },\n            { name: 'item_2', maxCount: 1 },\n            { name: 'item_3', maxCount: 1 },\n            { name: 'item_4', maxCount: 1 },\n            { name: 'item_5', maxCount: 1 },\n        ],\n        './public/multi',\n    )\n    async uploadMulti(\n        @UploadedFiles() files: Express.Multer.File[],\n    ): Promise {\n        return this.fileService.uploadMulti(files);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileService.html":{"url":"classes/FileService.html","title":"class - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/services/file.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadAvatar\n                            \n                            \n                                uploadCover\n                            \n                            \n                                uploadPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \nuploadAvatar(data: UploadAvatarDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadCover\n                        \n                    \n                \n            \n            \n                \nuploadCover(data: UploadCoverDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPost\n                        \n                    \n                \n            \n            \n                \nuploadPost(data: UploadPostsDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadPostsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { UploadAvatarDto, UploadCoverDto, UploadPostsDto } from '@/dto';\nimport axiosConfig from './axios.config';\n\nconst ENDPOINT = '/files';\n\nexport class FileService {\n    uploadAvatar(data: UploadAvatarDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/avatar`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadCover(data: UploadCoverDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/cover`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadPost(data: UploadPostsDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/posts`;\n\n        const formData = new FormData();\n        formData.append('files', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class GetAllConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\nexport class GetOneConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class GetAllConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\nexport class GetOneConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/google.strategy.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/google.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\nimport { Injectable } from '@nestjs/common';\nimport { ESTRATEGY } from 'src/core/constants';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.GOOGLE,\n) {\n    constructor() {\n        super({\n            clientID: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: process.env.GOOGLE_CALLBACK_URL,\n            scope: ['email', 'profile'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: any,\n        done: VerifyCallback,\n    ): Promise {\n        const { name, emails, photos } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n            picture: photos[0].value,\n            accessToken,\n        };\n        done(null, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                readiness\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        readiness\n                        \n                    \n                \n            \n            \n                \n                    \n                    readiness()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Health check for server system'})@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n    DiskHealthIndicator,\n    HealthCheck,\n    HealthCheckResult,\n    HealthCheckService,\n    MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Health')\n@Public()\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private memory: MemoryHealthIndicator,\n        private disk: DiskHealthIndicator,\n    ) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Health check for server system' })\n    @HealthCheck()\n    async readiness(): Promise {\n        return await this.health.check([\n            async () => await this.memory.checkRSS('mem_rss', 768 * 2 ** 20),\n            async () =>\n                await this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n            async () =>\n                await this.disk.checkStorage('storage', {\n                    path: '/',\n                    thresholdPercent: 0.5,\n                }),\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/http-cache.interceptor.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n    trackBy(context: ExecutionContext): string | undefined {\n        const request = context.switchToHttp().getRequest();\n        const { httpAdapter } = this.httpAdapterHost;\n\n        const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';\n        const excludePaths = [];\n        if (\n            !isGetRequest ||\n            (isGetRequest &&\n                excludePaths.includes(httpAdapter.getRequestUrl(request)))\n        ) {\n            return undefined;\n        }\n        return httpAdapter.getRequestUrl(request);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpExceptionResponse.html":{"url":"interfaces/HttpExceptionResponse.html","title":"interface - HttpExceptionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HttpExceptionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/model/http-exception-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface HttpExceptionResponse {\n    statusCode: number;\n    error: string;\n}\n\nexport interface CustomHttpExceptionResponse extends HttpExceptionResponse {\n    path: string;\n    method: string;\n    timeStamp: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IApp.html":{"url":"interfaces/IApp.html","title":"interface - IApp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IApp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/helpers/app.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ThemeManager } from './theme';\n\nexport interface IApp {\n    name: string;\n    author: {\n        name: string;\n        link: string;\n    };\n}\n\nexport function AppSetup() {\n    const app: IApp = {\n        name: 'Nuxt 3 Awesome Starter',\n        author: {\n            name: 'viandwi24',\n            link: 'https://github.com/viandwi24',\n        },\n    };\n    useState('app', () => app);\n\n    const themeManager = ThemeManager();\n\n    // vue transition bug handle\n    const messages = [\n        \"Uncaught NotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\",\n        'NotFoundError: The object can not be found here.',\n    ];\n    if (typeof window !== 'undefined') {\n        window.addEventListener('error', (ev) => {\n            if (messages.includes(ev.message)) {\n                ev.preventDefault();\n                window.location.reload();\n            }\n        });\n    }\n\n    return {\n        app,\n        themeManager,\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\nimport { ErrorsInterceptor } from './errors.interceptor';\nimport { ExcludeNullInterceptor } from './null.interceptor';\nimport { TimeoutInterceptor } from './timeout.interceptor';\n\n@Module({\n    providers: [\n        { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ExcludeNullInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: TimeoutInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ErrorsInterceptor },\n    ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n    use(req: Request, res: Response, next: () => void): void {\n        console.log(`Request ${req}...`);\n        console.log(`Response ${res}...`);\n        return next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MathController.html":{"url":"controllers/MathController.html","title":"controller - MathController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MathController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                math\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                execute\n                            \n                            \n                                sum\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Calculate check sum pattern'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sum\n                        \n                    \n                \n            \n            \n                \nsum(data: number[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'sum'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus, Inject } from '@nestjs/common';\nimport { ClientProxy, MessagePattern } from '@nestjs/microservices';\nimport {\n    ApiConflictResponse,\n    ApiInternalServerErrorResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { Public } from 'src/infrastructure/auth/decorators';\nimport { MATH_SERVICE } from '../constants/math.constant';\n\n@ApiTags('Microservices')\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('math')\nexport class MathController {\n    constructor(@Inject(MATH_SERVICE) private readonly client: ClientProxy) {}\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Calculate check sum pattern' })\n    execute(): Observable {\n        const pattern = { cmd: 'sum' };\n        const data = [1, 2, 3, 4, 5];\n        return this.client.send(pattern, data);\n    }\n\n    @MessagePattern({ cmd: 'sum' })\n    sum(data: number[]): number {\n        return (data || []).reduce((a, b) => a + b);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MathModule.html":{"url":"modules/MathModule.html","title":"module - MathModule","body":"\n                   \n\n\n\n\n    Modules\n    MathModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            MathController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { MATH_SERVICE } from '../constants/math.constant';\nimport { MathController } from './math.controller';\n\n@Module({\n    imports: [\n        ClientsModule.register([\n            { name: MATH_SERVICE, transport: Transport.TCP },\n        ]),\n    ],\n    controllers: [MathController],\n})\nexport class MathModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageEntity.html":{"url":"classes/MessageEntity.html","title":"class - MessageEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/entities/message.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'conversation-id-123-456-789', description: 'Conversation id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'id-123-456-789', description: 'Message id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user-id-123-456-789', description: 'User id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Hello world', description: 'Message text'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'text', description: 'Message type: text, image, video, audio'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class MessageEntity {\n    @ApiProperty({\n        example: 'id-123-456-789',\n        description: 'Message id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    id: string;\n\n    @ApiProperty({\n        example: 'text',\n        description: 'Message type: text, image, video, audio',\n    })\n    @IsNotEmpty()\n    @IsString()\n    type: string;\n\n    @ApiProperty({\n        example: 'Hello world',\n        description: 'Message text',\n    })\n    @IsNotEmpty()\n    @IsString()\n    text: string;\n\n    @ApiProperty({\n        example: 'conversation-id-123-456-789',\n        description: 'Conversation id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    conversationId: string;\n\n    @ApiProperty({\n        example: 'user-id-123-456-789',\n        description: 'User id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    senderId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesGateway.html":{"url":"controllers/MessagesGateway.html","title":"controller - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n            \n                Prefix\n            \n            \n                messages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                removeMessage\n                            \n                            \n                                    Async\n                                typing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(dto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMessage(dto: DeleteMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(senderId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    WebSocketGateway,\n    SubscribeMessage,\n    MessageBody,\n    WebSocketServer,\n    ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, DeleteMessageDto } from './dto/request';\nimport { SkipThrottle } from '@nestjs/throttler';\nimport { ICreateMessage, IGetAllMessages } from './dto/response';\nimport { Controller } from '@nestjs/common';\n\n@SkipThrottle()\n// @UseGuards(WsThrottlerGuard)\n@Controller('messages')\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n    @WebSocketServer() server: Server;\n    constructor(private readonly messagesService: MessagesService) {}\n\n    @SubscribeMessage('findAllMessages')\n    async getAllMessages(\n        @MessageBody('conversationId') conversationId: string,\n    ): Promise {\n        return this.messagesService.getAllMessages(conversationId);\n    }\n\n    @SubscribeMessage('createMessage')\n    async createMessage(\n        @MessageBody() dto: CreateMessageDto,\n        @ConnectedSocket() client: Socket,\n    ): Promise {\n        const message = await this.messagesService.createMessage(\n            dto,\n            client.id,\n        );\n        this.server.emit('message', message);\n        return message;\n    }\n\n    @SubscribeMessage('typing')\n    async typing(\n        @MessageBody('senderId') senderId: string,\n        @MessageBody('isTyping') isTyping: boolean,\n        @ConnectedSocket() client: Socket,\n    ): Promise {\n        const name = await this.messagesService.getClientName(senderId);\n\n        client.broadcast.emit('typing', { senderId: name, isTyping });\n    }\n\n    @SubscribeMessage('removeMessage')\n    async removeMessage(\n        @MessageBody() dto: DeleteMessageDto,\n    ): Promise {\n        const remove = await this.messagesService.removeMessage(dto);\n        this.server.emit('remove', remove);\n        return remove;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n    controllers: [MessagesGateway],\n    providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getClientName\n                            \n                            \n                                    Async\n                                removeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(dto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getClientName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClientName(clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMessage(dto: DeleteMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, DeleteMessageDto } from './dto/request';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport { ICreateMessage, IGetAllMessages } from './dto/response';\n\n@Injectable()\nexport class MessagesService {\n    constructor(private prismaService: PrismaService) {}\n\n    async getAllMessages(conversationId: string): Promise {\n        const identify = await this.prismaService.conversation.findUnique({\n            where: {\n                id: conversationId,\n            },\n            select: {\n                id: true,\n                name: true,\n                description: true,\n                avatar: true,\n                createdAt: true,\n                messages: true,\n                members: true,\n                admins: true,\n                creator: true,\n            },\n        });\n        return identify;\n    }\n\n    async getClientName(clientId: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: { id: clientId },\n            select: { username: true },\n        });\n        return user.username;\n    }\n\n    async createMessage(\n        dto: CreateMessageDto,\n        clientId: string,\n    ): Promise {\n        const senderName = await this.getClientName(dto.senderId);\n        await this.prismaService.message.create({\n            data: {\n                type: dto.type,\n                text: dto.text,\n                conversationId: dto.conversationId,\n                senderId: `${dto.senderId}:${senderName}`,\n            },\n        });\n        return await this.getAllMessages(dto.conversationId);\n    }\n\n    async removeMessage(dto: DeleteMessageDto): Promise {\n        await this.prismaService.message.delete({\n            where: {\n                id: dto.id,\n            },\n        });\n\n        return this.getAllMessages(dto.conversationId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NatsStrategy.html":{"url":"classes/NatsStrategy.html","title":"class - NatsStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NatsStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ServerNats\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        bindEvents\n                        \n                    \n                \n            \n            \n                \nbindEvents(client: any)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/strategies/nats.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NatsSubscriber.html":{"url":"interfaces/NatsSubscriber.html","title":"interface - NatsSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NatsSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OauthController.html":{"url":"controllers/OauthController.html","title":"controller - OauthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OauthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookAuthRedirect\n                            \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                githubAuthRedirect\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookAuthRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubAuthRedirect(req: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/redirect')@ApiOperation({summary: 'Create login callback with your Github account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Google account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Google account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Query,\n    Req,\n    UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\nimport { Public } from '../auth/decorators';\nimport { OauthService } from './oauth.service';\nimport { Request } from 'express';\n\n@ApiTags('OAuth')\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('oauth')\nexport class OauthController {\n    constructor(private readonly oauthService: OauthService) {}\n\n    @Get('facebook')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Connect to your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async facebookLogin(): Promise {\n        return HttpStatus.OK;\n    }\n\n    @Get('facebook/redirect')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async facebookAuthRedirect(@Req() req: Request): Promise {\n        return this.oauthService.facebookLogin(req);\n    }\n\n    @Get('google')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary: 'Connect to your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async googleAuth(@Req() req: Request): Promise {\n        return req;\n    }\n\n    @Get('google/redirect')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async googleAuthRedirect(@Req() req: Request): Promise {\n        return this.oauthService.googleLogin(req);\n    }\n\n    @Get('github/redirect')\n    @ApiOperation({\n        summary:\n            'Create login callback with your Github account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async githubAuthRedirect(@Query() req: string) {\n        return this.oauthService.githubRedirect(req);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OauthModule.html":{"url":"modules/OauthModule.html","title":"module - OauthModule","body":"\n                   \n\n\n\n\n    Modules\n    OauthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OauthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OauthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OauthService } from './oauth.service';\nimport { OauthController } from './oauth.controller';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { AuthModule } from '../auth/auth.module';\nimport { FacebookStrategy } from './strategies/facebook.strategy';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [AuthModule, UsersModule],\n    controllers: [OauthController],\n    providers: [OauthService, GoogleStrategy, FacebookStrategy],\n    exports: [OauthService],\n})\nexport class OauthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OauthService.html":{"url":"injectables/OauthService.html","title":"injectable - OauthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OauthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                githubRedirect\n                            \n                            \n                                    Async\n                                githubSuccess\n                            \n                            \n                                    Async\n                                googleLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/oauth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubRedirect(req: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubSuccess(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { axiosRequest } from 'src/core/helpers';\nimport { AuthService } from '../auth/auth.service';\nimport { SignupDto } from '../auth/dto/request';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class OauthService {\n    constructor(\n        private readonly authService: AuthService,\n        private readonly usersService: UsersService,\n    ) {}\n\n    async facebookLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from facebook!';\n        }\n\n        const payload = {\n            email: req.user.user.email,\n            password: req.user.user.email,\n            username: req.user.user.email,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n\n    async googleLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from Google!';\n        }\n\n        const payload = {\n            email: req.user.email,\n            password: req.user.email,\n            username: req.user.email,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n\n    async githubRedirect(req: string) {\n        // client must request to this url https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email\n        if (!req) {\n            return 'Not found user from Github!';\n        }\n\n        const requestToken = req['code'];\n\n        const data = await axiosRequest(\n            'post',\n            `https://github.com/login/oauth/access_token?client_id=${process.env.GITHUB_CLIENT_ID}&client_secret=${process.env.GITHUB_SECRET}&code=${requestToken}`,\n            { accept: 'application/json' },\n        );\n        return await this.githubSuccess(data.access_token);\n    }\n\n    async githubSuccess(token: string) {\n        const data = await axiosRequest('get', 'https://api.github.com/user', {\n            Authorization: 'token ' + token,\n        });\n        const payload = {\n            email: data.email || `${data.login}@gmail.com`,\n            password: data.id.toString(),\n            username: data.login,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                current\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 1, minimum: 1, default: 1, nullable: true, description: 'Page number'})@IsString({message: 'Page current must be as string'})@IsOptional({message: 'Page current is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 10, nullable: true, description: 'Number of items per page'})@IsString({message: 'Page limit must be as string'})@IsOptional({message: 'Page limit is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : EORDER.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, description: 'asc, desc', example: 'asc', nullable: true, enum: EORDER, default: undefined})@IsString({message: 'Page order must be as string'})@IsOptional({message: 'Page order is optional'})@IsEnum(EORDER)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(50)@IsOptional({message: 'Page take is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:66\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/dto/pagination.dto.ts:68\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsEnum, IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\nimport { EORDER } from 'src/core/constants';\n\nexport class PaginationDto {\n    @ApiPropertyOptional({\n        type: Number,\n        example: 1,\n        minimum: 1,\n        default: 1,\n        nullable: true,\n        description: 'Page number',\n    })\n    @IsString({\n        message: 'Page current must be as string',\n    })\n    @IsOptional({\n        message: 'Page current is optional',\n    })\n    current?: string = '1';\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 10,\n        nullable: true,\n        description: 'Number of items per page',\n    })\n    @IsString({\n        message: 'Page limit must be as string',\n    })\n    @IsOptional({\n        message: 'Page limit is optional',\n    })\n    limit?: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        description: 'asc, desc',\n        example: 'asc',\n        nullable: true,\n        enum: EORDER,\n        default: EORDER.ASC,\n    })\n    @IsString({\n        message: 'Page order must be as string',\n    })\n    @IsOptional({\n        message: 'Page order is optional',\n    })\n    @IsEnum(EORDER)\n    order?: string = EORDER.ASC;\n\n    @ApiPropertyOptional({\n        minimum: 1,\n        maximum: 50,\n        default: 10,\n    })\n    @Type(() => Number)\n    @IsInt()\n    @Min(1)\n    @Max(50)\n    @IsOptional({\n        message: 'Page take is optional',\n    })\n    readonly take?: number = 10;\n\n    get skip(): number {\n        return (Number(this.current) - 1) * this.take;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                published\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of post author', example: 'author-id-123-456-789'})@IsString({message: 'The author of post must be a string'})@IsNotEmpty({message: 'The author of post is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The content of post', example: 'content abcedf'})@IsString({message: 'The post content must be a string'})@IsNotEmpty({message: 'The post content must not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The favourite id in post', example: 'favourite-id-123-456-789'})@IsString({message: 'The favourite id of post must be a string'})@IsNotEmpty({message: 'The favourite id of post is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'The attach files of post', example: undefined})@IsArray({message: 'The attach files must be an array'})@IsNotEmpty({message: 'The attach files must not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of post', example: 'post-id-123-456-789'})@IsNotEmpty({message: 'The id of post is required'})@IsString({message: 'The id of post must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The id of post', example: 'post-id-123-456-789'})@IsString({message: 'The id of post must be a string'})@IsNotEmpty({message: 'The id of post is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'The status of post', example: true})@IsBoolean({message: 'The publish status must be a boolean'})@IsNotEmpty({message: 'The publish status is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'The type reaction in post', example: 0})@IsNumber()@IsNotEmpty({message: 'The type reaction of post is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The title of post', example: 'title abcedf'})@IsString({message: 'The post title must be a string'})@IsNotEmpty({message: 'The post title is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport {\n    IsArray,\n    IsBoolean,\n    IsNotEmpty,\n    IsNumber,\n    IsString,\n} from 'class-validator';\nimport { CustomDto } from 'src/core/common/dto';\n\nexport class PostEntity extends PickType(CustomDto, ['userId']) {\n    @ApiProperty({\n        type: String,\n        description: 'The id of post',\n        example: 'post-id-123-456-789',\n    })\n    @IsNotEmpty({\n        message: 'The id of post is required',\n    })\n    @IsString({\n        message: 'The id of post must be a string',\n    })\n    id: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The title of post',\n        example: 'title abcedf',\n    })\n    @IsString({\n        message: 'The post title must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The post title is required',\n    })\n    title: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The content of post',\n        example: 'content abcedf',\n    })\n    @IsString({\n        message: 'The post content must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The post content must not be empty',\n    })\n    description: string;\n\n    @ApiProperty({\n        type: Array,\n        description: 'The attach files of post',\n        example: ['file-id1-123-456', 'file-id2-456-789'],\n    })\n    @IsArray({\n        message: 'The attach files must be an array',\n    })\n    @IsNotEmpty({\n        message: 'The attach files must not be empty',\n    })\n    files: string[];\n\n    @ApiProperty({\n        type: Boolean,\n        description: 'The status of post',\n        example: true,\n    })\n    @IsBoolean({\n        message: 'The publish status must be a boolean',\n    })\n    @IsNotEmpty({\n        message: 'The publish status is required',\n    })\n    published: boolean;\n\n    @ApiProperty({\n        type: String,\n        description: 'The id of post author',\n        example: 'author-id-123-456-789',\n    })\n    @IsString({\n        message: 'The author of post must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The author of post is required',\n    })\n    authorId: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The id of post',\n        example: 'post-id-123-456-789',\n    })\n    @IsString({\n        message: 'The id of post must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The id of post is required',\n    })\n    postId: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The favourite id in post',\n        example: 'favourite-id-123-456-789',\n    })\n    @IsString({\n        message: 'The favourite id of post must be a string',\n    })\n    @IsNotEmpty({\n        message: 'The favourite id of post is required',\n    })\n    favouritorId: string;\n\n    @ApiProperty({\n        type: Number,\n        description: 'The type reaction in post',\n        example: 0,\n    })\n    @IsNumber()\n    @IsNotEmpty({\n        message: 'The type reaction of post is required',\n    })\n    reactionType: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n    ParseUUIDPipe,\n    Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    UpdatePostDto,\n    ReactionsPost,\n} from './dto/post/request';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Posts')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('posts')\nexport class PostsController {\n    constructor(private postsService: PostsService) {}\n\n    @Post()\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Get all posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({ description: 'Create new post successfuly' })\n    async createPost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreatePostDto,\n    ): Promise {\n        return this.postsService.createPost(userId, dto);\n    }\n\n    @Post('private/all')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get all public and private posts of user',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPostsOfUser(\n        @GetCurrentUserId() userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPostsOfUser(userId);\n    }\n\n    @Get(':userId/all')\n    @Public()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all public posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPublicPosts(\n        @Param('userId', new ParseUUIDPipe()) userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPublicPosts(userId);\n    }\n\n    @Get(':postId')\n    @Public()\n    @ApiOperation({ summary: 'Get one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getOnePostById(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        return this.postsService.getOnePostById(postId);\n    }\n\n    @Patch('update')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updatePost(@Body() dto: UpdatePostDto): Promise {\n        return this.postsService.updatePost(dto);\n    }\n\n    @Delete('delete')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deletePost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: DeleteOnePost,\n    ): Promise {\n        return this.postsService.deletePost(userId, dto);\n    }\n\n    @Post('reaction')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'React to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async reactionPost(@Body() dto: ReactionsPost): Promise {\n        return this.postsService.reactionPost(dto);\n    }\n\n    @Public()\n    @Get(':postId/comments')\n    @ApiOperation({ summary: 'Get all comments of the post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllComments(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        console.log(postId);\n        return this.postsService.getAllComments(postId);\n    }\n\n    @Post('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Add a new comment to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async addComment(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreateCommentDto,\n    ): Promise {\n        return this.postsService.addComment(userId, dto);\n    }\n\n    @Put('comments/update/text')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateComment(\n        @Body() dto: UpdateCommentTextDto,\n    ): Promise {\n        return this.postsService.updateComment(dto);\n    }\n\n    @Delete('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteComment(@Body() dto: DeleteCommentDto): Promise {\n        return this.postsService.deleteComment(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [PostsController],\n    providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    ReactionsPost,\n    UpdatePostDto,\n} from './dto/post/request';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { POST_ERROR, RESPONSES_MESSAGE, USER_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class PostsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createPost(userId: string, dto: CreatePostDto): Promise {\n        const post = await this.prismaService.post.create({\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                authorId: userId,\n                // categories: {\n                //   create: [\n                //     {\n                //       createAt: new Date(),\n                //       category: {\n                //         create: {\n                //           id: uuid(),\n                //           name: 'New category',\n                //         },\n                //       },\n                //     },\n                //   ],\n                // },\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n            },\n        });\n        return post;\n    }\n\n    async getAllPostsOfUser(userId: string): Promise | null {\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllPublicPosts(userId: string): Promise | null {\n        const list = await this.prismaService.user.findMany({\n            where: {\n                id: userId,\n            },\n            select: {\n                writtenPosts: {\n                    select: {\n                        id: true,\n                    },\n                },\n            },\n        });\n        if (!list) {\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        }\n        if (list.length === 0) {\n            throw new NotFoundException(POST_ERROR.EMPTY);\n        }\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n                published: true,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getOnePostById(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async updatePost(dto: UpdatePostDto): Promise {\n        const list = await this.getOnePostById(dto.postId);\n\n        if (!list) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (list.authorId !== dto.authorId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        return await this.prismaService.post.update({\n            where: {\n                id: dto.postId,\n            },\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                published: dto.published,\n            },\n            select: {\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deletePost(userId: string, dto: DeleteOnePost): Promise {\n        const identify = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                authorId: true,\n            },\n        });\n\n        if (!identify) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (identify.authorId !== userId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        await this.prismaService.post.delete({\n            where: {\n                id: dto.postId,\n            },\n        });\n        return 'This post has been deleted!';\n    }\n\n    async reactionPost(dto: ReactionsPost): Promise {\n        const checkExist = await this.prismaService.reaction.findMany({\n            where: {\n                postId: dto.postId,\n                userId: dto.favouritorId,\n            },\n        });\n\n        if (checkExist.length > 0) {\n            throw new BadRequestException('You already reacted to this post');\n        }\n        await this.prismaService.reaction.create({\n            data: {\n                userId: dto.favouritorId,\n                postId: dto.postId,\n                type: dto.reactionType,\n            },\n        });\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllComments(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                comments: true,\n            },\n        });\n    }\n\n    async addComment(\n        userId: string,\n        dto: CreateCommentDto,\n    ): Promise {\n        const checkPost = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n        });\n\n        if (!checkPost) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n        return this.prismaService.comment.create({\n            data: {\n                text: dto.text,\n                postId: dto.postId,\n                authorId: userId,\n            },\n        });\n    }\n\n    async updateComment(dto: UpdateCommentTextDto): Promise {\n        return await this.prismaService.comment.update({\n            where: {\n                id: dto.id,\n            },\n            data: {\n                text: dto.text,\n            },\n            select: {\n                text: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deleteComment(dto: DeleteCommentDto): Promise {\n        await this.prismaService.comment.delete({\n            where: {\n                id: dto.id,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_COMMENT;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n    providers: [PrismaService, ConfigModule],\n    exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/abstraction/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    INestApplication,\n    Injectable,\n    OnModuleDestroy,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n    extends PrismaClient\n    implements OnModuleInit, OnModuleDestroy\n{\n    constructor() {\n        super({\n            datasources: {\n                db: {\n                    url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n                    // url: process.env.DATABASE_URL,\n                },\n            },\n        });\n    }\n\n    async onModuleInit(): Promise {\n        await this.$connect();\n    }\n\n    async onModuleDestroy() {\n        await this.$disconnect();\n    }\n\n    async enableShutdownHooks(app: INestApplication): Promise {\n        this.$on('beforeExit', async () => {\n            await app.close();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: '123, Address A, City B, Country C', description: 'The address of the user'})@IsOptional({message: 'Address is optional'})@IsString({message: 'Address must be a string'})@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 19})@IsNumber()@IsOptional({message: 'Age is optional'})@Min(11, {message: 'You must be at least 12 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Avatar example 1 url', description: 'The avatar of the user'})@IsOptional({message: 'Avatar is optional'})@IsString({message: 'Avatar must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'This is bio of Hello ABC account', description: 'The bio of the user'})@IsString({message: 'Bio must be a string'})@IsOptional({message: 'Bio is optional'})@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z', type: Date, description: 'The date of birth of the user'})@Type(undefined)@IsDate({message: 'Date of birth must be a date type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Cover example 1 url', description: 'The cover of the user'})@IsString({message: 'Cover must be a string'})@IsOptional({message: 'Cover is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC', description: 'The full name of the user'})@IsString({message: 'Full name must be a string'})@IsNotEmpty({message: 'Full name is required'})@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@IsNotEmpty()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:183\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined, example: undefined, description: 'The hobbies of the user'})@IsArray({message: 'Hobbies must be an array'})@IsOptional({message: 'Hobbies is optional'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EMaritalStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Single', description: 'The relationship status of the user [single, married, divorced]'})@IsOptional({message: 'Relationship status is optional'})@IsString({message: 'Relationship status must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: '09999999999', description: 'The phone number of the user'})@IsOptional({message: 'Phone number is optional'})@IsString({message: 'Phone number must be a string'})@MaxLength(21, {message: 'Phone number is too long, must be at most maximum 20 characters!'})@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:129\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n    IsArray,\n    IsDate,\n    IsNotEmpty,\n    IsNumber,\n    IsOptional,\n    IsString,\n    Length,\n    Max,\n    MaxLength,\n    Min,\n    MinLength,\n    Validate,\n} from 'class-validator';\nimport { EMaritalStatus } from 'src/core/constants';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n    @ApiProperty({\n        type: String,\n        example: 'Hello ABC',\n        description: 'The full name of the user',\n    })\n    @IsString({\n        message: 'Full name must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Full name is required',\n    })\n    @Length(3, 45)\n    @MinLength(2, {\n        message: 'Full name is too short, must be at least 3 characters!',\n    })\n    @MaxLength(46, {\n        message: 'Name is too long, must be at most 45 characters!',\n    })\n    @Validate(fullNameValidator, {\n        message: 'Full name must be not begin with number!',\n    })\n    fullName: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: 'Avatar example 1 url',\n        description: 'The avatar of the user',\n    })\n    @IsOptional({\n        message: 'Avatar is optional',\n    })\n    @IsString({\n        message: 'Avatar must be a string',\n    })\n    avatar: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: 'Cover example 1 url',\n        description: 'The cover of the user',\n    })\n    @IsString({\n        message: 'Cover must be a string',\n    })\n    @IsOptional({\n        message: 'Cover is optional',\n    })\n    cover: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: 'Single',\n        description:\n            'The relationship status of the user [single, married, divorced]',\n    })\n    @IsOptional({\n        message: 'Relationship status is optional',\n    })\n    @IsString({\n        message: 'Relationship status must be a string',\n    })\n    marriageStatus: EMaritalStatus;\n\n    @ApiPropertyOptional({\n        type: Array,\n        example: ['Music', 'Sport', 'Travel'],\n        description: 'The hobbies of the user',\n    })\n    @IsArray({\n        message: 'Hobbies must be an array',\n    })\n    @IsOptional({\n        message: 'Hobbies is optional',\n    })\n    interests: string[];\n\n    @ApiPropertyOptional({\n        type: String,\n        example: '123, Address A, City B, Country C',\n        description: 'The address of the user',\n    })\n    @IsOptional({\n        message: 'Address is optional',\n    })\n    @IsString({\n        message: 'Address must be a string',\n    })\n    @MaxLength(101, {\n        message: 'Address is too long, must be at most 100 characters!',\n    })\n    address: string;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: '09999999999',\n        description: 'The phone number of the user',\n    })\n    @IsOptional({\n        message: 'Phone number is optional',\n    })\n    @IsString({\n        message: 'Phone number must be a string',\n    })\n    @MaxLength(21, {\n        message:\n            'Phone number is too long, must be at most maximum 20 characters!',\n    })\n    @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n    phone: string;\n\n    @ApiProperty({\n        example: '2021-07-02T05:01:03.938Z',\n        type: Date,\n        description: 'The date of birth of the user',\n    })\n    @Type(() => Date)\n    @IsDate({\n        message: 'Date of birth must be a date type',\n    })\n    birthdate: Date;\n\n    @ApiPropertyOptional({\n        type: Number,\n        example: 19,\n    })\n    @IsNumber()\n    @IsOptional({\n        message: 'Age is optional',\n    })\n    @Min(11, {\n        message: 'You must be at least 12 years old!',\n    })\n    @Max(101, {\n        message: 'You must be at most 100 years old!',\n    })\n    age: number;\n\n    @ApiPropertyOptional({\n        type: String,\n        example: 'This is bio of Hello ABC account',\n        description: 'The bio of the user',\n    })\n    @IsString({\n        message: 'Bio must be a string',\n    })\n    @IsOptional({\n        message: 'Bio is optional',\n    })\n    @MaxLength(151, {\n        message: 'Bio is too long, must be at most 150 characters!',\n    })\n    bio: string;\n\n    @ApiProperty({\n        type: Number,\n        description: '1: male, 2: female, 0: other',\n        example: 1,\n    })\n    @IsNumber()\n    @IsNotEmpty()\n    @Min(0)\n    @Max(2)\n    gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecaptchaDto.html":{"url":"classes/RecaptchaDto.html","title":"class - RecaptchaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecaptchaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/recaptcha.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                recaptcha\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        recaptcha\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Recapcha token', type: String, example: '03ANYolqtMS4nv1u0XNKtfZxSjthwjRLiuvXJABk18ZQSuc8IMkuZ_mvV7Tk6aOBULne66mRwPoe9ypFs6EPl76uxlYj4QQKYWWaBX-VxAn5GW4XpL7Ps4_2PdZB1kIibDgN2zyt9BJIkwisLRvzxZenCeWWg4T7lEns25P84d7N7s12DxIKdqi2XaaEMnAS1LK-ypqAN3E8Avyd_yCTvZqkOeu9J_exVR-UoewSdcm7T6cS84zfpwaw7Q3eH4hyo7tmHrhoiqtMh9cmFgGYFN4MQOHcSx0bhJ-LgDlkq3QzudG1AKL95fwu80YWKMgofbjD2afTdLeSmH9r2YU3bi05Nqj_682aenAiwy5Qe0j3CqZ234TJqxyhihPfi2tXVANByG_z53XetTS9Wo95NZQ_NtXgOz-V9slImnDmINg5jOFjIGpIQu-GkXJ824bP14bwaRPWXdXZTu59nVfQHE99Nz0MYGVg39s8m86cZarKZWGiZUMq2-nuk'})@IsString({message: 'Recapcha token must be a string'})@IsNotEmpty({message: 'Recapcha token must not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/request/recaptcha.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { LoginDto } from './sigin.dto';\n\nexport class RecaptchaDto extends LoginDto {\n    @ApiProperty({\n        description: 'Recapcha token',\n        type: String,\n        example:\n            '03ANYolqtMS4nv1u0XNKtfZxSjthwjRLiuvXJABk18ZQSuc8IMkuZ_mvV7Tk6aOBULne66mRwPoe9ypFs6EPl76uxlYj4QQKYWWaBX-VxAn5GW4XpL7Ps4_2PdZB1kIibDgN2zyt9BJIkwisLRvzxZenCeWWg4T7lEns25P84d7N7s12DxIKdqi2XaaEMnAS1LK-ypqAN3E8Avyd_yCTvZqkOeu9J_exVR-UoewSdcm7T6cS84zfpwaw7Q3eH4hyo7tmHrhoiqtMh9cmFgGYFN4MQOHcSx0bhJ-LgDlkq3QzudG1AKL95fwu80YWKMgofbjD2afTdLeSmH9r2YU3bi05Nqj_682aenAiwy5Qe0j3CqZ234TJqxyhihPfi2tXVANByG_z53XetTS9Wo95NZQ_NtXgOz-V9slImnDmINg5jOFjIGpIQu-GkXJ824bP14bwaRPWXdXZTu59nVfQHE99Nz0MYGVg39s8m86cZarKZWGiZUMq2-nuk',\n    })\n    @IsString({\n        message: 'Recapcha token must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Recapcha token must not be empty',\n    })\n    recaptcha: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                matchRoles\n                            \n                            \n                                parseJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchRoles\n                        \n                    \n                \n            \n            \n                \nmatchRoles(roles: EROLE[], role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n                                    \n                                                EROLE[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseJwt\n                        \n                    \n                \n            \n            \n                \nparseJwt(token)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AUTH_ERROR, EROLE } from '../constants';\nimport { ROLES_KEY } from './roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            ROLES_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (!requiredRoles) {\n            return true;\n        }\n\n        const request = context.switchToHttp().getRequest().secret;\n\n        const data = this.parseJwt(request);\n\n        if (\n            data.key !== process.env.ADMIN_KEY ||\n            data.id !== process.env.ADMIN_SUB\n        ) {\n            throw new UnauthorizedException(AUTH_ERROR.NOT_ADMIN);\n        }\n\n        return this.matchRoles(requiredRoles, data.role);\n    }\n\n    matchRoles(roles: EROLE[], role: string) {\n        console.log(`--> Matched role: ${roles.includes(role as EROLE)}`);\n        return roles.find((el) => el === role) ? true : false;\n    }\n\n    parseJwt(token) {\n        return JSON.parse(\n            Buffer.from(token.split('.')[1], 'base64').toString(),\n        );\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:4\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\nexport class RtGuard extends AuthGuard(ESTRATEGY.JWT_REFRESH) {\n    constructor() {\n        super();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.JWT_REFRESH,\n) {\n    constructor(\n        @Inject(ConfigService)\n        private config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: config.get('APP_SECRET'),\n            // secretOrKey: process.env.APP_SECRET,\n            passReqToCallback: true,\n        });\n    }\n\n    async validate(req: Request, payload: any) {\n        const refreshToken = req\n            .get('authorization')\n            .replace('Bearer', '')\n            .trim();\n        return {\n            ...payload,\n            refreshToken,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThrottlerBehindProxyGuard.html":{"url":"injectables/ThrottlerBehindProxyGuard.html","title":"injectable - ThrottlerBehindProxyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThrottlerBehindProxyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/security/throttle-proxy.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ThrottlerGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getTracker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        getTracker\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracker(req: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/core/security/throttle-proxy.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThrottlerGuard } from '@nestjs/throttler';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ThrottlerBehindProxyGuard extends ThrottlerGuard {\n    protected getTracker(req: Record): string {\n        return req.ips.length ? req.ips[0] : req.ip; // individualize IP extraction to meet your own needs\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(5000),\n            catchError((err) => {\n                if (err instanceof TimeoutError) {\n                    return throwError(() => new RequestTimeoutException());\n                }\n                return throwError(() => err);\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The new password of user', example: 'password123'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/request/password.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The old password of user', example: 'password123'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/request/password.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { UserEntity } from 'src/infrastructure/users/entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, ['email']) {\n    @ApiProperty({\n        type: String,\n        description: 'The old password of user',\n        example: 'password123',\n    })\n    @IsNotEmpty()\n    @IsString()\n    oldPassword: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'The new password of user',\n        example: 'password123',\n    })\n    @IsNotEmpty()\n    @IsString()\n    newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAvatarDto.html":{"url":"classes/UpdateUserAvatarDto.html","title":"class - UpdateUserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCoverDto.html":{"url":"classes/UpdateUserCoverDto.html","title":"class - UpdateUserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: '123, Address A, City B, Country C', description: 'The address of the user'})@IsOptional({message: 'Address is optional'})@IsString({message: 'Address must be a string'})@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:111\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: Number, example: 19})@IsNumber()@IsOptional({message: 'Age is optional'})@Min(11, {message: 'You must be at least 12 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:156\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Avatar example 1 url', description: 'The avatar of the user'})@IsOptional({message: 'Avatar is optional'})@IsString({message: 'Avatar must be a string'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:55\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'This is bio of Hello ABC account', description: 'The bio of the user'})@IsString({message: 'Bio must be a string'})@IsOptional({message: 'Bio is optional'})@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:172\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z', type: Date, description: 'The date of birth of the user'})@Type(undefined)@IsDate({message: 'Date of birth must be a date type'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:140\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Cover example 1 url', description: 'The cover of the user'})@IsString({message: 'Cover must be a string'})@IsOptional({message: 'Cover is optional'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC', description: 'The full name of the user'})@IsString({message: 'Full name must be a string'})@IsNotEmpty({message: 'Full name is required'})@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@IsNotEmpty()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:183\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined, example: undefined, description: 'The hobbies of the user'})@IsArray({message: 'Hobbies must be an array'})@IsOptional({message: 'Hobbies is optional'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:95\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EMaritalStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: 'Single', description: 'The relationship status of the user [single, married, divorced]'})@IsOptional({message: 'Relationship status is optional'})@IsString({message: 'Relationship status must be a string'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:82\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String, example: '09999999999', description: 'The phone number of the user'})@IsOptional({message: 'Phone number is optional'})@IsString({message: 'Phone number must be a string'})@MaxLength(21, {message: 'Phone number is too long, must be at most maximum 20 characters!'})@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:129\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})@IsNotEmpty({message: 'Email is required'})@IsEmail({discription: 'Email is invalid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User id', example: 'user-id-123-456-789', type: String})@IsNotEmpty({message: 'User id is required'})@IsString({message: 'User id must be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@IsNotEmpty({message: 'Password is required'})@IsString({message: 'Password must be a string'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123', description: 'The username of the user'})@IsString({message: 'Username must be a string'})@IsNotEmpty({message: 'Username is required'})@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:87\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n    IsAlphanumeric,\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    Length,\n    MaxLength,\n    MinLength,\n    Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n    @ApiProperty({\n        description: 'User id',\n        example: 'user-id-123-456-789',\n        type: String,\n    })\n    @IsNotEmpty({\n        message: 'User id is required',\n    })\n    @IsString({\n        message: 'User id must be a string',\n    })\n    id: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'This is a required property',\n        example: 'example@gmail.com',\n    })\n    @IsNotEmpty({\n        message: 'Email is required',\n    })\n    @IsEmail({\n        discription: 'Email is invalid',\n    })\n    email: string;\n\n    @ApiProperty({\n        type: String,\n        description: 'This is a required property',\n        example: 'password123',\n    })\n    @IsNotEmpty({\n        message: 'Password is required',\n    })\n    @IsString({\n        message: 'Password must be a string',\n    })\n    @Length(8, 21)\n    @MinLength(7, {\n        message: 'Password is too short, must be at least 8 characters!',\n    })\n    @MaxLength(21, {\n        message: 'Password is too long, must be at most 20 characters!',\n    })\n    @Validate(passwordValidator, {\n        message:\n            'Password must be at contain at least one number, one uppercase letter and one special character',\n    })\n    password: string;\n\n    @ApiProperty({\n        type: String,\n        example: 'username123',\n        description: 'The username of the user',\n    })\n    @IsString({\n        message: 'Username must be a string',\n    })\n    @IsNotEmpty({\n        message: 'Username is required',\n    })\n    @IsAlphanumeric()\n    @Length(3, 20)\n    @MinLength(2, {\n        message: 'Name is too short, must be at least 3 characters!',\n    })\n    @MaxLength(21, {\n        message: 'Name is too long, must be at most 20 characters!',\n    })\n    @Validate(usenameValidator, {\n        message: 'Username must be not begin with number!',\n    })\n    username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport { UsersService } from './users.service';\nimport {\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('users')\nexport class UsersController {\n    constructor(private usersService: UsersService) {\n        this.usersService = usersService;\n    }\n\n    @Public()\n    @Get('profile/:userIdOrUsername')\n    @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getPublicUserByIdOrUsername(\n        @Param('userIdOrUsername') userIdOrUsername: string,\n    ): Promise {\n        return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n    }\n\n    @Public()\n    @Get('find/:email')\n    @ApiOperation({ summary: 'Find user account by email' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getUserByEmail(\n        @Param('email') email: string,\n    ): Promise {\n        return this.usersService.getUserByEmail(email);\n    }\n\n    @Get()\n    @ApiBearerAuth()\n    @ApiOperation({\n        summary: 'Get user profile by user-id (all)',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @GetCurrentUserId() userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersProfile(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('profile/avatar')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersAvatar(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('profile/cover')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image by user id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersCover(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user profile by email & password' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUser(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: LoginDto,\n    ): Promise {\n        return this.usersService.deleteUser(userId, dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n    imports: [PrismaModule, AuthModule],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        // consumer\n        //   .apply(ExistedUserMiddleware)\n        //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotAcceptableException,\n    NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport {\n    IAllUsers,\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport {\n    AUTH_ERROR,\n    EORDER,\n    RESPONSES_MESSAGE,\n    SYSTEM_ERROR,\n    USER_ERROR,\n} from 'src/core/constants';\n\n@Injectable()\nexport class UsersService {\n    constructor(private prismaService: PrismaService) {}\n\n    async getAllUsers(dto: PaginationDto): Promise {\n        const total = await this.prismaService.user.count();\n        const users = await this.prismaService.user.findMany({\n            // skip: Number(dto.limit) * (Number(dto.current) - 1),\n            take: Number(dto.limit) || 10,\n            orderBy: {\n                id: dto.order as any,\n            },\n            select: {\n                id: true,\n                email: true,\n                username: true,\n                createdAt: true,\n            },\n        });\n        return {\n            total,\n            orderBy: dto.order || EORDER.ASC,\n            pageItems: users.length,\n            pageLimit: Number(dto.limit) || 10,\n            pageCurrent: Number(dto.current) || 1,\n            users: users,\n        };\n    }\n\n    async getPublicUserByIdOrUsername(\n        userIdOrUsername: string,\n    ): Promise {\n        const identify = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n            },\n        });\n        if (identify.length === 0)\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify[0];\n    }\n\n    async getUserByEmail(email: string): Promise {\n        const identify = await this.prismaService.user.findUnique({\n            where: {\n                email: email,\n            },\n            select: {\n                username: true,\n                email: true,\n            },\n        });\n\n        if (!identify) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify;\n    }\n\n    async getUserProfile(userId: string): Promise {\n        const profile = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n                updatedAt: true,\n            },\n        });\n\n        if (!profile) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return profile;\n    }\n\n    async updateUsersProfile(\n        userId: string,\n        dto: UpdateUserProfileDto,\n    ): Promise {\n        await this.prismaService.userProfile.upsert({\n            where: {\n                userId: userId,\n            },\n            create: {\n                ...dto,\n                userId: userId,\n            },\n            update: {\n                ...dto,\n            },\n        });\n        const newProfile = await this.getPublicUserByIdOrUsername(userId);\n        return newProfile;\n    }\n\n    async updateUsersAvatar(\n        userId: string,\n        dto: UpdateUserAvatarDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newAvatar = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        avatar: true,\n                    },\n                },\n            },\n        });\n        return newAvatar;\n    }\n\n    async updateUsersCover(\n        userId: string,\n        dto: UpdateUserCoverDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newCover = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        cover: true,\n                    },\n                },\n            },\n        });\n        return newCover;\n    }\n\n    async deleteUser(userId: string, dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                email: true,\n                password: true,\n            },\n        });\n\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const matchEmail: number = dto.password.localeCompare(user.password);\n        const matchPassword: boolean = await comparePassword(\n            dto.password,\n            user.password,\n        );\n\n        if (matchEmail === 0 || !matchPassword)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (!matchPassword)\n            throw new NotAcceptableException(AUTH_ERROR.PASSWORD_NOT_MATCH);\n\n        await this.prismaService.userProfile.delete({\n            where: {\n                userId: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n\n    async deleteUserById(userId: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n\n        if (!user) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n\n        await this.prismaService.user.delete({\n            where: {\n                id: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WsThrottlerGuard.html":{"url":"injectables/WsThrottlerGuard.html","title":"injectable - WsThrottlerGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WsThrottlerGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/security/throttle-websocket.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ThrottlerGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(context: ExecutionContext, limit: number, ttl: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/security/throttle-websocket.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ttl\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { ThrottlerException, ThrottlerGuard } from '@nestjs/throttler';\n\n@Injectable()\nexport class WsThrottlerGuard extends ThrottlerGuard {\n    async handleRequest(\n        context: ExecutionContext,\n        limit: number,\n        ttl: number,\n    ): Promise {\n        const client = context.switchToWs().getClient();\n        const ip = client.conn.remoteAddress;\n        const key: string = this.generateKey(context, ip);\n        const ttls = await this.storageService.getRecord(key);\n\n        if (ttls.length >= limit) {\n            throw new ThrottlerException('Many requests');\n        }\n\n        await this.storageService.addRecord(key, ttl);\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n1.5.0 - 2022-09-03\nAdded\n\nPosts endpoints module\nCreate comment for post\nUpdate README document\nGenerate Nest documentation\nCreate admin module\n\nSource code (.zip)\nSource code (.tar.gz)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/composables/count.ts\n            \n            function\n            useCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/useSticky.ts\n            \n            variable\n            useSticky\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/user.ts\n            \n            variable\n            useUserStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            interface\n            IApp\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            function\n            AppSetup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/str.ts\n            \n            function\n            capitalize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            function\n            ThemeManager\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            variable\n            availableThemes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            count\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            startAt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            class\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/axios.config.ts\n            \n            variable\n            axiosConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            class\n            ConversationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            class\n            FileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            class\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            class\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            Alert\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            AlertOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            useAlertsStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/constants/math.constant.ts\n            \n            variable\n            MATH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/filters/rpc-exception.filter.ts\n            \n            class\n            ExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/math/math.controller.ts\n            \n            controller\n            MathController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            class\n            NatsStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            interface\n            NatsSubscriber\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/custom.dto.ts\n            \n            class\n            CustomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/default.dto.ts\n            \n            class\n            DefaultDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/setup.config.ts\n            \n            function\n            setup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.config.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            AUTH_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            CONVERSATION_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            POST_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            RESPONSES_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            STATUS_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            SYSTEM_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            USER_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/model/http-exception-response.interface.ts\n            \n            interface\n            CustomHttpExceptionResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/model/http-exception-response.interface.ts\n            \n            interface\n            HttpExceptionResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/axios.ts\n            \n            variable\n            axiosRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/errors.interceptor.ts\n            \n            injectable\n            ErrorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/security/throttle-proxy.guard.ts\n            \n            injectable\n            ThrottlerBehindProxyGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/security/throttle-websocket.guard.ts\n            \n            injectable\n            WsThrottlerGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            randomInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/recaptcha.dto.ts\n            \n            class\n            RecaptchaDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/request/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/request/delete-message.dto.ts\n            \n            class\n            DeleteMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/entities/message.entity.ts\n            \n            class\n            MessageEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            controller\n            MessagesGateway\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.controller.ts\n            \n            controller\n            OauthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.service.ts\n            \n            injectable\n            OauthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            nodeExternals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @nestjs/throttler : ^3.0.0\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.3.1\n        \n            @types/passport-facebook : ^2.1.11\n        \n            @types/passport-jwt : ^3.0.6\n        \n            axios : ^0.27.2\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            csurf : ^1.11.0\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EMaritalStatus   (src/.../options.enum.ts)\n                        \n                        \n                            EORDER   (src/.../options.enum.ts)\n                        \n                        \n                            EROLE   (src/.../options.enum.ts)\n                        \n                        \n                            ESTRATEGY   (src/.../options.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/options.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EMaritalStatus\n                    \n                \n                        \n                            \n                                 SINGLE\n                            \n                        \n                        \n                            \n                                Value : single\n                            \n                        \n                        \n                            \n                                 MARRIED\n                            \n                        \n                        \n                            \n                                Value : married\n                            \n                        \n                        \n                            \n                                 DIVORCED\n                            \n                        \n                        \n                            \n                                Value : divorced\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EORDER\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : asc\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : desc\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ESTRATEGY\n                    \n                \n                        \n                            \n                                 JWT\n                            \n                        \n                        \n                            \n                                Value : jwt\n                            \n                        \n                        \n                            \n                                 JWT_REFRESH\n                            \n                        \n                        \n                            \n                                Value : jwt-refresh\n                            \n                        \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppSetup   (client/.../app.ts)\n                        \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                        \n                            capitalize   (client/.../str.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            randomInt   (src/.../random.ts)\n                        \n                        \n                            setup   (src/.../setup.config.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            ThemeManager   (client/.../theme.ts)\n                        \n                        \n                            useCount   (client/.../count.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/helpers/app.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppSetup\n                        \n                    \n                \n            \n            \n                \nAppSetup()\n                \n            \n\n\n\n\n        \n    \n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    client/helpers/str.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInt\n                        \n                    \n                \n            \n            \n                \nrandomInt(min: number, max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/configs/setup.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setup\n                        \n                    \n                \n            \n            \n                \nsetup(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ThemeManager\n                        \n                    \n                \n            \n            \n                \nThemeManager()\n                \n            \n\n\n\n\n        \n    \n    client/composables/count.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useCount\n                        \n                    \n                \n            \n            \n                \nuseCount()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\nProject documentation\n\nDatabase diagram\n\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAdmin\nAuth\n\n\n\n\n✅ Get list all users\n✅ Signup\n\n\n✅ Get user profile by id\n✅ Signin\n\n\n✅ Update user profile\n✅ Verify recaptcha\n\n\n✅ Delete user by user-id\n✅ Signout\n\n\n\n✅ Refresh access-token\n\n\n\n✅ Update password\n\n\n\n\n\n\nOAuth\nFiles\n\n\n\n\n✅ Google signin\n✅ Upload single file (avatar, cover)\n\n\n✅ Facebook signin\n✅ Upload multi files\n\n\n✅ Github signin\n✅ Upload array-field files (post, sample_image)\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅ Create a new post\n\n\n✅ Find user account by email\n✅ Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅ Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅ Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅ Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅ Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nDiagram database\n\nRelational diagram\n\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nCrypto-js a JavaScript library of crypto standards\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\nWebpack hot-reload auto recompile the entire project each time a change occurs\ngRPC support to run in any environment across data centers based on the concept of defining a service in terms of functions (methods) that called remotely\nSession store information about the user across multiple requests, which is particularly useful for MVC applications.\nVersioning allows you to have different versions of your controllers or individual routes running within the same application.\nCSRF (Cross-site request forgery) type of malicious exploit of a website where unauthorized commands are transmitted from a user that the web application trusts\nrate-limiting protect your application from brute-force attacks\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nPostgre x Heroku\nNest x Prisma\ngRPC for Microservice\n\n\n\nExample templates\n\nNest example\nNest awesome\nNest structure\nNest auth example\nNest social login\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nnpm run prisma:pull\n\n# generate the Prisma Client\nnpm run prisma:generate\n\n# Create env and migrate db\nnpm run prisma:migrate\n\n# Sync migrate change to db\nnpm run prisma:push# Open prisma studio\nnpm run prisma:studioRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MathModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OauthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    27 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    51 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.6.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github, chat, socket, passport, jwt, oauth2\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlertStyle   (client/.../AlertsStore.ts)\n                        \n                        \n                            CreateNewConversationDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteConversationAdminsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteOnePostDto   (client/.../posts.dto.ts)\n                        \n                        \n                            DeleteUserProfile   (client/.../users.dto.ts)\n                        \n                        \n                            GetAllConversationsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            GetAllPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicUsersDto   (client/.../users.dto.ts)\n                        \n                        \n                            GetUserProfileDto   (client/.../users.dto.ts)\n                        \n                        \n                            ITheme   (client/.../theme.ts)\n                        \n                        \n                            IThemeSettingOptions   (client/.../theme.ts)\n                        \n                        \n                            SignUpLocalDto   (client/.../auth.dto.ts)\n                        \n                        \n                            UpdateConversationMembersDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateConversationRoles   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateOneConversationByIdDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdatePostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            UploadAvatarDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadCoverDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            UploadPostsDto   (client/.../files.dto.ts)\n                        \n                        \n                            UpsertReactPostDto   (client/.../posts.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/stores/AlertsStore.ts\n    \n    \n        \n            \n                \n                    \n                    AlertStyle\n                \n            \n            \n                \n                        \"error\" | \"success\" | \"warning\" | \"info\" | \"none\"\n\n                \n            \n        \n    \n    client/dto/conversations.dto.ts\n    \n    \n        \n            \n                \n                    \n                    CreateNewConversationDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteConversationAdminsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllConversationsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationMembersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationRoles\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateOneConversationByIdDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/posts.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteOnePostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdatePostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpsertReactPostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/users.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteUserProfile\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicUsersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetUserProfileDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n    \n        \n            \n                \n                    \n                    ITheme\n                \n            \n            \n                \n                        \"dark\" | \"light\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IThemeSettingOptions\n                \n            \n            \n                \n                        \"dark\" | \"light\" | \"system\" | \"realtime\"\n\n                \n            \n        \n    \n    client/dto/auth.dto.ts\n    \n    \n        \n            \n                \n                    \n                    SignUpLocalDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/files.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UploadAvatarDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadCoverDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            availableThemes   (client/.../theme.ts)\n                        \n                        \n                            axiosConfig   (client/.../axios.config.ts)\n                        \n                        \n                            axiosRequest   (src/.../axios.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            CONVERSATION_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            count   (client/.../pageview.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            defaultOptions   (client/.../AlertsStore.ts)\n                        \n                        \n                            ENDPOINT   (client/.../auth.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../conversations.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../file.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../posts.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../user.service.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.config.ts)\n                        \n                        \n                            MATH_SERVICE   (src/.../math.constant.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            nodeExternals   (webpack-hmr.config.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            POST_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSES_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            startAt   (client/.../pageview.ts)\n                        \n                        \n                            STATUS_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            SYSTEM_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                               (webpack-hmr.config.ts)\n                        \n                        \n                            useAlertsStore   (client/.../AlertsStore.ts)\n                        \n                        \n                            USER_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            useSticky   (client/.../useSticky.ts)\n                        \n                        \n                            useUserStore   (client/.../user.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/status-message.enum.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SAME_PASSWORD: 'New password must be different from old password',\n    PASSWORD_NOT_MATCH: 'Password does not match',\n    RECAPTCHA_FAILED: 'Failed to verify recaptcha',\n    RECAPTCHA_NOT_PERSON: \"You're not person\",\n    NOT_ADMIN: 'You are not admin',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CONVERSATION_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Conversation not found',\n    NOT_CREATOR: 'You are not creator of this conversation',\n    NOT_MEMBER: 'You are not member of this conversation',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Post not found',\n    EMPTY: 'User not have post',\n    DUPLICATE: 'Post already exist',\n    NOT_AUTHOR: 'You are not author of this post',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSES_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CREATE_USER: 'The new account has been created.',\n    DELETE_USER: 'The user account has been deleted.',\n    DELETE_COMMENT: 'The comment has been deleted.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATUS_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SUCCESS: 'Success.',\n    ERROR: 'Errors.',\n    WARNING: 'Warning.',\n    INFO: 'Info.',\n    UNKNOWN: 'Unknown.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    FORBIDDEN: 'Access denied',\n    NOT_FOUND: 'Not found',\n    INTERNAL_SERVER_ERROR: 'Internal server error',\n    BAD_REQUEST: 'Bad request',\n    UNAUTHORIZED: 'Unauthorized',\n    CONFLICT: 'Conflict',\n    TOO_MANY_REQUESTS: 'Too many requests',\n    METHOD_NOT_ALLOWED: 'Method not allowed',\n    NOT_ACCEPTABLE: 'Provided fields are not acceptable',\n    REQUEST_TIMEOUT: 'Request timeout',\n    PAYLOAD_TOO_LARGE: 'Payload too large',\n    UNSUPPORTED_MEDIA_TYPE: 'Unsupported media type',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'User not found',\n    DUPLICATE: 'User already exist',\n}\n                    \n                \n\n\n        \n    \n\n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        availableThemes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { key: 'light', text: 'Light' },\n    { key: 'dark', text: 'Dark' },\n    { key: 'system', text: 'System' },\n    { key: 'realtime', text: 'Realtime' },\n]\n                    \n                \n\n\n        \n    \n\n    client/services/axios.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                \n                    \n                        Default value : axios.create({\n    baseURL: import.meta.env.VITE_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n    },\n}) as AxiosInstance\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/axios.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    method: string,\n    url: string,\n    headers?: any,\n) => {\n    return await axios({\n        method: method,\n        url: url,\n        headers: headers,\n    }).then(async (response: any) => await response.data);\n}\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n    let option: any;\n\n    if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n        option = { origin: true };\n    } else {\n        option = { origin: false };\n    }\n    callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    client/server/api/pageview.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startAt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Date.now()\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    client/stores/AlertsStore.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        useAlertsStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n})\n                    \n                \n\n\n        \n    \n\n    client/services/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/auth'\n                    \n                \n\n\n        \n    \n\n    client/services/conversations.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/conversations'\n                    \n                \n\n\n        \n    \n\n    client/services/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/files'\n                    \n                \n\n\n        \n    \n\n    client/services/posts.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/posts'\n                    \n                \n\n\n        \n    \n\n    client/services/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/users'\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n    const config: ConfigService = app.get(ConfigService);\n\n    const swaggerConfig = new DocumentBuilder()\n        .setTitle('Teneno API')\n        .setDescription(\n            `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n        )\n        .setContact(\n            'Thuong Truong',\n            'https://github.com/thuongtruong1009',\n            'ititiu19228@student.hcmiu.edu.vn',\n        )\n        .setLicense(\n            'License - MIT',\n            'https://github.com/thuongtruong1009/teneno-api/blob/main/LICENSE',\n        )\n        .addServer(config.get('BASE_URL'))\n        .addServer(config.get('HOST_URL'))\n        .setVersion('1.6.0')\n        // .addTag('cats', 'default description')\n        .addBearerAuth({\n            type: 'http',\n            scheme: 'Bearer',\n            bearerFormat: 'JWT',\n            description: 'Paste a valid access token here.',\n            in: 'Header',\n        })\n        .addOAuth2({\n            type: 'oauth2',\n            description: 'Login with Google account',\n            flows: {\n                implicit: {\n                    authorizationUrl: config.get('GOOGLE_CALLBACK_URL'),\n                    scopes: {\n                        'user:write': 'create your account',\n                        'user:read': 'read your account',\n                    },\n                },\n            },\n        })\n        .addCookieAuth('optional-session-id')\n        .addBasicAuth()\n        .addSecurity('api_key', {\n            type: 'apiKey',\n            name: 'api_key',\n            in: 'header',\n        })\n        .build();\n\n    const options: ISwaggerOptions = {\n        operationIdFactory: (controllerKey: string, methodKey: string) =>\n            methodKey,\n    };\n    const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n    SwaggerModule.setup('api', app, document, {\n        swaggerOptions: {\n            persistAuthorization: true,\n        },\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/abstraction/microservices/constants/math.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MATH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MATH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    webpack-hmr.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodeExternals\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('webpack-node-externals')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('run-script-webpack-plugin')\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: EROLE[]) =>\n    SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    client/composables/useSticky.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useSticky\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (el: HTMLElement, offset: number) => {\n    const onScroll = () => {\n        const scrollTop =\n            window.pageYOffset || document.documentElement.scrollTop;\n        if (scrollTop > offset) el.classList.add('sticky');\n        else el.classList.remove('sticky');\n    };\n\n    // lifecycle hooks\n    window.addEventListener('scroll', onScroll);\n    onUnmounted(() => {\n        window.removeEventListener('scroll', onScroll);\n    });\n\n    return {\n        onScroll,\n    };\n}\n                    \n                \n\n\n        \n    \n\n    client/composables/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useUserStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('user', () => {\n    /**\n     * Current named of the user.\n     */\n    const savedName = ref('');\n    const previousNames = ref(new Set());\n\n    const usedNames = computed(() => Array.from(previousNames.value));\n    const otherNames = computed(() =>\n        usedNames.value.filter((name) => name !== savedName.value),\n    );\n\n    /**\n     * Changes the current name of the user and saves the one that was used\n     * before.\n     *\n     * @param name - new name to set\n     */\n    function setNewName(name: string) {\n        if (savedName.value) previousNames.value.add(savedName.value);\n\n        savedName.value = name;\n    }\n\n    return {\n        setNewName,\n        otherNames,\n        savedName,\n    };\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
