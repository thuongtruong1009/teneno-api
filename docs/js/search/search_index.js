var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.193,1,2.339]],["body/classes/Admin.html",[0,0.303,1,4.257,2,1.478,3,0.153,4,0.153,5,0.137,6,6.105,7,0.183,8,0.009,9,0.008,10,0.008]],["title/controllers/AdminController.html",[11,1.53,12,3.292]],["body/controllers/AdminController.html",[0,0.239,1,2.888,3,0.12,4,0.12,5,0.108,7,0.144,8,0.009,9,0.007,10,0.007,11,1.889,12,5.178,13,1.94,14,4.803,15,2.598,16,0.249,17,0.848,18,4.362,19,3.984,20,4.362,21,3.984,22,4.162,23,4.162,24,4.162,25,3.984,26,2.888,27,3.984,28,4.362,29,1.34,30,3.814,31,2.687,32,2.226,33,4.065,34,4.803,35,4.803,36,2.694,37,3.425,38,3.425,39,3.268,40,0.545,41,2.598,42,3.268,43,3.268,44,3.128,45,3.128,46,3.128,47,3.128,48,4.803,49,4.803]],["title/modules/AdminModule.html",[50,1.417,51,3.088]],["body/modules/AdminModule.html",[0,0.246,1,2.973,3,0.124,4,0.124,5,0.111,7,0.149,8,0.009,9,0.007,10,0.007,12,5.775,13,2.516,16,0.26,17,0.873,50,2.27,51,6.147,52,2.507,53,3.37,54,4.943,55,4.943,56,4.943,57,4.91,58,5.986,59,3.747,60,2.973,61,2.766,62,5.603,63,3.486,64,5.775,65,4.058,66,5.603,67,5.603,68,4.184,69,4.943]],["title/injectables/AdminService.html",[58,3.088,70,0.704]],["body/injectables/AdminService.html",[0,0.276,3,0.139,4,0.139,5,0.125,7,0.167,8,0.009,9,0.008,10,0.008,16,0.235,17,0.979,40,0.629,58,5.309,70,1.211,71,2.02,72,5.544,73,2.569,74,4.16,75,4.493,76,0.837,77,6.283,78,1.135,79,0.837,80,1.029,81,5.056,82,2.569]],["title/controllers/AdminUsersController.html",[11,1.53,64,3.292]],["body/controllers/AdminUsersController.html",[0,0.115,1,1.39,3,0.058,4,0.058,5,0.052,7,0.069,8,0.009,9,0.004,10,0.004,11,0.909,13,0.934,15,1.25,16,0.229,17,0.408,18,3.929,19,2.363,20,2.587,21,2.363,22,2.468,23,2.468,24,2.468,25,2.363,26,1.39,27,2.363,28,2.587,29,0.645,30,1.835,31,1.293,32,1.071,33,1.957,34,2.312,35,2.312,36,2.482,37,1.648,38,1.648,39,1.573,40,0.693,41,1.25,42,1.573,43,1.573,44,1.506,45,1.506,46,1.506,47,1.506,48,2.312,49,2.312,64,3.071,76,0.883,78,1.197,79,0.883,80,1.085,82,1.071,83,6.114,84,2.312,85,0.287,86,0.725,87,2.546,88,3.628,89,3.628,90,4.084,91,4.24,92,4.084,93,4.084,94,2.312,95,1.615,96,2.633,97,2.62,98,3.555,99,3.103,100,3.628,101,2.98,102,2.62,103,3.001,104,1.14,105,3.199,106,2.312,107,4.027,108,2.62,109,2.468,110,2.98,111,2.62,112,2.62,113,4.107,114,2.108,115,2.62,116,3.36,117,2.62,118,2.62,119,3.45,120,2.62,121,2.62,122,2.88,123,2.62,124,2.108,125,3.45,126,2.62,127,1.84,128,4.112,129,2.62,130,2.108,131,3.45,132,2.62,133,2.363,134,2.62,135,4.027,136,1.506,137,1.445,138,3.555,139,1.957,140,1.957,141,1.957,142,4.16,143,3.822,144,2.312,145,1.445,146,1.957,147,2.62,148,2.312,149,2.108,150,2.108,151,2.108,152,2.108,153,2.62,154,3.046,155,2.312,156,1.506,157,2.62,158,3.655,159,1.573,160,3.808,161,3.749,162,2.62,163,1.416,164,2.62,165,2.62,166,1.589,167,3.628,168,2.312,169,2.62,170,2.312,171,2.62,172,2.88,173,2.312,174,2.62,175,2.312,176,2.62,177,2.62,178,2.62]],["title/interfaces/Alert.html",[179,2.036,180,3.088]],["body/interfaces/Alert.html",[3,0.158,4,0.09,5,0.081,7,0.19,8,0.009,9,0.006,10,0.006,16,0.177,40,0.66,41,2.726,85,0.722,95,1.708,122,4.002,166,3.096,179,2.638,180,4.621,181,2.342,182,2.855,183,1.475,184,5.727,185,2.336,186,3.715,187,3.596,188,3.596,189,3.596,190,3.28,191,4.367,192,4.926,193,4.266,194,3.28,195,4.597,196,2.726,197,4.597,198,4.266,199,1.882,200,3.373,201,5.338,202,1.983,203,4.266,204,2.564,205,1.62,206,3.28,207,3.044,208,3.28,209,3.28,210,3.044,211,3.28,212,3.28,213,6.413,214,3.28,215,4.597,216,3.28,217,3.28,218,3.28,219,5.752,220,3.044,221,3.28,222,3.28,223,3.28,224,3.28,225,3.28,226,2.726,227,3.28,228,5.04,229,3.596]],["title/interfaces/AlertOptions.html",[179,2.036,184,3.088]],["body/interfaces/AlertOptions.html",[3,0.155,4,0.086,5,0.077,7,0.186,8,0.009,9,0.006,10,0.006,16,0.172,40,0.74,41,2.639,80,1.323,85,0.705,95,1.608,122,3.875,166,2.707,179,2.554,180,3.875,181,2.237,182,2.728,183,1.005,184,5.661,185,2.262,186,2.731,187,3.435,188,3.435,189,3.435,190,3.133,191,4.259,192,5.525,193,4.131,194,3.133,195,5.954,196,3.668,197,5.954,198,5.525,199,2.971,200,3.29,201,5.905,202,1.943,203,4.131,204,2.449,205,1.547,206,3.133,207,2.908,208,3.133,209,3.133,210,2.908,211,3.133,212,3.133,213,6.36,214,3.133,215,4.451,216,3.133,217,3.133,218,3.133,219,5.637,220,2.908,221,3.133,222,3.133,223,3.133,224,3.133,225,3.133,226,2.639,227,3.133,228,4.88,229,3.435]],["title/classes/AllExceptionsFilter.html",[0,0.193,230,3.547]],["body/classes/AllExceptionsFilter.html",[0,0.162,2,0.792,3,0.082,4,0.082,5,0.074,7,0.098,8,0.009,9,0.005,10,0.005,16,0.194,17,0.577,40,0.685,41,4.063,73,1.515,76,0.913,78,1.237,79,0.913,80,1.121,82,1.515,85,0.406,86,0.941,104,1.077,137,2.044,186,3.583,202,1.736,230,4.296,231,3.269,232,2.063,233,4.384,234,5.511,235,4.17,236,5.338,237,4.384,238,6.258,239,3.269,240,4.11,241,3.705,242,3.534,243,4.296,244,7.445,245,5.521,246,6.042,247,3.705,248,6.72,249,4.538,250,5.338,251,3.705,252,3.705,253,3.937,254,4.376,255,3.705,256,5.338,257,3.705,258,3.705,259,1.966,260,3.269,261,3.269,262,3.269,263,3.269,264,3.705,265,3.705,266,4.71,267,3.534,268,6.042,269,3.705,270,3.705,271,3.705,272,6.258,273,6.042,274,3.705,275,3.705,276,3.269,277,3.269,278,1.432,279,3.269,280,3.705,281,2.331,282,3.269,283,3.705]],["title/controllers/AppController.html",[11,1.53,284,3.292]],["body/controllers/AppController.html",[0,0.196,3,0.099,4,0.099,5,0.089,7,0.118,8,0.009,9,0.006,10,0.006,11,2.112,13,1.591,16,0.249,17,0.696,26,2.37,29,1.1,36,2.273,40,0.447,76,0.922,78,0.807,79,0.595,80,0.731,82,1.826,85,0.489,86,1.073,95,1.211,96,2.418,104,1.191,109,3.653,110,2.904,136,2.566,137,2.463,143,3.356,156,2.566,158,2.463,159,3.653,160,2.566,163,1.479,254,2.37,267,4.029,281,2.809,284,4.544,285,3.94,286,7.433,287,7.433,288,5.369,289,4.466,290,4.466,291,4.466,292,3.94,293,5.57,294,4.466,295,4.263,296,4.466,297,5.369,298,4.544,299,4.466,300,6.085,301,4.263,302,4.466,303,4.583,304,3.594,305,5.369,306,6.922,307,5.369,308,2.957,309,4.583,310,3.94,311,3.335,312,4.466,313,4.466,314,3.94,315,4.466,316,4.466,317,3.129,318,4.466,319,6.085,320,5.369,321,5.369,322,3.94,323,4.466,324,3.94,325,5.369,326,4.466,327,4.466]],["title/modules/AppModule.html",[50,1.417,328,3.292]],["body/modules/AppModule.html",[0,0.123,3,0.062,4,0.062,5,0.056,7,0.074,8,0.009,9,0.004,10,0.005,13,1.541,16,0.268,17,0.435,40,0.28,50,1.39,51,4.769,52,1.251,53,2.064,57,3.912,59,2.295,60,1.484,61,1.38,63,2.135,65,3.04,76,0.576,78,0.505,79,0.373,80,0.458,86,0.493,99,1.671,104,0.481,110,2.064,159,2.596,205,1.719,232,1.08,237,1.959,249,2.596,253,2.135,278,1.08,281,3.328,284,3.95,308,1.851,309,4.507,310,2.467,328,6.564,329,2.467,330,2.467,331,2.467,332,4.283,333,4.769,334,4.769,335,4.769,336,4.769,337,4.769,338,4.769,339,4.769,340,3.912,341,2.796,342,2.467,343,3.816,344,5.252,345,2.796,346,2.467,347,2.796,348,4.325,349,5.953,350,1.959,351,2.796,352,2.796,353,3.23,354,2.796,355,2.25,356,2.796,357,2.796,358,3.481,359,3.502,360,1.851,361,4.325,362,2.25,363,2.796,364,2.088,365,2.796,366,2.796,367,2.796,368,2.796,369,2.796,370,2.088,371,2.796,372,2.796,373,2.467,374,2.796,375,3.23,376,2.796,377,2.796,378,2.796,379,3.481,380,2.796,381,2.796,382,1.959,383,2.467,384,1.851,385,2.467,386,2.796,387,2.25,388,2.796,389,2.796,390,2.796,391,2.796,392,2.796,393,2.596,394,4.325,395,4.325,396,3.816,397,2.796,398,2.796,399,2.796,400,2.796,401,2.796,402,2.796,403,2.796,404,2.796,405,2.796,406,2.796,407,2.467,408,4.325,409,3.816,410,2.796,411,2.796,412,2.796,413,4.325,414,2.796,415,2.796,416,2.796,417,2.796,418,4.325,419,2.088,420,4.667,421,4.667,422,2.467,423,2.796,424,2.796,425,2.25,426,2.796,427,2.796,428,3.95,429,3.816,430,2.796,431,2.796,432,3.816,433,3.23,434,4.325,435,3.816,436,2.796,437,4.325,438,2.796,439,2.796,440,1.542]],["title/injectables/AppService.html",[70,0.704,309,2.918]],["body/injectables/AppService.html",[0,0.233,3,0.117,4,0.117,5,0.106,7,0.141,8,0.009,9,0.007,10,0.007,16,0.234,17,0.829,40,0.684,70,1.092,71,1.711,73,2.176,76,0.911,78,1.235,79,0.911,80,1.119,85,0.583,86,1.205,104,0.916,163,1.137,186,2.627,226,3.261,235,2.936,239,4.696,240,4.782,242,4.998,288,6.03,292,6.03,293,6.075,295,3.729,297,4.696,303,3.524,309,4.525,441,4.696,442,5.322,443,5.322,444,4.696,445,5.322,446,5.322,447,5.322,448,5.322,449,5.322,450,5.322,451,6.03,452,7.966,453,5.322,454,5.322,455,4.696,456,5.322,457,3.975]],["title/injectables/AtGuard.html",[70,0.704,353,3.292]],["body/injectables/AtGuard.html",[0,0.21,3,0.169,4,0.106,5,0.095,7,0.127,8,0.009,9,0.006,10,0.006,16,0.238,17,0.746,32,1.959,40,0.638,70,1.019,71,1.54,73,1.959,76,0.956,78,1.296,79,0.956,80,1.175,82,1.959,85,0.525,86,1.125,99,3.078,104,1.098,110,3.423,163,1.533,183,1.237,202,1.329,205,2.535,278,1.851,350,3.356,353,4.764,425,6.592,458,4.226,459,5.628,460,5.628,461,4.226,462,4.79,463,5.628,464,4.058,465,4.79,466,2.541,467,6.379,468,4.79,469,5.772,470,6.379,471,3.854,472,2.752,473,3.013,474,4.79,475,3.013,476,4.79,477,3.854,478,3.577,479,4.79,480,4.79,481,6.379,482,4.226,483,4.79,484,4.226,485,4.226,486,4.79,487,2.875]],["title/injectables/AtStrategy.html",[70,0.704,488,3.088]],["body/injectables/AtStrategy.html",[0,0.227,3,0.114,4,0.114,5,0.103,7,0.137,8,0.009,9,0.007,10,0.007,16,0.26,17,0.807,32,2.118,40,0.672,70,1.073,71,1.665,73,2.118,76,0.895,78,1.213,79,0.895,80,1.1,82,2.118,85,0.567,86,1.184,104,0.891,163,1.106,183,1.337,200,3.434,359,5.22,360,3.429,384,4.446,472,2.976,473,3.258,475,3.258,488,4.704,489,4.569,490,3.434,491,4.569,492,5.178,493,6.715,494,8.37,495,5.178,496,4.704,497,3.867,498,4.569,499,3.867,500,3.258,501,3.258,502,3.258,503,5.178,504,5.178,505,4.569,506,4.569,507,5.924,508,4.569,509,4.569,510,5.178,511,4.569]],["title/controllers/AuthController.html",[11,1.53,512,3.292]],["body/controllers/AuthController.html",[0,0.128,3,0.064,4,0.064,5,0.058,7,0.077,8,0.009,9,0.004,10,0.004,11,1.013,13,1.04,15,1.393,16,0.231,17,0.455,18,3.832,19,2.57,20,2.813,21,2.57,22,2.684,23,2.684,24,2.684,25,2.57,26,1.549,27,2.57,28,2.813,29,0.719,31,1.441,32,1.194,36,2.536,37,1.837,38,1.837,39,1.753,40,0.744,41,1.393,42,1.753,43,1.753,44,1.678,45,1.678,46,1.678,47,1.678,76,0.875,78,1.186,79,0.875,80,1.075,82,1.194,85,0.32,86,0.789,87,2.536,91,2.57,95,1.517,96,2.753,99,3.007,101,1.393,103,2.42,104,1.13,105,3.182,110,2.593,113,3.542,135,2.045,136,1.678,137,1.61,140,2.18,142,4.158,143,3.82,145,1.61,156,1.678,158,3.622,160,3.5,161,3.941,163,1.403,278,1.728,304,2.35,433,2.18,502,1.837,512,3.34,513,2.576,514,6.111,515,5.051,516,3.945,517,3.945,518,3.945,519,2.576,520,2.92,521,4.795,522,4.773,523,2.92,524,2.576,525,2.92,526,2.92,527,4.472,528,2.92,529,2.576,530,3.832,531,2.92,532,3.34,533,2.92,534,2.576,535,4.586,536,2.92,537,2.134,538,2.92,539,2.576,540,2.92,541,2.576,542,4.267,543,2.92,544,2.373,545,2.92,546,1.678,547,3.34,548,3.832,549,2.576,550,2.35,551,2.961,552,2.18,553,2.576,554,1.933,555,2.576,556,1.933,557,2.92,558,2.92,559,2.92,560,2.92,561,2.18,562,2.576,563,2.92,564,2.92,565,2.92,566,2.92,567,2.92,568,2.92,569,2.92,570,2.92,571,2.92,572,2.92,573,2.92,574,2.92,575,2.92,576,2.92,577,2.92]],["title/modules/AuthModule.html",[50,1.417,332,2.773]],["body/modules/AuthModule.html",[0,0.204,3,0.103,4,0.103,5,0.092,7,0.123,8,0.009,9,0.006,10,0.006,13,2.228,16,0.258,17,0.724,50,2.01,52,2.081,53,2.984,59,3.318,60,2.467,61,2.296,63,3.087,65,4.061,87,1.422,205,1.848,303,3.079,332,5.556,340,4.667,358,3.742,359,4.679,382,3.258,383,4.103,472,2.672,488,5.69,512,5.277,548,5.522,549,4.103,578,4.103,579,4.65,580,4.103,581,4.103,582,5.69,583,4.65,584,4.381,585,4.103,586,4.65,587,4.65,588,6.254,589,3.742,590,4.65,591,4.65,592,4.65,593,4.103,594,4.65,595,4.65,596,4.103,597,4.65]],["title/injectables/AuthService.html",[70,0.704,548,2.773]],["body/injectables/AuthService.html",[0,0.104,3,0.053,4,0.053,5,0.047,7,0.063,8,0.009,9,0.004,10,0.004,16,0.215,17,0.371,31,1.176,32,0.974,40,0.694,70,0.609,71,0.766,73,1.559,75,3.415,76,0.925,78,1.254,79,0.925,80,1.136,85,0.261,86,0.672,87,2.554,95,1.661,99,2.303,103,2.844,104,1.149,105,3.121,113,2.438,163,1.274,166,1.842,202,2.206,235,2.629,278,2.58,359,4.21,360,1.577,382,1.669,487,4.008,502,1.499,514,3.364,515,4.678,516,3.364,517,3.364,518,3.364,519,3.364,524,3.364,529,3.364,530,3.428,534,3.364,535,3.608,541,3.364,542,3.818,544,2.023,548,2.399,554,1.577,555,2.102,589,1.917,593,3.364,596,3.364,598,2.102,599,3.813,600,3.813,601,2.382,602,6.677,603,2.382,604,3.813,605,4.05,606,2.382,607,2.382,608,2.382,609,2.382,610,2.382,611,2.382,612,3.813,613,5.961,614,2.382,615,2.382,616,1.917,617,1.779,618,1.779,619,1.669,620,4.07,621,1.917,622,2.102,623,2.102,624,4.029,625,2.382,626,3.813,627,3.813,628,3.813,629,2.382,630,2.382,631,1.917,632,4.385,633,2.382,634,3.364,635,2.69,636,4.767,637,2.382,638,2.102,639,1.917,640,5.961,641,2.191,642,3.813,643,2.382,644,1.314,645,2.382,646,2.382,647,2.382,648,6.121,649,2.382,650,2.382,651,2.382,652,5.449,653,3.56,654,5.259,655,5.961,656,2.102,657,3.364,658,4.767,659,4.767,660,4.767,661,2.382,662,2.399,663,3.813,664,3.813,665,3.813,666,2.382,667,2.382,668,2.382]],["title/classes/CommentEntity.html",[0,0.193,669,2.918]],["body/classes/CommentEntity.html",[0,0.293,2,1.098,3,0.113,4,0.113,5,0.102,7,0.136,8,0.009,9,0.007,10,0.007,16,0.16,40,0.836,76,1.113,85,0.563,95,1.715,96,3.319,103,2.95,166,2.868,185,2.731,199,3.085,669,4.422,670,4.532,671,4.265,672,6.549,673,7.423,674,3.664,675,5.137,676,5.137,677,5.973,678,5.137,679,4.532,680,5.137,681,5.137,682,5.137,683,5.137,684,5.137,685,4.68,686,6.679,687,5.35,688,5.137,689,4.891,690,2.298]],["title/classes/ConversationEntity.html",[0,0.193,691,2.254]],["body/classes/ConversationEntity.html",[0,0.188,2,0.591,3,0.061,4,0.061,5,0.055,7,0.073,8,0.009,9,0.004,10,0.004,16,0.133,29,0.681,36,2.601,40,0.87,76,1.021,79,1.04,80,0.702,85,0.303,91,2.463,95,1.716,96,3.046,99,2.029,101,2.506,103,2.087,109,3.551,127,3.163,166,3.016,185,1.753,186,3.345,200,2.192,204,2.697,205,1.098,226,2.823,393,5.104,537,2.045,662,2.697,685,3.679,687,4.029,689,3.844,690,1.237,691,2.192,692,2.438,693,4.029,694,3.679,695,3.899,696,3.68,697,3.922,698,7.305,699,5.957,700,2.764,701,5.919,702,7.167,703,6.993,704,2.764,705,5.37,706,4.761,707,5.916,708,5.916,709,2.764,710,2.764,711,2.764,712,2.764,713,3.782,714,2.764,715,2.764,716,4.419,717,5.251,718,4.782,719,2.764,720,2.764,721,2.764,722,2.224,723,2.764,724,2.764,725,2.764,726,4.286,727,2.764,728,5.251,729,2.764,730,2.764,731,2.064,732,2.764,733,2.764,734,5.37,735,4.286,736,3.449,737,2.224,738,2.224,739,2.224,740,2.764,741,2.764,742,2.764,743,2.764,744,2.764,745,2.764,746,2.764,747,2.697,748,2.764,749,2.764]],["title/controllers/ConversationsController.html",[11,1.53,750,3.292]],["body/controllers/ConversationsController.html",[0,0.094,1,1.855,3,0.047,4,0.047,5,0.043,7,0.057,8,0.009,9,0.004,10,0.004,11,0.743,13,0.762,15,1.021,16,0.198,17,0.333,18,2.199,19,2.009,20,2.199,21,2.009,22,2.098,23,2.098,24,2.098,25,2.009,26,1.135,27,2.009,28,2.199,29,0.527,31,1.056,32,0.875,36,2.507,37,1.346,38,1.346,39,1.284,40,0.741,41,1.021,42,1.284,43,1.284,44,1.23,45,1.23,46,1.23,47,1.23,76,0.888,78,1.204,79,0.888,80,1.091,82,0.875,85,0.234,86,0.616,87,2.507,91,2.941,95,1.631,96,2.648,98,3.952,99,2.958,101,3.048,103,1.389,104,1.147,109,2.098,113,4.327,135,4.475,136,1.23,137,1.18,138,1.499,139,1.598,142,4.139,143,3.803,145,1.18,146,1.598,156,1.23,158,3.675,160,3.671,161,4,163,1.424,166,2.339,205,1.389,278,1.978,537,1.668,546,2.009,547,2.611,551,1.417,561,1.598,624,1.021,685,2.449,691,3.267,695,3.339,696,2.009,699,5.779,750,2.611,751,1.888,752,3.567,753,3.084,754,3.911,755,3.911,756,3.084,757,3.911,758,3.911,759,3.911,760,3.911,761,1.888,762,2.941,763,2.14,764,6.054,765,2.14,766,3.084,767,2.14,768,4.019,769,1.888,770,3.585,771,2.14,772,4.668,773,2.14,774,1.888,775,3.072,776,2.14,777,5.191,778,2.14,779,4.83,780,1.888,781,2.14,782,3.496,783,2.14,784,1.888,785,3.388,786,2.14,787,4.515,788,2.14,789,1.888,790,3.072,791,2.14,792,2.14,793,1.888,794,3.072,795,2.14,796,2.14,797,1.888,798,3.072,799,2.14,800,3.084,801,3.084,802,3.084,803,2.14,804,3.388,805,1.888,806,1.499,807,1.23,808,2.14,809,2.14,810,2.14,811,2.14,812,2.14,813,2.14,814,2.14,815,2.14,816,2.14,817,4.432,818,2.14,819,2.14,820,2.14,821,2.14,822,2.14,823,2.14,824,4.432,825,2.14,826,2.14,827,2.14,828,2.14,829,2.14]],["title/modules/ConversationsModule.html",[50,1.417,333,3.088]],["body/modules/ConversationsModule.html",[0,0.242,3,0.122,4,0.122,5,0.11,7,0.146,8,0.009,9,0.007,10,0.007,13,2.493,16,0.259,17,0.86,50,2.249,52,2.471,53,3.339,57,4.892,59,3.713,60,2.93,61,2.726,63,3.454,65,4.021,68,4.124,333,6.234,340,4.892,355,4.444,750,5.736,804,5.636,805,4.872,830,4.872,831,4.872,832,5.522,833,5.522,834,5.522]],["title/injectables/ConversationsService.html",[70,0.704,804,2.918]],["body/injectables/ConversationsService.html",[0,0.101,1,1.976,3,0.051,4,0.051,5,0.046,7,0.061,8,0.009,9,0.004,10,0.004,16,0.182,17,0.36,32,0.946,36,1.139,40,0.728,70,0.595,71,0.744,73,0.946,74,1.531,75,3.209,76,0.944,78,1.28,79,1.009,80,1.16,81,1.861,82,0.946,85,0.253,86,0.657,87,2.541,95,1.653,103,2.334,104,1.181,109,3.961,113,4.222,127,2.091,163,1.588,166,3.143,190,1.861,191,3.095,200,1.183,202,2.018,205,2.622,226,1.104,624,3.47,635,2.899,644,2.054,674,1.142,693,3.695,694,1.62,695,3.239,696,3.606,697,1.727,753,3.285,754,3.285,755,4.124,756,3.285,757,3.285,758,3.285,759,4.124,760,4.124,761,3.285,762,3.079,768,4.151,769,3.285,770,3.753,774,2.041,775,3.216,779,5.208,780,3.285,784,3.285,785,3.547,789,3.285,790,3.216,793,2.041,794,3.216,797,2.041,798,3.216,804,2.465,835,2.041,836,2.313,837,2.313,838,2.313,839,2.313,840,2.313,841,2.313,842,2.313,843,2.313,844,2.313,845,1.861,846,3.724,847,2.313,848,3.724,849,3.285,850,5.358,851,3.724,852,4.674,853,5.358,854,2.609,855,1.62,856,2.041,857,1.861,858,2.041,859,1.727,860,5.873,861,6.251,862,5.358,863,2.313,864,2.041,865,2.313,866,2.313,867,3.285,868,3.724,869,2.313]],["title/classes/CreateCommentDto.html",[0,0.193,870,3.088]],["body/classes/CreateCommentDto.html",[0,0.286,2,1.393,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.605,183,1.683,669,4.316,671,3.746,674,3.218,870,5.428,871,5.751,872,4.868,873,2.666,874,5.246,875,5.246]],["title/classes/CreateConversationDto.html",[0,0.193,762,2.533]],["body/classes/CreateConversationDto.html",[0,0.287,2,1.398,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.611,166,2.528,183,1.689,691,3.345,762,4.461,807,3.759,876,5.771,877,3.759,878,5.264,879,6.541]],["title/classes/CreateMessageDto.html",[0,0.193,880,3.088]],["body/classes/CreateMessageDto.html",[0,0.287,2,1.398,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.611,166,2.528,183,1.689,878,5.264,880,5.439,881,5.771,882,5.264,883,7.763,884,4.582,885,5.771,886,5.771]],["title/classes/CreatePostDto.html",[0,0.193,887,3.088]],["body/classes/CreatePostDto.html",[0,0.285,2,1.388,3,0.143,4,0.143,5,0.129,7,0.172,8,0.009,9,0.008,10,0.008,16,0.24,29,1.6,36,1.987,183,1.678,873,2.657,887,5.417,888,5.732,889,4.551,890,4.301,891,5.228,892,5.228,893,4.551,894,3.447]],["title/classes/DeleteCommentDto.html",[0,0.193,895,3.088]],["body/classes/DeleteCommentDto.html",[0,0.286,2,1.393,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.605,166,2.519,183,1.683,669,4.316,671,3.746,872,4.868,873,2.666,874,5.246,875,5.246,895,5.428,896,5.751]],["title/classes/DeleteConversationDto.html",[0,0.193,770,3.088]],["body/classes/DeleteConversationDto.html",[0,0.287,2,1.398,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.611,103,2.599,183,1.689,691,3.345,770,5.439,807,3.759,873,2.675,877,3.759,897,5.771,898,4.115]],["title/classes/DeleteMessageDto.html",[0,0.193,899,3.088]],["body/classes/DeleteMessageDto.html",[0,0.286,2,1.393,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.605,40,0.652,183,1.683,674,3.218,878,5.246,882,5.246,884,4.567,885,5.751,886,5.751,899,5.428,900,5.751]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.193,775,2.646]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.359,2,1.226,3,0.127,4,0.127,5,0.114,7,0.217,8,0.009,9,0.007,10,0.007,16,0.243,29,1.413,36,1.755,79,0.765,95,1.555,103,2.28,127,2.567,183,2.114,537,2.738,691,2.934,693,3.609,695,3.953,696,4.119,762,4.492,775,4.302,790,3.444,794,3.444,798,3.444,807,3.297,873,3.196,877,3.297,898,3.609,901,4.019,902,4.285,903,4.285,904,4.285]],["title/classes/DeleteOnePost.html",[0,0.193,905,3.088]],["body/classes/DeleteOnePost.html",[0,0.333,2,1.347,3,0.139,4,0.139,5,0.125,7,0.167,8,0.009,9,0.008,10,0.008,16,0.196,40,0.631,76,0.84,85,0.69,95,1.511,96,2.505,185,3.105,671,4.683,677,5.073,687,4.777,689,4.558,690,2.82,889,4.416,905,5.32,906,6.7,907,6.304]],["title/injectables/ErrorsInterceptor.html",[70,0.704,908,3.292]],["body/injectables/ErrorsInterceptor.html",[0,0.244,3,0.123,4,0.123,5,0.111,7,0.148,8,0.009,9,0.007,10,0.007,16,0.24,17,0.868,40,0.557,70,1.124,71,1.791,76,0.742,78,1.006,79,0.742,80,0.912,85,0.61,86,1.241,104,0.959,163,1.19,232,2.152,253,2.75,278,2.152,464,4.298,466,2.956,908,5.254,909,4.914,910,4.658,911,4.929,912,4.863,913,5.364,914,5.57,915,4.629,916,4.658,917,5.57,918,5.662,919,3.201,920,4.914,921,3.688,922,4.16,923,5.57,924,4.914,925,5.57]],["title/classes/ExceptionFilter.html",[0,0.193,233,3.088]],["body/classes/ExceptionFilter.html",[0,0.255,2,1.241,3,0.128,4,0.128,5,0.115,7,0.154,8,0.009,9,0.007,10,0.007,16,0.244,17,0.904,40,0.581,76,0.774,78,1.049,79,0.774,80,0.951,85,0.636,86,1.273,104,0.999,163,1.241,232,2.79,233,5.059,234,6.325,243,5.811,248,4.673,915,4.718,918,5.811,919,3.337,926,6.371,927,5.123,928,7.859,929,8.223,930,5.807,931,3.845,932,5.807,933,5.807]],["title/injectables/ExcludeNullInterceptor.html",[70,0.704,934,3.292]],["body/injectables/ExcludeNullInterceptor.html",[0,0.246,3,0.124,4,0.124,5,0.112,7,0.149,8,0.009,9,0.007,10,0.007,16,0.24,17,0.875,40,0.562,70,1.13,71,1.806,76,0.749,78,1.015,79,0.749,80,0.92,85,0.615,86,1.248,104,0.967,163,1.201,232,2.171,464,4.312,466,2.982,662,3.535,910,4.684,911,4.956,912,4.878,913,5.381,915,4.648,916,4.684,919,3.229,921,3.72,922,4.197,934,5.283,935,4.958,936,5.619,937,4.522,938,5.619,939,4.065]],["title/injectables/ExistedUserMiddleware.html",[70,0.704,940,3.292]],["body/injectables/ExistedUserMiddleware.html",[0,0.213,3,0.107,4,0.107,5,0.096,7,0.129,8,0.009,9,0.006,10,0.006,16,0.224,17,0.755,40,0.644,70,1.027,71,1.559,73,1.983,74,3.211,75,4.204,76,0.857,78,1.162,79,0.857,80,1.053,82,1.983,85,0.531,86,1.134,87,2.207,101,2.315,103,2.556,104,0.835,166,2.486,202,1.785,205,1.928,232,1.874,253,3.794,254,4.078,259,2.574,278,1.874,301,3.398,487,2.912,617,3.622,624,2.315,638,6.368,653,3.622,662,3.051,854,3.398,912,4.614,940,4.804,941,5.808,942,4.279,943,4.804,944,4.85,945,5.675,946,6.368,947,7.686,948,4.85,949,3.051,950,5.675,951,3.903,952,4.85,953,4.85,954,4.85]],["title/injectables/FacebookStrategy.html",[70,0.704,955,3.088]],["body/injectables/FacebookStrategy.html",[0,0.206,3,0.139,4,0.104,5,0.093,7,0.125,8,0.009,9,0.006,10,0.006,16,0.236,17,0.731,32,1.92,40,0.47,70,1.006,71,1.51,73,2.904,76,0.839,78,0.848,79,0.946,80,0.769,85,0.514,86,1.11,87,2.172,95,1.62,99,2.744,104,0.808,105,2.574,116,5.598,183,1.213,202,1.97,249,3.779,469,5.066,472,2.698,473,2.954,475,2.954,490,3.632,496,4.41,497,4.701,499,4.701,500,2.954,515,4.975,605,3.34,631,5.715,955,4.41,956,4.143,957,4.696,958,4.143,959,6.265,960,4.696,961,4.696,962,4.696,963,3.109,964,3.109,965,4.696,966,3.779,967,4.696,968,4.143,969,4.696,970,4.143,971,4.696,972,3.779,973,4.696,974,5.554,975,4.143,976,4.143,977,4.143,978,4.143,979,4.143,980,4.143]],["title/controllers/FileController.html",[11,1.53,981,3.292]],["body/controllers/FileController.html",[0,0.127,3,0.064,4,0.064,5,0.151,7,0.077,8,0.009,9,0.004,10,0.004,11,1.004,13,1.031,15,1.381,16,0.23,17,0.451,18,2.794,19,2.552,20,2.794,21,2.552,22,2.666,23,2.666,24,2.666,25,2.552,26,1.535,27,2.552,28,2.794,29,0.712,31,1.428,32,1.183,36,2.532,37,1.82,38,1.82,39,1.737,40,0.654,41,1.381,42,1.737,43,1.737,44,1.663,45,1.663,46,1.663,47,1.663,76,0.808,78,1.095,79,1.013,80,0.993,82,1.183,85,0.317,86,0.783,87,2.45,96,2.599,99,1.716,101,3.12,104,1.043,105,3.032,127,1.987,133,2.552,136,1.663,137,1.596,142,3.925,143,3.607,145,1.596,156,1.663,158,3.343,160,3.483,161,3.639,163,1.295,181,1.663,204,1.82,205,1.765,226,3.12,259,2.867,546,3.105,635,3.407,747,3.4,894,3.47,981,3.316,982,2.553,983,4.349,984,4.349,985,4.768,986,4.768,987,2.553,988,6.709,989,2.893,990,6.542,991,6.089,992,2.893,993,2.893,994,2.893,995,2.553,996,2.893,997,2.553,998,2.893,999,2.893,1000,2.553,1001,2.893,1002,5.348,1003,3.918,1004,3.918,1005,2.893,1006,4.441,1007,2.893,1008,2.553,1009,2.893,1010,4.441,1011,2.893,1012,3.111,1013,4.441,1014,2.893,1015,5.404,1016,5.404,1017,2.553,1018,3.918,1019,3.918,1020,2.328,1021,2.328,1022,3.574,1023,2.94,1024,2.553,1025,2.553,1026,2.553,1027,2.893,1028,2.553,1029,2.553,1030,2.893,1031,2.161,1032,2.893,1033,2.893,1034,2.893,1035,2.893,1036,2.893,1037,2.893,1038,2.893,1039,2.893,1040,2.893,1041,2.893,1042,2.893,1043,5.769,1044,2.893,1045,2.893,1046,2.893,1047,2.893,1048,2.893]],["title/classes/FileService.html",[0,0.193,1031,3.292]],["body/classes/FileService.html",[0,0.194,2,0.943,3,0.097,4,0.097,5,0.088,7,0.117,8,0.009,9,0.006,10,0.006,16,0.187,40,0.819,76,0.917,78,1.243,79,0.917,80,1.127,85,0.483,86,1.065,104,1.184,113,2.257,163,1.47,202,2.271,278,2.659,635,4.174,894,2.342,983,4.858,984,4.858,1031,4.509,1049,3.552,1050,6.037,1051,6.037,1052,6.526,1053,8.703,1054,4.414,1055,6.037,1056,6.526,1057,4.414,1058,6.037,1059,6.526,1060,4.414,1061,3.552,1062,4.414,1063,3.552,1064,4.82,1065,4.414,1066,8.455,1067,6.037,1068,6.88,1069,5.537,1070,5.537,1071,6.88,1072,4.414,1073,4.414,1074,4.414]],["title/modules/FilesModule.html",[50,1.417,334,3.088]],["body/modules/FilesModule.html",[0,0.263,3,0.132,4,0.132,5,0.119,7,0.159,8,0.009,9,0.007,10,0.007,13,2.623,16,0.247,17,0.933,50,2.366,52,2.679,53,3.512,59,3.905,60,3.177,61,2.956,63,2.956,65,4.229,334,6.086,981,5.951,1023,5.826,1024,5.283,1075,5.283,1076,5.283,1077,5.988,1078,5.988]],["title/classes/FilesService.html",[0,0.193,1023,2.918]],["body/classes/FilesService.html",[0,0.199,2,0.968,3,0.1,4,0.1,5,0.139,7,0.12,8,0.009,9,0.006,10,0.006,16,0.141,40,0.748,76,0.996,78,1.351,79,0.996,80,1.224,85,0.496,86,1.083,87,2.673,104,1.286,105,3.429,163,1.67,181,2.603,747,4.386,894,4.147,983,4.944,984,4.944,985,5.42,986,5.42,987,5.42,988,7.5,995,5.42,1000,5.42,1008,5.42,1023,4.068,1025,3.996,1026,3.996,1079,3.996,1080,4.529,1081,4.529,1082,4.529,1083,4.529,1084,6.972,1085,6.972,1086,6.972,1087,6.972,1088,6.972,1089,6.972,1090,4.529]],["title/classes/GetAllConversationDto.html",[0,0.193,806,3.088]],["body/classes/GetAllConversationDto.html",[0,0.334,2,1.356,3,0.14,4,0.14,5,0.126,7,0.202,8,0.009,9,0.008,10,0.008,16,0.237,29,1.563,103,3.03,183,1.969,691,3.245,785,4.201,806,5.341,807,3.646,873,2.595,877,3.646,898,4.796,1091,5.107]],["title/classes/GetOneConversationDto.html",[0,0.193,785,2.918]],["body/classes/GetOneConversationDto.html",[0,0.334,2,1.356,3,0.14,4,0.14,5,0.126,7,0.202,8,0.009,9,0.008,10,0.008,16,0.237,29,1.563,103,3.03,183,1.969,691,3.245,785,5.048,806,4.446,807,3.646,873,2.595,877,3.646,898,4.796,1091,5.107]],["title/injectables/GoogleStrategy.html",[70,0.704,1092,3.088]],["body/injectables/GoogleStrategy.html",[0,0.211,3,0.106,4,0.106,5,0.095,7,0.127,8,0.009,9,0.006,10,0.006,16,0.248,17,0.748,32,1.964,40,0.48,70,1.021,71,1.544,73,2.937,76,0.851,78,0.868,79,0.851,80,0.786,85,0.526,86,1.127,87,2.196,95,1.631,99,2.469,104,0.826,105,2.613,116,5.278,183,1.24,202,1.773,384,4.231,472,2.759,473,3.021,475,3.021,490,3.672,497,4.772,499,4.772,500,3.021,515,5.031,605,3.39,631,5.779,958,4.236,959,6.336,966,3.864,968,4.236,970,4.236,972,3.864,974,4.236,975,4.236,976,4.236,977,4.236,978,4.236,979,4.236,980,4.236,1092,4.477,1093,4.236,1094,4.802,1095,7.655,1096,4.802,1097,3.021,1098,4.236,1099,4.802,1100,4.802,1101,4.802,1102,4.802,1103,4.802,1104,4.802,1105,4.802,1106,4.802]],["title/controllers/HealthController.html",[11,1.53,1107,3.547]],["body/controllers/HealthController.html",[0,0.217,3,0.109,4,0.109,5,0.098,7,0.131,8,0.009,9,0.007,10,0.007,11,1.714,13,1.76,15,2.356,16,0.24,17,0.769,26,2.62,29,1.216,73,2.019,76,0.658,85,0.541,86,1.148,87,2.527,96,1.962,104,0.85,105,2.662,110,3.106,143,3.59,158,2.724,163,1.055,235,4.016,267,4.31,281,3.107,314,4.357,317,3.459,362,3.974,624,3.694,1107,5.238,1108,4.357,1109,7.741,1110,7.741,1111,4.938,1112,5.743,1113,4.938,1114,4.938,1115,6.509,1116,6.509,1117,4.938,1118,6.509,1119,6.509,1120,4.938,1121,4.938,1122,4.938,1123,4.938,1124,3.974,1125,4.938,1126,4.938,1127,4.938,1128,4.357,1129,4.938,1130,3.974,1131,6.509,1132,4.938,1133,4.938,1134,4.938]],["title/injectables/HttpCacheInterceptor.html",[70,0.704,1135,3.547]],["body/injectables/HttpCacheInterceptor.html",[0,0.239,3,0.12,4,0.12,5,0.108,7,0.144,8,0.009,9,0.007,10,0.007,16,0.169,17,0.848,40,0.545,70,1.107,71,1.75,76,0.725,78,0.984,79,0.725,80,0.891,85,0.596,86,1.223,95,1.379,101,3.641,104,0.937,163,1.481,183,1.79,202,2.229,253,2.687,444,6.732,464,4.262,466,2.888,1135,5.58,1136,6.117,1137,4.803,1138,6.933,1139,6.933,1140,5.443,1141,4.381,1142,5.443,1143,5.443,1144,7.63,1145,5.443,1146,5.443,1147,5.443,1148,5.443]],["title/classes/HttpExceptionFilter.html",[0,0.193,1149,3.547]],["body/classes/HttpExceptionFilter.html",[0,0.239,2,1.166,3,0.12,4,0.12,5,0.108,7,0.145,8,0.009,9,0.007,10,0.007,16,0.216,17,0.85,40,0.546,76,0.727,78,0.986,79,0.727,80,0.894,85,0.598,86,1.225,104,0.939,202,2.231,232,2.684,233,5.352,234,6.148,243,5.59,244,7.095,245,6.74,246,7.095,248,4.393,249,3.277,253,3.429,254,3.686,259,2.897,260,4.816,261,4.816,262,4.816,263,4.816,273,4.816,276,4.816,277,4.816,278,2.109,279,4.816,281,3.434,282,4.816,325,6.128,1149,5.59,1150,4.816,1151,5.459,1152,5.459,1153,5.459]],["title/interfaces/IApp.html",[179,2.036,1154,3.547]],["body/interfaces/IApp.html",[3,0.108,4,0.108,5,0.098,7,0.172,8,0.009,9,0.007,10,0.007,16,0.153,40,0.773,79,1.121,85,0.538,95,1.598,101,2.344,163,1.05,179,2.269,181,2.823,185,2.653,202,2.015,278,1.898,301,3.442,855,3.442,922,3.669,963,3.253,1154,5.845,1155,3.953,1156,6.463,1157,4.845,1158,6.217,1159,4.913,1160,6.487,1161,3.953,1162,5.424,1163,4.913,1164,3.442,1165,4.334,1166,4.334,1167,4.913,1168,4.913,1169,4.913,1170,4.334,1171,4.913,1172,4.913,1173,4.913,1174,6.487,1175,3.953,1176,3.953,1177,4.913,1178,6.816,1179,4.334,1180,4.913,1181,4.913,1182,3.669,1183,3.669,1184,4.913,1185,4.913,1186,4.913,1187,4.913,1188,4.913,1189,4.913,1190,4.913]],["title/interfaces/ISwaggerOptions.html",[179,2.036,1191,3.292]],["body/interfaces/ISwaggerOptions.html",[3,0.097,4,0.097,5,0.087,7,0.116,8,0.009,9,0.006,10,0.006,15,2.863,40,0.772,52,3.568,80,1.398,85,0.479,95,1.362,109,3.601,179,2.02,181,2.513,185,2.453,196,3.806,205,2.928,298,4.48,428,4.48,939,2.513,963,5.507,1191,4.48,1192,3.859,1193,7.368,1194,7.368,1195,7.368,1196,8.317,1197,7.036,1198,6.501,1199,5.999,1200,5.293,1201,5.999,1202,5.999,1203,5.999,1204,5.999,1205,5.999,1206,5.293,1207,7.368,1208,5.999,1209,5.293,1210,5.293,1211,5.293,1212,5.999,1213,5.999,1214,5.999,1215,4.828,1216,4.828,1217,5.999,1218,4.828,1219,6.041,1220,6.041]],["title/modules/InterceptorModule.html",[50,1.417,335,3.088]],["body/modules/InterceptorModule.html",[0,0.242,3,0.122,4,0.122,5,0.11,7,0.146,8,0.009,9,0.007,10,0.007,16,0.269,17,0.86,50,2.249,52,2.471,63,2.726,335,4.902,350,3.869,420,7.351,421,7.351,908,5.225,934,5.225,1221,5.522,1222,8.513,1223,5.225,1224,5.522,1225,4.902,1226,5.522,1227,5.522,1228,5.522,1229,5.225,1230,5.522]],["title/injectables/LoggerContextMiddleware.html",[70,0.704,364,3.292]],["body/injectables/LoggerContextMiddleware.html",[0,0.246,3,0.124,4,0.124,5,0.111,7,0.149,8,0.009,9,0.007,10,0.007,16,0.219,17,0.873,40,0.561,70,1.128,71,1.801,76,0.747,78,1.012,79,0.747,80,0.918,85,0.614,86,1.245,104,0.964,163,1.197,232,2.165,240,3.363,249,4.873,253,4.008,254,4.308,259,2.973,364,5.274,912,4.873,943,5.274,945,6.23,946,7.162,949,3.525,950,6.23,963,3.71,1231,6.23,1232,4.943,1233,5.603,1234,5.603,1235,5.603,1236,5.603]],["title/classes/LoggerModule.html",[0,0.193,370,3.292]],["body/classes/LoggerModule.html",[0,0.258,2,1.256,3,0.13,4,0.13,5,0.117,7,0.156,8,0.009,9,0.007,10,0.007,16,0.245,17,0.916,50,1.89,63,2.902,76,0.783,85,0.644,86,1.283,104,1.011,163,1.256,202,1.631,237,5.537,240,4.744,370,5.902,584,4.118,1237,5.186,1238,8.258,1239,5.878,1240,7.903,1241,5.855,1242,5.878,1243,5.878,1244,7.903]],["title/injectables/LoggerService.html",[70,0.704,240,2.646]],["body/injectables/LoggerService.html",[0,0.173,3,0.087,4,0.087,5,0.078,7,0.105,8,0.009,9,0.006,10,0.006,15,4.311,16,0.122,17,0.614,40,0.794,41,2.663,70,0.891,71,1.267,76,1.057,78,1.395,79,1.028,80,1.328,85,0.432,86,0.984,95,1.801,104,1.328,183,1.441,185,2.282,186,3.917,220,4.167,235,3.572,240,3.349,242,4.288,249,4.633,972,4.49,1245,3.478,1246,5.58,1247,5.58,1248,5.58,1249,5.58,1250,5.58,1251,5.58,1252,3.942,1253,7.718,1254,7.043,1255,3.942,1256,5.58,1257,3.942,1258,5.58,1259,3.942,1260,5.58,1261,3.942,1262,5.58,1263,3.942,1264,3.942,1265,3.942,1266,6.477,1267,5.58,1268,3.942,1269,3.942,1270,3.942,1271,3.942,1272,3.942]],["title/injectables/LoggingInterceptor.html",[70,0.704,1223,3.292]],["body/injectables/LoggingInterceptor.html",[0,0.243,3,0.122,4,0.122,5,0.11,7,0.147,8,0.009,9,0.007,10,0.007,16,0.239,17,0.863,40,0.554,70,1.12,71,1.78,76,0.738,78,1.001,79,0.738,80,0.907,85,0.606,86,1.236,104,0.953,163,1.183,202,1.536,232,2.14,464,4.289,466,2.938,910,4.641,911,4.911,912,4.853,913,5.352,915,4.617,916,4.641,919,3.182,921,3.667,922,4.136,1223,5.235,1273,4.886,1274,5.538,1275,5.538,1276,5.538,1277,5.538,1278,5.538,1279,5.538,1280,6.185,1281,5.538,1282,5.538,1283,5.538]],["title/classes/LoginDto.html",[0,0.193,530,2.773]],["body/classes/LoginDto.html",[0,0.289,2,1.407,3,0.145,4,0.145,5,0.131,7,0.175,8,0.009,9,0.008,10,0.008,16,0.242,29,1.622,183,1.701,530,4.904,544,3.495,605,3.495,873,2.693,1284,5.811,1285,4.36,1286,5.811,1287,5.3]],["title/controllers/MathController.html",[11,1.53,1288,3.292]],["body/controllers/MathController.html",[0,0.191,3,0.096,4,0.096,5,0.086,7,0.115,8,0.009,9,0.006,10,0.006,11,1.508,13,1.548,15,2.073,16,0.253,17,0.677,19,3.431,21,3.431,25,3.431,26,2.305,27,3.431,29,1.07,31,2.145,32,1.776,36,2.356,40,0.435,44,2.496,45,2.496,46,2.496,47,2.496,76,0.796,78,0.785,79,0.579,80,0.711,85,0.476,86,1.053,96,2.373,104,1.028,110,2.849,136,2.496,137,2.396,142,3.584,143,3.294,145,2.396,156,2.496,158,2.396,160,2.496,161,2.608,163,1.276,199,3.557,202,1.657,226,2.073,235,2.396,317,3.043,382,3.043,440,3.763,521,3.833,635,3.627,915,4.096,919,2.496,931,2.876,1112,5.268,1164,3.043,1176,5.912,1288,4.459,1289,3.833,1290,4.344,1291,8.152,1292,4.344,1293,5.971,1294,4.344,1295,5.971,1296,4.344,1297,4.344,1298,5.971,1299,5.971,1300,3.833,1301,3.244,1302,3.833,1303,4.344,1304,4.344,1305,4.344,1306,2.876,1307,5.971,1308,4.344,1309,4.344,1310,4.344,1311,4.344,1312,4.805]],["title/modules/MathModule.html",[50,1.417,336,3.088]],["body/modules/MathModule.html",[0,0.267,3,0.134,4,0.134,5,0.121,7,0.161,8,0.009,9,0.007,10,0.007,13,2.648,16,0.26,17,0.948,50,2.389,52,2.722,65,3.496,79,0.811,336,5.206,931,4.028,1288,5.993,1301,5.55,1302,5.367,1313,6.083,1314,6.083,1315,7.431,1316,6.083,1317,6.083,1318,6.083]],["title/classes/MessageEntity.html",[0,0.193,884,3.088]],["body/classes/MessageEntity.html",[0,0.258,2,0.91,3,0.094,4,0.094,5,0.085,7,0.113,8,0.009,9,0.006,10,0.006,16,0.183,29,1.048,36,2.597,40,0.85,76,1.019,85,0.466,95,1.689,96,3.039,99,2.815,166,3.343,172,4.125,185,2.408,186,3.904,393,4.59,451,5.195,457,4.398,674,4.079,687,4.976,689,4.748,690,1.905,699,5.103,701,5.907,702,6.978,703,6.978,734,5.541,779,4.73,859,5.042,884,4.125,1319,3.756,1320,6.154,1321,6.751,1322,4.257,1323,4.257,1324,4.257,1325,4.257,1326,4.257,1327,5.888,1328,4.257,1329,4.257,1330,4.257]],["title/controllers/MessagesGateway.html",[11,1.53,1331,3.292]],["body/controllers/MessagesGateway.html",[0,0.159,3,0.08,4,0.08,5,0.072,7,0.096,8,0.009,9,0.005,10,0.005,11,1.262,13,1.295,15,1.734,16,0.246,17,0.566,40,0.679,76,0.904,78,1.226,79,1.001,80,1.112,82,1.486,85,0.398,86,0.928,87,2.571,95,1.494,96,2.697,104,1.168,105,3.244,113,3.684,156,2.089,163,1.323,186,3.056,196,2.954,202,1.718,267,4.099,307,4.645,308,2.407,502,2.287,554,2.407,624,2.954,779,3.689,855,2.546,859,4.623,880,4.755,899,4.755,1306,4.973,1331,3.932,1332,3.207,1333,5.462,1334,5.462,1335,5.462,1336,6.19,1337,3.207,1338,6.835,1339,5.265,1340,3.635,1341,3.207,1342,5.265,1343,3.635,1344,3.207,1345,5.265,1346,3.635,1347,3.635,1348,6.787,1349,5.265,1350,3.635,1351,5.265,1352,3.635,1353,6.19,1354,5.265,1355,6.19,1356,3.207,1357,4.099,1358,3.207,1359,2.925,1360,3.207,1361,3.207,1362,3.207,1363,3.635,1364,3.635,1365,2.925,1366,3.207,1367,3.635,1368,3.635,1369,3.635,1370,3.635,1371,3.635,1372,3.635,1373,3.635,1374,3.635,1375,3.635,1376,6.19,1377,3.635,1378,3.635]],["title/modules/MessagesModule.html",[50,1.417,337,3.088]],["body/modules/MessagesModule.html",[0,0.263,3,0.133,4,0.133,5,0.119,7,0.159,8,0.009,9,0.007,10,0.007,13,2.628,16,0.248,17,0.936,50,2.371,52,2.688,53,3.519,59,3.913,60,3.187,61,2.966,63,3.64,337,6.09,1331,6.214,1357,5.756,1358,5.3,1379,5.3,1380,5.3,1381,6.007,1382,6.007]],["title/injectables/MessagesService.html",[70,0.704,1357,2.918]],["body/injectables/MessagesService.html",[0,0.166,3,0.084,4,0.084,5,0.075,7,0.101,8,0.009,9,0.005,10,0.005,16,0.215,17,0.591,36,1.16,40,0.762,70,0.867,71,1.219,73,1.551,74,2.511,75,3.897,76,0.976,78,1.324,79,1.015,80,1.2,82,1.551,85,0.415,86,0.957,87,2.592,95,1.625,99,1.466,104,1.191,105,3.282,113,3.243,127,1.697,163,1.479,166,2.675,202,1.759,205,3.294,502,2.386,554,2.511,617,2.833,624,3.636,635,1.873,641,2.18,653,2.833,674,1.873,693,2.386,694,2.657,695,2.092,696,2.18,779,4.442,854,3.804,855,2.657,859,2.833,864,3.347,880,4.849,899,4.849,966,5.895,1333,5.594,1334,4.79,1335,4.79,1337,3.347,1341,4.79,1344,4.79,1357,3.595,1361,3.347,1362,3.347,1383,3.347,1384,5.429,1385,3.793,1386,3.793,1387,3.793,1388,5.429,1389,3.793,1390,3.793,1391,4.055,1392,3.793,1393,3.793,1394,3.793,1395,3.793,1396,3.793,1397,3.347,1398,3.793,1399,3.793,1400,5.429,1401,3.793,1402,3.347]],["title/classes/NatsStrategy.html",[0,0.193,1403,3.292]],["body/classes/NatsStrategy.html",[0,0.239,2,1.166,3,0.12,4,0.12,5,0.108,7,0.184,8,0.009,9,0.007,10,0.007,16,0.17,40,0.546,76,0.727,78,0.986,79,0.727,80,0.894,85,0.598,86,1.225,95,1.52,104,0.939,179,2.521,183,1.794,202,1.927,249,3.277,440,3.011,931,3.614,939,4.39,1306,3.614,1403,5.188,1404,4.393,1405,6.74,1406,6.946,1407,6.128,1408,5.459,1409,5.188,1410,5.706,1411,6.128,1412,4.816,1413,4.816,1414,4.816,1415,4.816,1416,4.816,1417,4.816,1418,4.816,1419,4.816,1420,4.816,1421,4.816,1422,4.816]],["title/interfaces/NatsSubscriber.html",[179,2.036,1409,3.292]],["body/interfaces/NatsSubscriber.html",[0,0.239,3,0.12,4,0.12,5,0.108,7,0.184,8,0.009,9,0.007,10,0.007,16,0.17,40,0.804,85,0.598,95,1.652,179,2.521,181,3.137,183,1.41,185,2.84,202,1.927,440,3.011,931,3.614,939,4.877,1157,5.188,1403,4.077,1404,4.393,1405,6.128,1407,4.816,1409,5.706,1410,6.339,1411,6.128,1412,4.816,1413,4.816,1414,4.816,1415,4.816,1416,4.816,1417,4.816,1418,4.816,1419,4.816,1420,4.816,1421,4.816,1422,4.816]],["title/controllers/OauthController.html",[11,1.53,1423,3.292]],["body/controllers/OauthController.html",[0,0.132,3,0.066,4,0.066,5,0.06,7,0.08,8,0.009,9,0.005,10,0.005,11,1.042,13,1.07,15,1.433,16,0.226,17,0.468,19,2.625,21,2.625,22,2.742,23,2.742,24,2.742,25,2.625,26,1.593,27,2.625,29,0.739,31,1.482,32,1.228,36,2.471,39,1.802,40,0.665,41,1.433,42,1.802,43,1.802,44,1.725,45,1.725,46,1.725,47,1.725,76,0.886,78,1.117,79,0.823,80,1.012,82,1.228,85,0.329,86,0.805,87,2.549,95,1.1,96,2.642,101,3.172,104,1.144,105,3.068,110,2.18,136,1.725,137,1.656,141,2.242,142,3.319,143,3.862,145,1.656,146,2.242,156,1.725,158,3.667,160,2.625,161,2.742,163,1.421,253,3.869,259,1.593,304,2.416,471,2.416,472,1.725,522,5.19,532,5.23,537,3.342,547,4.615,556,1.988,561,4.129,562,4.878,768,1.889,949,4.931,964,4.091,1097,3.887,1176,6.308,1183,4.965,1423,3.411,1424,2.649,1425,2.649,1426,4.568,1427,5.452,1428,4.568,1429,4.568,1430,4.568,1431,3.002,1432,3.002,1433,6.178,1434,6.915,1435,5.529,1436,3.002,1437,3.002,1438,5.452,1439,4.568,1440,3.002,1441,3.002,1442,3.002,1443,3.411,1444,3.002,1445,3.002,1446,3.002,1447,3.002,1448,3.002,1449,3.002,1450,3.002,1451,3.661,1452,2.649,1453,3.002,1454,3.002,1455,3.002,1456,4.568,1457,3.002,1458,3.002,1459,3.002,1460,3.002,1461,3.002,1462,4.568,1463,3.002,1464,3.002,1465,3.002,1466,3.002,1467,3.002,1468,3.002,1469,3.002]],["title/modules/OauthModule.html",[50,1.417,338,3.088]],["body/modules/OauthModule.html",[0,0.219,3,0.11,4,0.11,5,0.099,7,0.132,8,0.009,9,0.007,10,0.007,13,2.335,16,0.262,17,0.777,50,2.107,52,2.232,53,3.127,57,4.761,59,3.477,60,2.647,61,2.463,63,3.235,65,3.766,68,3.726,332,5.213,338,6.304,584,4.591,955,5.805,1092,5.805,1423,5.466,1451,5.874,1452,4.402,1470,4.402,1471,4.402,1472,4.402,1473,4.989,1474,4.989,1475,4.989,1476,4.989,1477,4.989,1478,4.989]],["title/injectables/OauthService.html",[70,0.704,1451,2.918]],["body/injectables/OauthService.html",[0,0.151,3,0.076,4,0.076,5,0.068,7,0.091,8,0.009,9,0.005,10,0.005,16,0.219,17,0.535,40,0.704,70,0.807,71,1.104,73,2.065,76,0.938,78,1.272,79,0.938,80,1.153,85,0.376,86,0.89,87,2.542,95,1.465,99,2.315,104,1.137,154,4.568,155,3.029,156,2.902,163,1.731,202,2.211,235,2.785,253,1.695,301,4.197,478,4.474,496,4.197,535,4.373,544,3.179,546,1.973,548,4.631,605,3.179,622,3.029,624,3.967,635,2.493,641,3.442,768,4.156,949,4.156,964,2.273,1064,2.405,1097,2.16,1306,2.273,1391,5.498,1427,4.455,1443,2.564,1451,3.343,1479,3.029,1480,5.05,1481,5.05,1482,5.05,1483,3.433,1484,3.433,1485,5.05,1486,3.433,1487,5.05,1488,3.433,1489,5.05,1490,3.433,1491,5.05,1492,3.433,1493,4.064,1494,3.433,1495,3.433,1496,5.05,1497,5.99,1498,5.99,1499,5.99,1500,5.99,1501,5.99,1502,3.433,1503,3.433,1504,3.433,1505,3.433,1506,3.029,1507,3.029,1508,3.433,1509,3.433,1510,3.433,1511,3.433,1512,3.433,1513,3.433,1514,3.433,1515,3.433]],["title/classes/PaginationDto.html",[0,0.193,107,3.088]],["body/classes/PaginationDto.html",[0,0.282,2,1.034,3,0.107,4,0.107,5,0.096,7,0.128,8,0.009,9,0.006,10,0.006,16,0.199,29,1.191,36,2.512,40,0.822,76,0.961,85,0.53,95,1.693,96,2.865,107,4.499,185,2.626,199,3.931,205,3.264,210,4.796,226,3.064,387,5.801,393,4.931,689,4.609,690,2.165,713,7.247,734,5.379,736,6.179,777,5.05,857,6.179,1012,4.499,1516,4.269,1517,7.208,1518,7.208,1519,6.775,1520,4.838,1521,6.422,1522,4.838,1523,5.666,1524,4.838]],["title/injectables/ParseIntPipe.html",[70,0.704,1525,3.547]],["body/injectables/ParseIntPipe.html",[0,0.249,3,0.125,4,0.125,5,0.113,7,0.151,8,0.009,9,0.007,10,0.007,16,0.177,17,0.886,40,0.569,70,1.138,71,1.828,76,0.758,78,1.027,79,0.758,80,0.931,85,0.623,86,1.257,87,2.381,95,1.549,104,0.978,163,1.215,202,1.578,232,2.197,278,2.197,487,3.413,768,3.577,939,3.267,1012,3.984,1175,4.576,1525,5.736,1526,6.288,1527,5.017,1528,5.736,1529,6.288,1530,6.265,1531,7.201,1532,5.686,1533,4.576,1534,6.288,1535,7.127,1536,5.686,1537,5.686,1538,5.017]],["title/classes/PostEntity.html",[0,0.193,890,2.918]],["body/classes/PostEntity.html",[0,0.272,2,0.982,3,0.101,4,0.101,5,0.091,7,0.122,8,0.009,9,0.006,10,0.006,16,0.143,36,2.148,40,0.853,76,1.136,85,0.503,95,1.764,96,3.388,103,2.791,185,2.537,196,2.96,199,2.865,671,4.036,677,6.513,679,4.053,685,4.346,687,5.422,689,4.966,690,2.056,890,4.107,893,4.92,894,3.727,1539,4.053,1540,5.245,1541,5.652,1542,5.245,1543,5.652,1544,4.594,1545,4.594,1546,4.594,1547,4.594,1548,4.594,1549,4.594,1550,4.594,1551,4.594,1552,4.594,1553,4.594,1554,4.594,1555,6.203,1556,5.473]],["title/controllers/PostsController.html",[11,1.53,1557,3.292]],["body/controllers/PostsController.html",[0,0.083,3,0.042,4,0.042,5,0.038,7,0.05,8,0.009,9,0.003,10,0.003,11,0.661,13,0.678,15,0.908,16,0.205,17,0.296,18,4.153,19,1.824,20,1.997,21,1.824,22,1.905,23,1.905,24,1.905,25,1.824,26,1.01,27,1.824,28,1.997,29,0.469,31,0.94,32,0.778,36,2.486,37,1.198,38,1.198,39,1.143,40,0.716,41,0.908,42,1.143,43,1.143,44,1.094,45,1.094,46,1.094,47,1.094,76,0.932,78,1.264,79,0.932,80,1.145,82,0.778,85,0.208,86,0.56,87,2.603,91,2.738,95,1.595,96,2.779,98,3.709,99,2.867,101,3.251,103,2.707,104,1.203,105,3.301,110,3.033,113,4.066,135,3.709,136,1.094,137,1.05,138,1.334,139,1.422,140,1.422,142,4.294,143,3.946,145,1.05,146,1.422,158,3.858,160,1.824,161,4.198,163,1.494,166,1.227,167,1.679,235,1.751,278,2.344,537,1.515,539,1.679,546,4.438,547,2.371,551,3.506,561,1.422,662,2.997,671,2.738,772,4.007,870,3.338,887,3.338,895,3.338,905,3.338,1018,2.8,1019,2.8,1028,1.679,1029,1.679,1557,2.371,1558,1.679,1559,4.531,1560,3.602,1561,3.602,1562,2.8,1563,3.602,1564,3.602,1565,3.602,1566,3.602,1567,3.602,1568,2.8,1569,3.602,1570,2.8,1571,1.679,1572,1.904,1573,2.8,1574,4.271,1575,5.719,1576,1.904,1577,1.679,1578,1.904,1579,3.174,1580,3.174,1581,1.904,1582,1.679,1583,1.904,1584,4.083,1585,1.904,1586,1.679,1587,1.904,1588,1.904,1589,1.679,1590,1.904,1591,2.554,1592,1.904,1593,1.679,1594,1.904,1595,1.904,1596,1.679,1597,1.904,1598,1.904,1599,1.679,1600,1.904,1601,1.904,1602,1.679,1603,3.154,1604,1.904,1605,3.174,1606,1.904,1607,1.679,1608,3.338,1609,1.904,1610,1.904,1611,1.679,1612,3.154,1613,1.904,1614,1.904,1615,4.764,1616,2.703,1617,1.679,1618,1.679,1619,1.679,1620,1.679,1621,1.679,1622,1.679,1623,1.679,1624,1.679,1625,1.679,1626,1.679,1627,1.679,1628,1.679,1629,1.679,1630,1.904,1631,1.904,1632,1.904,1633,1.904,1634,1.904,1635,1.904,1636,1.904,1637,1.904,1638,3.174,1639,1.904,1640,1.904,1641,1.904,1642,1.904,1643,1.904,1644,1.904,1645,1.904,1646,1.904,1647,1.904,1648,1.904,1649,1.904,1650,1.904,1651,1.904,1652,1.904,1653,1.904,1654,1.904,1655,1.904,1656,1.904,1657,1.904]],["title/modules/PostsModule.html",[50,1.417,339,3.088]],["body/modules/PostsModule.html",[0,0.242,3,0.122,4,0.122,5,0.11,7,0.146,8,0.009,9,0.007,10,0.007,13,2.493,16,0.259,17,0.86,50,2.249,52,2.471,53,3.339,57,4.892,59,3.713,60,2.93,61,2.726,63,3.454,65,4.021,68,4.124,339,6.234,340,4.892,355,4.444,1557,5.736,1616,5.636,1617,4.872,1658,4.872,1659,5.522,1660,4.872,1661,5.522,1662,5.522]],["title/injectables/PostsService.html",[70,0.704,1616,2.918]],["body/injectables/PostsService.html",[0,0.081,3,0.041,4,0.041,5,0.037,7,0.049,8,0.009,9,0.003,10,0.003,16,0.186,17,0.288,32,0.756,36,1.831,40,0.723,70,0.495,71,0.594,73,0.756,74,1.224,75,2.882,76,0.944,78,1.281,79,0.963,80,1.161,81,1.487,82,0.756,85,0.202,86,0.546,87,2.593,95,1.585,103,2.924,104,1.192,105,3.282,109,2.807,113,3.698,163,1.48,166,2.927,191,1.224,202,1.563,205,3.452,278,2.604,487,3.769,537,1.478,546,2.688,556,1.224,616,1.487,619,1.295,624,3.615,635,2.571,639,1.487,644,1.708,662,2.942,671,3.439,672,4.126,674,1.973,694,3.277,697,2.313,705,1.295,849,2.733,854,4.851,867,1.631,870,3.277,887,3.277,893,4.193,894,3.176,895,3.277,905,3.277,951,1.487,1391,2.313,1397,2.733,1402,2.733,1533,1.487,1540,4.874,1542,4.208,1560,3.527,1561,2.733,1562,2.733,1563,2.733,1564,2.733,1565,2.733,1566,2.733,1567,2.733,1568,2.733,1569,2.733,1570,2.733,1571,1.631,1577,2.733,1582,2.733,1586,2.733,1589,2.733,1591,1.487,1593,2.733,1596,2.733,1599,2.733,1602,2.733,1603,3.097,1607,2.733,1608,3.277,1611,2.733,1612,3.097,1616,2.051,1618,1.631,1619,1.631,1620,1.631,1621,1.631,1622,1.631,1623,1.631,1624,1.631,1625,1.631,1626,1.631,1627,1.631,1628,1.631,1629,1.631,1663,1.631,1664,1.848,1665,1.848,1666,1.848,1667,1.848,1668,1.848,1669,1.848,1670,1.848,1671,1.848,1672,1.848,1673,1.848,1674,1.848,1675,1.848,1676,1.487,1677,1.848,1678,3.097,1679,3.097,1680,1.848,1681,1.848,1682,2.733,1683,3.097,1684,1.848,1685,1.631,1686,1.848,1687,5.208,1688,1.848,1689,3.997,1690,1.848,1691,1.848,1692,3.097,1693,1.848,1694,6.278,1695,1.848,1696,1.848,1697,1.848,1698,1.631,1699,1.848,1700,1.848,1701,3.097,1702,1.848,1703,1.848,1704,1.631,1705,1.848,1706,1.848,1707,1.848,1708,3.097,1709,1.848,1710,1.848,1711,1.848,1712,1.848]],["title/modules/PrismaModule.html",[50,1.417,340,2.533]],["body/modules/PrismaModule.html",[0,0.256,3,0.129,4,0.129,5,0.116,7,0.155,8,0.009,9,0.007,10,0.007,16,0.245,17,0.91,50,2.33,52,2.614,53,3.459,59,3.846,60,3.1,61,2.884,63,3.578,75,4.637,340,5.03,358,5.833,360,3.868,584,5.078,1209,6.395,1713,5.154,1714,5.154,1715,5.154,1716,5.842,1717,5.842]],["title/injectables/PrismaService.html",[70,0.704,75,2.254]],["body/injectables/PrismaService.html",[0,0.218,3,0.11,4,0.11,5,0.099,7,0.132,8,0.009,9,0.007,10,0.007,16,0.203,17,0.773,40,0.497,70,1.043,71,1.596,73,2.985,75,3.34,76,1.034,78,0.897,79,0.661,80,0.813,85,0.544,86,1.152,87,2.673,104,1.256,105,3.172,183,1.687,232,1.918,475,3.123,624,3.484,1064,4.576,1162,3.707,1718,4.379,1719,7.3,1720,6.531,1721,8.274,1722,8.274,1723,4.964,1724,6.531,1725,6.242,1726,4.964,1727,4.964,1728,4.964,1729,3.994,1730,4.964,1731,4.379,1732,4.964,1733,4.964,1734,4.964,1735,4.964,1736,4.964,1737,4.964]],["title/classes/ProfileEntity.html",[0,0.193,1738,2.918]],["body/classes/ProfileEntity.html",[0,0.227,2,0.576,3,0.059,4,0.059,5,0.054,7,0.071,8,0.009,9,0.004,10,0.004,16,0.181,29,0.663,36,1.285,40,0.86,76,1.033,79,0.893,85,0.295,95,1.741,96,3.081,101,1.285,127,2.831,133,3.636,185,1.718,186,4.066,199,3.638,226,3.341,317,2.944,393,5.201,457,4.358,490,1.378,522,1.783,644,2.318,685,2.944,687,3.25,689,4.348,690,1.205,701,3.138,705,3.619,706,3.381,716,5.007,718,5.007,722,2.168,731,5.684,734,5.518,736,2.168,737,2.168,738,2.168,739,2.168,1064,2.944,1130,3.381,1164,2.944,1312,3.381,1320,2.168,1556,4.558,1738,2.782,1739,2.377,1740,6.178,1741,4.558,1742,6.178,1743,4.157,1744,4.558,1745,4.558,1746,4.558,1747,4.558,1748,5.092,1749,3.707,1750,3.707,1751,2.377,1752,5.148,1753,2.694,1754,2.377,1755,3.707,1756,5.148,1757,2.377,1758,4.157,1759,2.694,1760,3.707,1761,2.694,1762,4.558,1763,2.377,1764,2.694,1765,3.707,1766,2.377,1767,2.694,1768,2.694,1769,2.377,1770,2.377,1771,4.358,1772,3.381,1773,2.377,1774,4.558,1775,2.377,1776,3.381,1777,2.694,1778,3.707,1779,3.707,1780,2.377,1781,2.694,1782,2.694,1783,2.377,1784,2.694,1785,2.377,1786,3.707,1787,2.694,1788,2.012,1789,4.202,1790,2.377,1791,2.377,1792,2.012,1793,2.012,1794,2.377,1795,2.377,1796,2.377,1797,2.694,1798,2.694,1799,2.377,1800,2.377,1801,2.694,1802,2.694,1803,2.377,1804,2.694,1805,2.694,1806,2.694,1807,2.694,1808,2.694,1809,2.694,1810,2.694,1811,2.694,1812,2.694,1813,2.694]],["title/classes/ReactionsPost.html",[0,0.193,1603,2.918]],["body/classes/ReactionsPost.html",[0,0.33,2,1.325,3,0.137,4,0.137,5,0.123,7,0.199,8,0.009,9,0.008,10,0.008,16,0.234,29,1.527,36,1.897,183,1.942,671,4.321,873,2.536,889,4.345,890,4.106,891,4.991,892,6.051,893,4.345,894,3.291,1540,4.632,1541,4.991,1542,4.632,1543,4.991,1603,4.978,1612,4.106,1814,4.991]],["title/interfaces/Response.html",[179,2.036,254,2.339]],["body/interfaces/Response.html",[0,0.254,3,0.128,4,0.128,5,0.115,7,0.191,8,0.009,9,0.007,10,0.007,16,0.244,17,0.902,40,0.579,70,1.151,85,0.634,163,1.237,179,2.674,181,3.327,185,2.947,232,2.237,254,3.824,464,3.824,466,3.072,635,4.171,910,3.833,912,3.475,913,4.772,915,4.327,916,4.772,919,3.327,921,3.833,937,4.659,1225,4.056,1815,4.659,1816,6.925,1817,5.108]],["title/guards/RolesGuard.html",[375,3.292,1818,3.547]],["body/guards/RolesGuard.html",[0,0.222,3,0.112,4,0.112,5,0.1,7,0.134,8,0.009,9,0.007,10,0.007,16,0.243,17,0.787,30,3.542,40,0.661,70,1.056,73,2.067,76,0.881,78,1.194,79,0.881,80,1.083,82,2.067,85,0.554,86,1.166,99,2.554,104,0.87,163,1.574,196,3.154,200,2.585,202,2.167,205,2.009,232,1.953,253,2.496,350,3.542,375,4.937,425,6.692,459,6.892,461,4.46,463,5.832,464,4.145,466,2.682,482,4.46,484,4.46,485,4.46,553,4.46,1141,4.068,1819,4.46,1820,5.055,1821,5.055,1822,6.61,1823,5.055,1824,6.61,1825,4.068,1826,4.46,1827,6.61,1828,5.055,1829,5.055,1830,5.055]],["title/classes/RtGuard.html",[0,0.193,552,3.292]],["body/classes/RtGuard.html",[0,0.282,2,1.374,3,0.142,4,0.142,5,0.128,7,0.171,8,0.009,9,0.008,10,0.008,16,0.239,32,2.63,73,3.361,76,0.857,183,1.661,471,5.175,472,3.695,473,4.046,475,4.046,552,5.739,1831,5.674,1832,6.431,1833,6.431]],["title/injectables/RtStrategy.html",[70,0.704,582,3.088]],["body/injectables/RtStrategy.html",[0,0.218,3,0.11,4,0.11,5,0.099,7,0.132,8,0.009,9,0.007,10,0.007,16,0.257,17,0.773,32,2.03,40,0.653,70,1.043,71,1.596,73,2.671,76,0.87,78,1.18,79,0.87,80,1.07,85,0.544,86,1.152,104,0.854,163,1.061,183,1.282,202,1.377,205,1.973,235,2.738,253,3.829,259,2.634,359,5.135,360,3.286,382,3.477,384,4.324,472,2.852,473,3.123,475,3.123,490,3.34,491,4.379,496,5.434,497,4.878,498,4.379,499,4.878,500,3.123,501,3.123,505,4.379,506,4.379,507,5.762,508,4.379,509,4.379,511,4.379,515,4.576,582,4.576,623,4.379,949,4.109,1834,4.379,1835,4.964,1836,6.531,1837,4.964,1838,4.964,1839,4.964,1840,4.964,1841,4.964]],["title/classes/SignupDto.html",[0,0.193,535,2.918]],["body/classes/SignupDto.html",[0,0.286,2,1.393,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.605,183,1.683,535,5.129,544,3.459,605,3.459,641,3.746,873,2.666,1285,4.316,1286,5.751,1287,5.246,1842,5.751]],["title/injectables/ThrottlerBehindProxyGuard.html",[70,0.704,311,3.292]],["body/injectables/ThrottlerBehindProxyGuard.html",[0,0.252,3,0.127,4,0.127,5,0.114,7,0.152,8,0.009,9,0.007,10,0.007,16,0.223,17,0.894,40,0.574,70,1.145,71,1.844,76,0.765,78,1.037,79,0.765,80,0.94,85,0.628,86,1.264,95,1.426,104,0.987,163,1.226,183,1.851,293,6.29,308,3.798,311,5.353,379,6.29,949,3.609,1843,5.768,1844,5.062,1845,7.817,1846,7.167,1847,7.167,1848,5.737,1849,5.737,1850,5.737,1851,5.737,1852,5.737,1853,5.062,1854,5.737,1855,5.737,1856,5.737]],["title/injectables/TimeoutInterceptor.html",[70,0.704,1229,3.292]],["body/injectables/TimeoutInterceptor.html",[0,0.237,3,0.119,4,0.119,5,0.107,7,0.143,8,0.009,9,0.007,10,0.007,16,0.236,17,0.841,40,0.54,70,1.102,71,1.735,76,0.719,78,0.975,79,0.719,80,0.884,85,0.591,86,1.216,104,0.929,163,1.624,198,4.031,232,2.086,268,4.762,278,2.086,464,4.249,466,2.864,469,5.55,910,4.566,911,4.831,912,4.562,913,5.302,915,4.562,916,4.566,918,6.116,919,3.102,920,4.762,921,3.574,924,4.762,1229,5.15,1857,4.762,1858,5.397,1859,6.896,1860,6.896,1861,5.397,1862,5.397]],["title/injectables/TransformInterceptor.html",[70,0.704,1225,3.088]],["body/injectables/TransformInterceptor.html",[0,0.244,3,0.123,4,0.123,5,0.111,7,0.187,8,0.009,9,0.007,10,0.007,16,0.24,17,0.868,40,0.557,70,1.124,71,1.791,76,0.742,78,1.006,79,0.742,80,0.912,85,0.61,86,1.241,104,0.959,163,1.19,179,2.572,232,2.152,254,2.956,464,4.298,466,3.733,635,3.473,910,5.106,911,3.902,912,4.629,913,5.364,915,4.629,916,4.658,919,3.201,921,3.688,937,4.483,1225,4.929,1815,4.483,1816,4.914,1817,4.914,1863,5.57]],["title/classes/UpdateCommentTextDto.html",[0,0.193,1608,3.088]],["body/classes/UpdateCommentTextDto.html",[0,0.286,2,1.393,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.605,166,2.519,183,1.683,669,4.316,674,3.218,872,4.868,873,2.666,874,5.246,875,5.246,1608,5.428,1864,5.751]],["title/classes/UpdateConversationDto.html",[0,0.193,790,2.646]],["body/classes/UpdateConversationDto.html",[0,0.347,2,1.116,3,0.115,4,0.115,5,0.104,7,0.21,8,0.009,9,0.007,10,0.007,16,0.232,29,1.286,36,2.288,40,0.748,76,0.997,79,0.997,80,1.374,85,0.572,95,1.669,103,2.075,127,3.347,183,2.042,185,2.76,537,2.491,691,2.67,693,3.284,695,3.723,696,3.879,762,4.299,775,3.134,790,4.052,794,3.134,798,3.134,807,3,873,3.059,877,3,898,3.284,901,5.541,902,3.899,903,3.899,904,3.899,1865,5.221,1866,5.221,1867,5.221]],["title/classes/UpdateMembersConversationDto.html",[0,0.193,794,2.646]],["body/classes/UpdateMembersConversationDto.html",[0,0.359,2,1.226,3,0.127,4,0.127,5,0.114,7,0.217,8,0.009,9,0.007,10,0.007,16,0.243,29,1.413,36,1.755,79,0.765,95,1.555,103,2.28,127,2.567,183,2.114,537,2.738,691,2.934,693,3.609,695,3.953,696,4.119,762,4.492,775,3.444,790,3.444,794,4.302,798,3.444,807,3.297,873,3.196,877,3.297,898,3.609,901,4.019,902,4.285,903,4.285,904,4.285]],["title/classes/UpdatePasswordDto.html",[0,0.193,542,3.088]],["body/classes/UpdatePasswordDto.html",[0,0.286,2,1.393,3,0.144,4,0.144,5,0.13,7,0.173,8,0.009,9,0.008,10,0.008,16,0.241,29,1.605,183,1.683,542,5.428,605,3.459,873,2.666,1285,4.316,1287,5.246,1868,5.751,1869,6.518,1870,5.751,1871,5.751]],["title/classes/UpdatePostDto.html",[0,0.193,1612,2.918]],["body/classes/UpdatePostDto.html",[0,0.33,2,1.325,3,0.137,4,0.137,5,0.123,7,0.199,8,0.009,9,0.008,10,0.008,16,0.234,29,1.527,36,1.897,183,1.942,671,4.321,873,2.536,889,4.345,890,4.106,891,4.991,892,6.051,893,4.345,894,3.291,1540,4.632,1541,4.991,1542,4.632,1543,4.991,1603,4.106,1612,4.978,1814,4.991]],["title/classes/UpdateRolesConversationDto.html",[0,0.193,798,2.646]],["body/classes/UpdateRolesConversationDto.html",[0,0.359,2,1.226,3,0.127,4,0.127,5,0.114,7,0.217,8,0.009,9,0.007,10,0.007,16,0.243,29,1.413,36,1.755,79,0.765,95,1.555,103,2.28,127,2.567,183,2.114,537,2.738,691,2.934,693,3.609,695,3.953,696,4.119,762,4.492,775,3.444,790,3.444,794,3.444,798,4.302,807,3.297,873,3.196,877,3.297,898,3.609,901,4.019,902,4.285,903,4.285,904,4.285]],["title/classes/UpdateUserAvatarDto.html",[0,0.193,125,2.646]],["body/classes/UpdateUserAvatarDto.html",[0,0.357,2,1.347,3,0.139,4,0.139,5,0.125,7,0.216,8,0.009,9,0.008,10,0.008,16,0.236,29,1.552,119,3.784,125,4.558,127,2.82,131,3.784,133,3.622,183,2.104,873,2.578,1738,5.028,1872,4.708,1873,4.708,1874,5.073,1875,6.111]],["title/classes/UpdateUserCoverDto.html",[0,0.193,131,2.646]],["body/classes/UpdateUserCoverDto.html",[0,0.357,2,1.347,3,0.139,4,0.139,5,0.125,7,0.216,8,0.009,9,0.008,10,0.008,16,0.236,29,1.552,119,3.784,125,3.784,127,2.82,131,4.558,133,3.622,183,2.104,873,2.578,1738,5.028,1872,4.708,1873,4.708,1874,5.073,1875,6.111]],["title/classes/UpdateUserProfileDto.html",[0,0.193,119,2.646]],["body/classes/UpdateUserProfileDto.html",[0,0.269,2,0.766,3,0.079,4,0.079,5,0.071,7,0.163,8,0.009,9,0.005,10,0.005,16,0.162,29,0.883,36,1.097,40,0.83,76,1.105,79,0.819,85,0.393,95,1.698,96,3.296,101,1.712,119,3.13,125,2.153,127,3.018,131,2.153,133,3.876,183,1.742,185,2.132,186,3.902,199,3.453,226,2.932,317,2.513,393,5.034,457,3.895,644,1.979,701,2.679,705,2.513,706,2.887,716,4.589,718,3.895,722,2.887,731,6.114,873,1.467,1130,2.887,1164,2.513,1312,2.887,1320,2.887,1738,5.65,1740,5.951,1741,4.601,1742,5.951,1743,4.197,1744,4.601,1745,4.601,1746,4.601,1747,4.601,1748,4.944,1749,3.165,1750,3.165,1751,3.165,1752,4.601,1754,3.165,1755,3.165,1756,4.601,1757,3.165,1758,2.887,1760,4.601,1762,3.165,1763,3.165,1765,3.165,1766,3.165,1769,3.165,1770,3.165,1771,3.895,1772,2.887,1773,3.165,1774,3.165,1775,3.165,1776,2.887,1778,3.165,1779,3.165,1780,3.165,1783,3.165,1785,3.165,1786,3.165,1872,2.679,1873,2.679,1874,2.887,1875,4.197,1876,8.294,1877,3.587,1878,3.587,1879,3.587,1880,3.587,1881,3.587,1882,3.587,1883,3.587,1884,3.587,1885,3.587,1886,3.587,1887,3.587]],["title/classes/UserEntity.html",[0,0.193,1285,2.918]],["body/classes/UserEntity.html",[0,0.227,2,0.761,3,0.079,4,0.079,5,0.071,7,0.094,8,0.009,9,0.005,10,0.005,16,0.19,29,0.877,36,2.413,40,0.818,76,0.952,79,0.896,85,0.39,95,1.752,96,2.839,185,2.121,186,4.134,199,3.104,204,4.963,393,4.906,490,1.821,544,4.268,605,3.246,641,4.105,687,4.691,689,4.035,690,1.593,716,5.02,718,5.02,731,2.659,734,5.224,737,2.865,738,2.865,739,2.865,772,5.224,1128,6.303,1164,3.634,1285,3.434,1772,5.409,1776,4.174,1794,3.141,1795,3.141,1796,3.141,1870,5.398,1871,5.398,1888,3.141,1889,3.56,1890,7.889,1891,5.186,1892,3.56,1893,5.186,1894,7.144,1895,3.56,1896,3.56,1897,3.56,1898,3.56,1899,3.56,1900,5.186,1901,5.186,1902,3.56,1903,5.186,1904,5.186,1905,5.186,1906,5.186,1907,5.186,1908,3.56,1909,3.56,1910,3.56,1911,3.56,1912,3.56,1913,5.186,1914,5.186,1915,2.659,1916,2.659,1917,3.56,1918,3.56,1919,3.56,1920,5.186,1921,3.56,1922,3.56,1923,3.56]],["title/controllers/UsersController.html",[11,1.53,1924,3.292]],["body/controllers/UsersController.html",[0,0.104,3,0.052,4,0.052,5,0.047,7,0.063,8,0.009,9,0.004,10,0.004,11,0.822,13,0.843,15,1.13,16,0.215,17,0.369,18,3.989,19,2.18,20,2.387,21,2.18,22,2.277,23,2.277,24,2.277,25,2.18,26,1.256,27,2.18,28,2.387,29,0.583,31,1.169,32,0.968,36,2.455,37,1.489,38,1.489,39,1.421,40,0.693,41,1.13,42,1.421,43,1.421,44,1.36,45,1.36,46,1.36,47,1.36,76,0.888,78,1.204,79,0.888,80,1.091,82,0.968,85,0.259,86,0.669,87,2.551,90,3.82,91,3.644,92,3.82,93,3.82,95,1.66,96,2.647,98,3.326,99,3.304,100,2.089,101,3.179,103,2.911,104,1.146,105,3.209,110,2.836,113,4.104,114,1.905,116,4.199,119,3.259,124,1.905,125,3.259,127,1.697,130,1.905,131,3.259,133,2.18,135,4.163,136,1.36,137,1.306,138,1.658,139,1.768,140,1.768,141,1.768,142,4.155,143,3.818,145,1.306,149,1.905,150,1.905,151,1.905,152,1.905,154,3.259,158,3.674,159,1.421,160,3.828,161,3.998,163,1.423,166,2.759,168,2.089,170,2.089,172,3.804,173,2.089,175,2.089,502,1.489,522,2.512,530,3.416,544,1.256,551,4.199,554,1.567,605,3.153,641,2.18,997,3.347,1004,3.347,1300,2.089,1924,2.833,1925,2.089,1926,4.189,1927,4.189,1928,4.189,1929,4.189,1930,2.089,1931,2.367,1932,2.367,1933,2.367,1934,2.089,1935,2.367,1936,2.367,1937,3.347,1938,2.089,1939,2.367,1940,3.347,1941,2.367,1942,2.367,1943,2.367,1944,2.367,1945,2.367,1946,2.367,1947,2.367,1948,2.367,1949,2.089,1950,2.367,1951,2.367,1952,2.089,1953,2.089,1954,2.089,1955,2.367,1956,2.367,1957,2.367,1958,2.367,1959,2.367,1960,2.367,1961,2.367,1962,2.367,1963,2.367,1964,2.367,1965,2.367,1966,2.367,1967,2.367,1968,2.367]],["title/modules/UsersModule.html",[50,1.417,57,2.533]],["body/modules/UsersModule.html",[0,0.21,3,0.105,4,0.105,5,0.095,7,0.127,8,0.009,9,0.006,10,0.006,13,2.269,16,0.254,17,0.744,40,0.478,50,2.047,52,2.138,53,3.039,57,5.03,59,3.379,60,2.535,61,2.359,63,3.144,65,3.66,69,4.215,76,0.637,78,0.863,79,0.637,80,0.782,86,0.843,104,0.822,110,3.039,154,5.291,159,2.868,249,3.823,281,3.006,332,5.149,340,4.704,342,4.215,343,5.619,344,6.741,346,5.619,428,3.568,429,4.215,432,4.215,584,4.462,585,4.215,940,3.568,941,3.845,1924,5.35,1953,4.215,1969,4.215,1970,4.215,1971,4.778,1972,4.215,1973,4.778,1974,4.778,1975,4.778,1976,4.778,1977,4.778,1978,4.778]],["title/injectables/UsersService.html",[70,0.704,154,2.646]],["body/injectables/UsersService.html",[0,0.09,3,0.045,4,0.045,5,0.041,7,0.055,8,0.009,9,0.003,10,0.003,16,0.204,17,0.32,31,1.015,32,0.841,40,0.7,70,0.541,71,0.661,73,0.841,74,1.362,75,3.038,76,0.933,78,1.265,79,0.933,80,1.146,82,0.841,85,0.225,86,0.597,87,2.573,88,2.986,89,2.986,90,2.724,91,2.478,92,3.47,93,3.47,94,2.986,95,1.649,99,1.931,103,3.275,104,1.17,105,3.247,106,2.986,107,3.501,113,4.021,114,2.724,116,4.5,119,3,124,1.655,125,3,127,0.92,130,1.655,131,3,133,1.182,144,1.815,148,1.815,149,1.655,150,1.655,151,1.655,152,1.655,154,2.032,159,2.589,163,1.452,166,2.882,196,0.982,199,0.95,202,2.032,205,3.233,226,1.615,278,2.427,487,3.77,502,1.294,530,3.144,537,0.982,544,1.091,554,1.362,556,1.362,605,3.481,616,1.655,617,1.536,618,1.536,619,1.441,620,2.528,624,3.711,634,2.986,635,1.671,639,2.724,641,3.174,644,1.867,653,4.437,654,2.986,656,1.815,657,1.815,694,3.021,697,1.536,854,4.762,856,2.986,858,1.815,951,1.655,1012,2.371,1391,3.732,1685,4.409,1926,2.986,1927,3.805,1928,2.986,1929,3.805,1930,2.986,1934,1.815,1937,4.409,1938,2.986,1949,1.815,1952,1.815,1954,1.815,1979,1.815,1980,2.057,1981,2.057,1982,2.057,1983,2.057,1984,2.057,1985,2.057,1986,2.057,1987,2.057,1988,2.057,1989,2.057,1990,2.057,1991,2.057,1992,1.815,1993,3.385,1994,2.057,1995,2.057,1996,4.312,1997,3.385,1998,3.385,1999,2.057,2000,2.057,2001,2.057,2002,2.057,2003,2.057,2004,2.057,2005,2.057,2006,2.057,2007,3.385,2008,2.057,2009,3.385,2010,3.385,2011,3.385,2012,2.057,2013,4.312,2014,2.057,2015,2.057,2016,3.385,2017,2.057]],["title/injectables/ValidationPipe.html",[70,0.704,2018,3.547]],["body/injectables/ValidationPipe.html",[0,0.313,3,0.105,4,0.105,5,0.094,7,0.126,8,0.009,9,0.006,10,0.006,16,0.222,17,0.74,40,0.835,70,1.014,71,1.528,76,0.846,78,1.147,79,0.846,80,1.04,85,0.521,86,1.119,87,2.185,95,0.946,104,1.092,163,1.527,196,3.41,199,2.196,202,2.116,232,1.837,235,3.941,278,1.837,487,2.854,490,2.431,624,2.269,644,2.622,690,2.127,747,2.991,768,2.991,939,4.382,1175,3.826,1182,4.74,1528,5.108,1529,5.6,1530,6.136,1531,6.727,1533,3.826,1534,5.6,1538,4.194,1788,3.55,2018,5.108,2019,4.194,2020,6.347,2021,6.347,2022,4.754,2023,7.625,2024,4.754,2025,4.754,2026,4.754,2027,4.754,2028,4.194,2029,4.754,2030,4.754,2031,3.826,2032,4.754]],["title/injectables/WsThrottlerGuard.html",[70,0.704,2033,3.547]],["body/injectables/WsThrottlerGuard.html",[0,0.226,3,0.114,4,0.114,5,0.103,7,0.137,8,0.009,9,0.007,10,0.007,16,0.208,17,0.804,40,0.517,70,1.071,71,1.66,76,0.688,78,0.933,79,0.688,80,0.846,85,0.566,86,1.182,87,2.276,95,1.027,104,0.889,105,2.741,163,1.103,183,1.731,199,3.863,202,2.185,205,2.052,278,1.996,308,3.419,379,5.989,385,6.949,387,6.338,460,6.566,464,4.179,466,3.557,487,3.1,624,3.199,1306,3.419,1410,3.857,1843,5.394,1853,5.914,2033,5.394,2034,4.556,2035,5.164,2036,5.164,2037,5.164,2038,5.164,2039,5.164,2040,5.164,2041,5.164,2042,5.164,2043,5.164,2044,5.164,2045,4.156,2046,5.164]],["title/changelog.html",[2047,2.956,2048,2.956,2049,3.241]],["body/changelog.html",[1,3.312,4,0.167,5,0.124,8,0.008,9,0.008,10,0.008,50,2.427,91,3.587,537,3.602,546,3.587,1216,5.023,1218,5.023,1559,4.662,1574,4.662,2049,6.66,2050,6.242,2051,5.507,2052,6.075,2053,6.242,2054,5.507,2055,6.242,2056,6.242,2057,6.242,2058,5.507,2059,6.242,2060,5.023,2061,6.242,2062,6.242,2063,6.242,2064,5.023,2065,6.242,2066,5.023,2067,5.507,2068,4.373,2069,6.66,2070,6.242,2071,6.242]],["title/coverage.html",[2072,4.854]],["body/coverage.html",[0,0.378,1,0.825,5,0.031,6,1.371,8,0.009,9,0.003,10,0.003,11,2.32,12,1.161,14,1.371,31,0.767,33,1.161,40,0.155,50,0.5,58,1.089,64,1.161,70,1.281,72,1.371,75,0.795,83,1.371,84,1.371,99,0.601,107,1.089,110,0.742,119,0.933,125,0.933,131,0.933,145,0.857,154,1.605,179,2.374,180,1.089,182,2.926,184,1.089,203,1.161,207,1.161,230,1.251,231,1.371,233,1.089,240,0.933,242,1.029,254,0.825,278,0.601,284,1.161,285,1.371,309,1.029,311,1.161,353,1.161,364,1.161,370,1.161,375,1.161,440,2.304,441,1.371,458,1.371,488,1.089,489,1.371,512,1.161,513,1.371,530,0.978,535,1.029,542,1.089,548,1.682,550,1.251,551,1.029,552,1.161,556,1.029,582,1.089,598,1.371,618,1.161,619,1.089,620,1.161,621,1.251,644,5.092,669,1.029,670,1.371,691,0.795,692,1.371,750,1.161,751,1.371,762,0.893,770,1.089,775,0.933,777,1.873,785,1.029,790,0.933,794,0.933,798,0.933,804,1.77,806,1.089,835,1.371,845,1.251,870,1.089,871,1.371,872,2.627,876,1.371,877,3.339,880,1.089,881,1.371,882,2.151,884,1.089,887,1.089,888,1.371,889,2.926,890,1.029,895,1.089,896,1.371,897,1.371,899,1.089,900,1.371,901,2.926,905,1.089,906,1.371,908,1.161,909,1.371,926,1.371,927,1.371,934,1.161,935,1.371,940,1.161,941,1.251,942,1.371,955,1.089,956,1.371,963,4.783,981,1.161,982,1.371,1020,1.251,1021,1.251,1022,1.251,1023,1.029,1031,1.161,1049,2.151,1061,1.251,1063,3.787,1079,1.371,1091,2.151,1092,1.089,1093,1.371,1107,1.251,1108,1.371,1135,1.251,1136,1.371,1137,1.371,1149,1.251,1150,1.371,1154,1.251,1155,2.151,1158,1.251,1161,1.251,1191,1.161,1192,1.371,1223,1.161,1225,1.089,1229,1.161,1231,1.371,1232,1.371,1237,1.371,1241,1.251,1245,1.371,1273,1.371,1284,1.371,1285,1.029,1288,1.161,1289,1.371,1301,1.161,1319,1.371,1331,1.161,1332,1.371,1357,1.029,1383,1.371,1403,1.161,1404,2.151,1409,1.161,1423,1.161,1424,1.371,1451,1.029,1479,1.371,1493,1.251,1516,1.371,1525,1.251,1526,1.371,1527,1.371,1539,1.371,1557,1.161,1558,1.371,1603,1.029,1608,1.089,1612,1.029,1616,1.77,1663,1.371,1676,1.251,1718,1.371,1738,1.029,1739,1.371,1792,1.161,1793,1.161,1814,2.151,1815,2.151,1818,1.251,1819,1.371,1831,1.371,1834,1.371,1842,1.371,1843,2.151,1844,1.371,1857,1.371,1864,1.371,1868,1.371,1872,2.627,1873,2.627,1888,1.371,1915,1.161,1916,1.161,1924,1.161,1925,1.371,1979,1.371,2018,1.251,2019,1.371,2033,1.251,2034,1.371,2068,1.089,2072,1.251,2073,1.554,2074,1.554,2075,1.371,2076,1.371,2077,8.97,2078,1.371,2079,8.505,2080,1.371,2081,1.371,2082,1.371,2083,7.33,2084,1.371,2085,1.371,2086,1.996,2087,1.371,2088,2.359,2089,1.371,2090,1.371,2091,2.359,2092,5.504,2093,1.371,2094,2.359,2095,3.517,2096,4.706,2097,2.359,2098,3.517,2099,2.359,2100,3.517,2101,5.141,2102,1.371,2103,7.513,2104,2.359,2105,1.371,2106,1.371,2107,1.554,2108,1.554,2109,1.371,2110,1.251,2111,1.371,2112,1.371,2113,4.856,2114,4.856,2115,1.371,2116,1.371,2117,1.371,2118,3.103,2119,1.371,2120,2.151,2121,1.371,2122,3.103,2123,1.371,2124,1.371,2125,1.371,2126,1.371,2127,1.371,2128,1.371,2129,1.371,2130,2.151,2131,2.151,2132,1.251,2133,1.251,2134,2.151,2135,2.151,2136,2.151,2137,2.359,2138,1.371,2139,1.371,2140,1.371,2141,2.673,2142,2.673,2143,1.371,2144,2.831,2145,1.251,2146,1.371,2147,3.517,2148,1.554,2149,2.151,2150,2.359,2151,1.371,2152,2.151,2153,2.359,2154,1.371,2155,1.554,2156,1.554]],["title/dependencies.html",[53,2.532,2157,3.241]],["body/dependencies.html",[0,0.272,8,0.009,9,0.006,10,0.006,17,0.716,29,1.131,53,2.192,191,3.042,237,3.219,259,3.292,303,3.042,308,3.042,350,3.219,360,3.042,362,3.697,373,4.053,384,3.042,407,4.053,472,2.64,500,4.941,501,3.903,589,3.697,690,2.056,919,2.64,931,3.042,964,4.107,1017,5.473,1097,2.89,1098,4.053,1356,4.053,1360,5.473,1365,3.697,1530,3.697,1729,3.697,1788,3.431,2031,3.697,2158,4.594,2159,6.203,2160,4.594,2161,4.594,2162,7.854,2163,4.594,2164,4.594,2165,4.594,2166,6.203,2167,7.023,2168,4.594,2169,4.594,2170,4.594,2171,6.203,2172,4.594,2173,4.594,2174,4.053,2175,4.594,2176,4.053,2177,4.594,2178,4.594,2179,4.594,2180,4.594,2181,4.594,2182,4.053,2183,4.594,2184,4.053,2185,4.053,2186,4.594,2187,4.594,2188,4.594,2189,4.594,2190,4.594,2191,4.053,2192,4.594,2193,4.053,2194,4.594,2195,4.594,2196,4.594,2197,4.594,2198,4.594,2199,4.594,2200,4.594,2201,4.594,2202,4.594,2203,4.594,2204,4.594,2205,4.594,2206,6.203,2207,4.594,2208,4.053,2209,4.594,2210,4.594]],["title/miscellaneous/enumerations.html",[2211,2.205,2212,4.681]],["body/miscellaneous/enumerations.html",[1,3.959,8,0.009,9,0.007,10,0.007,30,5.227,85,0.67,99,2.883,473,4.693,501,5.062,857,6.004,939,5.128,964,4.939,1097,4.693,1523,6.582,1992,6.582,2211,3.675,2212,5.402,2213,8.047,2214,6.122,2215,6.122,2216,5.402]],["title/classes/fullNameValidator.html",[0,0.193,1792,3.292]],["body/classes/fullNameValidator.html",[0,0.3,2,1.14,3,0.118,4,0.118,5,0.106,7,0.142,8,0.009,9,0.007,10,0.007,16,0.166,40,0.685,76,0.912,78,1.237,79,1.063,80,1.121,85,0.584,86,1.207,87,1.632,95,1.587,104,1.178,163,1.463,196,3.267,200,2.729,202,1.481,232,2.646,440,2.944,490,3.501,674,2.635,690,2.388,1771,3.986,1792,5.113,2130,4.295,2217,5.296,2218,4.797,2219,4.797,2220,6.011,2221,5.337,2222,5.911,2223,5.113,2224,5.337,2225,4.797,2226,4.295,2227,3.986,2228,3.986,2229,3.739]],["title/miscellaneous/functions.html",[2211,2.205,2230,4.27]],["body/miscellaneous/functions.html",[8,0.009,9,0.006,10,0.006,15,3.389,40,0.839,78,1.516,79,1.118,80,1.374,85,0.44,95,1.757,104,1.336,105,2.676,196,2.698,199,3.761,204,3.557,240,3.394,242,4.332,281,4.709,298,2.999,747,2.527,939,2.308,1020,4.55,1021,4.55,1022,4.55,1043,4.988,1155,3.232,1158,5.266,1161,5.266,1162,2.999,1241,5.266,1725,4.55,1790,4.988,1791,3.543,2075,3.543,2076,5.773,2084,3.543,2085,4.988,2086,2.999,2109,3.543,2110,4.55,2120,3.232,2122,3.543,2123,4.988,2124,4.988,2126,3.543,2127,4.988,2128,3.543,2129,4.988,2143,3.543,2144,6.249,2145,3.232,2146,3.543,2149,3.232,2150,6.851,2151,3.543,2211,2.411,2230,3.232,2231,4.016,2232,4.016,2233,3.543,2234,4.016,2235,4.016,2236,6.543,2237,3.543,2238,3.543,2239,4.016,2240,4.016,2241,4.016,2242,3.232,2243,4.016,2244,4.016,2245,4.016,2246,4.016,2247,4.016,2248,4.016,2249,4.016,2250,4.016,2251,4.016,2252,4.016,2253,4.016,2254,3.543,2255,4.016,2256,4.016,2257,4.016,2258,4.016,2259,4.016]],["title/classes/imageValidator.html",[0,0.193,2132,3.547]],["body/classes/imageValidator.html",[0,0.291,2,1.086,3,0.112,4,0.112,5,0.101,7,0.135,8,0.009,9,0.007,10,0.007,16,0.158,40,0.664,76,0.884,78,1.199,79,0.984,80,1.086,85,0.557,86,1.17,87,1.554,95,1.616,104,1.141,105,2.712,163,1.417,172,5.173,196,3.165,200,3.392,202,1.84,205,2.02,232,2.563,490,3.776,662,3.197,690,2.274,2131,4.09,2132,5.338,2133,4.09,2217,5.173,2218,4.647,2219,4.647,2220,5.943,2222,5.834,2225,4.647,2229,3.56,2260,5.082,2261,5.082,2262,5.082,2263,4.484,2264,5.082,2265,7.384,2266,5.082]],["title/index.html",[85,0.402,2047,2.956,2048,2.956]],["body/index.html",[0,0.176,1,1.651,4,0.041,5,0.093,8,0.009,9,0.003,10,0.003,13,1.109,36,0.952,40,0.186,53,1.485,61,0.918,63,0.918,79,0.248,86,0.549,91,3.449,98,4.205,99,3,104,0.32,109,1.868,110,0.887,116,3.46,127,1.392,133,1.068,141,1.388,159,2.41,166,2.61,172,1.302,186,1.982,201,1.388,213,1.388,226,0.887,237,2.18,242,1.231,253,1.536,254,0.986,259,0.986,267,1.231,278,2.432,295,3.661,303,1.231,320,1.64,321,1.64,393,2.818,396,1.64,409,1.64,419,2.324,422,1.64,433,2.324,435,3.542,455,1.64,477,2.505,478,1.388,500,1.17,501,1.958,522,1.231,532,1.388,537,2.494,544,1.651,546,4.08,605,1.651,632,1.496,635,1.536,641,1.068,648,1.64,690,0.832,695,1.717,696,1.068,699,4.732,747,1.17,752,2.505,772,1.302,777,3.289,787,3.542,800,3.542,801,1.64,855,2.812,861,1.64,894,2.13,943,1.388,964,1.231,990,4.986,991,1.64,1002,1.64,1069,1.496,1070,1.496,1097,1.17,1165,1.64,1166,1.64,1170,1.64,1182,2.998,1183,1.388,1198,1.64,1200,1.64,1211,2.746,1215,1.496,1216,3.778,1218,2.505,1306,1.231,1359,1.496,1365,2.505,1425,1.64,1434,1.64,1438,2.746,1443,2.324,1519,1.64,1528,1.496,1559,2.324,1573,1.64,1574,2.998,1591,1.496,1682,1.64,1729,1.496,1731,2.746,1771,1.388,1788,1.388,1799,3.542,1800,1.64,1825,1.496,1940,2.746,2031,1.496,2045,2.505,2052,4.548,2054,1.64,2058,1.64,2060,1.496,2064,1.496,2066,1.496,2067,5.771,2068,2.18,2069,3.542,2072,1.496,2110,1.496,2152,1.496,2176,1.64,2182,1.64,2184,3.542,2185,2.746,2191,1.64,2193,1.64,2208,1.64,2216,1.64,2230,1.496,2267,1.859,2268,1.64,2269,4.61,2270,1.859,2271,3.112,2272,4.014,2273,4.014,2274,1.64,2275,1.64,2276,1.859,2277,1.859,2278,1.859,2279,1.859,2280,1.859,2281,1.859,2282,1.859,2283,1.859,2284,3.112,2285,1.859,2286,1.859,2287,1.859,2288,1.859,2289,3.112,2290,1.859,2291,3.112,2292,1.859,2293,1.859,2294,1.859,2295,4.694,2296,1.859,2297,1.859,2298,1.859,2299,1.64,2300,1.859,2301,1.859,2302,4.014,2303,1.859,2304,1.859,2305,3.112,2306,1.859,2307,1.859,2308,3.112,2309,3.112,2310,1.859,2311,1.859,2312,1.859,2313,1.859,2314,3.112,2315,1.64,2316,1.64,2317,5.771,2318,1.859,2319,3.112,2320,1.859,2321,4.014,2322,1.859,2323,1.859,2324,3.112,2325,1.859,2326,1.859,2327,1.859,2328,1.859,2329,1.859,2330,3.112,2331,1.859,2332,1.859,2333,3.112,2334,1.859,2335,1.859,2336,1.859,2337,1.859,2338,1.859,2339,3.112,2340,1.859,2341,1.859,2342,1.859,2343,1.859,2344,1.859,2345,1.859,2346,1.859,2347,1.859,2348,1.859,2349,1.859,2350,1.859,2351,3.112,2352,1.859,2353,3.112,2354,1.859,2355,1.859,2356,1.64,2357,1.859,2358,4.142,2359,1.859,2360,1.859,2361,1.859,2362,1.859,2363,1.859,2364,2.746,2365,1.859,2366,1.859,2367,1.859,2368,1.859,2369,1.859,2370,1.859,2371,1.859,2372,1.859,2373,1.859,2374,3.112,2375,1.859,2376,1.859,2377,1.64,2378,1.859,2379,1.859,2380,3.112,2381,1.859,2382,1.859,2383,1.859,2384,1.859,2385,1.859,2386,1.859,2387,1.859,2388,1.859,2389,1.859,2390,3.112,2391,7.1,2392,1.859,2393,1.859,2394,1.859,2395,1.859,2396,1.859,2397,1.859,2398,1.859,2399,1.859,2400,1.859,2401,1.859,2402,1.859,2403,1.859,2404,1.859,2405,1.64,2406,1.859,2407,1.859,2408,1.859,2409,1.859,2410,1.859,2411,1.859,2412,1.859,2413,1.859,2414,1.859,2415,1.859,2416,1.64,2417,1.859,2418,1.859,2419,3.112,2420,1.859,2421,1.859,2422,1.859,2423,1.859,2424,1.859,2425,3.112,2426,1.859,2427,1.859,2428,1.859,2429,1.859,2430,1.859,2431,1.859,2432,1.859,2433,1.859,2434,1.859,2435,1.859,2436,1.859,2437,5.225,2438,1.859,2439,1.859,2440,1.859,2441,1.859,2442,1.859,2443,1.859,2444,1.859,2445,1.64,2446,1.64,2447,1.859,2448,1.859,2449,1.859,2450,1.859,2451,1.64,2452,1.859,2453,1.859,2454,1.859,2455,1.859,2456,1.859,2457,7.243,2458,3.112,2459,1.859,2460,3.112,2461,1.859,2462,1.859,2463,1.859,2464,1.859,2465,3.112,2466,1.859,2467,1.859,2468,1.859,2469,3.112,2470,1.859,2471,1.859,2472,1.859,2473,1.859,2474,1.859,2475,3.112,2476,1.859,2477,3.112,2478,1.859,2479,1.859,2480,1.859,2481,3.542,2482,3.112,2483,1.859,2484,1.859,2485,1.859,2486,1.859,2487,1.859,2488,1.859,2489,3.112,2490,3.112,2491,1.859,2492,1.859,2493,1.859,2494,2.324,2495,1.859,2496,1.859,2497,1.859,2498,3.112,2499,1.859,2500,1.859,2501,1.859,2502,1.859,2503,1.859,2504,1.859,2505,1.859,2506,1.859,2507,1.859,2508,1.859,2509,1.859,2510,1.859,2511,1.859,2512,1.859,2513,1.859,2514,1.859,2515,1.859,2516,1.859,2517,3.112,2518,3.112,2519,1.859,2520,1.859,2521,1.859,2522,1.859,2523,1.859,2524,1.859,2525,1.859,2526,1.859,2527,3.112,2528,3.112,2529,1.859,2530,1.859,2531,1.859,2532,3.112,2533,1.859,2534,1.859,2535,3.112,2536,1.859,2537,1.859,2538,1.859,2539,1.859,2540,1.859,2541,1.859,2542,1.859,2543,3.112,2544,3.112,2545,3.112,2546,3.112,2547,1.859,2548,1.859,2549,1.859,2550,1.859,2551,1.859,2552,2.18,2553,1.859,2554,1.859,2555,1.64,2556,1.859]],["title/license.html",[2047,2.956,2048,2.956,2552,2.574]],["body/license.html",[8,0.007,9,0.007,10,0.007,61,2.613,259,2.808,322,6.643,894,2.808,943,5.086,1206,4.67,1803,4.67,2060,4.259,2068,3.708,2274,4.67,2494,3.953,2552,3.708,2555,6.643,2557,4.67,2558,4.67,2559,4.259,2560,4.259,2561,6.81,2562,5.293,2563,5.293,2564,5.293,2565,5.293,2566,5.293,2567,5.293,2568,6.81,2569,8.764,2570,5.293,2571,5.293,2572,5.293,2573,6.81,2574,5.293,2575,5.293,2576,5.293,2577,5.293,2578,5.293,2579,5.293,2580,5.293,2581,5.293,2582,5.293,2583,6.81,2584,5.293,2585,5.293,2586,5.293,2587,5.293,2588,5.293,2589,5.293,2590,5.293,2591,6.81,2592,6.81,2593,5.293,2594,5.293,2595,4.67,2596,5.293,2597,5.293,2598,5.293,2599,5.293,2600,5.293,2601,5.293,2602,5.293,2603,5.293,2604,5.293,2605,5.293,2606,5.293,2607,5.293,2608,5.293,2609,5.293,2610,5.293,2611,5.293,2612,5.293,2613,5.293,2614,5.293,2615,5.293,2616,5.293,2617,5.293,2618,5.293,2619,5.293]],["title/modules.html",[52,2.698]],["body/modules.html",[8,0.007,9,0.007,10,0.007,51,4.118,52,2.63,57,3.378,328,4.39,332,3.698,333,4.118,334,4.118,335,4.118,336,4.118,337,4.118,338,4.118,339,4.118,340,3.378,2358,7.928,2377,6.42,2620,8.986,2621,8.986,2622,9.075,2623,7.276]],["title/overview.html",[2624,5.321]],["body/overview.html",[2,0.775,8,0.009,9,0.005,10,0.005,13,1.293,51,5.424,52,1.623,53,2.509,54,3.201,55,3.201,56,3.201,57,4.913,58,4.332,59,2.79,60,1.925,61,1.791,71,1.166,75,3.959,154,4.647,181,2.085,226,1.731,309,4.094,328,6.709,329,3.201,330,3.201,331,3.201,332,5.379,333,5.662,334,5.043,335,4.332,336,4.332,337,5.043,338,5.99,339,5.662,340,4.716,488,4.332,548,4.871,578,3.201,580,3.201,581,3.201,582,4.332,804,4.094,830,3.201,831,3.201,955,4.332,1023,4.094,1075,3.201,1076,3.201,1092,4.332,1357,4.094,1379,3.201,1380,3.201,1451,5.126,1470,3.201,1471,3.201,1472,3.201,1616,4.094,1658,3.201,1660,3.201,1713,3.201,1714,3.201,1715,3.201,1818,2.919,1969,3.201,1970,3.201,1972,3.201,2624,3.201,2625,5.258,2626,3.628,2627,3.628,2628,3.628]],["title/classes/passwordValidator.html",[0,0.193,1915,3.292]],["body/classes/passwordValidator.html",[0,0.299,2,1.131,3,0.117,4,0.117,5,0.105,7,0.14,8,0.009,9,0.007,10,0.007,16,0.164,40,0.681,76,0.908,78,1.231,79,1.003,80,1.115,85,0.58,86,1.201,87,1.619,95,1.636,104,1.172,163,1.455,196,3.25,200,2.707,202,1.469,232,2.632,440,2.919,490,3.483,544,2.808,674,2.613,690,2.368,1915,5.086,2134,4.259,2217,5.275,2218,4.771,2219,4.771,2220,6,2222,5.898,2223,5.086,2225,4.771,2227,3.953,2228,3.953,2229,3.708,2629,5.293,2630,5.293,2631,4.67,2632,4.67,2633,4.67,2634,4.67]],["title/classes/phoneNumberValidator.html",[0,0.193,1793,3.292]],["body/classes/phoneNumberValidator.html",[0,0.299,2,1.131,3,0.117,4,0.117,5,0.105,7,0.14,8,0.009,9,0.007,10,0.007,16,0.164,40,0.681,76,0.908,78,1.231,79,1.003,80,1.115,85,0.58,86,1.201,87,1.619,95,1.636,104,1.172,163,1.455,196,3.25,199,2.444,200,2.707,202,1.469,232,2.632,440,2.919,490,3.483,644,2.919,674,2.613,690,2.368,1748,4.259,1793,5.086,2135,4.259,2217,5.275,2218,4.771,2219,4.771,2220,6,2222,5.898,2223,5.086,2225,4.771,2227,3.953,2228,3.953,2229,3.708,2635,5.293,2636,5.293,2637,4.67,2638,4.67]],["title/properties.html",[185,2.17,2157,3.241]],["body/properties.html",[8,0.009,9,0.008,10,0.008,36,1.891,185,2.528,259,3.28,295,5.257,305,5.454,324,5.454,419,6.035,500,3.889,501,3.889,1156,4.975,1338,5.454,1443,4.617,2268,5.454,2269,5.454,2315,5.454,2316,5.454,2317,5.454,2451,5.454,2481,5.454,2494,4.617,2552,4.331,2557,5.454,2558,5.454,2559,4.975,2560,4.975,2639,6.182,2640,6.182,2641,5.454,2642,6.182,2643,5.454,2644,6.621,2645,6.182]],["title/miscellaneous/typealiases.html",[2211,2.205,2646,5.306]],["body/miscellaneous/typealiases.html",[3,0.105,8,0.009,9,0.006,10,0.006,40,0.907,41,2.274,85,0.522,122,3.339,182,3.339,192,4.748,193,3.559,194,3.835,1052,5.609,1056,5.609,1059,5.609,1124,3.835,1157,6.753,2086,3.559,2144,5.116,2145,3.835,2211,2.861,2238,4.205,2242,5.116,2254,5.609,2647,4.766,2648,4.205,2649,6.358,2650,8.179,2651,6.358,2652,6.358,2653,7.951,2654,6.358,2655,7.154,2656,6.358,2657,6.358,2658,6.358,2659,6.358,2660,6.358,2661,6.358,2662,6.358,2663,6.358,2664,4.766,2665,6.358,2666,6.358,2667,6.358,2668,6.358,2669,7.154,2670,6.358,2671,4.766,2672,4.766,2673,4.766,2674,5.609,2675,5.609,2676,4.205,2677,4.766,2678,4.766]],["title/classes/usenameValidator.html",[0,0.193,1916,3.292]],["body/classes/usenameValidator.html",[0,0.3,2,1.14,3,0.118,4,0.118,5,0.106,7,0.142,8,0.009,9,0.007,10,0.007,16,0.166,40,0.685,76,0.912,78,1.237,79,1.007,80,1.121,85,0.584,86,1.207,87,1.632,95,1.641,104,1.178,163,1.463,196,3.267,200,2.729,202,1.481,232,2.646,440,2.944,490,3.501,641,3.067,674,2.635,690,2.388,1916,5.113,2136,4.295,2217,5.296,2218,4.797,2219,4.797,2220,6.011,2222,5.911,2223,5.113,2225,4.797,2226,4.295,2227,3.986,2228,3.986,2229,3.739,2679,5.337,2680,5.337]],["title/miscellaneous/variables.html",[2211,2.205,2681,4.681]],["body/miscellaneous/variables.html",[3,0.089,8,0.009,9,0.003,10,0.003,30,1.036,31,1.264,33,1.912,36,1.036,40,0.789,41,1.616,50,0.823,79,0.666,85,0.371,87,0.452,95,1.522,99,2.193,101,1.222,110,1.222,122,2.373,138,1.036,145,1.412,159,0.888,163,1.146,166,1.56,180,1.036,182,1.036,184,3.198,186,0.73,191,0.979,192,1.104,193,2.529,195,1.19,197,1.19,198,1.912,199,2.108,200,1.732,201,2.529,202,1.975,203,2.529,204,0.93,205,1.605,206,1.19,207,1.912,208,1.19,209,1.19,210,1.104,211,1.19,212,1.19,213,5.13,214,1.19,215,2.061,216,1.19,217,1.19,218,1.19,219,3.25,220,1.104,221,1.19,222,1.19,223,1.19,224,1.19,225,1.19,226,1.616,227,1.19,253,1.993,254,0.785,266,1.305,267,0.979,278,2.073,295,1.794,298,6.31,301,2.829,303,0.979,359,0.979,384,0.979,419,2.529,428,3.016,433,1.104,440,3.131,464,1.359,466,1.359,477,2.061,478,1.104,496,1.036,501,0.93,522,3.022,532,1.104,537,0.706,544,1.797,546,2.32,550,2.061,551,1.695,556,1.695,618,1.912,619,1.794,620,1.912,621,2.061,624,1.222,632,2.061,635,2.254,644,1.412,674,1.993,695,0.816,699,2.373,705,1.036,747,0.93,752,1.19,766,1.305,768,1.611,772,1.036,777,3.503,802,1.305,845,2.061,894,0.785,939,4.842,949,0.93,963,1.695,1003,1.305,1012,1.036,1049,1.19,1061,2.061,1063,4.971,1064,2.373,1069,3.25,1070,1.19,1097,0.93,1124,2.061,1141,2.061,1156,1.19,1157,1.104,1162,1.912,1178,1.305,1179,1.305,1182,4.007,1183,1.104,1191,1.104,1197,1.305,1210,2.259,1215,1.19,1219,1.305,1220,2.259,1280,2.259,1301,2.529,1359,1.19,1366,2.259,1410,3.016,1433,1.305,1493,2.061,1506,1.305,1507,2.259,1559,1.104,1574,1.104,1676,2.061,1698,2.259,1704,2.259,1725,1.19,1743,1.19,1758,1.19,1825,2.061,1826,1.305,2028,1.305,2045,1.19,2051,1.305,2052,1.19,2064,1.19,2066,2.061,2068,1.794,2078,1.305,2080,2.259,2081,1.305,2082,2.259,2086,1.104,2087,2.259,2088,1.305,2089,2.259,2090,2.259,2091,1.305,2093,1.305,2094,1.305,2097,1.305,2099,1.305,2102,1.305,2104,1.305,2105,2.259,2106,2.259,2111,1.305,2112,2.259,2113,1.305,2114,5.007,2115,1.305,2116,2.259,2117,1.305,2118,1.305,2119,2.988,2120,1.19,2121,2.259,2125,1.305,2130,1.19,2131,1.19,2133,2.061,2134,1.19,2135,1.19,2136,1.19,2137,2.259,2138,2.259,2139,2.259,2140,1.305,2149,1.19,2152,3.25,2153,2.988,2154,2.259,2174,1.305,2211,0.888,2226,2.061,2233,1.305,2237,1.305,2242,1.19,2263,1.305,2275,1.305,2299,1.305,2356,2.259,2364,1.305,2405,1.305,2416,2.259,2445,1.305,2446,1.305,2494,1.104,2552,1.036,2559,1.19,2560,1.19,2595,1.305,2631,1.305,2632,1.305,2633,1.305,2634,1.305,2637,1.305,2638,1.305,2641,1.305,2643,1.305,2644,1.305,2648,2.259,2674,2.259,2675,2.259,2676,2.259,2681,1.305,2682,5.365,2683,1.479,2684,1.479,2685,3.387,2686,2.561,2687,2.561,2688,1.479,2689,1.479,2690,1.479,2691,1.479,2692,1.479,2693,1.479,2694,2.561,2695,1.479,2696,1.479,2697,1.479,2698,1.479,2699,1.479,2700,1.479,2701,1.479,2702,1.479,2703,1.479,2704,1.479,2705,1.479,2706,1.479,2707,1.479,2708,4.038,2709,1.479,2710,1.479,2711,1.479,2712,2.561,2713,2.561,2714,1.479,2715,1.479,2716,1.479,2717,1.479,2718,1.479,2719,1.479,2720,1.479,2721,1.479,2722,1.479,2723,2.561,2724,1.479,2725,1.479,2726,1.479,2727,1.479,2728,1.479,2729,1.479,2730,1.479,2731,1.479,2732,1.479,2733,1.479,2734,1.479,2735,1.479,2736,2.561,2737,1.479,2738,1.479,2739,1.479,2740,1.479,2741,1.479,2742,1.479,2743,1.479,2744,4.038,2745,1.479,2746,1.479,2747,1.479,2748,1.479,2749,1.479,2750,1.479,2751,1.479,2752,1.479,2753,1.479,2754,2.561,2755,1.479,2756,1.479,2757,1.479,2758,2.561,2759,1.479,2760,1.479,2761,1.479,2762,1.479,2763,1.479,2764,1.479,2765,1.479,2766,1.479,2767,1.479,2768,1.479,2769,1.479,2770,1.479,2771,1.479,2772,1.479,2773,1.479,2774,1.479,2775,1.479,2776,1.479,2777,1.479,2778,1.479,2779,1.479,2780,1.479,2781,1.479,2782,1.479,2783,1.479,2784,1.479,2785,1.479,2786,1.479,2787,1.479,2788,1.479,2789,1.479,2790,1.479,2791,1.479,2792,1.479,2793,1.479,2794,1.479,2795,1.479,2796,1.479,2797,1.479,2798,1.479,2799,1.479,2800,1.479,2801,1.479,2802,1.479,2803,1.479,2804,1.479,2805,1.479,2806,1.479,2807,2.561,2808,4.038,2809,2.561,2810,1.479,2811,1.479,2812,1.479,2813,1.479,2814,1.479,2815,1.479,2816,1.479,2817,1.479,2818,1.479,2819,1.479,2820,1.479,2821,2.561,2822,1.479,2823,1.479,2824,1.479,2825,1.479,2826,2.561,2827,1.479,2828,2.561,2829,1.479,2830,3.387,2831,1.479,2832,1.479,2833,1.479,2834,1.479]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.12",{"_index":2197,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2201,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2181,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":2175,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1134,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":2180,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2195,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2077,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2141,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2142,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2147,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2148,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2103,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2083,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2096,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2101,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2092,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2100,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2098,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2095,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":707,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["01t00:00:00.000z",{"_index":708,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["02t05:01:03.938z",{"_index":1807,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1766,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["03",{"_index":2062,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":1765,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["09",{"_index":2061,"title":{},"body":{"changelog.html":{}}}],["09999999999",{"_index":1805,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1785,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1",{"_index":226,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AppService.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.11.0",{"_index":2189,"title":{},"body":{"dependencies.html":{}}}],["1.17.3",{"_index":2190,"title":{},"body":{"dependencies.html":{}}}],["1.18.0",{"_index":2209,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2186,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2059,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":2639,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":2183,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1012,"title":{},"body":{"controllers/FileController.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1752,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1024",{"_index":1131,"title":{},"body":{"controllers/HealthController.html":{}}}],["12",{"_index":2625,"title":{},"body":{"overview.html":{}}}],["123",{"_index":701,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/MessageEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["150",{"_index":1130,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["17.0.3",{"_index":2159,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1755,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["19",{"_index":1808,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":2753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@min(17",{"_index":1754,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1780,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2",{"_index":317,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2.0.0",{"_index":2198,"title":{},"body":{"dependencies.html":{}}}],["2.1.11",{"_index":2172,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2163,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":2187,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1128,"title":{},"body":{"controllers/HealthController.html":{},"classes/UserEntity.html":{}}}],["20)@minlength(2",{"_index":1910,"title":{},"body":{"classes/UserEntity.html":{}}}],["200",{"_index":297,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":706,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2022",{"_index":2060,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["21",{"_index":1918,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":1899,"title":{},"body":{"classes/UserEntity.html":{}}}],["255",{"_index":717,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["255)@maxlength(256",{"_index":715,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["27",{"_index":2626,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1164,"title":{},"body":{"interfaces/IApp.html":{},"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["3.0.0",{"_index":2167,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2203,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":2173,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":206,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":1308,"title":{},"body":{"controllers/MathController.html":{}}}],["4.0.0",{"_index":2199,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2179,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":2170,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":2205,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":300,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1774,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1770,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["456",{"_index":702,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/MessageEntity.html":{}}}],["48",{"_index":2627,"title":{},"body":{"overview.html":{}}}],["5",{"_index":1309,"title":{},"body":{"controllers/MathController.html":{}}}],["5.0.1",{"_index":2177,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":2108,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":728,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["50)@minlength(0",{"_index":725,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["6",{"_index":2628,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":2192,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":2168,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":2207,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2204,"title":{},"body":{"dependencies.html":{}}}],["768",{"_index":1127,"title":{},"body":{"controllers/HealthController.html":{}}}],["789",{"_index":703,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/MessageEntity.html":{}}}],["8",{"_index":1900,"title":{},"body":{"classes/UserEntity.html":{}}}],["8.0.1",{"_index":2194,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2210,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":2107,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":2162,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":2165,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":2166,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":2169,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2638,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2637,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../docs",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1762,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1769,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["above",{"_index":2590,"title":{},"body":{"license.html":{}}}],["abstraction/microservices/math/math.module",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction/prisma/prisma.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["abstraction/prisma/prisma.service",{"_index":81,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["accept",{"_index":1506,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["acceptable",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accepthmrupdate",{"_index":187,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["access",{"_index":477,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"classes/ProfileEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1763,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["account.'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":2613,"title":{},"body":{"license.html":{}}}],["actions",{"_index":211,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":1573,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":2789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1560,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(userid",{"_index":1571,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcookieauth('optional",{"_index":2788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["added",{"_index":2063,"title":{},"body":{"changelog.html":{}}}],["additional",{"_index":1202,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["addoauth2",{"_index":2780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1740,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adheres",{"_index":2056,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin.controller",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin1",{"_index":748,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["admin2",{"_index":749,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":51,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":693,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":58,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":64,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["age",{"_index":1741,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["agedate",{"_index":2750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["alert",{"_index":180,"title":{"interfaces/Alert.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertoptions",{"_index":184,"title":{"interfaces/AlertOptions.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertstyle",{"_index":192,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2647,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":992,"title":{},"body":{"controllers/FileController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":997,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":230,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(request",{"_index":265,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":2727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allows",{"_index":2404,"title":{},"body":{"index.html":{}}}],["already",{"_index":1704,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":2499,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":2430,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2581,"title":{},"body":{"license.html":{}}}],["another",{"_index":479,"title":{},"body":{"injectables/AtGuard.html":{}}}],["any,info",{"_index":961,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":960,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["api",{"_index":419,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2645,"title":{},"body":{"properties.html":{}}}],["api/blob/main/license",{"_index":2769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api:latest",{"_index":2484,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":2267,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":883,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":1018,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":734,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["apiproperty({description",{"_index":698,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({example",{"_index":1320,"title":{},"body":{"classes/MessageEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apiproperty({type",{"_index":731,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["apipropertyoptional",{"_index":735,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apipropertyoptional({description",{"_index":712,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":306,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":2328,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":808,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":1027,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('health",{"_index":1120,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('home",{"_index":315,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('microservices",{"_index":1303,"title":{},"body":{"controllers/MathController.html":{}}}],["apitags('oauth",{"_index":1453,"title":{},"body":{"controllers/OauthController.html":{}}}],["apitags('posts",{"_index":1630,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1955,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":1019,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["app",{"_index":1162,"title":{},"body":{"interfaces/IApp.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1737,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":310,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":1222,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":284,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2269,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application/json",{"_index":1507,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":2314,"title":{},"body":{"index.html":{}}}],["apply",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":1978,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":328,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":2360,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":309,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appsetup",{"_index":1161,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["architecture",{"_index":2546,"title":{},"body":{"index.html":{}}}],["args",{"_index":2222,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1531,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":246,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2617,"title":{},"body":{"license.html":{}}}],["array",{"_index":747,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.from(previousnames.value",{"_index":2827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":1020,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":1039,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":2245,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":857,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":2570,"title":{},"body":{"license.html":{}}}],["async",{"_index":87,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["atguard",{"_index":353,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":488,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["attacks",{"_index":2424,"title":{},"body":{"index.html":{}}}],["audio",{"_index":1330,"title":{},"body":{"classes/MessageEntity.html":{}}}],["audio'})@isnotempty()@isstring",{"_index":1328,"title":{},"body":{"classes/MessageEntity.html":{}}}],["auth",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":586,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":1477,"title":{},"body":{"modules/OauthModule.html":{}}}],["auth/auth.service",{"_index":1494,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth/decorators",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["auth/dto/request",{"_index":1495,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth_error",{"_index":618,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":512,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":2349,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":471,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{}}}],["authguard(estrategy.jwt",{"_index":474,"title":{},"body":{"injectables/AtGuard.html":{}}}],["authguard(estrategy.jwt_refresh",{"_index":1833,"title":{},"body":{"classes/RtGuard.html":{}}}],["authmodule",{"_index":332,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1156,"title":{},"body":{"interfaces/IApp.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":1540,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authorization",{"_index":1511,"title":{},"body":{"injectables/OauthService.html":{}}}],["authorizationurl",{"_index":2783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":2606,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":548,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":2319,"title":{},"body":{"index.html":{}}}],["available",{"_index":2623,"title":{},"body":{"modules.html":{}}}],["availablethemes",{"_index":2087,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["await",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["awesome",{"_index":1165,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["axios",{"_index":2174,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.config",{"_index":1062,"title":{},"body":{"classes/FileService.html":{}}}],["axios.create",{"_index":2737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosconfig",{"_index":1061,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosconfig.post(url",{"_index":1068,"title":{},"body":{"classes/FileService.html":{}}}],["axiosinstance",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosrequest",{"_index":1493,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosrequest('get",{"_index":1509,"title":{},"body":{"injectables/OauthService.html":{}}}],["b",{"_index":1312,"title":{},"body":{"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["backend",{"_index":2288,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2500,"title":{},"body":{"index.html":{}}}],["bad",{"_index":2722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request",{"_index":2721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badgatewayexception",{"_index":917,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badgatewayexception('bad",{"_index":925,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badrequestexception",{"_index":1533,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1538,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1703,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2450,"title":{},"body":{"index.html":{}}}],["based",{"_index":1218,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["baseurl",{"_index":2738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":2176,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2534,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2508,"title":{},"body":{"index.html":{}}}],["before",{"_index":1179,"title":{},"body":{"interfaces/IApp.html":{},"miscellaneous/variables.html":{}}}],["begin",{"_index":1776,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["begining",{"_index":2523,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2536,"title":{},"body":{"index.html":{}}}],["better",{"_index":2548,"title":{},"body":{"index.html":{}}}],["bindevents",{"_index":1406,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["bindevents(client",{"_index":1407,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["bingbot/2.0",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["bio",{"_index":1742,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birthdate",{"_index":1743,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["blank",{"_index":726,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["bodies",{"_index":2363,"title":{},"body":{"index.html":{}}}],["body",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":196,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/ISwaggerOptions.html":{},"controllers/MessagesGateway.html":{},"classes/PostEntity.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["bootstrap",{"_index":2150,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2622,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2620,"title":{},"body":{"modules.html":{}}}],["brute",{"_index":2422,"title":{},"body":{"index.html":{}}}],["bug",{"_index":1172,"title":{},"body":{"interfaces/IApp.html":{}}}],["build",{"_index":2445,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":2318,"title":{},"body":{"index.html":{}}}],["building",{"_index":2310,"title":{},"body":{"index.html":{}}}],["built",{"_index":2433,"title":{},"body":{"index.html":{}}}],["c",{"_index":1803,"title":{},"body":{"classes/ProfileEntity.html":{},"license.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1751,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["cache",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["cache.interceptor.ts",{"_index":1137,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:5",{"_index":1140,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheinterceptor",{"_index":444,"title":{},"body":{"injectables/AppService.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["cachemodule",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":404,"title":{},"body":{"modules/AppModule.html":{}}}],["calculate",{"_index":1293,"title":{},"body":{"controllers/MathController.html":{}}}],["call",{"_index":2378,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1433,"title":{},"body":{"controllers/OauthController.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":970,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["called",{"_index":2397,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":913,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":459,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":463,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":2085,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["capitalize(str",{"_index":2247,"title":{},"body":{"miscellaneous/functions.html":{}}}],["card",{"_index":2544,"title":{},"body":{"index.html":{}}}],["catch",{"_index":234,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":243,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1152,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(rpcexception",{"_index":932,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["catcherror",{"_index":920,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":924,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["categories",{"_index":1680,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1682,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["centers",{"_index":2392,"title":{},"body":{"index.html":{}}}],["change",{"_index":800,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["changelog",{"_index":2049,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":2051,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["character",{"_index":1907,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":718,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(21",{"_index":1901,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1773,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@maxlength(51",{"_index":727,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1775,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1902,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":1911,"title":{},"body":{"classes/UserEntity.html":{}}}],["charge",{"_index":2565,"title":{},"body":{"license.html":{}}}],["chat",{"_index":2642,"title":{},"body":{"properties.html":{}}}],["chats",{"_index":2301,"title":{},"body":{"index.html":{}}}],["check",{"_index":1112,"title":{},"body":{"controllers/HealthController.html":{},"controllers/MathController.html":{}}}],["checkexist",{"_index":1699,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1702,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1708,"title":{},"body":{"injectables/PostsService.html":{}}}],["child",{"_index":1181,"title":{},"body":{"interfaces/IApp.html":{}}}],["city",{"_index":1749,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["claim",{"_index":2609,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessageEntity.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessageEntity.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":2441,"title":{},"body":{"index.html":{}}}],["client",{"_index":1306,"title":{},"body":{"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"injectables/OauthService.html":{},"injectables/WsThrottlerGuard.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1375,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["client.conn.remoteaddress",{"_index":2039,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["client.id",{"_index":1370,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["client.subscribe",{"_index":1419,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["client/.../alertsstore.ts",{"_index":2648,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../app.ts",{"_index":2231,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../auth.dto.ts",{"_index":2664,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../auth.service.ts",{"_index":2689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../axios.config.ts",{"_index":2683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../conversations.dto.ts",{"_index":2650,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../conversations.service.ts",{"_index":2690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../count.ts",{"_index":2243,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../file.service.ts",{"_index":2693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../files.dto.ts",{"_index":2669,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../pageview.ts",{"_index":2687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../posts.dto.ts",{"_index":2653,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../posts.service.ts",{"_index":2691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../str.ts",{"_index":2235,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../theme.ts",{"_index":2242,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../user.service.ts",{"_index":2692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../user.ts",{"_index":2705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../users.dto.ts",{"_index":2655,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../usesticky.ts",{"_index":2704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/composables/count.ts",{"_index":2075,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/composables/user.ts",{"_index":2081,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/composables/usesticky.ts",{"_index":2078,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/dto/auth.dto.ts",{"_index":2677,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/conversations.dto.ts",{"_index":2671,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/files.dto.ts",{"_index":2678,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/posts.dto.ts",{"_index":2672,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/users.dto.ts",{"_index":2673,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/helpers/app.ts",{"_index":1155,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/str.ts",{"_index":2084,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/theme.ts",{"_index":2086,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/server/api/pageview.ts",{"_index":2088,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/auth.service.ts",{"_index":2091,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/axios.config.ts",{"_index":2093,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/conversations.service.ts",{"_index":2094,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts",{"_index":1049,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts:21",{"_index":1057,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:35",{"_index":1060,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:7",{"_index":1054,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/posts.service.ts",{"_index":2097,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/user.service.ts",{"_index":2099,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/stores/alertsstore.ts",{"_index":182,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":966,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/MessagesService.html":{}}}],["clientproxy",{"_index":1298,"title":{},"body":{"controllers/MathController.html":{}}}],["clientsecret",{"_index":968,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsmodule",{"_index":1314,"title":{},"body":{"modules/MathModule.html":{}}}],["clientsmodule.register",{"_index":1317,"title":{},"body":{"modules/MathModule.html":{}}}],["closable",{"_index":197,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["cluster_adminmodule",{"_index":54,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":55,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":56,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":578,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":580,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":579,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":581,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":830,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":832,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":831,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1075,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1076,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1379,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1380,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_oauthmodule",{"_index":1470,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_exports",{"_index":1472,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_imports",{"_index":1473,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":1471,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1658,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1659,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1660,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1713,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1714,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1715,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1969,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1972,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1971,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1970,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":1307,"title":{},"body":{"controllers/MathController.html":{}}}],["code",{"_index":2069,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["commands",{"_index":2417,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1574,"title":{},"body":{"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":872,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":669,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1591,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commitlint",{"_index":2439,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":2158,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":2160,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2549,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":620,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compatible",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["compodoc",{"_index":2382,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2486,"title":{},"body":{"index.html":{}}}],["compress",{"_index":2362,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2182,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computed",{"_index":2826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["computer",{"_index":2545,"title":{},"body":{"index.html":{}}}],["concept",{"_index":2393,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2589,"title":{},"body":{"license.html":{}}}],["config",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('app_secret",{"_index":508,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["config.get('google_callback_url",{"_index":2784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('throttle_limit",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_ttl",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":358,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"app_secret",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"expire_at_time",{"_index":597,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":343,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":2723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":615,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(user_error.duplicate",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1438,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["connectedsocket",{"_index":1355,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["connection",{"_index":2618,"title":{},"body":{"license.html":{}}}],["console",{"_index":1822,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log('before",{"_index":1276,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":1277,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1282,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":1234,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":1236,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(postid",{"_index":1649,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":202,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"classes/FileService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":1823,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constants/math.constant",{"_index":1302,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(math_service",{"_index":1305,"title":{},"body":{"controllers/MathController.html":{}}}],["constructor(@logger('appservice",{"_index":449,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(authservice",{"_index":1483,"title":{},"body":{"injectables/OauthService.html":{}}}],["constructor(config",{"_index":491,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":239,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(prismaservice",{"_index":74,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":461,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":346,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1903,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2485,"title":{},"body":{"index.html":{}}}],["content",{"_index":1070,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":466,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":485,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1278,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":484,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1232,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1233,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1141,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["context.switchtows().getclient",{"_index":2038,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["continuous",{"_index":2434,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2614,"title":{},"body":{"license.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":809,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":1030,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":1121,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('math",{"_index":1304,"title":{},"body":{"controllers/MathController.html":{}}}],["controller('messages",{"_index":1364,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["controller('oauth",{"_index":1454,"title":{},"body":{"controllers/OauthController.html":{}}}],["controller('posts",{"_index":1631,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1956,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":1219,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":1213,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":2161,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":2425,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":699,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/MessageEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversation.dto",{"_index":903,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":877,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:6",{"_index":1867,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1866,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1865,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation_error",{"_index":845,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversation_error.not_creator",{"_index":868,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationentity",{"_index":691,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversationid",{"_index":779,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["conversations",{"_index":752,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversations.controller",{"_index":834,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":805,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":750,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":333,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":804,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":2184,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":2351,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2583,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2568,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2555,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":446,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":447,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["core/security/throttle",{"_index":312,"title":{},"body":{"controllers/AppController.html":{}}}],["cors",{"_index":1365,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":2105,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":2089,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1750,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["course",{"_index":2526,"title":{},"body":{"index.html":{}}}],["cover",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coverage",{"_index":2072,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create_user",{"_index":2715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createat",{"_index":1681,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":870,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":753,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":812,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":761,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":762,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":766,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":694,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":2123,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":2249,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":1241,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1333,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(dto",{"_index":1337,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":880,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["createnewconversationdto",{"_index":2649,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["createparamdecorator",{"_index":2754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1561,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":1577,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":887,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["creator",{"_index":695,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["criteria",{"_index":2348,"title":{},"body":{"index.html":{}}}],["cross",{"_index":2411,"title":{},"body":{"index.html":{}}}],["crud",{"_index":2446,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["crypto",{"_index":2333,"title":{},"body":{"index.html":{}}}],["csrf",{"_index":2410,"title":{},"body":{"index.html":{}}}],["csurf",{"_index":2188,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":260,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":262,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":263,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":777,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":2116,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":1214,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customeimage",{"_index":2264,"title":{},"body":{"classes/imageValidator.html":{}}}],["customtext",{"_index":2227,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["damages",{"_index":2610,"title":{},"body":{"license.html":{}}}],["dark",{"_index":2674,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"controllers/MathController.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":1512,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.id.tostring",{"_index":1514,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login",{"_index":1515,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login}@gmail.com",{"_index":1513,"title":{},"body":{"injectables/OauthService.html":{}}}],["database",{"_index":2272,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1730,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":705,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":279,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1280,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1731,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2571,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2619,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1246,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1251,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":2337,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":2339,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":1193,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":298,"title":{},"body":{"controllers/AppController.html":{},"interfaces/ISwaggerOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":2218,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":2219,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultoptions",{"_index":203,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":76,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definestore",{"_index":188,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["definestore('alertsstore",{"_index":208,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["definestore('user",{"_index":2819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defining",{"_index":2394,"title":{},"body":{"index.html":{}}}],["definition",{"_index":2326,"title":{},"body":{"index.html":{}}}],["delete",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":821,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":771,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1655,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1583,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1643,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1587,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":1967,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":1931,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete_comment",{"_index":2717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_user",{"_index":2716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecomment",{"_index":1562,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1656,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1582,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":895,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationadminsdto",{"_index":2651,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deleteconversationbyid",{"_index":754,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":769,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":770,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1698,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["deletemessagedto",{"_index":899,"title":{"classes/DeleteMessageDto.html":{}},"body":{"classes/DeleteMessageDto.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["deleteoneadminconversation",{"_index":755,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":774,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":775,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":905,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteonepostdto",{"_index":2652,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deletepost",{"_index":1563,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(userid",{"_index":1586,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":1926,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1930,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":88,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserprofile",{"_index":2654,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["denied",{"_index":2719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":2376,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1523,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":2325,"title":{},"body":{"index.html":{}}}],["description",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":2347,"title":{},"body":{"index.html":{}}}],["design",{"_index":2327,"title":{},"body":{"index.html":{}}}],["development",{"_index":2474,"title":{},"body":{"index.html":{}}}],["devices",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":2273,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":2405,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["directly",{"_index":1434,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["disk",{"_index":1123,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1115,"title":{},"body":{"controllers/HealthController.html":{}}}],["distribute",{"_index":2579,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2553,"title":{},"body":{"index.html":{}}}],["docker",{"_index":2481,"title":{},"body":{"index.html":{},"properties.html":{}}}],["docs",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":2066,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["document.documentelement.scrolltop",{"_index":2811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":2068,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documented",{"_index":2053,"title":{},"body":{"changelog.html":{}}}],["don't",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["done",{"_index":959,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":980,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["dontskip",{"_index":286,"title":{},"body":{"controllers/AppController.html":{}}}],["doskip",{"_index":287,"title":{},"body":{"controllers/AppController.html":{}}}],["dotenv",{"_index":1099,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto",{"_index":113,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/FileService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":851,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1691,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":863,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.conversationid",{"_index":1398,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto.creator",{"_index":852,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":849,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1701,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1679,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1402,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/PostsService.html":{}}}],["dto.members",{"_index":850,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":848,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":666,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":665,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1998,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":656,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":2012,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1694,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.published",{"_index":1695,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1707,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.senderid}:${sendername",{"_index":1399,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto.text",{"_index":1397,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/PostsService.html":{}}}],["dto.title",{"_index":1678,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.type",{"_index":1396,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto.userid",{"_index":860,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.username",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment/request",{"_index":1619,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/comment/response",{"_index":1629,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/request",{"_index":1618,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/response",{"_index":1625,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/request",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/response",{"_index":502,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":2712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":1240,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2514,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":2491,"title":{},"body":{"index.html":{}}}],["each",{"_index":2387,"title":{},"body":{"index.html":{}}}],["easily",{"_index":2285,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":2311,"title":{},"body":{"index.html":{}}}],["el",{"_index":2805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classlist.add('sticky",{"_index":2812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classlist.remove('sticky",{"_index":2813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1941,"title":{},"body":{"controllers/UsersController.html":{}}}],["emails",{"_index":974,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":975,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["empty",{"_index":2711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":2323,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1720,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1724,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2518,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1063,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2064,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["endpoint}/avatar",{"_index":1065,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/cover",{"_index":1072,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/posts",{"_index":1073,"title":{},"body":{"classes/FileService.html":{}}}],["enhance",{"_index":2516,"title":{},"body":{"index.html":{}}}],["enter",{"_index":476,"title":{},"body":{"injectables/AtGuard.html":{}}}],["entire",{"_index":2386,"title":{},"body":{"index.html":{}}}],["entities/comment.entity",{"_index":874,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/conversation.entity",{"_index":807,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["entities/message.entity",{"_index":885,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["entities/profile.entity",{"_index":1874,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["enumerations",{"_index":2212,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2374,"title":{},"body":{"index.html":{}}}],["eorder",{"_index":1992,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["eorder.asc",{"_index":1999,"title":{},"body":{"injectables/UsersService.html":{}}}],["erole",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":469,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/TimeoutInterceptor.html":{}}}],["error",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":220,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":2028,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors.interceptor",{"_index":1227,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["errors.length",{"_index":2030,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsinterceptor",{"_index":908,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["eslint",{"_index":2429,"title":{},"body":{"index.html":{}}}],["estrategy",{"_index":473,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["estrategy.facebook",{"_index":965,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["estrategy.google",{"_index":1100,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["estrategy.jwt",{"_index":504,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["estrategy.jwt_refresh",{"_index":1838,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["ev",{"_index":1187,"title":{},"body":{"interfaces/IApp.html":{}}}],["ev.preventdefault",{"_index":1189,"title":{},"body":{"interfaces/IApp.html":{}}}],["eval",{"_index":2365,"title":{},"body":{"index.html":{}}}],["event",{"_index":2605,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2278,"title":{},"body":{"index.html":{}}}],["example",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"classes/ConversationEntity.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["example@gmail.com",{"_index":1891,"title":{},"body":{"classes/UserEntity.html":{}}}],["exception",{"_index":248,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":927,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:7",{"_index":930,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.geterror",{"_index":933,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.getresponse",{"_index":275,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":276,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":280,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":270,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":233,"title":{"classes/ExceptionFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["excludenullinterceptor",{"_index":934,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["excludepaths",{"_index":1146,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths.includes(httpadapter.getrequesturl(request",{"_index":1147,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["execute",{"_index":1176,"title":{},"body":{"interfaces/IApp.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{}}}],["executes",{"_index":2370,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":464,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":2713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existedusermiddleware",{"_index":940,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["experiences",{"_index":2282,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["exploit",{"_index":2414,"title":{},"body":{"index.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":584,"title":{},"body":{"modules/AuthModule.html":{},"classes/LoggerModule.html":{},"modules/OauthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":259,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":988,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":2353,"title":{},"body":{"index.html":{}}}],["extends",{"_index":183,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/FacebookStrategy.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/WsThrottlerGuard.html":{}}}],["externals",{"_index":2798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1203,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extraction",{"_index":1854,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["extractjwt",{"_index":498,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":506,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":1194,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":964,"title":{},"body":{"injectables/FacebookStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["facebookauthredirect",{"_index":1426,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookauthredirect(@req",{"_index":1459,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookauthredirect(req",{"_index":1431,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebooklogin",{"_index":1427,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["facebooklogin(req",{"_index":1485,"title":{},"body":{"injectables/OauthService.html":{}}}],["facebookstrategy",{"_index":955,"title":{"injectables/FacebookStrategy.html":{}},"body":{"injectables/FacebookStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["failed",{"_index":1175,"title":{},"body":{"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":200,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1541,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":2293,"title":{},"body":{"index.html":{}}}],["feels",{"_index":2280,"title":{},"body":{"index.html":{}}}],["female",{"_index":1779,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["field",{"_index":2297,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":2144,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":2246,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":1003,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":1087,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":1085,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":1089,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":981,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":1086,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":894,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.controller",{"_index":1078,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":1090,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":1024,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":1031,"title":{"classes/FileService.html":{}},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"coverage.html":{}}}],["filesmodule",{"_index":334,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1023,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":2229,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["find",{"_index":1940,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["firstname",{"_index":976,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2602,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2448,"title":{},"body":{"index.html":{}}}],["flip",{"_index":2543,"title":{},"body":{"index.html":{}}}],["flows",{"_index":2781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fo",{"_index":2541,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2509,"title":{},"body":{"index.html":{}}}],["following",{"_index":2588,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":2718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":616,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(auth_error.same_password",{"_index":667,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(post_error.not_author",{"_index":1692,"title":{},"body":{"injectables/PostsService.html":{}}}],["forbiddenexception(system_error.forbidden",{"_index":654,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["force",{"_index":2423,"title":{},"body":{"index.html":{}}}],["forgery",{"_index":2412,"title":{},"body":{"index.html":{}}}],["form",{"_index":991,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["format",{"_index":2054,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["formattedmessage",{"_index":1267,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":2428,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":1066,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('file",{"_index":1067,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('files",{"_index":1074,"title":{},"body":{"classes/FileService.html":{}}}],["forroot",{"_index":1238,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":430,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":301,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"interfaces/IApp.html":{},"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":2309,"title":{},"body":{"index.html":{}}}],["free",{"_index":2564,"title":{},"body":{"license.html":{}}}],["front",{"_index":2517,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2271,"title":{},"body":{"index.html":{}}}],["full",{"_index":1771,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1744,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1792,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":963,"title":{},"body":{"injectables/FacebookStrategy.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2230,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":2586,"title":{},"body":{"license.html":{}}}],["game",{"_index":2532,"title":{},"body":{"index.html":{}}}],["gender",{"_index":1745,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["generate",{"_index":1216,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["generated",{"_index":2320,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":816,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":786,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1637,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1600,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1648,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1635,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1597,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('authorization",{"_index":1839,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["get('facebook",{"_index":1455,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook')@useguards(undefined)@apioperation({summary",{"_index":1437,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect",{"_index":1458,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect')@useguards(undefined)@apioperation({summary",{"_index":1432,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('find/:email",{"_index":1961,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('github/redirect",{"_index":1467,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('github/redirect')@apioperation({summary",{"_index":1442,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google",{"_index":1461,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google')@useguards(undefined)@apioperation({summary",{"_index":1446,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect",{"_index":1464,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect')@useguards(undefined)@apioperation({summary",{"_index":1449,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('profile/:useridorusername",{"_index":1958,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":157,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1943,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":1111,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1292,"title":{},"body":{"controllers/MathController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":781,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1564,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(postid",{"_index":1589,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":806,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversations",{"_index":756,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@getcurrentuserid",{"_index":814,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(userid",{"_index":780,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversationsdto",{"_index":2656,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallmessages",{"_index":1334,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["getallmessages(conversationid",{"_index":1341,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["getallpostsdto",{"_index":2657,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsofuser",{"_index":1565,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(userid",{"_index":1593,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1566,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(userid",{"_index":1596,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicpostsdto",{"_index":2658,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpublicusersdto",{"_index":2659,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallusers",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getclientname",{"_index":1384,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getclientname(clientid",{"_index":1388,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getconversationbyid",{"_index":757,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":784,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":288,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethello(@session",{"_index":326,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello(session",{"_index":292,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getoneconversationdto",{"_index":785,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1567,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(postid",{"_index":1599,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":1927,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":1934,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":2047,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettracker",{"_index":1846,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["gettracker(req",{"_index":1847,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["getuserbyemail",{"_index":1928,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1938,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofiledto",{"_index":2660,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gi",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["gitbox",{"_index":2522,"title":{},"body":{"index.html":{}}}],["github",{"_index":1443,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{},"index.html":{},"properties.html":{}}}],["github2",{"_index":2196,"title":{},"body":{"dependencies.html":{}}}],["githubauthredirect",{"_index":1428,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(@query",{"_index":1468,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(req",{"_index":1441,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubredirect",{"_index":1480,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubredirect(req",{"_index":1487,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess",{"_index":1481,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess(token",{"_index":1489,"title":{},"body":{"injectables/OauthService.html":{}}}],["global",{"_index":1209,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["google",{"_index":1097,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["googleauth",{"_index":1429,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(@req",{"_index":1463,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(req",{"_index":1445,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect",{"_index":1430,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(@req",{"_index":1465,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(req",{"_index":1448,"title":{},"body":{"controllers/OauthController.html":{}}}],["googlebot",{"_index":392,"title":{},"body":{"modules/AppModule.html":{}}}],["googlebot/2.1",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["googlebot/gi",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["googlelogin",{"_index":1482,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlelogin(req",{"_index":1491,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlestrategy",{"_index":1092,"title":{"injectables/GoogleStrategy.html":{}},"body":{"injectables/GoogleStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2563,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2377,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":2496,"title":{},"body":{"index.html":{}}}],["grpc",{"_index":2390,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1818,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["hand",{"_index":480,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handle",{"_index":922,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":236,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":250,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlerequest",{"_index":460,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["handlerequest(context",{"_index":2035,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["handlerequest(err",{"_index":467,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handleresponse",{"_index":238,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(request",{"_index":252,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlers",{"_index":1414,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["handlers.foreach",{"_index":1418,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["hash",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":664,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":621,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":668,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1827,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":2356,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":1069,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":1109,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheck",{"_index":1116,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":1117,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1118,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1107,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":457,"title":{},"body":{"injectables/AppService.html":{},"classes/MessageEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["helmet",{"_index":2191,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["help",{"_index":2331,"title":{},"body":{"index.html":{}}}],["here",{"_index":1183,"title":{},"body":{"interfaces/IApp.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["here).'})@httpcode(httpstatus.created)@apicreatedresponse({description",{"_index":1435,"title":{},"body":{"controllers/OauthController.html":{}}}],["here).'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1439,"title":{},"body":{"controllers/OauthController.html":{}}}],["hereby",{"_index":2562,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2452,"title":{},"body":{"index.html":{}}}],["hmr.config.ts",{"_index":2153,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["holders",{"_index":2607,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":324,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":296,"title":{},"body":{"controllers/AppController.html":{}}}],["hooks",{"_index":2815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":245,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":258,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":261,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":2383,"title":{},"body":{"index.html":{}}}],["html",{"_index":195,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["htmlelement",{"_index":2806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":1359,"title":{},"body":{"controllers/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["http://www.bing.com/bingbot.htm",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["http://www.google.com/bot.html",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["httpadapter",{"_index":1142,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod(request",{"_index":1145,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request",{"_index":1148,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpargumentshost",{"_index":256,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcacheinterceptor",{"_index":1135,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpcode",{"_index":136,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":244,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1149,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://api.github.com/user",{"_index":1510,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/access_token?client_id=${process.env.github_client_id}&client_secret=${process.env.github_secret}&code=${requesttoken",{"_index":1505,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email",{"_index":1502,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2644,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["https://github.com/viandwi24",{"_index":1168,"title":{},"body":{"interfaces/IApp.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":810,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":274,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.ok",{"_index":1457,"title":{},"body":{"controllers/OauthController.html":{}}}],["husky",{"_index":2193,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iapp",{"_index":1154,"title":{"interfaces/IApp.html":{}},"body":{"interfaces/IApp.html":{},"coverage.html":{}}}],["iarrayfile",{"_index":1025,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["icreatecomment",{"_index":1626,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["icreatemessage",{"_index":1361,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["icreatepost",{"_index":1620,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["id",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiokresponse({description",{"_index":1579,"title":{},"body":{"controllers/PostsController.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id'})@isnotempty()@isstring",{"_index":1321,"title":{},"body":{"classes/MessageEntity.html":{}}}],["id.decorator.ts",{"_index":2138,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":2506,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":2073,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1391,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.authorid",{"_index":1696,"title":{},"body":{"injectables/PostsService.html":{}}}],["identify.length",{"_index":2004,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":2005,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifinduserbyemail",{"_index":1954,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetallmessages",{"_index":1362,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["igetcomment",{"_index":1627,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpostofuser",{"_index":1621,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpublicpost",{"_index":1622,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetuserprofile",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":1208,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreexpiration",{"_index":510,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["ignoreglobalprefix",{"_index":1195,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreuseragents",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["ijwtpayload",{"_index":494,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/MessageEntity.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":2266,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":1010,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":2132,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["impact",{"_index":2551,"title":{},"body":{"index.html":{}}}],["implements",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implicit",{"_index":2782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implied",{"_index":2598,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["import.meta.env.vite_base_url",{"_index":2739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import.meta.hot",{"_index":228,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["import.meta.hot.accept(accepthmrupdate(usealertsstore",{"_index":229,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["imported",{"_index":1201,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MathModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":2290,"title":{},"body":{"index.html":{}}}],["include",{"_index":1196,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":1206,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2573,"title":{},"body":{"license.html":{}}}],["index",{"_index":85,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":2407,"title":{},"body":{"index.html":{}}}],["individualize",{"_index":1852,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["inestapplication",{"_index":1725,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["info(message",{"_index":222,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":787,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":2521,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":314,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{}}}],["infrastructure/auth/guards",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/oauth/oauth.module",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":1876,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["init",{"_index":2460,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":2112,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MathController.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"overview.html":{}}}],["inputs",{"_index":2371,"title":{},"body":{"index.html":{}}}],["insertbefore",{"_index":1177,"title":{},"body":{"interfaces/IApp.html":{}}}],["inserted",{"_index":1180,"title":{},"body":{"interfaces/IApp.html":{}}}],["inspect",{"_index":2375,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":1205,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2507,"title":{},"body":{"index.html":{}}}],["install",{"_index":2458,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2456,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2344,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":268,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["int.pipe.ts",{"_index":1527,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1532,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2473,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2435,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2373,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":910,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":911,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":335,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1746,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["interface",{"_index":179,"title":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":181,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":266,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["internal_server_error",{"_index":2720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":1786,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["ip",{"_index":1853,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["ipublicuser",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":1913,"title":{},"body":{"classes/UserEntity.html":{}}}],["isarray",{"_index":685,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray()@isnotempty",{"_index":679,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["isboolean",{"_index":1555,"title":{},"body":{"classes/PostEntity.html":{}}}],["isboolean()@isnotempty",{"_index":1549,"title":{},"body":{"classes/PostEntity.html":{}}}],["isdate",{"_index":1789,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":1914,"title":{},"body":{"classes/UserEntity.html":{}}}],["isgetrequest",{"_index":1144,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["isglobal",{"_index":406,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":1026,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":686,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isjson()@isnotempty",{"_index":681,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":2265,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1537,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":687,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1897,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":1889,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isstring",{"_index":675,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1893,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnumber",{"_index":1556,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isnumber()@isnotempty",{"_index":1551,"title":{},"body":{"classes/PostEntity.html":{}}}],["isobject",{"_index":688,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isoptional",{"_index":736,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":481,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":689,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":677,"title":{},"body":{"classes/CommentEntity.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":1518,"title":{},"body":{"classes/PaginationDto.html":{}}}],["istyping",{"_index":1348,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":1191,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1416,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["item.id",{"_index":225,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["item1item2",{"_index":2303,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":1042,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":1044,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":1045,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":1046,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":1047,"title":{},"body":{"controllers/FileController.html":{}}}],["items",{"_index":210,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/PaginationDto.html":{},"miscellaneous/variables.html":{}}}],["itheme",{"_index":2661,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ithemesettingoptions",{"_index":2662,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecomment",{"_index":1628,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatecover",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatepost",{"_index":1623,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatereaction",{"_index":1624,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["java",{"_index":2535,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":2335,"title":{},"body":{"index.html":{}}}],["join",{"_index":2302,"title":{},"body":{"index.html":{}}}],["join(__dirname",{"_index":415,"title":{},"body":{"modules/AppModule.html":{}}}],["jpeg|jpg|gif|png",{"_index":2263,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":2334,"title":{},"body":{"index.html":{}}}],["json.parse(item",{"_index":1417,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["json.stringify(exception.getresponse",{"_index":269,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":501,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["jwt_refresh",{"_index":2215,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jwtfromrequest",{"_index":505,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":588,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":592,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{}}}],["keep",{"_index":2055,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":1410,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/variables.html":{}}}],["keywords",{"_index":2640,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2597,"title":{},"body":{"license.html":{}}}],["large",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":978,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["latest",{"_index":2511,"title":{},"body":{"index.html":{}}}],["league",{"_index":2540,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2528,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2525,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2542,"title":{},"body":{"index.html":{}}}],["length",{"_index":737,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(0",{"_index":743,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["length(1",{"_index":740,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["length(3",{"_index":1795,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":1917,"title":{},"body":{"classes/UserEntity.html":{}}}],["letter",{"_index":1905,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":2611,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2608,"title":{},"body":{"license.html":{}}}],["library",{"_index":2330,"title":{},"body":{"index.html":{}}}],["license",{"_index":2552,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["licensed",{"_index":2495,"title":{},"body":{"index.html":{}}}],["life",{"_index":2286,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":2814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["light",{"_index":2675,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"classes/PaginationDto.html":{},"injectables/WsThrottlerGuard.html":{}}}],["limitation",{"_index":2574,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2599,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":321,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["link",{"_index":1160,"title":{},"body":{"interfaces/IApp.html":{}}}],["linter",{"_index":2440,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":2438,"title":{},"body":{"index.html":{}}}],["list",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["list.authorid",{"_index":1690,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":867,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list['creator",{"_index":865,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter",{"_index":869,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["literal",{"_index":1157,"title":{},"body":{"interfaces/IApp.html":{},"interfaces/NatsSubscriber.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":1199,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2472,"title":{},"body":{"index.html":{}}}],["log",{"_index":1247,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":1256,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":242,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":2252,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":1242,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":1243,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":364,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":2124,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":2251,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":370,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":240,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1223,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logindto",{"_index":530,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":716,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["looking",{"_index":2547,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2367,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":2284,"title":{},"body":{"index.html":{}}}],["male",{"_index":1778,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["malicious",{"_index":2413,"title":{},"body":{"index.html":{}}}],["manager",{"_index":2178,"title":{},"body":{"dependencies.html":{}}}],["many",{"_index":2725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":937,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marriagestatus",{"_index":1747,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["master",{"_index":2527,"title":{},"body":{"index.html":{}}}],["match",{"_index":2299,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["matchemail",{"_index":2011,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":2013,"title":{},"body":{"injectables/UsersService.html":{}}}],["math",{"_index":1290,"title":{},"body":{"controllers/MathController.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.controller",{"_index":1316,"title":{},"body":{"modules/MathModule.html":{}}}],["math_service",{"_index":1301,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mathcontroller",{"_index":1288,"title":{"controllers/MathController.html":{}},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{}}}],["mathmodule",{"_index":336,"title":{"modules/MathModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MathModule.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":1790,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1810,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1813,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxcount",{"_index":1043,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":738,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1804,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(151",{"_index":1811,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":1920,"title":{},"body":{"classes/UserEntity.html":{}}}],["maxlength(256",{"_index":744,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["maxlength(46",{"_index":1797,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(51",{"_index":742,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["media",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1855,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["member",{"_index":802,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["member1",{"_index":745,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["member2",{"_index":746,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["members",{"_index":696,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["memory",{"_index":1122,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1119,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":2601,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2577,"title":{},"body":{"license.html":{}}}],["message",{"_index":186,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/ConversationEntity.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["message.dto.ts",{"_index":882,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{},"coverage.html":{}}}],["message.enum.ts",{"_index":2114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["messagebody",{"_index":1353,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1367,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1373,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1372,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["messageentity",{"_index":884,"title":{"classes/MessageEntity.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{},"classes/MessageEntity.html":{},"coverage.html":{}}}],["messagepattern",{"_index":1299,"title":{},"body":{"controllers/MathController.html":{}}}],["messagepattern({cmd",{"_index":1296,"title":{},"body":{"controllers/MathController.html":{}}}],["messages",{"_index":855,"title":{},"body":{"injectables/ConversationsService.html":{},"interfaces/IApp.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1382,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.includes(ev.message",{"_index":1188,"title":{},"body":{"interfaces/IApp.html":{}}}],["messages.service",{"_index":1358,"title":{},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1331,"title":{"controllers/MessagesGateway.html":{}},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":337,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1357,"title":{"injectables/MessagesService.html":{}},"body":{"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2520,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1530,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":2023,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["method_not_allowed",{"_index":2726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodkey",{"_index":1220,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":86,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["microservice",{"_index":2453,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2465,"title":{},"body":{"index.html":{}}}],["min",{"_index":1791,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["min(0",{"_index":1812,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(17",{"_index":1809,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minlength",{"_index":739,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(0",{"_index":741,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["minlength(2",{"_index":1796,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":1919,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":2211,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2494,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2477,"title":{},"body":{"index.html":{}}}],["models",{"_index":1204,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2576,"title":{},"body":{"license.html":{}}}],["module",{"_index":50,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2503,"title":{},"body":{"index.html":{}}}],["mozilla/5.0",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["ms",{"_index":2259,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":2354,"title":{},"body":{"index.html":{}}}],["multi",{"_index":1002,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":1022,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":2253,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multipart/form",{"_index":1071,"title":{},"body":{"classes/FileService.html":{}}}],["multiple",{"_index":2400,"title":{},"body":{"index.html":{}}}],["music",{"_index":1800,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mvc",{"_index":2403,"title":{},"body":{"index.html":{}}}],["name",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":979,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":977,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["named",{"_index":2820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natsstrategy",{"_index":1403,"title":{"classes/NatsStrategy.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["natssubscriber",{"_index":1409,"title":{"interfaces/NatsSubscriber.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["needs",{"_index":1856,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["nest",{"_index":2067,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nestinterceptor",{"_index":916,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":2641,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":257,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":589,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2164,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":931,"title":{},"body":{"classes/ExceptionFilter.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":472,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1017,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":308,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/MessagesGateway.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1356,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":950,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":2276,"title":{},"body":{"index.html":{}}}],["new",{"_index":278,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":2009,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":846,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":2010,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":1871,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["newprofile",{"_index":2007,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":646,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":650,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":912,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":1861,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1817,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nextfunction",{"_index":947,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2558,"title":{},"body":{"license.html":{},"properties.html":{}}}],["node",{"_index":1178,"title":{},"body":{"interfaces/IApp.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":2350,"title":{},"body":{"index.html":{}}}],["nodeexternals",{"_index":2154,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":2308,"title":{},"body":{"index.html":{}}}],["non",{"_index":2340,"title":{},"body":{"index.html":{}}}],["none",{"_index":194,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{}}}],["noninfringement",{"_index":2604,"title":{},"body":{"license.html":{}}}],["not_acceptable",{"_index":2728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_author",{"_index":2714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_creator",{"_index":2709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":2708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_member",{"_index":2710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notable",{"_index":2050,"title":{},"body":{"changelog.html":{}}}],["notacceptableexception",{"_index":1990,"title":{},"body":{"injectables/UsersService.html":{}}}],["notacceptableexception(auth_error.password_not_match",{"_index":2014,"title":{},"body":{"injectables/UsersService.html":{}}}],["notedev",{"_index":2524,"title":{},"body":{"index.html":{}}}],["notfounderror",{"_index":1174,"title":{},"body":{"interfaces/IApp.html":{}}}],["notfoundexception",{"_index":951,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":954,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["notfoundexception(post_error.empty",{"_index":1686,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(post_error.not_found",{"_index":1689,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(user_error.not_found",{"_index":1685,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2591,"title":{},"body":{"license.html":{}}}],["notify(message",{"_index":212,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["now",{"_index":1279,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1283,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2457,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2461,"title":{},"body":{"index.html":{}}}],["null",{"_index":662,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/imageValidator.html":{}}}],["null.interceptor",{"_index":1228,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["nullable",{"_index":713,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/PaginationDto.html":{}}}],["number",{"_index":199,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"controllers/MathController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1997,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1996,"title":{},"body":{"injectables/UsersService.html":{}}}],["nuxt",{"_index":1163,"title":{},"body":{"interfaces/IApp.html":{}}}],["oauth",{"_index":1425,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["oauth.controller",{"_index":1475,"title":{},"body":{"modules/OauthModule.html":{}}}],["oauth.service",{"_index":1452,"title":{},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{}}}],["oauth2",{"_index":2643,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":1098,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["oauthcontroller",{"_index":1423,"title":{"controllers/OauthController.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":338,"title":{"modules/OauthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OauthModule.html":{},"modules.html":{},"overview.html":{}}}],["oauthservice",{"_index":1451,"title":{"injectables/OauthService.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["object",{"_index":1182,"title":{},"body":{"interfaces/IApp.html":{},"injectables/ValidationPipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":915,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2567,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2389,"title":{},"body":{"index.html":{}}}],["official",{"_index":2268,"title":{},"body":{"index.html":{},"properties.html":{}}}],["offset",{"_index":2807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["old",{"_index":1758,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["old!'})@max(101",{"_index":1757,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["oldpassword",{"_index":1870,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["omittype",{"_index":878,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["omittype(conversationentity",{"_index":879,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["omittype(messageentity",{"_index":886,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/DeleteMessageDto.html":{}}}],["one",{"_index":772,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["onmoduledestroy",{"_index":1721,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1722,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onscroll",{"_index":2808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onunmounted",{"_index":2817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onuploadprogress",{"_index":1053,"title":{},"body":{"classes/FileService.html":{}}}],["oop",{"_index":2533,"title":{},"body":{"index.html":{}}}],["open",{"_index":2469,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":1217,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":1197,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":2427,"title":{},"body":{"index.html":{}}}],["option",{"_index":2744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":213,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options.timeout",{"_index":215,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1517,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":856,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["oriented",{"_index":2529,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1366,"title":{},"body":{"controllers/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":1084,"title":{},"body":{"classes/FilesService.html":{}}}],["othernames",{"_index":2828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":2616,"title":{},"body":{"license.html":{}}}],["out",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2624,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2157,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1519,"title":{},"body":{"classes/PaginationDto.html":{},"index.html":{}}}],["pagecurrent",{"_index":2003,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":2000,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":2002,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":107,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["param('conversationid",{"_index":824,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":1962,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":817,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('postid",{"_index":1638,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["param('useridorusername",{"_index":1959,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":2355,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1536,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1525,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":2185,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1615,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":2352,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":902,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(conversationentity",{"_index":904,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2603,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":2401,"title":{},"body":{"index.html":{}}}],["parttern",{"_index":2133,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":500,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["passportmodule",{"_index":590,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":591,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":497,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":503,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["passreqtocallback",{"_index":511,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["password",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1932,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":1894,"title":{},"body":{"classes/UserEntity.html":{}}}],["password123'})@length(8",{"_index":1898,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_not_match",{"_index":2707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":655,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":2332,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":1915,"title":{"classes/passwordValidator.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":826,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":776,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":823,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":795,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":828,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":799,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":819,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":791,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":1964,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":1950,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1640,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1613,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":281,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"controllers/MathController.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":2228,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["patterns",{"_index":1412,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["patterns.map((item",{"_index":1415,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["payload",{"_index":496,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["payload_too_large",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":1521,"title":{},"body":{"classes/PaginationDto.html":{}}}],["perform",{"_index":2341,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2561,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2584,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2566,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2585,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1748,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1793,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["photos",{"_index":1104,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":1106,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picktype",{"_index":873,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(commententity",{"_index":875,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(conversationentity",{"_index":898,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["picktype(postentity",{"_index":892,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":1875,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(userentity",{"_index":1287,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["picture",{"_index":1105,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pinia",{"_index":189,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["pipe",{"_index":923,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["pipe(map((value",{"_index":938,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipe(tap",{"_index":1281,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":2436,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1534,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":2343,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":2025,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":2027,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":2277,"title":{},"body":{"index.html":{}}}],["playground",{"_index":2442,"title":{},"body":{"index.html":{}}}],["please",{"_index":2502,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":2801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugins",{"_index":2307,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2594,"title":{},"body":{"license.html":{}}}],["post",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiokresponse({description",{"_index":1584,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('avatar",{"_index":1032,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":989,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1651,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1572,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":1035,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":996,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":1041,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":1001,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":1038,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":1009,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1633,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1594,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1645,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1604,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1578,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":763,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":889,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:6",{"_index":907,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post_error",{"_index":1676,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postentity",{"_index":890,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2451,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1732,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":671,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2449,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1559,"title":{},"body":{"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":1662,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1617,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1557,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":339,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1616,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":2287,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2538,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":1244,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":2121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":2208,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":2270,"title":{},"body":{"index.html":{}}}],["previousnames",{"_index":2823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previousnames.value.add(savedname.value",{"_index":2833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["print",{"_index":2366,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":2317,"title":{},"body":{"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1717,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1729,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma:generate",{"_index":2464,"title":{},"body":{"index.html":{}}}],["prisma:migrate",{"_index":2466,"title":{},"body":{"index.html":{}}}],["prisma:pull",{"_index":2463,"title":{},"body":{"index.html":{}}}],["prisma:push",{"_index":2468,"title":{},"body":{"index.html":{}}}],["prisma:studiorunning",{"_index":2471,"title":{},"body":{"index.html":{}}}],["prisma@latest",{"_index":2459,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1719,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":340,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":75,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":235,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":2432,"title":{},"body":{"index.html":{}}}],["process.env.app_secret",{"_index":509,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["process.env.database_url",{"_index":1733,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.facebook_callback_url",{"_index":971,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_id",{"_index":967,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_secret",{"_index":969,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.google_callback_url",{"_index":1103,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_client_id",{"_index":1101,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":1102,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.public_guard",{"_index":483,"title":{},"body":{"injectables/AtGuard.html":{}}}],["process.env.white_list",{"_index":2747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2479,"title":{},"body":{"index.html":{}}}],["profile",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profileentity",{"_index":1738,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["profileentity:101",{"_index":1878,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:111",{"_index":1880,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:121",{"_index":1884,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:35",{"_index":1883,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:43",{"_index":1879,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:51",{"_index":1882,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:58",{"_index":1886,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:65",{"_index":1885,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:75",{"_index":1877,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:83",{"_index":1887,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:88",{"_index":1881,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profilefields",{"_index":973,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["programming",{"_index":2291,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2510,"title":{},"body":{"index.html":{}}}],["project",{"_index":2052,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WsThrottlerGuard.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":625,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":185,"title":{"properties.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/DeleteOnePost.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"interfaces/NatsSubscriber.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["property",{"_index":1890,"title":{},"body":{"classes/UserEntity.html":{}}}],["protect",{"_index":2421,"title":{},"body":{"index.html":{}}}],["protected",{"_index":1845,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["provide",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":2595,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":2250,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":63,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["proxy.guard",{"_index":313,"title":{},"body":{"controllers/AppController.html":{}}}],["proxy.guard.ts",{"_index":1844,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["proxy.guard.ts:6",{"_index":1848,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["public",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1590,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":1939,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":1935,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get('users/all')@apioperation({summary",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":1006,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":1013,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":2578,"title":{},"body":{"license.html":{}}}],["published",{"_index":1542,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["pull",{"_index":2482,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":2274,"title":{},"body":{"index.html":{},"license.html":{}}}],["put",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1653,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1609,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":1965,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":1945,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":1966,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":1947,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["query",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["queue",{"_index":1411,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["quickly",{"_index":2431,"title":{},"body":{"index.html":{}}}],["randomint",{"_index":2129,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomint(min",{"_index":2255,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rapidy",{"_index":2447,"title":{},"body":{"index.html":{}}}],["rate",{"_index":320,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["reach",{"_index":2550,"title":{},"body":{"index.html":{}}}],["react",{"_index":1605,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1705,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":2300,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1568,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1646,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1602,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":672,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1603,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1543,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":2364,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["readiness",{"_index":1110,"title":{},"body":{"controllers/HealthController.html":{}}}],["readme",{"_index":2065,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["realtime",{"_index":2676,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["recompile",{"_index":2385,"title":{},"body":{"index.html":{}}}],["record",{"_index":293,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ThrottlerBehindProxyGuard.html":{}}}],["reduce((a",{"_index":1311,"title":{},"body":{"controllers/MathController.html":{}}}],["ref",{"_index":2822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref(new",{"_index":2824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":2443,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":2200,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":2216,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["refreshtoken",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["regexp('bingbot",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["relational",{"_index":2306,"title":{},"body":{"index.html":{}}}],["reload",{"_index":2384,"title":{},"body":{"index.html":{}}}],["remotely",{"_index":2398,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1376,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["remove(id",{"_index":223,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["removemessage",{"_index":1335,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["removemessage(dto",{"_index":1344,"title":{},"body":{"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":2368,"title":{},"body":{"index.html":{}}}],["replace('bearer",{"_index":1840,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["replies",{"_index":673,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":2316,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":949,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":1235,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["req.ip",{"_index":1851,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ips.length",{"_index":1849,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.ips[0",{"_index":1850,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{}}}],["req.params.userid",{"_index":952,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["req.user",{"_index":1496,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.email",{"_index":1501,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.user.email",{"_index":1497,"title":{},"body":{"injectables/OauthService.html":{}}}],["req['code",{"_index":1504,"title":{},"body":{"injectables/OauthService.html":{}}}],["request",{"_index":253,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":282,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1826,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_timeout",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod",{"_index":1975,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":2045,"title":{},"body":{"injectables/WsThrottlerGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":1859,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["requesttoken",{"_index":1503,"title":{},"body":{"injectables/OauthService.html":{}}}],["require('run",{"_index":2799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('webpack",{"_index":2797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":204,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/ConversationEntity.html":{},"controllers/FileController.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":1824,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":946,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["reset",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":254,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["response'})@apiresponse({status",{"_index":299,"title":{},"body":{"controllers/AppController.html":{}}}],["response.data",{"_index":2741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.status(status).json",{"_index":1153,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":283,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":272,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responses_message",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responses_message.create_user",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["responses_message.delete_comment",{"_index":1712,"title":{},"body":{"injectables/PostsService.html":{}}}],["responses_message.delete_user",{"_index":2016,"title":{},"body":{"injectables/UsersService.html":{}}}],["rest",{"_index":2762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2572,"title":{},"body":{"license.html":{}}}],["result",{"_index":2372,"title":{},"body":{"index.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2575,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":2202,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":801,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["roledecorator",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(erole.admin",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roles",{"_index":1825,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":375,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":1200,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["rpcexception",{"_index":929,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rpcexceptionfilter",{"_index":928,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rt",{"_index":613,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":552,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":582,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2391,"title":{},"body":{"index.html":{}}}],["running",{"_index":2408,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":919,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":921,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":2119,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["same_password",{"_index":2706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sample_image",{"_index":2298,"title":{},"body":{"index.html":{}}}],["savedname",{"_index":2821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["savedname.value",{"_index":2830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saves",{"_index":2831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":2312,"title":{},"body":{"index.html":{}}}],["scale",{"_index":2329,"title":{},"body":{"index.html":{}}}],["schema",{"_index":2321,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":972,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1265,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scopes",{"_index":2785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":2800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrolltop",{"_index":2809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":593,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":507,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":2359,"title":{},"body":{"index.html":{}}}],["see",{"_index":2304,"title":{},"body":{"index.html":{}}}],["select",{"_index":854,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2582,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":2057,"title":{},"body":{"changelog.html":{}}}],["senderid",{"_index":859,"title":{},"body":{"injectables/ConversationsService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["sendername",{"_index":1393,"title":{},"body":{"injectables/MessagesService.html":{}}}],["serialize",{"_index":2346,"title":{},"body":{"index.html":{}}}],["serve",{"_index":2380,"title":{},"body":{"index.html":{}}}],["server",{"_index":267,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/HealthController.html":{},"controllers/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servernats",{"_index":1405,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["servestaticmodule",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":2395,"title":{},"body":{"index.html":{}}}],["session",{"_index":303,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["session.visits",{"_index":452,"title":{},"body":{"injectables/AppService.html":{}}}],["set",{"_index":1210,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["setcontact",{"_index":2765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":1212,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setlicense",{"_index":2768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('ispublic",{"_index":2803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname",{"_index":2834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname(name",{"_index":2832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":1248,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1258,"title":{},"body":{"injectables/LoggerService.html":{}}}],["settimeout",{"_index":216,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":2361,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2110,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["setup(app",{"_index":2256,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.6.0",{"_index":2772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2592,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":2279,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":2515,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2513,"title":{},"body":{"index.html":{}}}],["short",{"_index":1772,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["side",{"_index":2313,"title":{},"body":{"index.html":{}}}],["signed",{"_index":2357,"title":{},"body":{"index.html":{}}}],["signin",{"_index":2295,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":2296,"title":{},"body":{"index.html":{}}}],["signup",{"_index":2294,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":535,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocaldto",{"_index":2663,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["single",{"_index":1799,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1783,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["singlefielddecorator",{"_index":1021,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":1033,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":1036,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":2257,"title":{},"body":{"miscellaneous/functions.html":{}}}],["site",{"_index":455,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["size",{"_index":1088,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":2289,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1995,"title":{},"body":{"injectables/UsersService.html":{}}}],["skipthrottle",{"_index":307,"title":{},"body":{"controllers/AppController.html":{},"controllers/MessagesGateway.html":{}}}],["skipthrottle(false",{"_index":318,"title":{},"body":{"controllers/AppController.html":{}}}],["skipthrottle(undefined",{"_index":289,"title":{},"body":{"controllers/AppController.html":{}}}],["snake",{"_index":2531,"title":{},"body":{"index.html":{}}}],["social",{"_index":2455,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1338,"title":{},"body":{"controllers/MessagesGateway.html":{},"properties.html":{}}}],["socket.io",{"_index":1360,"title":{},"body":{"controllers/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2569,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"changelog.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":2381,"title":{},"body":{"index.html":{}}}],["special",{"_index":1906,"title":{},"body":{"classes/UserEntity.html":{}}}],["specification",{"_index":1207,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2498,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1801,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":2688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":2232,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../axios.ts",{"_index":2684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":2244,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../fullname.validator.ts",{"_index":2698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.validator.ts",{"_index":2697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":2237,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":2236,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2233,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../math.constant.ts",{"_index":2696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../multi",{"_index":2238,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../options.enum.ts",{"_index":2213,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../password.validator.ts",{"_index":2699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":2239,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../repl.ts",{"_index":2234,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":2703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../setup.config.ts",{"_index":2240,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../single",{"_index":2241,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":2682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/constants/math.constant.ts",{"_index":2102,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/filters/rpc",{"_index":926,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts",{"_index":1289,"title":{},"body":{"controllers/MathController.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:35",{"_index":1294,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:42",{"_index":1297,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.module.ts",{"_index":1313,"title":{},"body":{"modules/MathModule.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts",{"_index":1404,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts:12",{"_index":1408,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["src/abstraction/prisma/prisma.module",{"_index":585,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/abstraction/prisma/prisma.module.ts",{"_index":1716,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/abstraction/prisma/prisma.service",{"_index":617,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["src/abstraction/prisma/prisma.service.ts",{"_index":1718,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/abstraction/prisma/prisma.service.ts:13",{"_index":1723,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:25",{"_index":1728,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:29",{"_index":1727,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:33",{"_index":1726,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/app.controller.ts",{"_index":285,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:25",{"_index":290,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:29",{"_index":291,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:42",{"_index":302,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:93",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":441,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:10",{"_index":443,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":442,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/common/dto/pagination.dto",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/common/dto/pagination.dto.ts",{"_index":1516,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/core/common/dto/pagination.dto.ts:13",{"_index":1520,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:23",{"_index":1522,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:33",{"_index":1524,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/configs/cors.config.ts",{"_index":2104,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":1192,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/setup.config.ts",{"_index":2109,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/configs/swagger.config.ts",{"_index":2111,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"injectables/GoogleStrategy.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/constants/options.enum.ts",{"_index":2214,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":2113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":241,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":247,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:26",{"_index":251,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:38",{"_index":255,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":1150,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":1151,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers",{"_index":622,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{}}}],["src/core/helpers/age.ts",{"_index":2115,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/axios.ts",{"_index":2117,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":1991,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":2118,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/errors.interceptor.ts",{"_index":909,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/errors.interceptor.ts:13",{"_index":914,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["src/core/interceptors/http",{"_index":1136,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":1221,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":1224,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1273,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1274,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/null.interceptor.ts",{"_index":935,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/null.interceptor.ts:12",{"_index":936,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1857,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1858,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":1226,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1815,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1863,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":2120,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":1237,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":1239,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":2122,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":1245,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1257,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1255,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1263,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1252,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1261,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1264,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1259,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":941,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/logger",{"_index":1231,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1526,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":2019,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":2024,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":2022,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":2125,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1819,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:10",{"_index":1821,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:7",{"_index":1820,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/security/throttle",{"_index":1843,"title":{},"body":{"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["src/core/utils/delay.ts",{"_index":2126,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random.ts",{"_index":2128,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":1794,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":2130,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":2224,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":2221,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":2131,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":2262,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":2260,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":2134,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2630,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2629,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":2135,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2636,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2635,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":2136,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2680,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2679,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/health.controller.ts",{"_index":1108,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:25",{"_index":1114,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infrastructure/admin/admin",{"_index":83,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":72,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:111",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:71",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:80",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:89",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:99",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1977,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":583,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:107",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:119",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:139",{"_index":611,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:16",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:24",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:50",{"_index":614,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:62",{"_index":610,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:87",{"_index":609,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1300,"title":{},"body":{"controllers/MathController.html":{},"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":2137,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":2140,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto/request",{"_index":1952,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":1868,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1284,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":1842,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":458,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:11",{"_index":462,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:17",{"_index":465,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:27",{"_index":468,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1831,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:4",{"_index":1832,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":489,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:20",{"_index":495,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:9",{"_index":492,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1834,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:12",{"_index":1835,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:25",{"_index":1837,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":751,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:105",{"_index":788,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:120",{"_index":792,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:135",{"_index":773,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:150",{"_index":796,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:169",{"_index":778,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:188",{"_index":803,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:80",{"_index":767,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:92",{"_index":783,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":833,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":835,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:100",{"_index":842,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:115",{"_index":838,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:132",{"_index":843,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:147",{"_index":839,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:16",{"_index":836,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:182",{"_index":844,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:19",{"_index":837,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:34",{"_index":840,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:74",{"_index":841,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":876,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":897,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":1091,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":901,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":692,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:103",{"_index":733,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":721,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:36",{"_index":729,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:51",{"_index":719,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:57",{"_index":704,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:63",{"_index":709,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:70",{"_index":730,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:78",{"_index":723,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:85",{"_index":700,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:94",{"_index":711,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":2143,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":2145,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":2146,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":982,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:112",{"_index":1007,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:70",{"_index":994,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:81",{"_index":999,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:92",{"_index":1014,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":1077,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":1079,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":1081,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":1083,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":1082,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":1080,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/request/create",{"_index":881,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/request/delete",{"_index":900,"title":{},"body":{"classes/DeleteMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts",{"_index":1319,"title":{},"body":{"classes/MessageEntity.html":{},"coverage.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:11",{"_index":1323,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:19",{"_index":1329,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:27",{"_index":1326,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:35",{"_index":1322,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/entities/message.entity.ts:43",{"_index":1324,"title":{},"body":{"classes/MessageEntity.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1332,"title":{},"body":{"controllers/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:25",{"_index":1343,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1340,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:45",{"_index":1350,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:56",{"_index":1346,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1381,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1383,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:10",{"_index":1387,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:30",{"_index":1389,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:38",{"_index":1386,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:54",{"_index":1390,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1385,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts",{"_index":1424,"title":{},"body":{"controllers/OauthController.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:102",{"_index":1450,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:115",{"_index":1444,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:63",{"_index":1440,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:77",{"_index":1436,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:88",{"_index":1447,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.module.ts",{"_index":1474,"title":{},"body":{"modules/OauthModule.html":{}}}],["src/infrastructure/oauth/oauth.service.ts",{"_index":1479,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:14",{"_index":1486,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:32",{"_index":1492,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:50",{"_index":1488,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:66",{"_index":1490,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:8",{"_index":1484,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts",{"_index":956,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:10",{"_index":957,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:21",{"_index":962,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts",{"_index":1093,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:13",{"_index":1094,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:23",{"_index":1096,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/posts/dto/comment/request/create",{"_index":871,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/delete",{"_index":896,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/update",{"_index":1864,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":888,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":906,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1814,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":670,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:12",{"_index":676,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":683,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:20",{"_index":684,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:24",{"_index":678,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:28",{"_index":680,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:32",{"_index":682,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":891,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1539,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:12",{"_index":1553,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:16",{"_index":1545,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:20",{"_index":1547,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:24",{"_index":1550,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:28",{"_index":1544,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:32",{"_index":1548,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:36",{"_index":1546,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:40",{"_index":1552,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:44",{"_index":1554,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1558,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:110",{"_index":1595,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:123",{"_index":1598,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:135",{"_index":1601,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:147",{"_index":1614,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:157",{"_index":1588,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:170",{"_index":1606,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:180",{"_index":1592,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:193",{"_index":1576,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:206",{"_index":1610,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:218",{"_index":1585,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:94",{"_index":1581,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1661,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1663,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:125",{"_index":1672,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:143",{"_index":1675,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:174",{"_index":1668,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:200",{"_index":1673,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:228",{"_index":1669,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:239",{"_index":1665,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:261",{"_index":1674,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:276",{"_index":1667,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:34",{"_index":1664,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:37",{"_index":1666,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:71",{"_index":1670,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:89",{"_index":1671,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/users/dto/request/update",{"_index":1872,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1739,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:101",{"_index":1759,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:111",{"_index":1764,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:121",{"_index":1781,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:35",{"_index":1777,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:43",{"_index":1761,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:51",{"_index":1768,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:58",{"_index":1784,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:65",{"_index":1782,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:75",{"_index":1753,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:83",{"_index":1787,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:88",{"_index":1767,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/user.entity",{"_index":1869,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/users/entities/user.entity.ts",{"_index":1888,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:22",{"_index":1892,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:41",{"_index":1908,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:50",{"_index":1896,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:59",{"_index":1895,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:78",{"_index":1912,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1925,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:103",{"_index":1944,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:114",{"_index":1951,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:128",{"_index":1946,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:142",{"_index":1948,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:154",{"_index":1933,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:77",{"_index":1936,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:90",{"_index":1942,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1973,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":1974,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1979,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:115",{"_index":1989,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:135",{"_index":1987,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:164",{"_index":1988,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:193",{"_index":1981,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:226",{"_index":1982,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:33",{"_index":1980,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:36",{"_index":1983,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:61",{"_index":1984,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:81",{"_index":1985,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:96",{"_index":1986,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":2149,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/repl.ts",{"_index":2151,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standards",{"_index":2336,"title":{},"body":{"index.html":{}}}],["start",{"_index":2475,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2478,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":2480,"title":{},"body":{"index.html":{}}}],["startat",{"_index":2090,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":2048,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1166,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["state",{"_index":209,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":2074,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":237,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":325,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["status_message",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["status_message.success",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":273,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":2504,"title":{},"body":{"index.html":{}}}],["store",{"_index":2399,"title":{},"body":{"index.html":{}}}],["str",{"_index":2248,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strategies",{"_index":587,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/facebook.strategy",{"_index":1478,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategies/google.strategy",{"_index":1476,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategy",{"_index":499,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["string})@isarray()@isnotempty",{"_index":710,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["string})@isstring()@isnotempty",{"_index":720,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["string})@isstring()@isnotempty()@length(1",{"_index":724,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["structure",{"_index":2305,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2470,"title":{},"body":{"index.html":{}}}],["style",{"_index":201,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2587,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2580,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1352,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1339,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1342,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1345,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1349,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["substantial",{"_index":2593,"title":{},"body":{"license.html":{}}}],["success",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["success(message",{"_index":218,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["successfuly",{"_index":1580,"title":{},"body":{"controllers/PostsController.html":{}}}],["sum",{"_index":1291,"title":{},"body":{"controllers/MathController.html":{}}}],["sum(data",{"_index":1295,"title":{},"body":{"controllers/MathController.html":{}}}],["summary",{"_index":158,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":475,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":486,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1271,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1269,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1268,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1272,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1270,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":2358,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2621,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1198,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2467,"title":{},"body":{"index.html":{}}}],["system",{"_index":1124,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["system'})@healthcheck",{"_index":1113,"title":{},"body":{"controllers/HealthController.html":{}}}],["system_error",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["system_error.conflict",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.forbidden",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.internal_server_error",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.method_not_allowed",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_acceptable",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_found",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.payload_too_large",{"_index":1028,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["system_error.request_timeout",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.too_many_requests",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unauthorized",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unsupported_media_type",{"_index":1029,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["t",{"_index":1816,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":2156,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2155,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":2322,"title":{},"body":{"index.html":{}}}],["take",{"_index":858,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["takes",{"_index":2369,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1275,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tar.gz",{"_index":2071,"title":{},"body":{"changelog.html":{}}}],["templates",{"_index":2454,"title":{},"body":{"index.html":{}}}],["teneno",{"_index":295,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":2379,"title":{},"body":{"index.html":{}}}],["terminusmodule",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["terms",{"_index":2396,"title":{},"body":{"index.html":{}}}],["test",{"_index":2490,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2493,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2492,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2489,"title":{},"body":{"index.html":{}}}],["text",{"_index":674,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteMessageDto.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["text'})@isnotempty()@isstring",{"_index":1325,"title":{},"body":{"classes/MessageEntity.html":{}}}],["thanks",{"_index":2497,"title":{},"body":{"index.html":{}}}],["theme",{"_index":1159,"title":{},"body":{"interfaces/IApp.html":{}}}],["thememanager",{"_index":1158,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["then(async",{"_index":2740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thinking",{"_index":2292,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":2281,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1734,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1735,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1736,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello(session",{"_index":327,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(payload",{"_index":1500,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.signuplocal(dto",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(payload",{"_index":1499,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.updatepassword(dto",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.client.send(pattern",{"_index":1310,"title":{},"body":{"controllers/MathController.html":{}}}],["this.configservice.get('app_secret",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversationsservice",{"_index":811,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":813,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":822,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":827,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(userid",{"_index":815,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":818,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":820,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":825,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":829,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.disk.checkstorage('storage",{"_index":1132,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":1034,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":1037,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":1048,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":1040,"title":{},"body":{"controllers/FileController.html":{}}}],["this.generatekey(context",{"_index":2040,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.getallmessages(dto.conversationid",{"_index":1400,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getclientname(dto.senderid",{"_index":1394,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmessagehandler(key).bind(this",{"_index":1422,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1688,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":2008,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens(newuser.id",{"_index":649,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":658,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.githubsuccess(data.access_token",{"_index":1508,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.handlemessage(exception",{"_index":264,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.health.check",{"_index":1125,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpadapterhost",{"_index":1143,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.items.findindex((item",{"_index":224,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.push",{"_index":214,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.splice(index",{"_index":227,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.jwtservice.signasync",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":271,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":450,"title":{},"body":{"injectables/AppService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":1129,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('mem_rss",{"_index":1126,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagehandlers.keys",{"_index":1413,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.messagesservice.createmessage",{"_index":1369,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.getallmessages(conversationid",{"_index":1368,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.getclientname(senderid",{"_index":1374,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.messagesservice.removemessage(dto",{"_index":1377,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.notify(message",{"_index":219,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.oauthservice.facebooklogin(req",{"_index":1460,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.githubredirect(req",{"_index":1469,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.googlelogin(req",{"_index":1466,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.postsservice.addcomment(userid",{"_index":1652,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(userid",{"_index":1632,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1657,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":1644,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1650,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(userid",{"_index":1634,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1636,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1639,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1647,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1654,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1642,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1266,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1709,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1711,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1710,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":847,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":866,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":853,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":864,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["this.prismaservice.conversation.update",{"_index":862,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.message.create",{"_index":1395,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.prismaservice.message.delete",{"_index":1401,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.prismaservice.post.create",{"_index":1677,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1697,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1683,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1687,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1693,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1706,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1700,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1994,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":647,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":2017,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":653,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":661,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":2015,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":2006,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride",{"_index":482,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["this.remove(id",{"_index":217,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.server.emit('message",{"_index":1371,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.server.emit('remove",{"_index":1378,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["this.storageservice.addrecord(key",{"_index":2046,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.storageservice.getrecord(key",{"_index":2042,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["this.tovalidate(metatype",{"_index":2026,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":651,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":660,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1957,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":1968,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":1960,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":1963,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(payload.email",{"_index":1498,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["thresholdpercent",{"_index":1133,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttle",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlerbehindproxyguard",{"_index":311,"title":{"injectables/ThrottlerBehindProxyGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"coverage.html":{}}}],["throttlerexception",{"_index":2037,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["throttlerexception('many",{"_index":2044,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["throttlerguard",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/WsThrottlerGuard.html":{}}}],["throttlermodule",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["through",{"_index":1211,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":487,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{}}}],["throwerror",{"_index":918,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["thuong",{"_index":2559,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2556,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2483,"title":{},"body":{"index.html":{}}}],["time",{"_index":2388,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":198,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["timeout(5000",{"_index":1862,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout.interceptor",{"_index":1230,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["timeouterror",{"_index":1860,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1229,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["times",{"_index":456,"title":{},"body":{"injectables/AppService.html":{}}}],["timestamp",{"_index":277,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":2444,"title":{},"body":{"index.html":{}}}],["title",{"_index":893,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":2283,"title":{},"body":{"index.html":{}}}],["token",{"_index":478,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/OauthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":648,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":652,"title":{},"body":{"injectables/AuthService.html":{}}}],["too_many_requests",{"_index":2724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":2426,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2615,"title":{},"body":{"license.html":{}}}],["total",{"_index":1993,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2505,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":2020,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":2021,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1254,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trackby",{"_index":1138,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1139,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trading",{"_index":2512,"title":{},"body":{"index.html":{}}}],["training",{"_index":2537,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2557,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1528,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1529,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1788,"title":{},"body":{"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":1225,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transition",{"_index":1171,"title":{},"body":{"interfaces/IApp.html":{}}}],["transmitted",{"_index":2418,"title":{},"body":{"index.html":{}}}],["transport",{"_index":1315,"title":{},"body":{"modules/MathModule.html":{}}}],["transport.tcp",{"_index":1318,"title":{},"body":{"modules/MathModule.html":{}}}],["travel",{"_index":1802,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":1841,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":205,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/AuthModule.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WsThrottlerGuard.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isoptional()@isstring()@length(0",{"_index":714,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["truong",{"_index":2560,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["trusts",{"_index":2420,"title":{},"body":{"index.html":{}}}],["tslint",{"_index":2206,"title":{},"body":{"dependencies.html":{}}}],["ttl",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"injectables/WsThrottlerGuard.html":{}}}],["ttls",{"_index":2041,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["ttls.length",{"_index":2043,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["turn",{"_index":2462,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2530,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2519,"title":{},"body":{"index.html":{}}}],["type",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteMessageDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessageEntity.html":{},"controllers/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/ThrottlerBehindProxyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"injectables/WsThrottlerGuard.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2646,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1184,"title":{},"body":{"interfaces/IApp.html":{}}}],["types",{"_index":2031,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":2032,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":2171,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2315,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1336,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["typing(senderid",{"_index":1347,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["ui/ux",{"_index":2539,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":2416,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":470,"title":{},"body":{"injectables/AtGuard.html":{}}}],["uncaught",{"_index":1173,"title":{},"body":{"interfaces/IApp.html":{}}}],["undefined",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apicreatedresponse({description",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["undefined})@apicreatedresponse({type",{"_index":765,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["undefined})@apioperation({summary",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MathController.html":{}}}],["undefined})@arrayfielddecorator('files",{"_index":1011,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":722,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["undefined})@multifielddecorator(['undefined",{"_index":1005,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/avatars",{"_index":993,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/covers",{"_index":998,"title":{},"body":{"controllers/FileController.html":{}}}],["under",{"_index":2554,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2488,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":768,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported_media_type",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":91,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{}}}],["update(userid",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1569,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(dto",{"_index":1607,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1608,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":758,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":789,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":790,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateconversationmembersdto",{"_index":2665,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updateconversationroles",{"_index":2666,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updated",{"_index":861,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":697,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":759,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":793,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":794,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateoneconversationbyiddto",{"_index":2667,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updatepassword",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":542,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1570,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1641,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1611,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1612,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostsdto",{"_index":2668,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updaterolesconversation",{"_index":760,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":797,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":798,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":612,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuseravatardto",{"_index":125,"title":{"classes/UpdateUserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusercoverdto",{"_index":131,"title":{"classes/UpdateUserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":119,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusersavatar",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":130,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1929,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1949,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":990,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":983,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadavatar(data",{"_index":1051,"title":{},"body":{"classes/FileService.html":{}}}],["uploadavatar(file",{"_index":987,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatardto",{"_index":1052,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadcover",{"_index":984,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadcover(data",{"_index":1055,"title":{},"body":{"classes/FileService.html":{}}}],["uploadcover(file",{"_index":995,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcoverdto",{"_index":1056,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadedfile",{"_index":1015,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":1016,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":2254,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":985,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":1000,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpost",{"_index":1050,"title":{},"body":{"classes/FileService.html":{}}}],["uploadpost(data",{"_index":1058,"title":{},"body":{"classes/FileService.html":{}}}],["uploadposts",{"_index":986,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":1008,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpostsdto",{"_index":1059,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":1904,"title":{},"body":{"classes/UserEntity.html":{}}}],["upsertreactpostdto",{"_index":2670,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uptest",{"_index":2487,"title":{},"body":{"index.html":{}}}],["url",{"_index":1064,"title":{},"body":{"classes/FileService.html":{},"injectables/OauthService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/variables.html":{}}}],["url'})@isstring()@isnotempty",{"_index":1760,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["use",{"_index":943,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":945,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["usealertsstore",{"_index":207,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["usecount",{"_index":2076,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["used",{"_index":1215,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usednames",{"_index":2825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usednames.value.filter((name",{"_index":2829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useful",{"_index":2402,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":304,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["useguards(authguard('facebook",{"_index":1456,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(authguard('google",{"_index":1462,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(rtguard",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(throttlerbehindproxyguard",{"_index":316,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(wsthrottlerguard",{"_index":1363,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["useinterceptors",{"_index":445,"title":{},"body":{"injectables/AppService.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":448,"title":{},"body":{"injectables/AppService.html":{}}}],["usenamevalidator",{"_index":1916,"title":{"classes/usenameValidator.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"injectables/GoogleStrategy.html":{},"classes/MessageEntity.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiokresponse({description",{"_index":1575,"title":{},"body":{"controllers/PostsController.html":{}}}],["user'})@isstring()@isnotempty",{"_index":732,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["user)'})@apiokresponse({description",{"_index":764,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":782,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1004,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":2139,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":659,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":663,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":1976,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":942,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":944,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":948,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":657,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1830,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.includes(role",{"_index":1829,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1828,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.username",{"_index":1392,"title":{},"body":{"injectables/MessagesService.html":{}}}],["user:read",{"_index":2787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user:write",{"_index":2786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_error",{"_index":619,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":1285,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":953,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":1937,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1922,"title":{},"body":{"classes/UserEntity.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1909,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":84,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:109",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:121",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:133",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:75",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:86",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:97",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.dto.ts",{"_index":1873,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["users.length",{"_index":2001,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":1953,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/request",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/entities/user.entity",{"_index":1286,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["users/users.module",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/OauthService.html":{}}}],["userscontroller",{"_index":1924,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":57,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":154,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"injectables/OauthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usestate('app",{"_index":1169,"title":{},"body":{"interfaces/IApp.html":{}}}],["usesticky",{"_index":2080,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["useuserstore",{"_index":2082,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":191,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["v4",{"_index":190,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{}}}],["val",{"_index":1535,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":490,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(accesstoken",{"_index":958,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(fullnamevalidator",{"_index":1798,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":2261,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":2029,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1921,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":493,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1806,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":1836,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":2223,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":1923,"title":{},"body":{"classes/UserEntity.html":{}}}],["validation",{"_index":2342,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":2220,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":2018,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":690,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/DeleteOnePost.html":{},"classes/MessageEntity.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":2225,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":2217,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":939,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/ISwaggerOptions.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.pattern",{"_index":1420,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["value.queue",{"_index":1421,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["variable",{"_index":2079,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2681,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":2324,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":1249,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1260,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":2338,"title":{},"body":{"index.html":{}}}],["verifycallback",{"_index":1095,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["versa",{"_index":2345,"title":{},"body":{"index.html":{}}}],["version",{"_index":305,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["version('1",{"_index":323,"title":{},"body":{"controllers/AppController.html":{}}}],["version('1')@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":294,"title":{},"body":{"controllers/AppController.html":{}}}],["versioning",{"_index":2058,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["versions",{"_index":2406,"title":{},"body":{"index.html":{}}}],["viandwi24",{"_index":1167,"title":{},"body":{"interfaces/IApp.html":{}}}],["video",{"_index":1327,"title":{},"body":{"classes/MessageEntity.html":{}}}],["view",{"_index":2764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["views",{"_index":453,"title":{},"body":{"injectables/AppService.html":{}}}],["visited",{"_index":454,"title":{},"body":{"injectables/AppService.html":{}}}],["void",{"_index":249,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/FacebookStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"classes/NatsStrategy.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":1170,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["wait",{"_index":2127,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":2258,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":1250,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1262,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":193,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["warning(message",{"_index":221,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":2600,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2596,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2476,"title":{},"body":{"index.html":{}}}],["web",{"_index":2419,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":2275,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":2152,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":2415,"title":{},"body":{"index.html":{}}}],["websocket.guard.ts",{"_index":2034,"title":{},"body":{"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["websocket.guard.ts:6",{"_index":2036,"title":{},"body":{"injectables/WsThrottlerGuard.html":{}}}],["websocketgateway",{"_index":1351,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["websocketserver",{"_index":1354,"title":{},"body":{"controllers/MessagesGateway.html":{}}}],["whether",{"_index":2612,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":2106,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["window",{"_index":1185,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('error",{"_index":1186,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('scroll",{"_index":2816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.location.reload",{"_index":1190,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.pageyoffset",{"_index":2810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.removeeventlistener('scroll",{"_index":2818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":2409,"title":{},"body":{"index.html":{}}}],["without",{"_index":322,"title":{},"body":{"controllers/AppController.html":{},"license.html":{}}}],["work",{"_index":319,"title":{},"body":{"controllers/AppController.html":{}}}],["world",{"_index":451,"title":{},"body":{"injectables/AppService.html":{},"classes/MessageEntity.html":{}}}],["writtenposts",{"_index":1684,"title":{},"body":{"injectables/PostsService.html":{}}}],["wsthrottlerguard",{"_index":2033,"title":{"injectables/WsThrottlerGuard.html":{}},"body":{"injectables/WsThrottlerGuard.html":{},"coverage.html":{}}}],["x",{"_index":2437,"title":{},"body":{"index.html":{}}}],["years",{"_index":1756,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["yes",{"_index":1253,"title":{},"body":{"injectables/LoggerService.html":{}}}],["you'd",{"_index":2501,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2634,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2631,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2632,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":2226,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2633,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zip",{"_index":2070,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":59,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { EROLE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@RoleDecorator(EROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n    constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport { EROLE, STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\nimport { Public } from '../auth/decorators';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from '../users/dto/request';\nimport {\n    IAllUsers,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@RoleDecorator(EROLE.ADMIN)\n@Controller('admin')\nexport class AdminUsersController {\n    constructor(private readonly usersService: UsersService) {}\n\n    @Public()\n    @Get('users/all')\n    @ApiOperation({ summary: 'Get list all public users' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getAllUsers(@Query() dto: PaginationDto): Promise {\n        return this.usersService.getAllUsers(dto);\n    }\n\n    @Public()\n    @Get('users/:userId')\n    @ApiOperation({\n        summary: 'Get user profile by user-id',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @Param('userId') userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('users/profile/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: 'Success' })\n    async update(\n        @Param('userId') userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('users/avatar/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersAvatar(\n        @Param() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('users/cover/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersCover(\n        @Param() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('users/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user by user-id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUserById(@Param('userId') userId: string): Promise {\n        return this.usersService.deleteUserById(userId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Alert.html":{"url":"interfaces/Alert.html","title":"interface - Alert","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Alert\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AlertOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AlertOptions.html":{"url":"interfaces/AlertOptions.html","title":"interface - AlertOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlertOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            closable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            html\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        closable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        html\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        html:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:         AlertStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlertStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(request, response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    request: Request,\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        timestamp: new Date().toISOString(),\n        message: exception.stack,\n        path: request.url,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dontSkip\n                            \n                            \n                                doSkip\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        dontSkip\n                        \n                    \n                \n            \n            \n                \ndontSkip()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SkipThrottle(undefined)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doSkip\n                        \n                    \n                \n            \n            \n                \ndoSkip()\n                \n            \n\n\n            \n                \n                    Defined in src/app.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello(session: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Version('1')@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: 'Default server response'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Session,\n    UseGuards,\n    Version,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { SkipThrottle } from '@nestjs/throttler';\nimport { AppService } from './app.service';\nimport { ThrottlerBehindProxyGuard } from './core/security/throttle-proxy.guard';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@UseGuards(ThrottlerBehindProxyGuard)\n@SkipThrottle()\n@Public()\n@Controller({ version: '2', path: '/' })\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @SkipThrottle(false)\n    dontSkip() {\n        return 'List users work with Rate limiting.';\n    }\n\n    doSkip() {\n        return 'List users work without Rate limiting.';\n    }\n\n    @Version('1')\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Teneno homepage' })\n    @ApiResponse({\n        status: 200,\n        description: 'Default server response',\n    })\n    @ApiResponse({ status: 404, description: 'Not found' })\n    getHello(@Session() session: Record): any {\n        return this.appService.getHello(session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MathModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            OauthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n    CacheModule,\n    MiddlewareConsumer,\n    Module,\n    NestModule,\n} from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './abstraction/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\nimport { OauthModule } from './infrastructure/oauth/oauth.module';\nimport { MathModule } from './abstraction/microservices/math/math.module';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\n\n@Module({\n    imports: [\n        InterceptorModule,\n        PrismaModule,\n        TerminusModule,\n        ThrottlerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (config: ConfigService) => ({\n                ttl: config.get('THROTTLE_TTL'),\n                limit: config.get('THROTTLE_LIMIT'),\n                ignoreUserAgents: [\n                    // Don't throttle request that have 'googlebot' defined in them.\n                    // Example user agent: Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\n                    /googlebot/gi,\n                    // Example user agent: Mozilla/5.0 (compatible; Bingbot/2.0; +http://www.bing.com/bingbot.htm)\n                    new RegExp('bingbot', 'gi'),\n                ],\n            }),\n        }),\n        CacheModule.register(),\n        MathModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            cache: true,\n            // envFilePath: ['.env'],\n            envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n        }),\n        LoggerModule.forRoot(),\n        ServeStaticModule.forRoot({\n            rootPath: `${__dirname}/../docs`,\n            // rootPath: join(__dirname, '..', 'docs'),\n            renderPath: '/',\n            // exclude: ['/api*'],\n        }),\n        AuthModule,\n        OauthModule,\n        AdminModule,\n        UsersModule,\n        FilesModule,\n        PostsModule,\n        ConversationsModule,\n        MessagesModule,\n    ],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        {\n            provide: APP_GUARD,\n            useClass: ThrottlerGuard,\n        },\n        // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n        {\n            provide: APP_GUARD,\n            useClass: AtGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: RolesGuard,\n        },\n    ],\n})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer.apply(LoggerContextMiddleware).forRoutes('*');\n        //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n        //   .forRoutes(UsersController);\n        // .forRoutes('users');\n        // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n        // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello(session: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor, Injectable, UseInterceptors } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\n@UseInterceptors(CacheInterceptor)\nexport class AppService {\n    constructor(@Logger('AppService') private logger: LoggerService) {}\n\n    getHello(session: Record): any {\n        this.logger.log('Hello World', '200');\n        session.visits = session.visits ? session.visits + 1 : 1;\n        return {\n            views: `You visited this site ${session.visits} times`,\n            message: 'Hello World from Teneno!',\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtGuard extends AuthGuard(ESTRATEGY.JWT) {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    // if true will enter with access-token , and another hand\n    public canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            process.env.PUBLIC_GUARD,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) return true;\n\n        return super.canActivate(context);\n    }\n\n    handleRequest(err, user, info) {\n        if (err || !user) {\n            throw err || new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, ESTRATEGY.JWT) {\n    constructor(private config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            ignoreExpiration: false,\n            passReqToCallback: false,\n        });\n    }\n\n    validate(payload: IJwtPayload): IJwtPayload {\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: undefined})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account.'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: undefined, type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { ITokens } from './dto/response';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {\n        this.authService = authService;\n    }\n\n    @Public()\n    @Post('signup')\n    @ApiOperation({ summary: 'Create new user account.' })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n        type: SignupDto,\n    })\n    async signupLocal(@Body() dto: SignupDto): Promise {\n        return this.authService.signupLocal(dto);\n    }\n\n    @Public()\n    @Post('signin')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Login to user account' })\n    async signinLocal(@Body() dto: LoginDto): Promise {\n        return this.authService.signinLocal(dto);\n    }\n\n    @Post('logout')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Logout user account (user)' })\n    async logout(@GetCurrentUserId() userId: string): Promise {\n        return this.authService.logout(userId);\n    }\n\n    @Post('refresh')\n    @ApiBearerAuth()\n    @UseGuards(RtGuard)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Logout account on all devices' })\n    async refreshToken(\n        @GetCurrentUserId() userId: string,\n        @GetCurrentUser('refreshToken') refreshToken: string,\n    ): Promise {\n        return this.authService.refreshToken(userId, refreshToken);\n    }\n\n    @Put('password')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Update user password' })\n    async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n        return this.authService.updatePassWord(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n    imports: [\n        PrismaModule,\n        JwtModule,\n        PassportModule.register({ session: true }),\n        // JwtModule.registerAsync({\n        //   imports: [ConfigModule],\n        //   useFactory: async (configService: ConfigService) => ({\n        //     secret: configService.get(\"APP_SECRET\"),\n        //     signOptions: { expiresIn: configService.get(\"EXPIRE_AT_TIME\") },\n        //   }),\n        //   inject: [ConfigService],\n        // })\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, AtStrategy, RtStrategy],\n    exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ConflictException,\n    ForbiddenException,\n    Inject,\n    Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport { ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { AUTH_ERROR, SYSTEM_ERROR, USER_ERROR } from 'src/core/constants';\nimport { comparePassword, hashPassword } from 'src/core/helpers';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(ConfigService)\n        private configService: ConfigService,\n        private prismaService: PrismaService,\n        private jwtService: JwtService,\n    ) {}\n\n    async getTokens(userId: string, email: string): Promise {\n        const [at, rt] = await Promise.all([\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n                },\n            ),\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n                },\n            ),\n        ]);\n        return { accessToken: at, refreshToken: rt };\n    }\n\n    async updateRtHash(userId: string, rt: string) {\n        const hash = await hashPassword(rt);\n        await this.prismaService.user.update({\n            where: {\n                id: userId,\n            },\n            data: {\n                hashedRefreshToken: hash,\n            },\n        });\n    }\n\n    async signupLocal(dto: SignupDto): Promise {\n        const hash = await hashPassword(dto.password);\n\n        const userExist = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ email: dto.email }, { username: dto.username }],\n            },\n        });\n\n        if (userExist.length > 0)\n            throw new ConflictException(USER_ERROR.DUPLICATE);\n\n        const newUser = await this.prismaService.user.create({\n            data: {\n                email: dto.email,\n                password: hash,\n                username: dto.username,\n            },\n        });\n\n        const tokens = await this.getTokens(newUser.id, newUser.email);\n        await this.updateRtHash(newUser.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async signinLocal(dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const passwordMatches = await comparePassword(\n            dto.password,\n            user.password,\n        );\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async logout(userId: string): Promise {\n        await this.prismaService.user.updateMany({\n            where: {\n                id: userId,\n                hashedRefreshToken: {\n                    not: null,\n                },\n            },\n            data: { hashedRefreshToken: null },\n        });\n    }\n\n    async refreshToken(userId: string, refreshToken: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n        if (!user || !user.hashedRefreshToken)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const hashMatches = await comparePassword(\n            refreshToken,\n            user.hashedRefreshToken,\n        );\n        if (!hashMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async updatePassWord(dto: UpdatePasswordDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n\n        const passwordMatches = await comparePassword(\n            dto.oldPassword,\n            user.password,\n        );\n\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (dto.newPassword === dto.oldPassword)\n            throw new ForbiddenException(AUTH_ERROR.SAME_PASSWORD);\n\n        if (passwordMatches) {\n            await this.prismaService.user.update({\n                where: { email: dto.email },\n                data: {\n                    password: await hashPassword(dto.newPassword),\n                },\n            });\n        }\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\n\nexport class CommentEntity {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  reactions: number[];\n\n  @IsJSON()\n  @IsNotEmpty()\n  replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The list all admins of the conversation', example: undefined, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The avatar of the conversation', example: 'avatar-123-456-789'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The create date of the conversation', example: '2021-01-01T00:00:00.000Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of conversation creator', example: 'creator-123-456-789', type: String})@IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The description of the conversation', example: 'description-123-456-789', type: String, required: false, nullable: true})@IsOptional()@IsString()@Length(0, 255)@MaxLength(256, {message: 'Description is too long, must be at most 255 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the conversation', example: 'id-123-456-789', type: String})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The list all members of the conversation', example: undefined, type: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the conversation', example: 'Conversation 1', type: String})@IsString()@IsNotEmpty()@Length(1, 50)@MinLength(0, {message: 'Name is not blank, must be at least 1 characters!'})@MaxLength(51, {message: 'Name is too long, must be at most 50 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The update date of the conversation', example: '2021-01-01T00:00:00.000Z', type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789', description: 'The id of the user'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:103\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n    IsArray,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    Length,\n    MaxLength,\n    MinLength,\n} from 'class-validator';\n\nexport class ConversationEntity {\n    @ApiProperty({\n        description: 'The id of the conversation',\n        example: 'id-123-456-789',\n        type: String,\n    })\n    @IsString()\n    @IsNotEmpty()\n    id: string;\n\n    @ApiProperty({\n        description: 'The name of the conversation',\n        example: 'Conversation 1',\n        type: String,\n    })\n    @IsString()\n    @IsNotEmpty()\n    @Length(1, 50)\n    @MinLength(0, {\n        message: 'Name is not blank, must be at least 1 characters!',\n    })\n    @MaxLength(51, {\n        message: 'Name is too long, must be at most 50 characters!',\n    })\n    name: string;\n\n    @ApiPropertyOptional({\n        description: 'The description of the conversation',\n        example: 'description-123-456-789',\n        type: String,\n        required: false,\n        nullable: true,\n    })\n    @IsOptional()\n    @IsString()\n    @Length(0, 255)\n    @MaxLength(256, {\n        message: 'Description is too long, must be at most 255 characters!',\n    })\n    description?: string | null;\n\n    @ApiProperty({\n        description: 'The avatar of the conversation',\n        example: 'avatar-123-456-789',\n    })\n    avatar: string;\n\n    @ApiProperty({\n        description: 'The create date of the conversation',\n        example: '2021-01-01T00:00:00.000Z',\n    })\n    createdAt: Date;\n\n    @ApiProperty({\n        description: 'The update date of the conversation',\n        example: '2021-01-01T00:00:00.000Z',\n        type: Date,\n    })\n    updatedAt: Date;\n\n    @ApiProperty({\n        description: 'The list all members of the conversation',\n        example: ['member1-123-456', 'member2-456-789'],\n        type: Array,\n    })\n    @IsArray()\n    members: string[];\n\n    @ApiProperty({\n        description: 'The list all admins of the conversation',\n        example: ['admin1-123-456', 'admin2-456-789'],\n        type: Array,\n    })\n    admins: string[];\n\n    @ApiProperty({\n        description: 'The name of conversation creator',\n        example: 'creator-123-456-789',\n        type: String,\n    })\n    @IsArray()\n    @IsNotEmpty()\n    creator: string;\n\n    @ApiProperty({\n        type: String,\n        example: 'user-id-123-456-789',\n        description: 'The id of the user',\n    })\n    @IsString()\n    @IsNotEmpty()\n    userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { GetCurrentUserId } from '../auth/decorators';\nimport { ConversationsService } from './conversations.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetAllConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities/conversation.entity';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n    constructor(private readonly conversationsService: ConversationsService) {\n        this.conversationsService = conversationsService;\n    }\n\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create a new conversation (user)' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({\n        type: ConversationEntity,\n        description: 'The new conversation has been created.',\n    })\n    async createConversation(@Body() dto: CreateConversationDto) {\n        return await this.conversationsService.createConversation(dto);\n    }\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        isArray: true,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllConversations(@GetCurrentUserId() userId: string) {\n        return this.conversationsService.getAllConversations(userId);\n    }\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getConversationById(\n        @Param('id') id: string,\n        @Body() dto: GetOneConversationDto,\n    ) {\n        return this.conversationsService.getConversationById(id, dto);\n    }\n\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    updateConversationById(\n        @Param('id') id: string,\n        @Body() dto: UpdateConversationDto,\n    ) {\n        return this.conversationsService.updateConversationById(id, dto);\n    }\n\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Delete one conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteConversationById(\n        @Param('id') id: string,\n        @Body() dto: DeleteConversationDto,\n    ) {\n        return this.conversationsService.deleteConversationById(id, dto);\n    }\n\n    @Patch(':conversationId/updateMembers')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update members list of current conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateMembersConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateMembersConversationDto,\n    ) {\n        return this.conversationsService.updateMembersConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/deleteAdmins')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Delete one admin of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteOneAdminConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: DeleteOneAdminConversationDto,\n    ) {\n        return this.conversationsService.deleteOneAdminConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/updateRoles')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Change role of any member of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateRolesConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateRolesConversationDto,\n    ) {\n        return this.conversationsService.updateRolesConversation(\n            conversationId,\n            dto,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_ConversationsModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [ConversationsController],\n    providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\nimport { CONVERSATION_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class ConversationsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createConversation(dto: CreateConversationDto) {\n        const newConversation = await this.prismaService.conversation.create({\n            data: {\n                id: uuid(),\n                name: dto.name,\n                description: dto.description,\n                avatar: '',\n                members: dto.members,\n                admins: dto.admins,\n                creator: dto.creator,\n            },\n        });\n        return newConversation;\n    }\n\n    async getAllConversations(userId: string) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: userId,\n                    },\n                    {\n                        admins: {\n                            has: userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: userId,\n                        },\n                    },\n                ],\n            },\n            select: {\n                id: true,\n                name: true,\n                avatar: true,\n                messages: {\n                    orderBy: {\n                        createdAt: 'asc',\n                    },\n                    take: 1,\n                    select: {\n                        type: true,\n                        text: true,\n                        updatedAt: true,\n                        senderId: true,\n                    },\n                },\n            },\n        });\n        return { userId, list };\n    }\n\n    async getConversationById(id: string, dto: GetOneConversationDto) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.userId,\n                    },\n                    {\n                        admins: {\n                            has: dto.userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: dto.userId,\n                        },\n                    },\n                ],\n                AND: {\n                    id: id,\n                },\n            },\n        });\n        return list;\n    }\n\n    updateConversationById(id: string, dto: UpdateConversationDto) {\n        const updated = this.prismaService.conversation.update({\n            where: {\n                id: id,\n            },\n            data: {\n                name: dto.name,\n                description: dto.description,\n                avatar: dto.avatar,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteConversationById(id: string, dto: DeleteConversationDto) {\n        const list = await this.prismaService.conversation.findUnique({\n            where: {\n                id: id,\n            },\n        });\n        if (list['creator'] === dto.userId) {\n            await this.prismaService.conversation.delete({\n                where: {\n                    id: id,\n                },\n            });\n            return '';\n        }\n        return false;\n    }\n\n    async updateMembersConversation(\n        conversationId: string,\n        dto: UpdateMembersConversationDto,\n    ) {\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteOneAdminConversation(\n        conversationId: string,\n        dto: DeleteOneAdminConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n        const updated = list[0]['admins'].filter(\n            (admin) => admin !== dto.userId,\n        );\n\n        await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: updated,\n            },\n        });\n        return updated;\n    }\n\n    async updateRolesConversation(\n        conversationId: string,\n        dto: UpdateRolesConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: dto.admins,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class CreateConversationDto extends OmitType(ConversationEntity, [\n    'id',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/request/create-message.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, OmitType } from '@nestjs/swagger';\nimport { MessageEntity } from '../../entities/message.entity';\n\n@ApiExtraModels()\nexport class CreateMessageDto extends OmitType(MessageEntity, ['id']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class DeleteConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteMessageDto.html":{"url":"classes/DeleteMessageDto.html","title":"class - DeleteMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/request/delete-message.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { MessageEntity } from '../../entities/message.entity';\n\nexport class DeleteMessageDto extends OmitType(MessageEntity, [\n    'type',\n    'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/errors.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/errors.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    BadGatewayException,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(\n                catchError((err) =>\n                    throwError(() => new BadGatewayException('Bad request...')),\n                ),\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionFilter.html":{"url":"classes/ExceptionFilter.html","title":"class - ExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/filters/rpc-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            RpcExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: RpcException)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/filters/rpc-exception.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            RpcException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, RpcExceptionFilter } from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { Observable, throwError } from 'rxjs';\n\n@Catch(RpcException)\nexport class ExceptionFilter implements RpcExceptionFilter {\n    catch(exception: RpcException): Observable {\n        return throwError(() => exception.getError());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/null.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(map((value) => (value === null ? '' : value)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n    constructor(private prismaService: PrismaService) {}\n\n    async use(req: Request, res: Response, next: NextFunction) {\n        const userId = req.params.userId;\n        const userExist = await this.prismaService.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n            },\n        });\n        if (\n            userExist === null ||\n            userExist === undefined ||\n            userExist.id === ''\n        ) {\n            throw new NotFoundException('User not found');\n        }\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/facebook.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (err: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-facebook';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.FACEBOOK,\n) {\n    constructor() {\n        super({\n            clientID: process.env.FACEBOOK_CLIENT_ID,\n            clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\n            callbackURL: process.env.FACEBOOK_CALLBACK_URL,\n            scope: 'email',\n            profileFields: ['emails', 'name'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: Profile,\n        done: (err: any, user: any, info?: any) => void,\n    ): Promise {\n        const { name, emails } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n        };\n        const payload = {\n            user,\n            accessToken,\n        };\n\n        done(null, payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    UploadedFile,\n    UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport {\n    ArrayFieldDecorator,\n    SingleFieldDecorator,\n    MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('files')\nexport class FileController {\n    constructor(private readonly fileService: FilesService) {}\n\n    @Post('avatar')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/avatars')\n    async uploadAvatar(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadAvatar(file);\n    }\n\n    @Post('cover')\n    @ApiOperation({ summary: 'Upload cover file form data (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/covers')\n    async uploadCover(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadCover(file);\n    }\n\n    @Post('posts')\n    @ApiOperation({ summary: 'Upload post with multi images (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ArrayFieldDecorator('files', true, 10, './public/posts')\n    async uploadPosts(\n        @UploadedFiles() files: Array,\n    ): Promise {\n        return this.fileService.uploadPosts(files);\n    }\n\n    @Post('multi')\n    @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @MultiFieldDecorator(\n        [\n            { name: 'item_1', maxCount: 1, required: true },\n            { name: 'item_2', maxCount: 1 },\n            { name: 'item_3', maxCount: 1 },\n            { name: 'item_4', maxCount: 1 },\n            { name: 'item_5', maxCount: 1 },\n        ],\n        './public/multi',\n    )\n    async uploadMulti(\n        @UploadedFiles() files: Express.Multer.File[],\n    ): Promise {\n        return this.fileService.uploadMulti(files);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileService.html":{"url":"classes/FileService.html","title":"class - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/services/file.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadAvatar\n                            \n                            \n                                uploadCover\n                            \n                            \n                                uploadPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \nuploadAvatar(data: UploadAvatarDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadCover\n                        \n                    \n                \n            \n            \n                \nuploadCover(data: UploadCoverDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPost\n                        \n                    \n                \n            \n            \n                \nuploadPost(data: UploadPostsDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadPostsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { UploadAvatarDto, UploadCoverDto, UploadPostsDto } from '@/dto';\nimport axiosConfig from './axios.config';\n\nconst ENDPOINT = '/files';\n\nexport class FileService {\n    uploadAvatar(data: UploadAvatarDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/avatar`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadCover(data: UploadCoverDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/cover`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadPost(data: UploadPostsDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/posts`;\n\n        const formData = new FormData();\n        formData.append('files', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class GetAllConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\nexport class GetOneConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\n\nexport class GetAllConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\nexport class GetOneConversationDto extends PickType(ConversationEntity, [\n    'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/google.strategy.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/google.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\nimport { Injectable } from '@nestjs/common';\nimport { ESTRATEGY } from 'src/core/constants';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.GOOGLE,\n) {\n    constructor() {\n        super({\n            clientID: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: process.env.GOOGLE_CALLBACK_URL,\n            scope: ['email', 'profile'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: any,\n        done: VerifyCallback,\n    ): Promise {\n        const { name, emails, photos } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n            picture: photos[0].value,\n            accessToken,\n        };\n        done(null, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                readiness\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        readiness\n                        \n                    \n                \n            \n            \n                \n                    \n                    readiness()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Health check for server system'})@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n    DiskHealthIndicator,\n    HealthCheck,\n    HealthCheckResult,\n    HealthCheckService,\n    MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Health')\n@Public()\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private memory: MemoryHealthIndicator,\n        private disk: DiskHealthIndicator,\n    ) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Health check for server system' })\n    @HealthCheck()\n    async readiness(): Promise {\n        return await this.health.check([\n            async () => await this.memory.checkRSS('mem_rss', 768 * 2 ** 20),\n            async () =>\n                await this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n            async () =>\n                await this.disk.checkStorage('storage', {\n                    path: '/',\n                    thresholdPercent: 0.5,\n                }),\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/http-cache.interceptor.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n    trackBy(context: ExecutionContext): string | undefined {\n        const request = context.switchToHttp().getRequest();\n        const { httpAdapter } = this.httpAdapterHost;\n\n        const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';\n        const excludePaths = [];\n        if (\n            !isGetRequest ||\n            (isGetRequest &&\n                excludePaths.includes(httpAdapter.getRequestUrl(request)))\n        ) {\n            return undefined;\n        }\n        return httpAdapter.getRequestUrl(request);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IApp.html":{"url":"interfaces/IApp.html","title":"interface - IApp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IApp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/helpers/app.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ThemeManager } from './theme';\n\nexport interface IApp {\n    name: string;\n    author: {\n        name: string;\n        link: string;\n    };\n}\n\nexport function AppSetup() {\n    const app: IApp = {\n        name: 'Nuxt 3 Awesome Starter',\n        author: {\n            name: 'viandwi24',\n            link: 'https://github.com/viandwi24',\n        },\n    };\n    useState('app', () => app);\n\n    const themeManager = ThemeManager();\n\n    // vue transition bug handle\n    const messages = [\n        \"Uncaught NotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\",\n        'NotFoundError: The object can not be found here.',\n    ];\n    if (typeof window !== 'undefined') {\n        window.addEventListener('error', (ev) => {\n            if (messages.includes(ev.message)) {\n                ev.preventDefault();\n                window.location.reload();\n            }\n        });\n    }\n\n    return {\n        app,\n        themeManager,\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\nimport { ErrorsInterceptor } from './errors.interceptor';\nimport { ExcludeNullInterceptor } from './null.interceptor';\nimport { TimeoutInterceptor } from './timeout.interceptor';\n\n@Module({\n    providers: [\n        { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ExcludeNullInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: TimeoutInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ErrorsInterceptor },\n    ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LoggerService, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n    use(req: Request, res: Response, next: () => void): void {\n        console.log(`Request ${req.body}...`);\n        console.log(`Response ${res}...`);\n        return next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MathController.html":{"url":"controllers/MathController.html","title":"controller - MathController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MathController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                math\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                execute\n                            \n                            \n                                sum\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Calculate check sum pattern'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sum\n                        \n                    \n                \n            \n            \n                \nsum(data: number[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'sum'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus, Inject } from '@nestjs/common';\nimport { ClientProxy, MessagePattern } from '@nestjs/microservices';\nimport {\n    ApiConflictResponse,\n    ApiInternalServerErrorResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { Public } from 'src/infrastructure/auth/decorators';\nimport { MATH_SERVICE } from '../constants/math.constant';\n\n@ApiTags('Microservices')\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('math')\nexport class MathController {\n    constructor(@Inject(MATH_SERVICE) private readonly client: ClientProxy) {}\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Calculate check sum pattern' })\n    execute(): Observable {\n        const pattern = { cmd: 'sum' };\n        const data = [1, 2, 3, 4, 5];\n        return this.client.send(pattern, data);\n    }\n\n    @MessagePattern({ cmd: 'sum' })\n    sum(data: number[]): number {\n        return (data || []).reduce((a, b) => a + b);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MathModule.html":{"url":"modules/MathModule.html","title":"module - MathModule","body":"\n                   \n\n\n\n\n    Modules\n    MathModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            MathController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { MATH_SERVICE } from '../constants/math.constant';\nimport { MathController } from './math.controller';\n\n@Module({\n    imports: [\n        ClientsModule.register([\n            { name: MATH_SERVICE, transport: Transport.TCP },\n        ]),\n    ],\n    controllers: [MathController],\n})\nexport class MathModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageEntity.html":{"url":"classes/MessageEntity.html","title":"class - MessageEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/entities/message.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'conversation-id-123-456-789', description: 'Conversation id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'id-123-456-789', description: 'Message id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user-id-123-456-789', description: 'User id'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Hello world', description: 'Message text'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'text', description: 'Message type: text, image, video, audio'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/entities/message.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class MessageEntity {\n    @ApiProperty({\n        example: 'id-123-456-789',\n        description: 'Message id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    id: string;\n\n    @ApiProperty({\n        example: 'text',\n        description: 'Message type: text, image, video, audio',\n    })\n    @IsNotEmpty()\n    @IsString()\n    type: string;\n\n    @ApiProperty({\n        example: 'Hello world',\n        description: 'Message text',\n    })\n    @IsNotEmpty()\n    @IsString()\n    text: string;\n\n    @ApiProperty({\n        example: 'conversation-id-123-456-789',\n        description: 'Conversation id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    conversationId: string;\n\n    @ApiProperty({\n        example: 'user-id-123-456-789',\n        description: 'User id',\n    })\n    @IsNotEmpty()\n    @IsString()\n    senderId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesGateway.html":{"url":"controllers/MessagesGateway.html","title":"controller - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n            \n                Prefix\n            \n            \n                messages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                removeMessage\n                            \n                            \n                                    Async\n                                typing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(dto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMessage(dto: DeleteMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(senderId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    WebSocketGateway,\n    SubscribeMessage,\n    MessageBody,\n    WebSocketServer,\n    ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, DeleteMessageDto } from './dto/request';\nimport { SkipThrottle } from '@nestjs/throttler';\nimport { ICreateMessage, IGetAllMessages } from './dto/response';\nimport { Controller } from '@nestjs/common';\n\n@SkipThrottle()\n// @UseGuards(WsThrottlerGuard)\n@Controller('messages')\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n    @WebSocketServer() server: Server;\n    constructor(private readonly messagesService: MessagesService) {}\n\n    @SubscribeMessage('findAllMessages')\n    async getAllMessages(\n        @MessageBody('conversationId') conversationId: string,\n    ): Promise {\n        return this.messagesService.getAllMessages(conversationId);\n    }\n\n    @SubscribeMessage('createMessage')\n    async createMessage(\n        @MessageBody() dto: CreateMessageDto,\n        @ConnectedSocket() client: Socket,\n    ): Promise {\n        const message = await this.messagesService.createMessage(\n            dto,\n            client.id,\n        );\n        this.server.emit('message', message);\n        return message;\n    }\n\n    @SubscribeMessage('typing')\n    async typing(\n        @MessageBody('senderId') senderId: string,\n        @MessageBody('isTyping') isTyping: boolean,\n        @ConnectedSocket() client: Socket,\n    ): Promise {\n        const name = await this.messagesService.getClientName(senderId);\n\n        client.broadcast.emit('typing', { senderId: name, isTyping });\n    }\n\n    @SubscribeMessage('removeMessage')\n    async removeMessage(\n        @MessageBody() dto: DeleteMessageDto,\n    ): Promise {\n        const remove = await this.messagesService.removeMessage(dto);\n        this.server.emit('remove', remove);\n        return remove;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n    controllers: [MessagesGateway],\n    providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getClientName\n                            \n                            \n                                    Async\n                                removeMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(dto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getClientName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClientName(clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMessage(dto: DeleteMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, DeleteMessageDto } from './dto/request';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport { ICreateMessage, IGetAllMessages } from './dto/response';\n\n@Injectable()\nexport class MessagesService {\n    constructor(private prismaService: PrismaService) {}\n\n    async getAllMessages(conversationId: string): Promise {\n        const identify = await this.prismaService.conversation.findUnique({\n            where: {\n                id: conversationId,\n            },\n            select: {\n                id: true,\n                name: true,\n                description: true,\n                avatar: true,\n                createdAt: true,\n                messages: true,\n                members: true,\n                admins: true,\n                creator: true,\n            },\n        });\n        return identify;\n    }\n\n    async getClientName(clientId: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: { id: clientId },\n            select: { username: true },\n        });\n        return user.username;\n    }\n\n    async createMessage(\n        dto: CreateMessageDto,\n        clientId: string,\n    ): Promise {\n        const senderName = await this.getClientName(dto.senderId);\n        await this.prismaService.message.create({\n            data: {\n                type: dto.type,\n                text: dto.text,\n                conversationId: dto.conversationId,\n                senderId: `${dto.senderId}:${senderName}`,\n            },\n        });\n        return await this.getAllMessages(dto.conversationId);\n    }\n\n    async removeMessage(dto: DeleteMessageDto): Promise {\n        await this.prismaService.message.delete({\n            where: {\n                id: dto.id,\n            },\n        });\n\n        return this.getAllMessages(dto.conversationId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NatsStrategy.html":{"url":"classes/NatsStrategy.html","title":"class - NatsStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NatsStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ServerNats\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        bindEvents\n                        \n                    \n                \n            \n            \n                \nbindEvents(client: any)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/strategies/nats.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NatsSubscriber.html":{"url":"interfaces/NatsSubscriber.html","title":"interface - NatsSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NatsSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OauthController.html":{"url":"controllers/OauthController.html","title":"controller - OauthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OauthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookAuthRedirect\n                            \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                githubAuthRedirect\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookAuthRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubAuthRedirect(req: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/redirect')@ApiOperation({summary: 'Create login callback with your Github account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Google account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Google account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Query,\n    Req,\n    UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\nimport { Public } from '../auth/decorators';\nimport { OauthService } from './oauth.service';\nimport { Request } from 'express';\n\n@ApiTags('OAuth')\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('oauth')\nexport class OauthController {\n    constructor(private readonly oauthService: OauthService) {}\n\n    @Get('facebook')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Connect to your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async facebookLogin(): Promise {\n        return HttpStatus.OK;\n    }\n\n    @Get('facebook/redirect')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async facebookAuthRedirect(@Req() req: Request): Promise {\n        return this.oauthService.facebookLogin(req);\n    }\n\n    @Get('google')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary: 'Connect to your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async googleAuth(@Req() req: Request): Promise {\n        return req;\n    }\n\n    @Get('google/redirect')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async googleAuthRedirect(@Req() req: Request): Promise {\n        return this.oauthService.googleLogin(req);\n    }\n\n    @Get('github/redirect')\n    @ApiOperation({\n        summary:\n            'Create login callback with your Github account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async githubAuthRedirect(@Query() req: string) {\n        return this.oauthService.githubRedirect(req);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OauthModule.html":{"url":"modules/OauthModule.html","title":"module - OauthModule","body":"\n                   \n\n\n\n\n    Modules\n    OauthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OauthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OauthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OauthService } from './oauth.service';\nimport { OauthController } from './oauth.controller';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { AuthModule } from '../auth/auth.module';\nimport { FacebookStrategy } from './strategies/facebook.strategy';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [AuthModule, UsersModule],\n    controllers: [OauthController],\n    providers: [OauthService, GoogleStrategy, FacebookStrategy],\n    exports: [OauthService],\n})\nexport class OauthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OauthService.html":{"url":"injectables/OauthService.html","title":"injectable - OauthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OauthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                githubRedirect\n                            \n                            \n                                    Async\n                                githubSuccess\n                            \n                            \n                                    Async\n                                googleLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/oauth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubRedirect(req: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubSuccess(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { axiosRequest } from 'src/core/helpers';\nimport { AuthService } from '../auth/auth.service';\nimport { SignupDto } from '../auth/dto/request';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class OauthService {\n    constructor(\n        private readonly authService: AuthService,\n        private readonly usersService: UsersService,\n    ) {}\n\n    async facebookLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from facebook!';\n        }\n\n        const payload = {\n            email: req.user.user.email,\n            password: req.user.user.email,\n            username: req.user.user.email,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n\n    async googleLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from Google!';\n        }\n\n        const payload = {\n            email: req.user.email,\n            password: req.user.email,\n            username: req.user.email,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n\n    async githubRedirect(req: string) {\n        // client must request to this url https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email\n        if (!req) {\n            return 'Not found user from Github!';\n        }\n\n        const requestToken = req['code'];\n\n        const data = await axiosRequest(\n            'post',\n            `https://github.com/login/oauth/access_token?client_id=${process.env.GITHUB_CLIENT_ID}&client_secret=${process.env.GITHUB_SECRET}&code=${requestToken}`,\n            { accept: 'application/json' },\n        );\n        return await this.githubSuccess(data.access_token);\n    }\n\n    async githubSuccess(token: string) {\n        const data = await axiosRequest('get', 'https://api.github.com/user', {\n            Authorization: 'token ' + token,\n        });\n        const payload = {\n            email: data.email || `${data.login}@gmail.com`,\n            password: data.id.toString(),\n            username: data.login,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                limit\n                            \n                            \n                                order\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 1, nullable: true, description: 'Page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 10, nullable: true, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, description: 'asc, desc', example: 'asc', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class PaginationDto {\n    @IsString()\n    @IsOptional()\n    @ApiProperty({\n        type: Number,\n        example: 1,\n        nullable: true,\n        description: 'Page number',\n    })\n    current: string;\n\n    @IsString()\n    @IsOptional()\n    @ApiProperty({\n        type: Number,\n        example: 10,\n        nullable: true,\n        description: 'Number of items per page',\n    })\n    limit: string;\n\n    @IsString()\n    @IsOptional()\n    @ApiProperty({\n        type: String,\n        description: 'asc, desc',\n        example: 'asc',\n        nullable: true,\n    })\n    order: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                published\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class PostEntity {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  files: string[];\n\n  @IsBoolean()\n  @IsNotEmpty()\n  published: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n    ParseUUIDPipe,\n    Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    UpdatePostDto,\n    ReactionsPost,\n} from './dto/post/request';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Posts')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('posts')\nexport class PostsController {\n    constructor(private postsService: PostsService) {}\n\n    @Post()\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Get all posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({ description: 'Create new post successfuly' })\n    async createPost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreatePostDto,\n    ): Promise {\n        return this.postsService.createPost(userId, dto);\n    }\n\n    @Post('private/all')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get all public and private posts of user',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPostsOfUser(\n        @GetCurrentUserId() userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPostsOfUser(userId);\n    }\n\n    @Get(':userId/all')\n    @Public()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all public posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPublicPosts(\n        @Param('userId', new ParseUUIDPipe()) userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPublicPosts(userId);\n    }\n\n    @Get(':postId')\n    @Public()\n    @ApiOperation({ summary: 'Get one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getOnePostById(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        return this.postsService.getOnePostById(postId);\n    }\n\n    @Patch('update')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updatePost(@Body() dto: UpdatePostDto): Promise {\n        return this.postsService.updatePost(dto);\n    }\n\n    @Delete('delete')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deletePost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: DeleteOnePost,\n    ): Promise {\n        return this.postsService.deletePost(userId, dto);\n    }\n\n    @Post('reaction')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'React to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async reactionPost(@Body() dto: ReactionsPost): Promise {\n        return this.postsService.reactionPost(dto);\n    }\n\n    @Public()\n    @Get(':postId/comments')\n    @ApiOperation({ summary: 'Get all comments of the post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllComments(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        console.log(postId);\n        return this.postsService.getAllComments(postId);\n    }\n\n    @Post('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Add a new comment to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async addComment(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreateCommentDto,\n    ): Promise {\n        return this.postsService.addComment(userId, dto);\n    }\n\n    @Put('comments/update/text')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateComment(\n        @Body() dto: UpdateCommentTextDto,\n    ): Promise {\n        return this.postsService.updateComment(dto);\n    }\n\n    @Delete('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteComment(@Body() dto: DeleteCommentDto): Promise {\n        return this.postsService.deleteComment(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [PostsController],\n    providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    ReactionsPost,\n    UpdatePostDto,\n} from './dto/post/request';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { POST_ERROR, RESPONSES_MESSAGE, USER_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class PostsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createPost(userId: string, dto: CreatePostDto): Promise {\n        const post = await this.prismaService.post.create({\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                authorId: userId,\n                // categories: {\n                //   create: [\n                //     {\n                //       createAt: new Date(),\n                //       category: {\n                //         create: {\n                //           id: uuid(),\n                //           name: 'New category',\n                //         },\n                //       },\n                //     },\n                //   ],\n                // },\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n            },\n        });\n        return post;\n    }\n\n    async getAllPostsOfUser(userId: string): Promise | null {\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllPublicPosts(userId: string): Promise | null {\n        const list = await this.prismaService.user.findMany({\n            where: {\n                id: userId,\n            },\n            select: {\n                writtenPosts: {\n                    select: {\n                        id: true,\n                    },\n                },\n            },\n        });\n        if (!list) {\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        }\n        if (list.length === 0) {\n            throw new NotFoundException(POST_ERROR.EMPTY);\n        }\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n                published: true,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getOnePostById(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async updatePost(dto: UpdatePostDto): Promise {\n        const list = await this.getOnePostById(dto.postId);\n\n        if (!list) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (list.authorId !== dto.authorId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        return await this.prismaService.post.update({\n            where: {\n                id: dto.postId,\n            },\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                published: dto.published,\n            },\n            select: {\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deletePost(userId: string, dto: DeleteOnePost): Promise {\n        const identify = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                authorId: true,\n            },\n        });\n\n        if (!identify) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (identify.authorId !== userId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        await this.prismaService.post.delete({\n            where: {\n                id: dto.postId,\n            },\n        });\n        return 'This post has been deleted!';\n    }\n\n    async reactionPost(dto: ReactionsPost): Promise {\n        const checkExist = await this.prismaService.reaction.findMany({\n            where: {\n                postId: dto.postId,\n                userId: dto.favouritorId,\n            },\n        });\n\n        if (checkExist.length > 0) {\n            throw new BadRequestException('You already reacted to this post');\n        }\n        await this.prismaService.reaction.create({\n            data: {\n                userId: dto.favouritorId,\n                postId: dto.postId,\n                type: dto.reactionType,\n            },\n        });\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllComments(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                comments: true,\n            },\n        });\n    }\n\n    async addComment(\n        userId: string,\n        dto: CreateCommentDto,\n    ): Promise {\n        const checkPost = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n        });\n\n        if (!checkPost) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n        return this.prismaService.comment.create({\n            data: {\n                text: dto.text,\n                postId: dto.postId,\n                authorId: userId,\n            },\n        });\n    }\n\n    async updateComment(dto: UpdateCommentTextDto): Promise {\n        return await this.prismaService.comment.update({\n            where: {\n                id: dto.id,\n            },\n            data: {\n                text: dto.text,\n            },\n            select: {\n                text: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deleteComment(dto: DeleteCommentDto): Promise {\n        await this.prismaService.comment.delete({\n            where: {\n                id: dto.id,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_COMMENT;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n    providers: [PrismaService, ConfigModule],\n    exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/abstraction/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    INestApplication,\n    Injectable,\n    OnModuleDestroy,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n    extends PrismaClient\n    implements OnModuleInit, OnModuleDestroy\n{\n    constructor() {\n        super({\n            datasources: {\n                db: {\n                    url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n                    // url: process.env.DATABASE_URL,\n                },\n            },\n        });\n    }\n\n    async onModuleInit(): Promise {\n        await this.$connect();\n    }\n\n    async onModuleDestroy() {\n        await this.$disconnect();\n    }\n\n    async enableShutdownHooks(app: INestApplication): Promise {\n        this.$on('beforeExit', async () => {\n            await app.close();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport console from 'console';\nimport { EROLE } from '../constants';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    canActivate(context: ExecutionContext): boolean {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            'roles',\n            [context.getHandler(), context.getClass()],\n        );\n        if (!requiredRoles) {\n            return true;\n        }\n        // return false;\n        const request = context.switchToHttp().getRequest();\n        const user = request.user;\n        const hasRole = () =>\n            user.roles.some((role) => user.roles.includes(role));\n\n        return user && user.roles && hasRole();\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:4\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\nexport class RtGuard extends AuthGuard(ESTRATEGY.JWT_REFRESH) {\n    constructor() {\n        super();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.JWT_REFRESH,\n) {\n    constructor(\n        @Inject(ConfigService)\n        private config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            passReqToCallback: true,\n        });\n    }\n\n    validate(req: Request, payload: any) {\n        const refreshToken = req\n            .get('authorization')\n            .replace('Bearer', '')\n            .trim();\n        return {\n            ...payload,\n            refreshToken,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThrottlerBehindProxyGuard.html":{"url":"injectables/ThrottlerBehindProxyGuard.html","title":"injectable - ThrottlerBehindProxyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThrottlerBehindProxyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/security/throttle-proxy.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ThrottlerGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getTracker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        getTracker\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracker(req: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/core/security/throttle-proxy.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThrottlerGuard } from '@nestjs/throttler';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ThrottlerBehindProxyGuard extends ThrottlerGuard {\n    protected getTracker(req: Record): string {\n        return req.ips.length ? req.ips[0] : req.ip; // individualize IP extraction to meet your own needs\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(5000),\n            catchError((err) => {\n                if (err instanceof TimeoutError) {\n                    return throwError(() => new RequestTimeoutException());\n                }\n                return throwError(() => err);\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from 'src/infrastructure/users/entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, [\n  'email',\n  'oldPassword',\n  'newPassword',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, PickType } from '@nestjs/swagger';\nimport { ConversationEntity } from '../entities/conversation.entity';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(ConversationEntity) {\n    name?: string;\n    description?: string;\n    avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PickType(ConversationEntity, [\n    'members',\n]) {}\n\nexport class DeleteOneAdminConversationDto extends PickType(\n    CreateConversationDto,\n    ['creator', 'userId'],\n) {}\n\nexport class UpdateRolesConversationDto extends PickType(\n    CreateConversationDto,\n    ['admins', 'members', 'creator'],\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAvatarDto.html":{"url":"classes/UpdateUserAvatarDto.html","title":"class - UpdateUserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCoverDto.html":{"url":"classes/UpdateUserCoverDto.html","title":"class - UpdateUserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:75\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:101\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:111\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:88\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:51\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:65\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:58\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:83\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport { UsersService } from './users.service';\nimport {\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('users')\nexport class UsersController {\n    constructor(private usersService: UsersService) {\n        this.usersService = usersService;\n    }\n\n    @Public()\n    @Get('profile/:userIdOrUsername')\n    @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getPublicUserByIdOrUsername(\n        @Param('userIdOrUsername') userIdOrUsername: string,\n    ): Promise {\n        return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n    }\n\n    @Public()\n    @Get('find/:email')\n    @ApiOperation({ summary: 'Find user account by email' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getUserByEmail(\n        @Param('email') email: string,\n    ): Promise {\n        return this.usersService.getUserByEmail(email);\n    }\n\n    @Get()\n    @ApiBearerAuth()\n    @ApiOperation({\n        summary: 'Get user profile by user-id (all)',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @GetCurrentUserId() userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersProfile(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('profile/avatar')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersAvatar(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('profile/cover')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image by user id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersCover(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user profile by email & password' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUser(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: LoginDto,\n    ): Promise {\n        return this.usersService.deleteUser(userId, dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n    imports: [PrismaModule, AuthModule],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        // consumer\n        //   .apply(ExistedUserMiddleware)\n        //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotAcceptableException,\n    NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport {\n    IAllUsers,\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport {\n    AUTH_ERROR,\n    EORDER,\n    RESPONSES_MESSAGE,\n    SYSTEM_ERROR,\n    USER_ERROR,\n} from 'src/core/constants';\n\n@Injectable()\nexport class UsersService {\n    constructor(private prismaService: PrismaService) {}\n\n    async getAllUsers(dto: PaginationDto): Promise {\n        const total = await this.prismaService.user.count();\n        const users = await this.prismaService.user.findMany({\n            // skip: Number(dto.limit) * (Number(dto.current) - 1),\n            take: Number(dto.limit) || 10,\n            orderBy: {\n                id: dto.order as any,\n            },\n            select: {\n                id: true,\n                email: true,\n                username: true,\n                createdAt: true,\n            },\n        });\n        return {\n            total,\n            orderBy: dto.order || EORDER.ASC,\n            pageItems: users.length,\n            pageLimit: Number(dto.limit) || 10,\n            pageCurrent: Number(dto.current) || 1,\n            users: users,\n        };\n    }\n\n    async getPublicUserByIdOrUsername(\n        userIdOrUsername: string,\n    ): Promise {\n        const identify = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n            },\n        });\n        if (identify.length === 0)\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify[0];\n    }\n\n    async getUserByEmail(email: string): Promise {\n        const identify = await this.prismaService.user.findUnique({\n            where: {\n                email: email,\n            },\n            select: {\n                username: true,\n                email: true,\n            },\n        });\n\n        if (!identify) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify;\n    }\n\n    async getUserProfile(userId: string): Promise {\n        const profile = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n                updatedAt: true,\n            },\n        });\n\n        if (!profile) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return profile;\n    }\n\n    async updateUsersProfile(\n        userId: string,\n        dto: UpdateUserProfileDto,\n    ): Promise {\n        await this.prismaService.userProfile.upsert({\n            where: {\n                userId: userId,\n            },\n            create: {\n                ...dto,\n                userId: userId,\n            },\n            update: {\n                ...dto,\n            },\n        });\n        const newProfile = await this.getPublicUserByIdOrUsername(userId);\n        return newProfile;\n    }\n\n    async updateUsersAvatar(\n        userId: string,\n        dto: UpdateUserAvatarDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newAvatar = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        avatar: true,\n                    },\n                },\n            },\n        });\n        return newAvatar;\n    }\n\n    async updateUsersCover(\n        userId: string,\n        dto: UpdateUserCoverDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newCover = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        cover: true,\n                    },\n                },\n            },\n        });\n        return newCover;\n    }\n\n    async deleteUser(userId: string, dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                email: true,\n                password: true,\n            },\n        });\n\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const matchEmail: number = dto.password.localeCompare(user.password);\n        const matchPassword: boolean = await comparePassword(\n            dto.password,\n            user.password,\n        );\n\n        if (matchEmail === 0 || !matchPassword)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (!matchPassword)\n            throw new NotAcceptableException(AUTH_ERROR.PASSWORD_NOT_MATCH);\n\n        await this.prismaService.userProfile.delete({\n            where: {\n                userId: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n\n    async deleteUserById(userId: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n\n        if (!user) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n\n        await this.prismaService.user.delete({\n            where: {\n                id: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WsThrottlerGuard.html":{"url":"injectables/WsThrottlerGuard.html","title":"injectable - WsThrottlerGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WsThrottlerGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/security/throttle-websocket.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ThrottlerGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(context: ExecutionContext, limit: number, ttl: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/security/throttle-websocket.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ttl\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { ThrottlerException, ThrottlerGuard } from '@nestjs/throttler';\n\n@Injectable()\nexport class WsThrottlerGuard extends ThrottlerGuard {\n    async handleRequest(\n        context: ExecutionContext,\n        limit: number,\n        ttl: number,\n    ): Promise {\n        const client = context.switchToWs().getClient();\n        const ip = client.conn.remoteAddress;\n        const key: string = this.generateKey(context, ip);\n        const ttls = await this.storageService.getRecord(key);\n\n        if (ttls.length >= limit) {\n            throw new ThrottlerException('Many requests');\n        }\n\n        await this.storageService.addRecord(key, ttl);\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n1.5.0 - 2022-09-03\nAdded\n\nPosts endpoints module\nCreate comment for post\nUpdate README document\nGenerate Nest documentation\nCreate admin module\n\nSource code (.zip)\nSource code (.tar.gz)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/composables/count.ts\n            \n            function\n            useCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/useSticky.ts\n            \n            variable\n            useSticky\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/user.ts\n            \n            variable\n            useUserStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            interface\n            IApp\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            function\n            AppSetup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/str.ts\n            \n            function\n            capitalize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            function\n            ThemeManager\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            variable\n            availableThemes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            count\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            startAt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            class\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/axios.config.ts\n            \n            variable\n            axiosConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            class\n            ConversationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            class\n            FileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            class\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            class\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            Alert\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            AlertOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            useAlertsStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/constants/math.constant.ts\n            \n            variable\n            MATH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/filters/rpc-exception.filter.ts\n            \n            class\n            ExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/math/math.controller.ts\n            \n            controller\n            MathController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            class\n            NatsStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            interface\n            NatsSubscriber\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/setup.config.ts\n            \n            function\n            setup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.config.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            AUTH_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            CONVERSATION_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            POST_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            RESPONSES_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            STATUS_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            SYSTEM_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            USER_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/axios.ts\n            \n            variable\n            axiosRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/errors.interceptor.ts\n            \n            injectable\n            ErrorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/security/throttle-proxy.guard.ts\n            \n            injectable\n            ThrottlerBehindProxyGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/security/throttle-websocket.guard.ts\n            \n            injectable\n            WsThrottlerGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            randomInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/request/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/request/delete-message.dto.ts\n            \n            class\n            DeleteMessageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/entities/message.entity.ts\n            \n            class\n            MessageEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            controller\n            MessagesGateway\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.controller.ts\n            \n            controller\n            OauthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.service.ts\n            \n            injectable\n            OauthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            nodeExternals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @nestjs/throttler : ^3.0.0\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.3.1\n        \n            @types/passport-facebook : ^2.1.11\n        \n            @types/passport-jwt : ^3.0.6\n        \n            axios : ^0.27.2\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            csurf : ^1.11.0\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EORDER   (src/.../options.enum.ts)\n                        \n                        \n                            EROLE   (src/.../options.enum.ts)\n                        \n                        \n                            ESTRATEGY   (src/.../options.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/options.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EORDER\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ESTRATEGY\n                    \n                \n                        \n                            \n                                 JWT\n                            \n                        \n                        \n                            \n                                Value : jwt\n                            \n                        \n                        \n                            \n                                 JWT_REFRESH\n                            \n                        \n                        \n                            \n                                Value : jwt-refresh\n                            \n                        \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppSetup   (client/.../app.ts)\n                        \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                        \n                            capitalize   (client/.../str.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            randomInt   (src/.../random.ts)\n                        \n                        \n                            setup   (src/.../setup.config.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            ThemeManager   (client/.../theme.ts)\n                        \n                        \n                            useCount   (client/.../count.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/helpers/app.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppSetup\n                        \n                    \n                \n            \n            \n                \nAppSetup()\n                \n            \n\n\n\n\n        \n    \n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    client/helpers/str.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInt\n                        \n                    \n                \n            \n            \n                \nrandomInt(min: number, max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/configs/setup.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setup\n                        \n                    \n                \n            \n            \n                \nsetup(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ThemeManager\n                        \n                    \n                \n            \n            \n                \nThemeManager()\n                \n            \n\n\n\n\n        \n    \n    client/composables/count.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useCount\n                        \n                    \n                \n            \n            \n                \nuseCount()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\nProject documentation\n\nDatabase diagram\n\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAdmin\nAuth\n\n\n\n\n✅ Get list all users\n✅ Signup\n\n\n✅ Get user profile by id\n✅ Signin\n\n\n✅ Update user profile\n✅ Signout\n\n\n✅ Delete user by user-id\n✅ Refresh access-token\n\n\n\n✅  Update password\n\n\n\n\n\n\nOAuth\nFiles\n\n\n\n\n✅ Google signin\n✅ Upload single file (avatar, cover)\n\n\n✅ Facebook signin\n✅ Upload multi files\n\n\n✅ Github signin\n✅ Upload array-field files (post, sample_image)\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅ Create a new post\n\n\n✅ Find user account by email\n✅ Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅ Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅ Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅ Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅ Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nDiagram database\n\nRelational diagram\n\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nCrypto-js a JavaScript library of crypto standards\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\nWebpack hot-reload auto recompile the entire project each time a change occurs\ngRPC support to run in any environment across data centers based on the concept of defining a service in terms of functions (methods) that called remotely\nSession store information about the user across multiple requests, which is particularly useful for MVC applications.\nVersioning allows you to have different versions of your controllers or individual routes running within the same application.\nCSRF (Cross-site request forgery) type of malicious exploit of a website where unauthorized commands are transmitted from a user that the web application trusts\nrate-limiting protect your application from brute-force attacks\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nPostgre x Heroku\nNest x Prisma\ngRPC for Microservice\n\n\n\nExample templates\n\nNest example\nNest awesome\nNest structure\nNest auth example\nNest social login\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nnpm run prisma:pull\n\n# generate the Prisma Client\nnpm run prisma:generate\n\n# Create env and migrate db\nnpm run prisma:migrate\n\n# Sync migrate change to db\nnpm run prisma:push# Open prisma studio\nnpm run prisma:studioRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MathModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OauthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    27 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    48 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.6.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github, chat, socket, passport, jwt, oauth2\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlertStyle   (client/.../AlertsStore.ts)\n                        \n                        \n                            CreateNewConversationDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteConversationAdminsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteOnePostDto   (client/.../posts.dto.ts)\n                        \n                        \n                            DeleteUserProfile   (client/.../users.dto.ts)\n                        \n                        \n                            GetAllConversationsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            GetAllPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicUsersDto   (client/.../users.dto.ts)\n                        \n                        \n                            GetUserProfileDto   (client/.../users.dto.ts)\n                        \n                        \n                            ITheme   (client/.../theme.ts)\n                        \n                        \n                            IThemeSettingOptions   (client/.../theme.ts)\n                        \n                        \n                            SignUpLocalDto   (client/.../auth.dto.ts)\n                        \n                        \n                            UpdateConversationMembersDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateConversationRoles   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateOneConversationByIdDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdatePostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            UploadAvatarDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadCoverDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            UploadPostsDto   (client/.../files.dto.ts)\n                        \n                        \n                            UpsertReactPostDto   (client/.../posts.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/stores/AlertsStore.ts\n    \n    \n        \n            \n                \n                    \n                    AlertStyle\n                \n            \n            \n                \n                        \"error\" | \"success\" | \"warning\" | \"info\" | \"none\"\n\n                \n            \n        \n    \n    client/dto/conversations.dto.ts\n    \n    \n        \n            \n                \n                    \n                    CreateNewConversationDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteConversationAdminsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllConversationsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationMembersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationRoles\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateOneConversationByIdDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/posts.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteOnePostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdatePostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpsertReactPostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/users.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteUserProfile\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicUsersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetUserProfileDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n    \n        \n            \n                \n                    \n                    ITheme\n                \n            \n            \n                \n                        \"dark\" | \"light\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IThemeSettingOptions\n                \n            \n            \n                \n                        \"dark\" | \"light\" | \"system\" | \"realtime\"\n\n                \n            \n        \n    \n    client/dto/auth.dto.ts\n    \n    \n        \n            \n                \n                    \n                    SignUpLocalDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/files.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UploadAvatarDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadCoverDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            availableThemes   (client/.../theme.ts)\n                        \n                        \n                            axiosConfig   (client/.../axios.config.ts)\n                        \n                        \n                            axiosRequest   (src/.../axios.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            CONVERSATION_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            count   (client/.../pageview.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            defaultOptions   (client/.../AlertsStore.ts)\n                        \n                        \n                            ENDPOINT   (client/.../auth.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../conversations.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../posts.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../user.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../file.service.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.config.ts)\n                        \n                        \n                            MATH_SERVICE   (src/.../math.constant.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            nodeExternals   (webpack-hmr.config.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            POST_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSES_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            startAt   (client/.../pageview.ts)\n                        \n                        \n                            STATUS_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            SYSTEM_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                               (webpack-hmr.config.ts)\n                        \n                        \n                            useAlertsStore   (client/.../AlertsStore.ts)\n                        \n                        \n                            USER_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            useSticky   (client/.../useSticky.ts)\n                        \n                        \n                            useUserStore   (client/.../user.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/status-message.enum.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SAME_PASSWORD: 'New password must be different from old password',\n    PASSWORD_NOT_MATCH: 'Password does not match',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CONVERSATION_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Conversation not found',\n    NOT_CREATOR: 'You are not creator of this conversation',\n    NOT_MEMBER: 'You are not member of this conversation',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Post not found',\n    EMPTY: 'User not have post',\n    DUPLICATE: 'Post already exist',\n    NOT_AUTHOR: 'You are not author of this post',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSES_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CREATE_USER: 'The new account has been created.',\n    DELETE_USER: 'The user account has been deleted.',\n    DELETE_COMMENT: 'The comment has been deleted.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATUS_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SUCCESS: 'Success.',\n    ERROR: 'Errors.',\n    WARNING: 'Warning.',\n    INFO: 'Info.',\n    UNKNOWN: 'Unknown.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    FORBIDDEN: 'Access denied',\n    NOT_FOUND: 'Not found',\n    INTERNAL_SERVER_ERROR: 'Internal server error',\n    BAD_REQUEST: 'Bad request',\n    UNAUTHORIZED: 'Unauthorized',\n    CONFLICT: 'Conflict',\n    TOO_MANY_REQUESTS: 'Too many requests',\n    METHOD_NOT_ALLOWED: 'Method not allowed',\n    NOT_ACCEPTABLE: 'Provided fields are not acceptable',\n    REQUEST_TIMEOUT: 'Request timeout',\n    PAYLOAD_TOO_LARGE: 'Payload too large',\n    UNSUPPORTED_MEDIA_TYPE: 'Unsupported media type',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'User not found',\n    DUPLICATE: 'User already exist',\n}\n                    \n                \n\n\n        \n    \n\n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        availableThemes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { key: 'light', text: 'Light' },\n    { key: 'dark', text: 'Dark' },\n    { key: 'system', text: 'System' },\n    { key: 'realtime', text: 'Realtime' },\n]\n                    \n                \n\n\n        \n    \n\n    client/services/axios.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                \n                    \n                        Default value : axios.create({\n    baseURL: import.meta.env.VITE_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n    },\n}) as AxiosInstance\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/axios.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    method: string,\n    url: string,\n    headers?: any,\n) => {\n    return await axios({\n        method: method,\n        url: url,\n        headers: headers,\n    }).then(async (response: any) => await response.data);\n}\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    client/server/api/pageview.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startAt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Date.now()\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    client/stores/AlertsStore.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        useAlertsStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n})\n                    \n                \n\n\n        \n    \n\n    client/services/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/auth'\n                    \n                \n\n\n        \n    \n\n    client/services/conversations.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/conversations'\n                    \n                \n\n\n        \n    \n\n    client/services/posts.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/posts'\n                    \n                \n\n\n        \n    \n\n    client/services/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/users'\n                    \n                \n\n\n        \n    \n\n    client/services/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/files'\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n    const config: ConfigService = app.get(ConfigService);\n\n    const swaggerConfig = new DocumentBuilder()\n        .setTitle('Teneno API')\n        .setDescription(\n            `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n        )\n        .setContact(\n            'Thuong Truong',\n            'https://github.com/thuongtruong1009',\n            'ititiu19228@student.hcmiu.edu.vn',\n        )\n        .setLicense(\n            'License - MIT',\n            'https://github.com/thuongtruong1009/teneno-api/blob/main/LICENSE',\n        )\n        .addServer(config.get('BASE_URL'))\n        .addServer(config.get('HOST_URL'))\n        .setVersion('1.6.0')\n        // .addTag('cats', 'default description')\n        .addBearerAuth({\n            type: 'http',\n            scheme: 'Bearer',\n            bearerFormat: 'JWT',\n            description: 'Paste a valid access token here.',\n            in: 'Header',\n        })\n        .addOAuth2({\n            type: 'oauth2',\n            description: 'Login with Google account',\n            flows: {\n                implicit: {\n                    authorizationUrl: config.get('GOOGLE_CALLBACK_URL'),\n                    scopes: {\n                        'user:write': 'create your account',\n                        'user:read': 'read your account',\n                    },\n                },\n            },\n        })\n        .addCookieAuth('optional-session-id')\n        .addBasicAuth()\n        .addSecurity('api_key', {\n            type: 'apiKey',\n            name: 'api_key',\n            in: 'header',\n        })\n        .build();\n\n    const options: ISwaggerOptions = {\n        operationIdFactory: (controllerKey: string, methodKey: string) =>\n            methodKey,\n    };\n    const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n    SwaggerModule.setup('api', app, document, {\n        swaggerOptions: {\n            persistAuthorization: true,\n        },\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/abstraction/microservices/constants/math.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MATH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MATH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    webpack-hmr.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodeExternals\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('webpack-node-externals')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('run-script-webpack-plugin')\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: EROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    client/composables/useSticky.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useSticky\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (el: HTMLElement, offset: number) => {\n    const onScroll = () => {\n        const scrollTop =\n            window.pageYOffset || document.documentElement.scrollTop;\n        if (scrollTop > offset) el.classList.add('sticky');\n        else el.classList.remove('sticky');\n    };\n\n    // lifecycle hooks\n    window.addEventListener('scroll', onScroll);\n    onUnmounted(() => {\n        window.removeEventListener('scroll', onScroll);\n    });\n\n    return {\n        onScroll,\n    };\n}\n                    \n                \n\n\n        \n    \n\n    client/composables/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useUserStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('user', () => {\n    /**\n     * Current named of the user.\n     */\n    const savedName = ref('');\n    const previousNames = ref(new Set());\n\n    const usedNames = computed(() => Array.from(previousNames.value));\n    const otherNames = computed(() =>\n        usedNames.value.filter((name) => name !== savedName.value),\n    );\n\n    /**\n     * Changes the current name of the user and saves the one that was used\n     * before.\n     *\n     * @param name - new name to set\n     */\n    function setNewName(name: string) {\n        if (savedName.value) previousNames.value.add(savedName.value);\n\n        savedName.value = name;\n    }\n\n    return {\n        setNewName,\n        otherNames,\n        savedName,\n    };\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
