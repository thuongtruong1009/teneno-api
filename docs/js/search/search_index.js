var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.197,1,2.313]],["body/classes/Admin.html",[0,0.309,1,4.21,2,1.437,3,0.157,4,0.157,5,0.141,6,6.067,7,0.189,8,0.009,9,0.008,10,0.008]],["title/controllers/AdminController.html",[11,1.587,12,3.266]],["body/controllers/AdminController.html",[0,0.244,1,2.865,3,0.124,4,0.124,5,0.112,7,0.149,8,0.009,9,0.007,10,0.007,11,1.966,12,5.147,13,2.02,14,4.786,15,2.573,16,0.257,17,0.884,18,4.329,19,3.951,20,4.329,21,3.951,22,4.129,23,4.129,24,4.129,25,3.951,26,2.865,27,3.951,28,4.329,29,1.411,30,3.794,31,2.663,32,2.201,33,4.046,34,4.786,35,4.786,36,2.71,37,3.403,38,3.403,39,3.246,40,0.464,41,2.573,42,3.246,43,3.246,44,3.106,45,3.106,46,3.106,47,3.106,48,4.786,49,4.786]],["title/modules/AdminModule.html",[50,1.391,51,3.063]],["body/modules/AdminModule.html",[0,0.251,1,2.948,3,0.128,4,0.128,5,0.115,7,0.153,8,0.009,9,0.007,10,0.007,12,5.736,13,2.617,16,0.268,17,0.909,50,2.232,51,6.098,52,2.481,53,3.333,54,4.925,55,4.925,56,4.925,57,5.081,58,5.939,59,3.711,60,2.948,61,2.741,62,5.587,63,3.45,64,5.736,65,4.023,66,5.587,67,5.587,68,4.489,69,4.925]],["title/injectables/AdminService.html",[58,3.063,70,0.751]],["body/injectables/AdminService.html",[0,0.281,3,0.143,4,0.143,5,0.129,7,0.172,8,0.009,9,0.008,10,0.008,16,0.242,17,1.019,40,0.534,58,5.27,70,1.292,71,2.091,72,5.516,73,2.536,74,4.372,75,4.611,76,0.672,77,6.257,78,1.185,79,0.846,80,1.072,81,5.028,82,2.536]],["title/controllers/AdminUsersController.html",[11,1.587,64,3.266]],["body/controllers/AdminUsersController.html",[0,0.118,1,1.386,3,0.06,4,0.06,5,0.054,7,0.072,8,0.01,9,0.004,10,0.004,11,0.951,13,0.978,15,1.245,16,0.236,17,0.428,18,3.907,19,2.354,20,2.579,21,2.354,22,2.46,23,2.46,24,2.46,25,2.354,26,1.386,27,2.354,28,2.579,29,0.683,30,1.836,31,1.289,32,1.065,33,1.958,34,2.316,35,2.316,36,2.5,37,1.647,38,1.647,39,1.57,40,0.59,41,1.245,42,1.57,43,1.57,44,1.503,45,1.503,46,1.503,47,1.503,48,2.316,49,2.316,64,3.067,76,0.709,78,1.252,79,0.894,80,1.132,82,1.065,83,6.092,84,2.316,85,0.224,86,0.741,87,2.563,88,3.627,89,3.627,90,4.076,91,4.397,92,4.076,93,4.076,94,2.316,95,1.42,96,2.329,97,2.627,98,3.544,99,2.895,100,3.627,101,3.057,102,2.627,103,3.238,104,1.161,105,3.573,106,2.316,107,4.011,108,2.627,109,2.716,110,2.954,111,2.627,112,2.627,113,4.066,114,2.111,115,2.627,116,3.348,117,2.627,118,2.627,119,3.432,120,2.627,121,2.627,122,2.875,123,2.627,124,2.111,125,3.432,126,2.627,127,1.887,128,4.115,129,2.627,130,2.111,131,3.432,132,2.627,133,2.354,134,2.627,135,4.011,136,1.503,137,1.442,138,3.544,139,1.958,140,1.958,141,1.958,142,4.131,143,3.792,144,2.316,145,1.442,146,2.111,147,2.627,148,2.316,149,2.111,150,2.111,151,2.111,152,2.111,153,2.627,154,3.179,155,2.627,156,1.503,157,2.627,158,3.628,159,1.647,160,3.782,161,3.726,162,2.627,163,1.45,164,2.627,165,2.627,166,1.34,167,3.627,168,2.316,169,2.627,170,2.316,171,2.627,172,3.067,173,2.316,174,2.627,175,2.316,176,2.627,177,2.627,178,2.627]],["title/interfaces/Alert.html",[179,2.01,180,3.063]],["body/interfaces/Alert.html",[3,0.163,4,0.093,5,0.084,7,0.195,8,0.01,9,0.006,10,0.006,16,0.183,40,0.561,41,2.703,85,0.561,95,1.501,122,3.984,166,2.597,179,2.615,180,4.596,181,2.331,182,2.848,183,1.596,184,5.686,185,1.764,186,3.678,187,3.593,188,3.593,189,3.593,190,3.037,191,4.123,192,4.902,193,4.25,194,3.275,195,4.582,196,2.703,197,4.582,198,4.25,199,1.869,200,3.226,201,5.309,202,1.993,203,4.25,204,2.436,205,1.702,206,3.275,207,3.037,208,3.275,209,3.275,210,3.037,211,3.275,212,3.275,213,6.367,214,3.275,215,4.582,216,3.275,217,3.275,218,3.275,219,5.724,220,3.037,221,3.275,222,3.275,223,3.275,224,3.275,225,3.037,226,2.797,227,3.275,228,5.027,229,3.593]],["title/interfaces/AlertOptions.html",[179,2.01,184,3.063]],["body/interfaces/AlertOptions.html",[3,0.159,4,0.089,5,0.08,7,0.192,8,0.01,9,0.006,10,0.006,16,0.178,40,0.629,41,2.618,80,1.378,85,0.548,95,1.413,122,3.859,166,2.273,179,2.532,180,3.859,181,2.228,182,2.721,183,1.09,184,5.621,185,1.708,186,2.709,187,3.433,188,3.433,189,3.433,190,2.903,191,4.022,192,5.494,193,4.116,194,3.129,195,5.923,196,3.629,197,5.923,198,5.494,199,2.942,200,3.148,201,5.868,202,1.954,203,4.116,204,2.328,205,1.626,206,3.129,207,2.903,208,3.129,209,3.129,210,2.903,211,3.129,212,3.129,213,6.316,214,3.129,215,4.438,216,3.129,217,3.129,218,3.129,219,5.61,220,2.903,221,3.129,222,3.129,223,3.129,224,3.129,225,2.903,226,2.709,227,3.129,228,4.868,229,3.433]],["title/classes/AllExceptionsFilter.html",[0,0.197,230,3.522]],["body/classes/AllExceptionsFilter.html",[0,0.167,2,0.774,3,0.085,4,0.085,5,0.076,7,0.102,8,0.01,9,0.006,10,0.006,16,0.201,17,0.604,40,0.583,41,4.016,73,1.503,76,0.733,78,1.292,79,0.923,80,1.169,82,1.503,85,0.317,86,0.96,104,1.097,137,2.035,186,3.548,202,1.747,230,4.284,231,3.268,232,2.04,233,4.363,234,5.486,235,4.308,236,5.332,237,4.363,238,6.243,239,3.268,240,4.28,241,3.707,242,3.519,243,4.284,244,7.403,245,5.504,246,6.019,247,3.707,248,6.678,249,4.502,250,5.332,251,3.707,252,3.707,253,3.895,254,4.505,255,3.707,256,5.332,257,3.707,258,3.707,259,1.957,260,3.268,261,3.268,262,3.268,263,3.268,264,3.707,265,3.707,266,4.7,267,3.726,268,6.019,269,3.707,270,3.707,271,3.707,272,6.243,273,6.019,274,3.707,275,3.707,276,3.268,277,3.268,278,1.548,279,3.268,280,3.707,281,2.447,282,3.268,283,3.707]],["title/controllers/AppController.html",[11,1.587,284,3.266]],["body/controllers/AppController.html",[0,0.232,3,0.118,4,0.118,5,0.106,7,0.142,8,0.009,9,0.007,10,0.007,11,2.422,13,1.923,15,2.449,16,0.252,17,0.841,26,2.727,29,1.343,36,2.428,76,0.555,82,2.094,85,0.441,86,1.205,95,1.175,96,1.821,104,0.908,110,3.172,136,2.956,137,2.836,143,3.672,156,2.956,158,2.836,160,2.956,163,1.133,186,3.282,226,3.282,284,4.987,285,4.555,286,6.919,287,4.555,288,4.675,289,5.167,290,5.899,291,5.377,292,3.282,293,4.675,294,5.377,295,5.167,296,6.691,297,4.675,298,5.167,299,7.42,300,4.898,301,4.555,302,4.555,303,5.167,304,4.555,305,5.899,306,5.167]],["title/modules/AppModule.html",[50,1.391,307,3.266]],["body/modules/AppModule.html",[0,0.138,3,0.07,4,0.07,5,0.063,7,0.084,8,0.01,9,0.005,10,0.006,13,1.726,16,0.279,17,0.5,40,0.262,50,1.472,51,4.917,52,1.363,53,2.199,57,4.207,59,2.448,60,1.62,61,1.506,63,2.276,65,2.654,76,0.329,78,0.581,79,0.415,80,0.526,86,0.553,104,0.539,110,2.199,159,2.908,205,1.282,232,1.175,237,2.145,249,2.773,253,1.506,281,3.691,284,4.167,300,4.644,301,2.706,307,6.58,308,2.706,309,2.706,310,2.706,311,4.411,312,4.917,313,4.917,314,4.917,315,4.917,316,4.917,317,4.917,318,4.917,319,4.025,320,3.07,321,2.706,322,4.09,323,5.494,324,3.07,325,2.706,326,3.07,327,4.639,328,5.592,329,2.145,330,3.07,331,3.07,332,3.457,333,3.07,334,2.467,335,3.07,336,3.07,337,2.467,338,2.026,339,4.639,340,2.467,341,3.07,342,2.288,343,3.07,344,3.07,345,3.07,346,3.07,347,3.07,348,2.288,349,3.07,350,3.07,351,2.706,352,3.07,353,3.457,354,3.07,355,3.07,356,3.07,357,3.07,358,3.07,359,3.07,360,4.639,361,4.09,362,3.07,363,3.07,364,3.07,365,4.639,366,3.07,367,3.07,368,3.07,369,3.07,370,4.639,371,2.288,372,3.07,373,3.07,374,3.07,375,2.467,376,3.07,377,4.09,378,4.09,379,3.07,380,4.167,381,4.09,382,3.07,383,3.07,384,4.09,385,3.457,386,4.639,387,4.09,388,3.07,389,4.639,390,3.07,391,3.07,392,1.685]],["title/injectables/AppService.html",[70,0.751,300,2.893]],["body/injectables/AppService.html",[0,0.256,3,0.13,4,0.13,5,0.117,7,0.156,8,0.009,9,0.007,10,0.007,16,0.249,17,0.926,40,0.485,70,1.218,71,1.9,73,2.304,76,0.763,78,1.076,79,0.769,80,0.974,85,0.485,86,1.281,95,1.249,104,0.999,163,1.247,235,3.252,239,5.012,240,5.096,242,5.121,286,7.166,288,3.973,290,5.012,293,3.973,294,5.714,300,4.693,393,5.012,394,5.685,395,5.685,396,5.012,397,5.685,398,5.685,399,5.685,400,5.685,401,5.685,402,5.685]],["title/injectables/AtGuard.html",[70,0.751,332,3.266]],["body/injectables/AtGuard.html",[0,0.235,3,0.119,4,0.119,5,0.107,7,0.143,8,0.01,9,0.007,10,0.007,16,0.253,17,0.85,32,2.117,40,0.575,70,1.154,71,1.746,73,2.117,76,0.723,78,1.276,79,0.911,80,1.154,82,2.117,85,0.446,86,1.214,104,0.918,110,3.535,163,1.477,183,1.462,202,1.462,205,2.813,329,3.65,332,5.022,375,6.711,403,4.605,404,5.94,405,4.605,406,5.223,407,5.94,408,4.325,409,5.223,410,2.867,411,4.197,412,3.123,413,3.274,414,5.223,415,3.274,416,5.223,417,4.197,418,3.893,419,5.223,420,5.223,421,6.738,422,5.223,423,4.605,424,4.605,425,5.223]],["title/injectables/AtStrategy.html",[70,0.751,426,3.063]],["body/injectables/AtStrategy.html",[0,0.232,3,0.118,4,0.118,5,0.106,7,0.142,8,0.01,9,0.007,10,0.007,16,0.268,17,0.841,32,2.094,40,0.571,70,1.146,71,1.727,73,2.094,76,0.718,78,1.267,79,0.905,80,1.146,82,2.094,85,0.441,86,1.205,104,0.908,163,1.133,183,1.446,200,3.282,338,3.411,412,3.089,413,3.239,415,3.239,426,4.675,427,4.555,428,3.282,429,4.555,430,5.484,431,5.167,432,4.675,433,6.691,434,8.328,435,5.167,436,4.675,437,3.851,438,4.555,439,3.851,440,3.239,441,3.239,442,3.611,443,5.167,444,5.167,445,4.555,446,4.555,447,5.899,448,4.555,449,4.555,450,5.167,451,4.555]],["title/controllers/AuthController.html",[11,1.587,452,3.266]],["body/controllers/AuthController.html",[0,0.132,3,0.067,4,0.067,5,0.06,7,0.08,8,0.01,9,0.005,10,0.005,11,1.059,13,1.089,15,1.387,16,0.238,17,0.476,18,3.811,19,2.558,20,2.804,21,2.558,22,2.674,23,2.674,24,2.674,25,2.558,26,1.544,27,2.558,28,2.804,29,0.761,31,1.435,32,1.186,36,2.553,37,1.834,38,1.834,39,1.749,40,0.633,41,1.387,42,1.749,43,1.749,44,1.674,45,1.674,46,1.674,47,1.674,76,0.703,78,1.24,79,0.886,80,1.122,82,1.186,85,0.25,86,0.806,87,2.553,91,2.674,95,1.334,96,2.434,99,2.806,101,1.435,103,2.617,104,1.151,105,3.554,110,2.573,113,3.511,135,2.044,136,1.674,137,1.606,140,2.18,142,4.129,143,3.791,145,1.606,156,1.674,158,3.595,160,3.478,161,3.916,163,1.436,278,1.867,385,2.18,442,2.044,452,3.333,453,2.579,454,6.089,455,5.021,456,3.943,457,3.943,458,3.943,459,2.579,460,2.926,461,4.786,462,4.743,463,2.926,464,2.579,465,2.926,466,2.926,467,4.472,468,2.926,469,2.579,470,3.811,471,2.926,472,3.333,473,2.926,474,2.579,475,4.558,476,2.926,477,2.12,478,2.926,479,2.579,480,2.926,481,2.579,482,4.248,483,2.926,484,2.36,485,2.926,486,1.674,487,2.579,488,3.333,489,3.811,490,2.579,491,2.351,492,3.125,493,2.18,494,2.579,495,2.18,496,2.579,497,1.931,498,2.926,499,2.926,500,2.926,501,2.926,502,2.18,503,2.579,504,2.926,505,2.926,506,2.926,507,2.926,508,2.926,509,2.926,510,2.926,511,2.926,512,2.926,513,2.926,514,2.926,515,2.926,516,2.926,517,2.926,518,2.926]],["title/modules/AuthModule.html",[50,1.391,311,2.747]],["body/modules/AuthModule.html",[0,0.212,3,0.108,4,0.108,5,0.097,7,0.13,8,0.01,9,0.007,10,0.007,13,2.347,16,0.261,17,0.769,50,2.002,52,2.098,53,2.99,59,3.329,60,2.493,61,2.318,63,3.095,65,4.062,87,1.461,311,5.52,319,4.647,337,3.796,426,5.676,430,4.962,452,5.293,489,5.487,490,4.165,519,4.165,520,4.165,521,4.724,522,4.165,523,5.676,524,4.724,525,4.408,526,4.165,527,4.724,528,4.724,529,6.308,530,3.796,531,4.724,532,4.724,533,4.724,534,4.165,535,4.724,536,4.724,537,4.165,538,4.724,539,3.521]],["title/injectables/AuthService.html",[70,0.751,489,2.747]],["body/injectables/AuthService.html",[0,0.107,3,0.055,4,0.055,5,0.049,7,0.066,8,0.01,9,0.004,10,0.004,16,0.222,17,0.389,31,1.172,32,0.968,40,0.591,70,0.654,71,0.798,73,1.547,75,3.515,76,0.743,78,1.31,79,0.936,80,1.185,85,0.204,86,0.688,87,2.571,95,1.46,99,2.155,103,3.07,104,1.17,105,3.487,113,2.424,163,1.305,166,1.552,202,2.216,235,2.727,278,2.781,292,2.671,338,1.577,430,4.434,442,1.67,454,3.365,455,4.655,456,3.365,457,3.365,458,3.365,459,3.365,464,3.365,469,3.365,470,3.413,474,3.365,475,3.593,481,3.365,482,3.804,484,2.015,489,2.393,495,1.781,496,2.106,530,1.92,534,3.365,537,3.365,539,1.781,540,2.106,541,3.817,542,3.817,543,2.389,544,6.661,545,2.389,546,3.817,547,4.014,548,2.389,549,2.389,550,2.389,551,2.389,552,2.389,553,2.389,554,3.817,555,5.952,556,2.389,557,2.389,558,1.92,559,1.92,560,1.781,561,1.67,562,4.058,563,1.92,564,2.106,565,2.106,566,4.272,567,2.389,568,3.817,569,3.817,570,3.817,571,2.389,572,2.389,573,1.92,574,4.375,575,2.389,576,3.365,577,4.767,578,2.389,579,2.106,580,1.92,581,5.952,582,2.282,583,3.817,584,2.389,585,1.311,586,4.397,587,2.389,588,2.389,589,2.389,590,6.099,591,2.389,592,2.389,593,2.389,594,5.444,595,3.831,596,5.247,597,5.952,598,2.106,599,3.365,600,4.767,601,4.767,602,4.767,603,2.389,604,2.393,605,3.817,606,3.817,607,3.817,608,2.389,609,2.389,610,2.389]],["title/classes/CommentEntity.html",[0,0.197,611,2.893]],["body/classes/CommentEntity.html",[0,0.299,2,1.071,3,0.117,4,0.117,5,0.105,7,0.141,8,0.009,9,0.007,10,0.007,16,0.165,40,0.709,76,0.892,85,0.438,95,1.507,96,2.928,103,3.181,166,2.407,185,2.059,199,3.052,611,4.393,612,4.519,613,4.228,614,6.516,615,7.392,616,3.901,617,5.126,618,5.126,619,5.94,620,5.126,621,4.519,622,5.126,623,5.126,624,5.126,625,5.126,626,5.126,627,4.651,628,6.656,629,4.301,630,5.126,631,3.978,632,1.962]],["title/classes/ConversationEntity.html",[0,0.197,633,3.266]],["body/classes/ConversationEntity.html",[0,0.207,2,0.963,3,0.105,4,0.105,5,0.095,7,0.127,8,0.009,9,0.006,10,0.006,16,0.148,29,1.199,36,2.17,40,0.725,76,0.911,79,0.949,85,0.394,95,1.55,96,2.992,127,3.217,166,2.284,185,1.92,200,3.045,204,2.757,205,2.591,604,3.891,633,4.626,634,4.065,635,4.398,636,5.637,637,3.85,638,3.85,639,5.637,640,4.73,641,4.612,642,4.612,643,5.244,644,4.612,645,4.612,646,4.612,647,4.987,648,4.612,649,4.612,650,4.612,651,4.612,652,4.612]],["title/controllers/ConversationsController.html",[11,1.587,653,3.266]],["body/controllers/ConversationsController.html",[0,0.097,1,1.857,3,0.049,4,0.049,5,0.044,7,0.059,8,0.01,9,0.004,10,0.004,11,0.782,13,0.804,15,1.023,16,0.195,17,0.352,18,2.205,19,2.012,20,2.205,21,2.012,22,2.103,23,2.103,24,2.103,25,2.012,26,1.14,27,2.012,28,2.205,29,0.561,31,1.059,32,0.875,36,2.527,37,1.354,38,1.354,39,1.291,40,0.631,41,1.023,42,1.291,43,1.291,44,1.235,45,1.235,46,1.235,47,1.235,76,0.715,78,1.261,79,0.901,80,1.141,82,0.875,85,0.184,86,0.634,87,2.527,91,3.069,95,1.402,96,2.348,98,3.949,99,2.765,101,3.135,104,1.17,109,2.322,113,4.319,135,4.465,136,1.235,137,1.185,138,1.509,139,1.609,142,4.119,143,3.781,145,1.185,156,1.235,158,3.656,160,3.655,161,3.983,163,1.461,166,1.973,205,1.469,278,2.143,287,1.904,477,1.668,486,2.012,488,2.622,502,1.609,566,1.098,627,2.458,633,4.762,637,3.326,638,1.931,653,2.622,654,1.904,655,3.318,656,3.101,657,3.924,658,3.924,659,3.101,660,3.924,661,3.924,662,3.924,663,3.924,664,1.904,665,2.936,666,2.159,667,6.605,668,6.06,669,2.159,670,3.101,671,2.159,672,3.655,673,1.904,674,3.587,675,2.159,676,4.655,677,2.159,678,1.904,679,3.069,680,2.159,681,5.168,682,2.159,683,4.814,684,1.904,685,3.218,686,3.518,687,2.159,688,1.904,689,3.388,690,2.159,691,4.525,692,2.159,693,1.904,694,3.069,695,2.159,696,2.159,697,1.904,698,3.069,699,2.159,700,2.159,701,1.904,702,3.069,703,2.159,704,3.101,705,3.101,706,3.518,707,2.159,708,3.388,709,1.904,710,2.159,711,2.159,712,2.159,713,2.159,714,2.159,715,2.159,716,2.159,717,2.159,718,2.159,719,2.159,720,4.452,721,2.159,722,2.159,723,2.159,724,2.159,725,2.159,726,2.159,727,4.452,728,2.159,729,2.159,730,2.159,731,2.159,732,2.159]],["title/modules/ConversationsModule.html",[50,1.391,312,3.063]],["body/modules/ConversationsModule.html",[0,0.248,3,0.126,4,0.126,5,0.113,7,0.151,8,0.009,9,0.007,10,0.007,13,2.593,16,0.266,17,0.896,50,2.211,52,2.445,53,3.303,57,5.062,59,3.678,60,2.906,61,2.701,63,3.419,65,3.987,68,4.425,312,6.183,319,4.844,334,4.425,653,5.698,708,5.589,709,4.855,733,4.855,734,5.507,735,4.855,736,5.507,737,5.507]],["title/injectables/ConversationsService.html",[70,0.751,708,2.893]],["body/injectables/ConversationsService.html",[0,0.107,1,2.013,3,0.054,4,0.054,5,0.049,7,0.065,8,0.01,9,0.004,10,0.004,16,0.191,17,0.388,32,0.967,36,1.18,40,0.609,70,0.653,71,0.797,73,0.967,74,1.667,75,3.347,76,0.765,78,1.35,79,1.028,80,1.221,81,1.918,82,0.967,85,0.204,86,0.687,87,2.571,95,1.43,104,1.215,109,4.394,113,4.225,127,2.184,163,1.638,166,2.651,190,1.779,191,2.986,200,1.171,202,2.046,205,1.989,292,2.918,566,3.718,585,2.093,635,3.729,637,3.265,638,3.481,656,3.362,657,3.362,658,4.199,659,3.362,660,3.362,661,3.362,662,4.199,663,4.199,664,3.362,665,3.112,672,3.809,673,3.362,674,3.802,678,2.104,679,3.253,683,5.218,684,3.362,685,3.41,688,3.362,689,3.591,693,3.362,694,3.253,697,2.104,698,3.253,701,2.104,702,3.253,708,2.517,738,2.104,739,2.386,740,2.386,741,2.386,742,2.386,743,2.386,744,2.386,745,2.386,746,2.386,747,2.386,748,1.918,749,3.814,750,2.386,751,3.814,752,3.362,753,5.441,754,3.814,755,4.763,756,5.441,757,6.916,758,1.779,759,6.286,760,5.441,761,2.386,762,2.386,763,2.386,764,2.386,765,3.362,766,3.814,767,2.386]],["title/classes/CreateCommentDto.html",[0,0.197,768,3.063]],["body/classes/CreateCommentDto.html",[0,0.292,2,1.355,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.687,183,1.816,611,4.283,613,3.712,616,3.424,768,5.385,769,5.72,770,4.836,771,3.299,772,5.214,773,5.214]],["title/classes/CreateConversationDto.html",[0,0.197,665,2.507]],["body/classes/CreateConversationDto.html",[0,0.24,2,0.774,3,0.085,4,0.085,5,0.076,7,0.102,8,0.009,9,0.006,10,0.006,16,0.201,29,0.964,36,2.502,40,0.701,76,0.776,79,1.094,80,0.913,85,0.317,95,1.546,96,2.549,185,1.649,186,4.119,199,3.13,200,2.615,204,3.187,205,1.548,428,1.819,627,4.363,629,3.174,631,3.349,632,1.419,635,3.914,637,3.427,638,3.427,640,3.975,647,4.284,665,3.05,774,6.639,775,2.121,776,4.324,777,4.027,778,4.284,779,3.707,780,3.707,781,3.707,782,6.243,783,3.707,784,3.707,785,5.088,786,4.506,787,3.707,788,5.088,789,6.243,790,4.7,791,5.088,792,3.707,793,3.707,794,3.707,795,3.268,796,3.268,797,5.017,798,3.707,799,3.707,800,3.268,801,3.268,802,2.979,803,2.979,804,2.979,805,2.591,806,2.591,807,2.979,808,4.284,809,4.284,810,5.088,811,3.268,812,4.7,813,3.707,814,3.707,815,3.707,816,3.707,817,3.707,818,3.707]],["title/classes/CreateMessageDto.html",[0,0.197,819,2.893]],["body/classes/CreateMessageDto.html",[0,0.27,2,1.254,3,0.137,4,0.137,5,0.123,7,0.165,8,0.009,9,0.008,10,0.008,16,0.193,29,1.561,40,0.679,76,0.853,85,0.513,95,1.52,166,2.589,185,2.275,616,4.196,819,4.854,820,7.305,821,4.824,822,6.389,823,6.004,824,6.004,825,5.293,826,7.354]],["title/classes/CreatePostDto.html",[0,0.197,827,3.063]],["body/classes/CreatePostDto.html",[0,0.291,2,1.351,3,0.148,4,0.148,5,0.133,7,0.177,8,0.009,9,0.008,10,0.008,16,0.247,29,1.681,36,2,183,1.81,771,3.288,827,5.375,828,5.701,829,4.519,830,4.268,831,5.196,832,5.196,833,4.519,834,3.413]],["title/classes/DeleteCommentDto.html",[0,0.197,835,3.063]],["body/classes/DeleteCommentDto.html",[0,0.292,2,1.355,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.687,166,2.113,183,1.816,611,4.283,613,3.712,770,4.836,771,3.299,772,5.214,773,5.214,835,5.385,836,5.72]],["title/classes/DeleteConversationDto.html",[0,0.197,674,3.063]],["body/classes/DeleteConversationDto.html",[0,0.278,2,1.29,3,0.141,4,0.141,5,0.127,7,0.169,8,0.009,9,0.008,10,0.008,16,0.199,40,0.527,76,0.663,85,0.527,95,1.315,96,2.177,99,2.236,103,3.221,166,2.011,183,2.094,185,2.315,674,5.229,685,5.245,775,3.533,776,3.693,777,3.03,837,5.445,838,3.533,839,3.872,840,4.604,841,4.964,842,5.445,843,4.316]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.197,679,2.62]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.361,2,1.035,3,0.113,4,0.113,5,0.102,7,0.212,8,0.009,9,0.007,10,0.007,16,0.234,29,1.288,36,1.533,40,0.621,76,0.699,79,0.67,85,0.423,95,1.557,96,1.746,99,2.357,103,3.129,127,2.272,166,2.12,183,2.161,185,2.014,477,2.349,629,3.31,631,3.194,632,1.896,635,3.106,637,4.238,638,3.573,640,3.436,665,4.417,679,3.892,694,2.962,698,2.962,702,2.962,775,2.834,776,2.962,777,3.194,838,3.724,839,4.081,840,3.693,843,3.462,844,5.081,845,4.955,846,4.955,847,5.396,848,3.693,849,3.27]],["title/classes/DeleteOnePost.html",[0,0.197,850,3.063]],["body/classes/DeleteOnePost.html",[0,0.34,2,1.311,3,0.143,4,0.143,5,0.129,7,0.172,8,0.009,9,0.008,10,0.008,16,0.202,40,0.536,76,0.674,85,0.536,95,1.327,96,2.212,185,2.337,613,4.637,619,5.044,629,3.842,631,3.707,632,2.402,829,4.386,850,5.28,851,6.661,852,6.277]],["title/injectables/ErrorsInterceptor.html",[70,0.751,853,3.266]],["body/injectables/ErrorsInterceptor.html",[0,0.25,3,0.127,4,0.127,5,0.114,7,0.152,8,0.009,9,0.007,10,0.007,16,0.247,17,0.904,40,0.474,70,1.2,71,1.856,76,0.596,78,1.052,79,0.751,80,0.951,85,0.474,86,1.262,104,0.976,163,1.218,232,2.125,253,2.725,278,2.319,408,4.424,410,3.048,853,5.222,854,4.897,855,4.625,856,4.896,857,4.819,858,5.321,859,5.554,860,4.589,861,4.625,862,5.554,863,5.631,864,3.177,865,4.897,866,3.666,867,4.14,868,5.554,869,4.897,870,5.554]],["title/classes/ExceptionFilter.html",[0,0.197,233,3.063]],["body/classes/ExceptionFilter.html",[0,0.26,2,1.209,3,0.132,4,0.132,5,0.119,7,0.159,8,0.009,9,0.007,10,0.007,16,0.251,17,0.942,40,0.494,76,0.621,78,1.096,79,0.783,80,0.991,85,0.494,86,1.295,104,1.017,163,1.269,232,2.751,233,5.024,234,6.285,243,5.777,248,4.651,860,4.676,863,5.777,864,3.311,871,6.338,872,5.102,873,7.822,874,8.181,875,5.788,876,3.82,877,5.788,878,5.788]],["title/injectables/ExcludeNullInterceptor.html",[70,0.751,879,3.266]],["body/injectables/ExcludeNullInterceptor.html",[0,0.252,3,0.128,4,0.128,5,0.115,7,0.154,8,0.009,9,0.007,10,0.007,16,0.248,17,0.912,40,0.478,70,1.207,71,1.872,76,0.601,78,1.061,79,0.758,80,0.96,85,0.478,86,1.269,104,0.984,163,1.229,232,2.144,408,4.438,410,3.075,604,3.512,855,4.65,856,4.923,857,4.834,858,5.337,860,4.607,861,4.65,864,3.205,866,3.698,867,4.176,879,5.251,880,4.939,881,5.603,882,4.502,883,5.603,884,3.867]],["title/injectables/ExistedUserMiddleware.html",[70,0.751,885,3.266]],["body/injectables/ExistedUserMiddleware.html",[0,0.218,3,0.111,4,0.111,5,0.1,7,0.133,8,0.01,9,0.007,10,0.007,16,0.231,17,0.788,40,0.548,70,1.099,71,1.618,73,1.963,74,3.384,75,4.317,76,0.688,78,1.214,79,0.867,80,1.099,82,1.963,85,0.413,86,1.155,87,2.224,101,2.376,103,2.76,104,0.851,166,2.088,202,1.795,205,2.022,232,1.853,253,3.754,254,4.2,259,2.556,278,2.022,297,3.384,559,3.892,566,2.462,579,6.338,586,3.197,595,3.892,604,3.036,758,3.609,857,4.575,885,4.779,886,5.777,887,4.27,888,4.779,889,4.843,890,5.653,891,6.338,892,7.653,893,4.843,894,3.197,895,5.653,896,3.892,897,4.843,898,4.843,899,4.843]],["title/injectables/FacebookStrategy.html",[70,0.751,900,3.063]],["body/injectables/FacebookStrategy.html",[0,0.211,3,0.143,4,0.107,5,0.096,7,0.129,8,0.01,9,0.007,10,0.007,16,0.243,17,0.763,32,1.901,40,0.4,70,1.075,71,1.567,73,2.868,76,0.674,78,0.888,79,0.957,80,0.803,85,0.4,86,1.131,87,2.189,95,1.424,99,2.562,104,0.824,105,2.878,116,5.553,183,1.312,202,1.98,249,3.753,412,2.804,413,2.94,415,2.94,428,3.471,436,4.386,437,4.678,439,4.678,440,2.94,455,4.944,547,3.313,573,5.686,900,4.386,901,4.135,902,4.69,903,4.135,904,6.238,905,5.534,906,4.69,907,4.69,908,4.69,909,3.096,910,3.277,911,4.69,912,3.769,913,4.69,914,4.135,915,4.69,916,4.135,917,4.69,918,3.769,919,4.69,920,5.534,921,4.135,922,4.135,923,4.135,924,4.135,925,4.135,926,4.135]],["title/controllers/FileController.html",[11,1.587,927,3.266]],["body/controllers/FileController.html",[0,0.13,3,0.066,4,0.066,5,0.156,7,0.08,8,0.01,9,0.005,10,0.005,11,1.05,13,1.079,15,1.374,16,0.238,17,0.472,18,2.784,19,2.541,20,2.784,21,2.541,22,2.655,23,2.655,24,2.655,25,2.541,26,1.53,27,2.541,28,2.784,29,0.754,31,1.422,32,1.175,36,2.549,37,1.817,38,1.817,39,1.733,40,0.557,41,1.374,42,1.733,43,1.733,44,1.659,45,1.659,46,1.659,47,1.659,76,0.649,78,1.146,79,1.025,80,1.036,82,1.175,85,0.248,86,0.8,87,2.468,96,2.299,99,1.608,101,3.2,104,1.063,105,3.388,127,2.037,133,2.541,136,1.659,137,1.591,142,3.9,143,3.58,145,1.591,156,1.659,158,3.321,160,3.461,161,3.617,163,1.327,181,1.659,204,1.733,205,1.854,226,3.2,259,2.849,292,3.376,486,3.088,834,3.443,927,3.31,928,2.556,929,4.338,930,4.338,931,4.759,932,4.759,933,2.556,934,6.678,935,2.899,936,6.514,937,6.067,938,2.899,939,2.899,940,2.899,941,2.556,942,2.899,943,2.556,944,2.899,945,2.899,946,2.556,947,2.899,948,5.334,949,3.915,950,3.915,951,2.899,952,4.442,953,2.899,954,2.556,955,3.563,956,2.899,957,4.442,958,2.899,959,3.104,960,4.442,961,2.899,962,5.399,963,5.399,964,2.556,965,3.915,966,3.915,967,2.33,968,2.33,969,3.569,970,2.932,971,2.556,972,2.556,973,2.556,974,2.899,975,2.556,976,2.556,977,2.899,978,2.161,979,2.899,980,2.899,981,2.899,982,2.899,983,2.899,984,2.899,985,2.899,986,2.899,987,2.899,988,2.899,989,2.899,990,5.751,991,2.899,992,2.899,993,2.899,994,2.899,995,2.899]],["title/classes/FileService.html",[0,0.197,978,3.266]],["body/classes/FileService.html",[0,0.198,2,0.921,3,0.101,4,0.101,5,0.091,7,0.121,8,0.01,9,0.006,10,0.006,16,0.194,40,0.696,76,0.736,78,1.298,79,0.927,80,1.175,85,0.377,86,1.085,104,1.205,113,2.243,163,1.504,202,2.28,278,2.863,292,4.127,834,2.328,929,4.839,930,4.839,978,4.488,996,3.545,997,6.023,998,6.023,999,6.496,1000,8.658,1001,4.411,1002,6.023,1003,6.496,1004,4.411,1005,6.023,1006,6.496,1007,4.411,1008,3.545,1009,4.411,1010,3.545,1011,4.792,1012,4.411,1013,8.413,1014,6.023,1015,6.858,1016,5.51,1017,5.51,1018,6.858,1019,4.411,1020,4.411,1021,4.411]],["title/modules/FilesModule.html",[50,1.391,313,3.063]],["body/modules/FilesModule.html",[0,0.268,3,0.136,4,0.136,5,0.123,7,0.164,8,0.009,9,0.008,10,0.008,13,2.726,16,0.255,17,0.971,50,2.325,52,2.649,53,3.473,59,3.866,60,3.149,61,2.927,63,2.927,65,4.191,313,6.036,927,5.909,970,5.776,971,5.26,1022,5.26,1023,5.26,1024,5.967,1025,5.967]],["title/classes/FilesService.html",[0,0.197,970,2.893]],["body/classes/FilesService.html",[0,0.203,2,0.945,3,0.103,4,0.103,5,0.143,7,0.124,8,0.01,9,0.006,10,0.006,16,0.145,40,0.636,76,0.799,78,1.41,79,1.007,80,1.276,85,0.386,86,1.104,87,2.689,104,1.308,105,3.826,163,1.706,181,2.588,834,4.107,929,4.924,930,4.924,931,5.402,932,5.402,933,5.402,934,7.456,941,5.402,946,5.402,954,5.402,955,4.586,970,4.044,972,3.989,973,3.989,1026,3.989,1027,4.525,1028,4.525,1029,4.525,1030,4.525,1031,6.948,1032,6.948,1033,6.948,1034,6.948,1035,6.948,1036,6.948,1037,4.525]],["title/classes/GetAllConversationDto.html",[0,0.197,685,2.747]],["body/classes/GetAllConversationDto.html",[0,0.351,2,1.202,3,0.131,4,0.131,5,0.118,7,0.197,8,0.009,9,0.007,10,0.007,16,0.23,29,1.496,40,0.612,76,0.617,85,0.491,95,1.434,96,2.027,99,2.593,103,3.357,166,2.332,183,1.61,185,2.216,629,3.642,631,3.514,632,2.202,640,3.78,685,4.89,689,3.797,775,3.291,776,3.439,777,3.514,838,4.098,839,4.49,840,4.288,849,3.797,1038,5.756,1039,5.753]],["title/classes/GetOneConversationDto.html",[0,0.197,689,2.893]],["body/classes/GetOneConversationDto.html",[0,0.349,2,1.191,3,0.13,4,0.13,5,0.117,7,0.195,8,0.009,9,0.007,10,0.007,16,0.229,29,1.482,40,0.608,76,0.612,85,0.487,95,1.43,96,2.009,99,2.579,103,3.344,166,2.319,183,1.993,185,2.203,629,3.622,631,3.495,632,2.182,640,3.759,685,5.101,689,4.702,775,3.262,776,3.409,777,3.495,838,4.075,839,4.465,840,4.25,841,4.582,842,5.027,849,3.764,1038,4.582]],["title/injectables/GoogleStrategy.html",[70,0.751,1040,3.063]],["body/injectables/GoogleStrategy.html",[0,0.216,3,0.109,4,0.109,5,0.099,7,0.132,8,0.01,9,0.007,10,0.007,16,0.255,17,0.781,32,1.943,40,0.409,70,1.091,71,1.602,73,2.9,76,0.684,78,0.908,79,0.862,80,0.821,85,0.409,86,1.148,87,2.213,95,1.433,99,2.306,104,0.842,105,2.921,116,5.237,183,1.342,202,1.783,412,2.867,413,3.006,415,3.006,428,3.51,432,4.451,437,4.748,439,4.748,440,3.006,455,4.999,547,3.362,573,5.749,903,4.227,904,6.307,912,3.853,914,4.227,916,4.227,918,3.853,920,4.227,921,4.227,922,4.227,923,4.227,924,4.227,925,4.227,926,4.227,1040,4.451,1041,4.227,1042,4.795,1043,7.623,1044,4.795,1045,3.006,1046,4.227,1047,4.795,1048,4.795,1049,4.795,1050,4.795,1051,4.795,1052,4.795,1053,4.795,1054,4.795]],["title/controllers/HealthController.html",[11,1.587,1055,3.522]],["body/controllers/HealthController.html",[0,0.222,3,0.113,4,0.113,5,0.101,7,0.135,8,0.01,9,0.007,10,0.007,11,1.785,13,1.834,15,2.337,16,0.248,17,0.803,26,2.602,29,1.282,73,1.998,76,0.529,85,0.421,86,1.169,87,2.543,96,1.737,104,0.866,105,2.975,110,3.075,143,3.561,158,2.706,163,1.081,235,4.149,267,4.534,281,3.254,302,4.346,340,3.961,566,3.918,797,3.961,1055,5.214,1056,4.346,1057,7.707,1058,7.707,1059,4.93,1060,5.72,1061,4.93,1062,4.93,1063,6.488,1064,6.488,1065,4.93,1066,6.488,1067,6.488,1068,4.93,1069,4.93,1070,4.93,1071,4.93,1072,3.961,1073,4.93,1074,4.93,1075,4.93,1076,3.445,1077,4.93,1078,3.961,1079,6.488,1080,4.93,1081,4.93,1082,4.93]],["title/injectables/HttpCacheInterceptor.html",[70,0.751,1083,3.522]],["body/injectables/HttpCacheInterceptor.html",[0,0.244,3,0.124,4,0.124,5,0.112,7,0.149,8,0.01,9,0.007,10,0.007,16,0.175,17,0.884,40,0.464,70,1.183,71,1.814,76,0.583,78,1.028,79,0.734,80,0.93,85,0.464,86,1.244,95,1.213,101,3.726,104,0.954,163,1.514,183,1.933,202,2.237,253,2.663,396,6.696,408,4.388,410,2.98,1083,5.55,1084,6.089,1085,4.786,1086,6.907,1087,6.907,1088,5.429,1089,4.363,1090,5.429,1091,5.429,1092,7.596,1093,5.429,1094,5.429,1095,5.429,1096,5.429]],["title/classes/HttpExceptionFilter.html",[0,0.197,1097,3.522]],["body/classes/HttpExceptionFilter.html",[0,0.245,2,1.137,3,0.124,4,0.124,5,0.112,7,0.149,8,0.009,9,0.007,10,0.007,16,0.222,17,0.886,40,0.465,76,0.584,78,1.031,79,0.736,80,0.933,85,0.465,86,1.246,104,0.956,202,2.239,232,2.648,233,5.314,234,6.112,243,5.56,244,7.055,245,6.705,246,7.055,248,4.375,249,3.255,253,3.394,254,3.797,259,2.873,260,4.8,261,4.8,262,4.8,263,4.8,273,4.8,276,4.8,277,4.8,278,2.273,279,4.8,281,3.594,282,4.8,305,6.1,1097,5.56,1098,4.8,1099,5.445,1100,5.445,1101,5.445]],["title/interfaces/IApp.html",[179,2.01,1102,3.522]],["body/interfaces/IApp.html",[3,0.112,4,0.112,5,0.101,7,0.177,8,0.01,9,0.007,10,0.007,16,0.158,40,0.657,79,1.132,85,0.419,95,1.404,101,2.406,163,1.075,179,2.249,181,2.806,185,2,202,2.025,278,2.048,297,3.427,786,3.237,867,3.655,909,3.237,1102,5.813,1103,3.941,1104,6.424,1105,4.82,1106,6.181,1107,4.905,1108,6.467,1109,3.941,1110,5.392,1111,4.905,1112,4.324,1113,4.324,1114,4.905,1115,4.905,1116,4.905,1117,4.324,1118,4.905,1119,4.905,1120,3.941,1121,4.905,1122,6.467,1123,3.941,1124,3.941,1125,4.905,1126,6.781,1127,4.324,1128,4.905,1129,4.905,1130,3.655,1131,3.655,1132,4.905,1133,4.905,1134,4.905,1135,4.905,1136,4.905,1137,4.905,1138,4.905]],["title/interfaces/ISwaggerOptions.html",[179,2.01,1139,3.266]],["body/interfaces/ISwaggerOptions.html",[3,0.1,4,0.1,5,0.09,7,0.12,8,0.009,9,0.006,10,0.006,15,2.837,40,0.656,52,3.525,80,1.455,85,0.373,95,1.199,109,3.95,179,2.004,181,2.5,185,1.851,196,3.763,205,3.065,380,4.461,884,2.399,909,5.463,1139,4.461,1140,3.853,1141,7.34,1142,7.34,1143,7.34,1144,8.277,1145,6.999,1146,6.471,1147,5.985,1148,5.985,1149,5.985,1150,5.985,1151,5.985,1152,5.985,1153,5.985,1154,5.276,1155,7.34,1156,5.985,1157,5.276,1158,5.276,1159,5.276,1160,5.985,1161,4.461,1162,5.985,1163,5.985,1164,4.809,1165,4.809,1166,5.985,1167,4.809,1168,6.017,1169,6.017]],["title/modules/InterceptorModule.html",[50,1.391,314,3.063]],["body/modules/InterceptorModule.html",[0,0.248,3,0.126,4,0.126,5,0.113,7,0.151,8,0.01,9,0.007,10,0.007,16,0.276,17,0.896,50,2.211,52,2.445,63,2.701,314,4.87,329,3.848,377,7.308,378,7.308,853,5.194,879,5.194,1170,5.507,1171,8.468,1172,5.194,1173,5.507,1174,4.87,1175,5.507,1176,5.507,1177,5.507,1178,5.194,1179,5.507]],["title/injectables/LoggerContextMiddleware.html",[70,0.751,342,3.266]],["body/injectables/LoggerContextMiddleware.html",[0,0.251,3,0.128,4,0.128,5,0.115,7,0.153,8,0.009,9,0.007,10,0.007,16,0.226,17,0.909,40,0.6,70,1.205,71,1.867,76,0.6,78,1.058,79,0.756,80,0.957,85,0.477,86,1.267,104,0.981,163,1.225,232,2.138,249,4.829,253,3.963,254,4.433,259,2.948,342,5.241,857,4.829,888,5.241,890,6.2,891,7.121,894,4.642,895,6.2,909,3.687,1180,6.2,1181,4.925,1182,5.587,1183,5.587,1184,5.587]],["title/classes/LoggerModule.html",[0,0.197,348,3.266]],["body/classes/LoggerModule.html",[0,0.263,2,1.223,3,0.134,4,0.134,5,0.12,7,0.161,8,0.009,9,0.008,10,0.008,16,0.253,17,0.954,50,1.859,63,2.874,76,0.629,85,0.5,86,1.305,104,1.029,163,1.285,202,1.639,237,5.495,240,4.93,348,5.861,525,4.093,1185,5.164,1186,8.216,1187,5.858,1188,7.864,1189,5.821,1190,5.858,1191,5.858,1192,7.864]],["title/injectables/LoggerService.html",[70,0.751,240,2.747]],["body/injectables/LoggerService.html",[0,0.177,3,0.09,4,0.09,5,0.081,7,0.108,8,0.009,9,0.006,10,0.006,15,4.258,16,0.127,17,0.642,40,0.675,41,2.64,70,0.954,71,1.317,76,0.848,78,1.455,79,1.04,80,1.382,85,0.337,86,1.003,95,1.581,104,1.35,183,1.559,185,1.723,186,3.876,220,4.151,235,3.695,240,3.492,242,4.263,249,4.595,918,4.476,1193,3.475,1194,5.57,1195,5.57,1196,5.57,1197,5.57,1198,5.57,1199,5.57,1200,3.942,1201,7.686,1202,7.02,1203,3.942,1204,5.57,1205,3.942,1206,5.57,1207,3.942,1208,5.57,1209,3.942,1210,5.57,1211,3.942,1212,3.942,1213,3.942,1214,6.459,1215,5.57,1216,3.942,1217,3.942,1218,3.942,1219,3.942,1220,3.942]],["title/injectables/LoggingInterceptor.html",[70,0.751,1172,3.266]],["body/injectables/LoggingInterceptor.html",[0,0.248,3,0.126,4,0.126,5,0.113,7,0.152,8,0.009,9,0.007,10,0.007,16,0.246,17,0.899,40,0.471,70,1.196,71,1.846,76,0.593,78,1.046,79,0.747,80,0.946,85,0.471,86,1.258,104,0.97,163,1.211,202,1.545,232,2.113,408,4.415,410,3.031,855,4.608,856,4.878,857,4.809,858,5.309,860,4.577,861,4.608,864,3.159,866,3.645,867,4.116,1172,5.203,1221,4.869,1222,5.523,1223,5.523,1224,5.523,1225,5.523,1226,5.523,1227,5.523,1228,6.155,1229,5.523,1230,5.523,1231,5.523]],["title/classes/LoginDto.html",[0,0.197,470,2.747]],["body/classes/LoginDto.html",[0,0.295,2,1.369,3,0.15,4,0.15,5,0.135,7,0.18,8,0.009,9,0.008,10,0.008,16,0.249,29,1.704,183,1.834,470,4.86,484,3.459,547,3.459,771,3.333,1232,5.778,1233,4.326,1234,5.778,1235,5.267]],["title/controllers/MathController.html",[11,1.587,1236,3.266]],["body/controllers/MathController.html",[0,0.195,3,0.099,4,0.099,5,0.089,7,0.119,8,0.01,9,0.006,10,0.006,11,1.572,13,1.616,15,2.058,16,0.261,17,0.707,19,3.408,21,3.408,25,3.408,26,2.291,27,3.408,29,1.129,31,2.13,32,1.76,36,2.373,40,0.371,44,2.484,45,2.484,46,2.484,47,2.484,76,0.639,78,0.822,79,0.587,80,0.744,85,0.371,86,1.073,96,2.099,104,1.047,110,2.824,136,2.484,137,2.383,142,3.561,143,3.27,145,2.383,156,2.484,158,2.383,160,2.484,161,2.596,163,1.306,199,3.517,202,1.667,226,2.13,235,2.484,292,3.591,392,3.733,461,3.827,539,3.236,786,2.866,860,4.066,864,2.484,876,2.866,1060,5.252,1076,3.034,1124,5.881,1236,4.44,1237,3.827,1238,4.342,1239,8.114,1240,4.342,1241,5.957,1242,4.342,1243,5.957,1244,4.342,1245,4.342,1246,5.957,1247,5.957,1248,3.827,1249,3.236,1250,3.827,1251,4.342,1252,4.342,1253,4.342,1254,3.034,1255,5.957,1256,4.342,1257,4.342,1258,4.342,1259,4.342,1260,4.787]],["title/modules/MathModule.html",[50,1.391,315,3.063]],["body/modules/MathModule.html",[0,0.273,3,0.138,4,0.138,5,0.125,7,0.166,8,0.01,9,0.008,10,0.008,13,2.752,16,0.267,17,0.987,50,2.347,52,2.691,65,3.467,79,0.82,315,5.168,876,4,1236,5.95,1249,5.513,1250,5.343,1261,6.061,1262,6.061,1263,7.397,1264,6.061,1265,6.061,1266,6.061]],["title/classes/MessagesGateway.html",[0,0.197,1267,3.266]],["body/classes/MessagesGateway.html",[0,0.143,2,0.662,3,0.072,4,0.072,5,0.065,7,0.087,8,0.01,9,0.005,10,0.005,16,0.218,40,0.649,73,1.285,76,0.815,78,1.398,79,1.051,80,1.265,82,1.285,85,0.271,86,0.856,87,2.403,95,1.501,96,2.603,104,1.251,113,1.612,156,1.814,163,1.488,185,1.47,186,3.329,196,2.703,202,1.772,267,4.977,566,2.899,672,2.719,683,5.614,819,5.014,822,5.452,1254,5.429,1267,3.543,1268,2.795,1269,5.027,1270,4.19,1271,5.027,1272,4.19,1273,5.702,1274,4.19,1275,3.171,1276,4.702,1277,4.753,1278,5.702,1279,2.795,1280,6.975,1281,4.753,1282,3.171,1283,2.795,1284,4.753,1285,3.171,1286,2.795,1287,4.753,1288,3.171,1289,2.795,1290,4.753,1291,3.171,1292,3.171,1293,6.334,1294,4.753,1295,3.171,1296,2.795,1297,4.977,1298,4.753,1299,3.171,1300,4.753,1301,3.171,1302,4.753,1303,6.334,1304,2.795,1305,2.795,1306,2.548,1307,2.795,1308,2.548,1309,2.795,1310,5.702,1311,3.171,1312,3.171,1313,5.702,1314,3.171,1315,3.171,1316,3.171,1317,3.171,1318,3.171,1319,3.171,1320,3.171,1321,3.171,1322,5.724,1323,3.171,1324,4.753,1325,3.171,1326,3.171]],["title/modules/MessagesModule.html",[50,1.391,316,3.063]],["body/modules/MessagesModule.html",[0,0.273,3,0.138,4,0.138,5,0.125,7,0.166,8,0.009,9,0.008,10,0.008,16,0.257,17,0.987,50,2.347,52,2.691,53,3.506,59,3.904,60,3.198,61,2.973,63,3.629,316,6.059,1267,5.513,1276,5.723,1305,5.343,1327,5.343,1328,5.343,1329,6.061,1330,6.061]],["title/injectables/MessagesService.html",[70,0.751,1276,2.893]],["body/injectables/MessagesService.html",[0,0.13,3,0.066,4,0.066,5,0.059,7,0.079,8,0.01,9,0.005,10,0.005,16,0.173,17,0.469,40,0.61,70,0.757,71,0.963,76,0.767,78,1.3,79,1.044,80,1.176,85,0.246,86,0.796,87,1.664,95,1.536,104,1.206,113,1.465,163,1.505,166,2.513,185,1.368,186,2.639,190,2.148,191,3.372,202,0.806,225,3.295,226,3.506,293,3.089,294,3.553,616,3.623,638,3.571,655,4.009,672,1.649,683,5.284,819,4.718,822,5.517,884,1.582,912,6.31,1076,3.089,1120,5.228,1161,2.148,1269,4.742,1270,3.898,1271,3.898,1272,3.898,1274,3.898,1276,2.918,1279,2.541,1283,3.898,1286,3.898,1289,3.898,1296,3.898,1297,4.546,1331,2.541,1332,4.421,1333,2.882,1334,2.882,1335,4.421,1336,2.882,1337,2.882,1338,2.882,1339,2.882,1340,4.421,1341,4.421,1342,3.553,1343,4.421,1344,4.421,1345,4.421,1346,2.882,1347,6.032,1348,7.148,1349,2.882,1350,2.882,1351,2.882,1352,2.882,1353,2.882,1354,2.882,1355,2.882,1356,2.882,1357,4.421,1358,2.882,1359,4.421,1360,2.882,1361,2.882,1362,2.882,1363,2.882,1364,2.882,1365,2.882,1366,2.882,1367,2.882]],["title/classes/NatsStrategy.html",[0,0.197,1368,3.266]],["body/classes/NatsStrategy.html",[0,0.245,2,1.137,3,0.124,4,0.124,5,0.112,7,0.19,8,0.01,9,0.007,10,0.007,16,0.175,40,0.465,76,0.584,78,1.031,79,0.736,80,0.933,85,0.465,86,1.246,95,1.336,104,0.956,179,2.497,183,1.936,202,1.936,249,3.255,392,2.988,876,3.594,884,4.174,1254,3.804,1368,5.157,1369,4.375,1370,6.705,1371,6.919,1372,6.1,1373,5.445,1374,5.157,1375,6.112,1376,6.1,1377,4.8,1378,4.8,1379,4.8,1380,4.8,1381,4.8,1382,4.8,1383,4.8,1384,4.8,1385,4.8,1386,4.8,1387,4.8]],["title/interfaces/NatsSubscriber.html",[179,2.01,1374,3.266]],["body/interfaces/NatsSubscriber.html",[0,0.245,3,0.124,4,0.124,5,0.112,7,0.19,8,0.01,9,0.007,10,0.007,16,0.175,40,0.683,85,0.465,95,1.451,179,2.497,181,3.115,183,1.524,185,2.14,202,1.936,392,2.988,876,3.594,884,4.634,1105,5.157,1368,4.058,1369,4.375,1370,6.1,1372,4.8,1374,5.668,1375,6.785,1376,6.1,1377,4.8,1378,4.8,1379,4.8,1380,4.8,1381,4.8,1382,4.8,1383,4.8,1384,4.8,1385,4.8,1386,4.8,1387,4.8]],["title/controllers/OauthController.html",[11,1.587,1388,3.266]],["body/controllers/OauthController.html",[0,0.135,3,0.069,4,0.069,5,0.062,7,0.083,8,0.01,9,0.005,10,0.005,11,1.089,13,1.119,15,1.426,16,0.233,17,0.49,19,2.613,21,2.613,22,2.731,23,2.731,24,2.731,25,2.613,26,1.587,27,2.613,29,0.782,31,1.476,32,1.219,36,2.488,39,1.798,40,0.566,41,1.426,42,1.798,43,1.798,44,1.721,45,1.721,46,1.721,47,1.721,76,0.712,78,1.167,79,0.834,80,1.056,82,1.219,85,0.257,86,0.823,87,2.566,95,0.97,96,2.337,101,3.253,104,1.165,105,3.428,110,2.165,136,1.721,137,1.651,141,2.242,142,3.301,143,3.832,145,1.651,146,2.417,156,1.721,158,3.639,160,2.613,161,2.731,163,1.454,253,3.83,259,1.587,411,2.417,412,1.798,462,5.153,472,5.203,477,3.309,487,2.652,488,4.596,497,1.985,502,4.116,503,4.868,672,1.721,894,5.153,910,4.309,1045,3.866,1124,6.273,1131,4.942,1388,3.404,1389,2.652,1390,2.652,1391,4.568,1392,5.436,1393,4.568,1394,4.568,1395,4.568,1396,3.008,1397,3.008,1398,6.155,1399,6.882,1400,5.522,1401,3.008,1402,3.008,1403,5.436,1404,4.568,1405,3.008,1406,3.008,1407,3.008,1408,3.404,1409,3.008,1410,3.008,1411,3.008,1412,3.008,1413,3.008,1414,3.008,1415,3.008,1416,3.645,1417,2.652,1418,3.008,1419,3.008,1420,3.008,1421,4.568,1422,3.008,1423,3.008,1424,3.008,1425,3.008,1426,3.008,1427,4.568,1428,3.008,1429,3.008,1430,3.008,1431,3.008,1432,3.008,1433,3.008,1434,3.008]],["title/modules/OauthModule.html",[50,1.391,317,3.063]],["body/modules/OauthModule.html",[0,0.232,3,0.118,4,0.118,5,0.106,7,0.141,8,0.009,9,0.007,10,0.007,13,2.486,16,0.268,17,0.839,50,2.12,52,2.288,53,3.166,59,3.525,60,2.72,61,2.528,63,3.277,65,3.821,311,5.217,317,6.227,525,4.667,900,5.815,1040,5.815,1388,5.523,1416,5.853,1417,4.543,1435,4.543,1436,5.154,1437,4.543,1438,4.543,1439,5.154,1440,5.154,1441,5.154,1442,5.154,1443,5.154]],["title/injectables/OauthService.html",[70,0.751,1416,2.893]],["body/injectables/OauthService.html",[0,0.167,3,0.085,4,0.085,5,0.076,7,0.102,8,0.01,9,0.006,10,0.006,16,0.22,17,0.605,40,0.618,70,0.915,71,1.241,73,1.506,76,0.777,78,1.37,79,0.979,80,1.24,82,1.506,85,0.317,86,0.962,87,2.598,95,1.324,99,2.263,104,1.2,156,2.125,163,1.703,202,2.109,253,1.822,292,2.619,297,4.367,418,4.658,436,4.367,475,4.51,484,3.298,486,2.125,489,4.724,547,3.298,564,3.275,566,4.114,582,3.736,672,3.909,894,4.51,1011,2.596,1045,3.347,1254,2.596,1392,4.707,1408,2.768,1416,3.524,1444,3.275,1445,5.339,1446,5.339,1447,5.339,1448,3.715,1449,3.715,1450,5.339,1451,3.715,1452,5.339,1453,3.715,1454,5.339,1455,3.715,1456,5.339,1457,3.715,1458,4.29,1459,3.715,1460,3.715,1461,5.339,1462,6.25,1463,6.25,1464,6.25,1465,6.25,1466,3.715,1467,3.715,1468,3.715,1469,3.715,1470,3.275,1471,3.275,1472,3.715,1473,3.715,1474,3.715,1475,3.715,1476,3.715,1477,3.715,1478,3.715,1479,3.715]],["title/classes/PaginationDto.html",[0,0.197,107,3.063]],["body/classes/PaginationDto.html",[0,0.288,2,1.009,3,0.11,4,0.11,5,0.099,7,0.133,8,0.009,9,0.007,10,0.007,16,0.206,29,1.256,36,2.529,40,0.698,76,0.771,85,0.412,95,1.488,96,2.53,107,4.474,185,1.98,199,3.883,205,3.413,210,4.772,226,3.141,631,3.751,632,1.849,640,4.035,647,6.569,681,5.018,777,4.01,959,4.474,1480,4.259,1481,7.181,1482,7.181,1483,7.181,1484,6.74,1485,4.831,1486,6.402,1487,4.831,1488,6.74,1489,5.644,1490,4.831,1491,6.74]],["title/injectables/ParseIntPipe.html",[70,0.751,1492,3.522]],["body/injectables/ParseIntPipe.html",[0,0.255,3,0.129,4,0.129,5,0.116,7,0.156,8,0.009,9,0.007,10,0.007,16,0.182,17,0.923,40,0.484,70,1.216,71,1.894,76,0.608,78,1.073,79,0.767,80,0.971,85,0.484,86,1.278,87,2.397,95,1.361,104,0.996,163,1.243,202,1.586,232,2.169,278,2.367,586,3.741,672,3.243,884,3.111,959,3.961,1123,4.555,1492,5.703,1493,6.257,1494,4.997,1495,5.703,1496,6.257,1497,6.226,1498,7.159,1499,5.669,1500,4.555,1501,6.257,1502,7.097,1503,5.669,1504,5.669,1505,4.997]],["title/classes/PostEntity.html",[0,0.197,830,2.893]],["body/classes/PostEntity.html",[0,0.278,2,0.959,3,0.105,4,0.105,5,0.094,7,0.126,8,0.009,9,0.006,10,0.006,16,0.148,36,2.165,40,0.724,76,0.91,85,0.392,95,1.549,96,2.989,103,3.012,185,1.914,196,2.932,199,2.837,613,4.003,619,6.473,621,4.046,627,4.323,629,4.359,631,4.039,632,1.756,830,4.083,833,4.89,834,3.693,1506,4.046,1507,5.216,1508,5.624,1509,5.216,1510,5.624,1511,4.59,1512,4.59,1513,4.59,1514,4.59,1515,4.59,1516,4.59,1517,4.59,1518,4.59,1519,4.59,1520,4.59,1521,4.59,1522,6.187,1523,5.454]],["title/controllers/PostsController.html",[11,1.587,1524,3.266]],["body/controllers/PostsController.html",[0,0.086,3,0.044,4,0.044,5,0.039,7,0.052,8,0.01,9,0.003,10,0.003,11,0.692,13,0.711,15,0.906,16,0.212,17,0.311,18,4.129,19,1.82,20,1.994,21,1.82,22,1.902,23,1.902,24,1.902,25,1.82,26,1.009,27,1.82,28,1.994,29,0.497,31,0.938,32,0.775,36,2.503,37,1.198,38,1.198,39,1.143,40,0.609,41,0.906,42,1.143,43,1.143,44,1.093,45,1.093,46,1.093,47,1.093,76,0.749,78,1.32,79,0.943,80,1.195,82,0.775,85,0.163,86,0.573,87,2.62,91,2.849,95,1.402,96,2.458,98,3.698,99,2.677,101,3.333,103,2.924,104,1.225,105,3.686,110,3.007,113,4.026,135,3.698,136,1.093,137,1.049,138,1.335,139,1.424,140,1.424,142,4.264,143,3.914,145,1.049,146,1.536,158,3.828,160,1.82,161,4.17,163,1.529,166,1.036,167,1.685,235,1.82,278,2.529,477,1.508,479,1.685,486,4.401,488,2.371,492,3.698,502,1.424,604,2.987,613,2.726,676,3.992,768,3.33,827,3.33,835,3.33,850,3.33,965,2.805,966,2.805,975,1.685,976,1.685,1524,2.371,1525,1.685,1526,4.515,1527,3.603,1528,3.603,1529,2.805,1530,3.603,1531,3.603,1532,3.603,1533,3.603,1534,3.603,1535,2.805,1536,3.603,1537,2.805,1538,1.685,1539,1.911,1540,2.805,1541,4.258,1542,5.713,1543,1.911,1544,1.685,1545,1.911,1546,3.181,1547,3.181,1548,1.911,1549,1.685,1550,1.911,1551,4.087,1552,1.911,1553,1.685,1554,1.911,1555,1.911,1556,1.685,1557,1.911,1558,2.556,1559,1.911,1560,1.685,1561,1.911,1562,1.911,1563,1.685,1564,1.911,1565,1.911,1566,1.685,1567,1.911,1568,1.911,1569,1.685,1570,3.145,1571,1.911,1572,3.181,1573,1.911,1574,1.685,1575,3.33,1576,1.911,1577,1.911,1578,1.685,1579,3.145,1580,1.911,1581,1.911,1582,4.765,1583,2.698,1584,1.685,1585,1.685,1586,1.685,1587,1.685,1588,1.685,1589,1.685,1590,1.685,1591,1.685,1592,1.685,1593,1.685,1594,1.685,1595,1.685,1596,1.685,1597,1.911,1598,1.911,1599,1.911,1600,1.911,1601,1.911,1602,1.911,1603,1.911,1604,1.911,1605,3.181,1606,1.911,1607,1.911,1608,1.911,1609,1.911,1610,1.911,1611,1.911,1612,1.911,1613,1.911,1614,1.911,1615,1.911,1616,1.911,1617,1.911,1618,1.911,1619,1.911,1620,1.911,1621,1.911,1622,1.911,1623,1.911,1624,1.911]],["title/modules/PostsModule.html",[50,1.391,318,3.063]],["body/modules/PostsModule.html",[0,0.248,3,0.126,4,0.126,5,0.113,7,0.151,8,0.009,9,0.007,10,0.007,13,2.593,16,0.266,17,0.896,50,2.211,52,2.445,53,3.303,57,5.062,59,3.678,60,2.906,61,2.701,63,3.419,65,3.987,68,4.425,318,6.183,319,4.844,334,4.425,1524,5.698,1583,5.589,1584,4.855,1625,4.855,1626,5.507,1627,4.855,1628,5.507,1629,5.507]],["title/injectables/PostsService.html",[70,0.751,1583,2.893]],["body/injectables/PostsService.html",[0,0.083,3,0.042,4,0.042,5,0.038,7,0.051,8,0.01,9,0.003,10,0.003,16,0.192,17,0.302,32,0.752,36,1.849,40,0.615,70,0.532,71,0.62,73,0.752,74,1.297,75,2.971,76,0.758,78,1.338,79,0.975,80,1.211,81,1.491,82,0.752,85,0.158,86,0.559,87,2.61,95,1.394,103,3.157,104,1.213,105,3.666,109,3.088,113,3.665,163,1.514,166,2.458,191,1.163,202,1.575,205,3.608,278,2.807,292,2.554,477,1.472,486,2.676,497,1.225,558,1.491,561,1.297,566,3.838,580,1.491,585,1.704,586,4.136,604,2.933,613,3.419,614,4.124,616,2.112,636,3.759,639,2.495,643,1.297,752,2.737,758,5.147,765,1.636,768,3.269,827,3.269,833,4.176,834,3.154,835,3.269,850,3.269,896,1.491,1500,1.491,1507,4.854,1509,4.196,1527,3.528,1528,2.737,1529,2.737,1530,2.737,1531,2.737,1532,2.737,1533,2.737,1534,2.737,1535,2.737,1536,2.737,1537,2.737,1538,1.636,1544,2.737,1549,2.737,1553,2.737,1556,2.737,1558,1.491,1560,2.737,1563,2.737,1566,2.737,1569,2.737,1570,3.088,1574,2.737,1575,3.269,1578,2.737,1579,3.088,1583,2.049,1585,1.636,1586,1.636,1587,1.636,1588,1.636,1589,1.636,1590,1.636,1591,1.636,1592,1.636,1593,1.636,1594,1.636,1595,1.636,1596,1.636,1630,1.636,1631,1.856,1632,1.856,1633,1.856,1634,1.856,1635,1.856,1636,1.856,1637,1.856,1638,1.856,1639,1.856,1640,1.856,1641,1.856,1642,1.856,1643,1.491,1644,1.856,1645,3.105,1646,3.105,1647,1.856,1648,1.856,1649,2.737,1650,3.105,1651,1.856,1652,1.636,1653,1.856,1654,5.206,1655,1.856,1656,4.002,1657,1.856,1658,1.856,1659,3.105,1660,1.856,1661,6.267,1662,1.856,1663,2.737,1664,1.856,1665,1.856,1666,1.636,1667,1.856,1668,1.856,1669,3.105,1670,1.856,1671,1.856,1672,1.636,1673,1.856,1674,1.856,1675,1.856,1676,3.105,1677,1.856,1678,3.105,1679,1.856,1680,3.105,1681,1.856,1682,1.856]],["title/modules/PrismaModule.html",[50,1.391,319,2.507]],["body/modules/PrismaModule.html",[0,0.262,3,0.133,4,0.133,5,0.12,7,0.16,8,0.009,9,0.007,10,0.007,16,0.252,17,0.948,50,2.29,52,2.585,53,3.421,59,3.809,60,3.073,61,2.856,63,3.54,75,4.758,319,4.98,337,5.799,338,3.843,525,5.043,1157,6.362,1683,5.133,1684,5.133,1685,5.133,1686,5.823,1687,5.823]],["title/injectables/PrismaService.html",[70,0.751,75,2.313]],["body/injectables/PrismaService.html",[0,0.225,3,0.114,4,0.114,5,0.103,7,0.137,8,0.01,9,0.007,10,0.007,16,0.211,17,0.815,40,0.427,70,1.123,71,1.673,73,2.962,75,3.459,76,0.832,78,0.948,79,0.677,80,0.858,85,0.427,86,1.181,87,2.694,104,1.284,183,1.834,232,1.916,415,3.138,566,3.715,1011,4.58,1110,3.731,1688,4.414,1689,7.308,1690,6.555,1691,8.257,1692,8.257,1693,5.007,1694,6.555,1695,6.23,1696,5.007,1697,5.007,1698,5.007,1699,4.023,1700,5.007,1701,4.414,1702,5.007,1703,5.007,1704,5.007,1705,5.007,1706,5.007,1707,5.007]],["title/classes/ProfileEntity.html",[0,0.197,1708,2.893]],["body/classes/ProfileEntity.html",[0,0.232,2,0.564,3,0.062,4,0.062,5,0.055,7,0.074,8,0.009,9,0.004,10,0.004,16,0.187,29,0.702,36,1.3,40,0.73,76,0.829,79,0.904,85,0.231,95,1.53,96,2.722,101,1.325,127,2.895,133,3.612,185,1.3,186,4.023,199,3.597,226,3.425,293,4.072,428,1.325,462,1.782,585,2.307,627,2.938,629,2.625,631,3.542,632,1.033,640,4.14,643,3.607,776,4.533,777,4.23,778,2.17,785,3.133,786,2.775,788,4.984,791,3.133,802,2.17,803,2.17,804,2.17,807,2.17,808,2.17,809,2.17,810,4.984,838,2.405,1011,2.938,1076,2.938,1078,3.378,1260,3.378,1342,2.17,1491,2.381,1523,4.551,1708,2.775,1709,2.381,1710,6.155,1711,4.551,1712,6.155,1713,4.148,1714,4.551,1715,4.551,1716,4.551,1717,4.551,1718,5.074,1719,3.706,1720,3.706,1721,2.381,1722,5.137,1723,2.7,1724,2.381,1725,3.706,1726,5.137,1727,2.381,1728,4.148,1729,2.7,1730,3.706,1731,2.7,1732,4.551,1733,2.381,1734,2.7,1735,2.381,1736,3.706,1737,3.706,1738,2.381,1739,2.7,1740,2.7,1741,2.381,1742,2.381,1743,4.343,1744,2.381,1745,4.551,1746,2.381,1747,2.7,1748,3.706,1749,3.706,1750,2.381,1751,2.7,1752,2.7,1753,2.381,1754,2.7,1755,2.381,1756,3.706,1757,2.7,1758,2.013,1759,4.204,1760,2.381,1761,2.013,1762,2.013,1763,2.7,1764,2.7,1765,2.381,1766,2.381,1767,2.7,1768,2.7,1769,2.381,1770,2.7,1771,2.7,1772,2.7,1773,2.7,1774,2.7,1775,2.7,1776,2.7,1777,2.7,1778,2.7,1779,2.7]],["title/classes/ReactionsPost.html",[0,0.197,1570,2.893]],["body/classes/ReactionsPost.html",[0,0.336,2,1.29,3,0.141,4,0.141,5,0.127,7,0.205,8,0.009,9,0.008,10,0.008,16,0.241,29,1.606,36,1.911,183,2.094,613,4.28,771,3.14,829,4.316,830,4.077,831,4.964,832,6.013,833,4.316,834,3.26,1507,4.604,1508,4.964,1509,4.604,1510,4.964,1570,4.939,1579,4.077,1780,4.964]],["title/interfaces/Response.html",[179,2.01,254,2.405]],["body/interfaces/Response.html",[0,0.259,3,0.132,4,0.132,5,0.119,7,0.197,8,0.01,9,0.007,10,0.007,16,0.251,17,0.939,40,0.493,70,1.229,85,0.493,163,1.265,179,2.646,181,3.301,185,2.22,232,2.208,254,3.939,292,4.123,408,3.939,410,3.167,855,3.809,857,3.45,858,4.737,860,4.29,861,4.737,864,3.301,866,3.809,882,4.637,1174,4.032,1781,4.637,1782,6.886,1783,5.087]],["title/guards/RolesGuard.html",[353,3.266,1784,3.522]],["body/guards/RolesGuard.html",[0,0.227,3,0.115,4,0.115,5,0.104,7,0.139,8,0.01,9,0.007,10,0.007,16,0.236,17,0.824,30,3.535,40,0.563,70,1.13,73,2.05,76,0.708,78,1.249,79,0.893,80,1.13,82,2.05,85,0.432,86,1.189,99,2.389,104,0.889,163,1.611,196,3.128,200,2.482,202,2.178,205,2.112,232,1.936,253,2.482,329,3.535,353,4.918,375,6.654,404,6.863,405,4.46,407,5.818,408,4.272,410,2.777,423,4.46,424,4.46,494,4.46,1089,4.065,1785,4.46,1786,5.059,1787,5.059,1788,5.059,1789,6.599,1790,5.059,1791,4.065,1792,4.46,1793,6.599,1794,5.059,1795,5.059,1796,5.059]],["title/classes/RtGuard.html",[0,0.197,493,3.266]],["body/classes/RtGuard.html",[0,0.288,2,1.337,3,0.146,4,0.146,5,0.132,7,0.176,8,0.009,9,0.008,10,0.008,16,0.246,32,2.595,73,3.313,76,0.687,183,1.792,411,5.145,412,3.828,413,4.013,415,4.013,493,5.698,1797,5.644,1798,6.403,1799,6.403]],["title/injectables/RtStrategy.html",[70,0.751,523,3.063]],["body/injectables/RtStrategy.html",[0,0.223,3,0.113,4,0.113,5,0.102,7,0.136,8,0.01,9,0.007,10,0.007,16,0.265,17,0.807,32,2.008,40,0.556,70,1.115,71,1.656,73,2.639,76,0.699,78,1.233,79,0.881,80,1.115,85,0.423,86,1.173,104,0.87,163,1.087,183,1.387,202,1.387,205,2.069,235,2.834,253,3.788,259,2.615,338,3.27,412,2.962,413,3.106,415,3.106,428,3.194,429,4.368,430,5.396,432,4.549,436,5.396,437,4.852,438,4.368,439,4.852,440,3.106,441,3.106,445,4.368,446,4.368,447,5.739,448,4.368,449,4.368,451,4.368,455,4.549,523,4.549,539,3.693,565,4.368,894,4.297,1800,4.368,1801,4.955,1802,6.51,1803,4.955,1804,4.955,1805,4.955,1806,4.955,1807,4.955]],["title/classes/SignupDto.html",[0,0.197,475,2.893]],["body/classes/SignupDto.html",[0,0.292,2,1.355,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.687,183,1.816,475,5.087,484,3.424,547,3.424,582,3.879,771,3.299,1233,4.283,1234,5.72,1235,5.214,1808,5.72]],["title/injectables/TimeoutInterceptor.html",[70,0.751,1178,3.266]],["body/injectables/TimeoutInterceptor.html",[0,0.242,3,0.123,4,0.123,5,0.111,7,0.148,8,0.01,9,0.007,10,0.007,16,0.243,17,0.876,40,0.46,70,1.177,71,1.799,76,0.578,78,1.019,79,0.728,80,0.922,85,0.46,86,1.237,104,0.946,163,1.659,198,4.012,232,2.06,268,4.746,278,2.248,408,4.374,410,2.955,855,4.534,856,4.8,857,4.523,858,5.26,860,4.523,861,4.534,863,6.08,864,3.08,865,4.746,866,3.553,869,4.746,905,6.056,1178,5.12,1809,4.746,1810,5.384,1811,6.87,1812,6.87,1813,5.384,1814,5.384]],["title/injectables/TransformInterceptor.html",[70,0.751,1174,3.063]],["body/injectables/TransformInterceptor.html",[0,0.25,3,0.127,4,0.127,5,0.114,7,0.192,8,0.01,9,0.007,10,0.007,16,0.247,17,0.904,40,0.474,70,1.2,71,1.856,76,0.596,78,1.052,79,0.751,80,0.951,85,0.474,86,1.262,104,0.976,163,1.218,179,2.547,232,2.125,254,3.048,292,3.437,408,4.424,410,3.846,855,5.067,856,3.881,857,4.589,858,5.321,860,4.589,861,4.625,864,3.177,866,3.666,882,4.463,1174,4.896,1781,4.463,1782,4.897,1783,4.897,1815,5.554]],["title/classes/UpdateCommentTextDto.html",[0,0.197,1575,3.063]],["body/classes/UpdateCommentTextDto.html",[0,0.292,2,1.355,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.687,166,2.113,183,1.816,611,4.283,616,3.424,770,4.836,771,3.299,772,5.214,773,5.214,1575,5.385,1816,5.72]],["title/classes/UpdateConversationDto.html",[0,0.197,694,2.62]],["body/classes/UpdateConversationDto.html",[0,0.359,2,1.024,3,0.112,4,0.112,5,0.101,7,0.211,8,0.009,9,0.007,10,0.007,16,0.233,29,1.275,36,2.238,40,0.657,76,0.776,79,0.978,80,1.406,85,0.419,95,1.555,99,1.776,103,2.111,127,3.317,166,1.597,183,2.152,185,2,477,2.325,629,3.288,631,3.172,632,1.877,635,3.074,637,3.549,638,3.549,640,3.413,665,4.4,679,2.932,694,3.866,698,2.932,702,2.932,775,2.806,777,2.406,838,2.806,839,3.074,843,3.427,844,5.374,847,5.374,848,3.655,849,3.237,1817,4.905,1818,4.905,1819,4.905]],["title/classes/UpdateMembersConversationDto.html",[0,0.197,698,2.62]],["body/classes/UpdateMembersConversationDto.html",[0,0.366,2,1.085,3,0.119,4,0.119,5,0.107,7,0.216,8,0.009,9,0.007,10,0.007,16,0.239,29,1.351,36,1.607,40,0.573,76,0.558,79,0.703,85,0.444,95,1.55,99,1.881,103,2.236,127,2.382,166,1.692,183,2.201,185,2.077,477,2.463,629,3.414,631,3.294,632,1.988,635,3.257,637,3.685,638,4.316,640,3.543,665,4.498,679,3.106,694,3.106,698,4.014,702,3.106,775,2.972,777,2.549,838,2.972,839,3.257,843,3.63,844,4.692,847,5.495,848,3.872,849,3.429,1820,5.195]],["title/classes/UpdateMessageDto.html",[0,0.197,1297,3.063]],["body/classes/UpdateMessageDto.html",[0,0.27,2,1.254,3,0.137,4,0.137,5,0.123,7,0.165,8,0.009,9,0.008,10,0.008,16,0.236,40,0.628,76,0.789,85,0.513,95,1.456,166,2.589,183,1.68,185,2.275,477,2.846,683,5.555,819,4.854,821,4.824,825,5.293,847,5.139,1297,5.139,1821,7.009,1822,6.004,1823,5.293,1824,4.475,1825,6.004]],["title/classes/UpdatePasswordDto.html",[0,0.197,482,3.063]],["body/classes/UpdatePasswordDto.html",[0,0.292,2,1.355,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.687,183,1.816,482,5.385,547,3.424,771,3.299,1233,4.283,1235,5.214,1826,5.72,1827,6.489,1828,5.72,1829,5.72]],["title/classes/UpdatePostDto.html",[0,0.197,1579,2.893]],["body/classes/UpdatePostDto.html",[0,0.336,2,1.29,3,0.141,4,0.141,5,0.127,7,0.205,8,0.009,9,0.008,10,0.008,16,0.241,29,1.606,36,1.911,183,2.094,613,4.28,771,3.14,829,4.316,830,4.077,831,4.964,832,6.013,833,4.316,834,3.26,1507,4.604,1508,4.964,1509,4.604,1510,4.964,1570,4.077,1579,4.939,1780,4.964]],["title/classes/UpdateRolesConversationDto.html",[0,0.197,702,2.62]],["body/classes/UpdateRolesConversationDto.html",[0,0.361,2,1.04,3,0.114,4,0.114,5,0.102,7,0.212,8,0.009,9,0.007,10,0.007,16,0.234,29,1.295,36,1.541,40,0.661,76,0.782,79,0.674,85,0.425,95,1.558,99,1.803,103,2.144,127,2.284,166,1.622,183,2.165,185,2.021,477,2.361,629,3.321,631,3.205,632,1.906,635,4.569,637,4.247,638,4.247,640,3.447,665,4.426,679,2.978,694,2.978,698,2.978,702,3.905,775,2.849,777,2.443,838,2.849,839,3.122,843,3.48,844,5.407,847,5.407,848,3.712,849,3.287,1830,4.981,1831,4.981,1832,4.981]],["title/classes/UpdateUserAvatarDto.html",[0,0.197,125,2.62]],["body/classes/UpdateUserAvatarDto.html",[0,0.365,2,1.311,3,0.143,4,0.143,5,0.129,7,0.222,8,0.009,9,0.008,10,0.008,16,0.243,29,1.632,119,3.753,125,4.517,127,2.878,131,3.753,133,3.591,183,2.268,771,3.192,1708,4.987,1833,4.678,1834,4.678,1835,5.044,1836,6.072]],["title/classes/UpdateUserCoverDto.html",[0,0.197,131,2.62]],["body/classes/UpdateUserCoverDto.html",[0,0.365,2,1.311,3,0.143,4,0.143,5,0.129,7,0.222,8,0.009,9,0.008,10,0.008,16,0.243,29,1.632,119,3.753,125,3.753,127,2.878,131,4.517,133,3.591,183,2.268,771,3.192,1708,4.987,1833,4.678,1834,4.678,1835,5.044,1836,6.072]],["title/classes/UpdateUserProfileDto.html",[0,0.197,119,2.62]],["body/classes/UpdateUserProfileDto.html",[0,0.276,2,0.75,3,0.082,4,0.082,5,0.074,7,0.168,8,0.009,9,0.005,10,0.005,16,0.167,29,0.933,36,1.11,40,0.705,76,0.886,79,0.829,85,0.307,95,1.492,96,2.909,101,1.761,119,3.114,125,2.146,127,3.084,131,2.146,133,3.847,183,1.882,185,1.611,186,3.862,199,3.416,226,3.008,293,3.64,585,1.97,643,2.509,771,1.825,776,4.872,777,4.094,778,2.885,785,2.676,786,2.37,788,4.569,791,2.676,810,3.882,838,2.054,841,6.634,1076,2.509,1078,2.885,1260,2.885,1708,5.605,1710,5.929,1711,4.592,1712,5.929,1713,4.186,1714,4.592,1715,4.592,1716,4.592,1717,4.592,1718,4.927,1719,3.165,1720,3.165,1721,3.165,1722,4.592,1724,3.165,1725,3.165,1726,4.592,1727,3.165,1728,2.885,1730,4.592,1732,3.165,1733,3.165,1735,3.165,1736,3.165,1737,3.165,1738,3.165,1741,3.165,1742,3.165,1743,3.882,1744,3.165,1745,3.165,1746,3.165,1748,3.165,1749,3.165,1750,3.165,1753,3.165,1755,3.165,1756,3.165,1833,2.676,1834,2.676,1835,2.885,1836,4.186,1837,3.59,1838,3.59,1839,3.59,1840,3.59,1841,3.59,1842,3.59,1843,3.59,1844,3.59,1845,3.59,1846,3.59,1847,3.59]],["title/classes/UserEntity.html",[0,0.197,1233,2.893]],["body/classes/UserEntity.html",[0,0.233,2,0.744,3,0.081,4,0.081,5,0.073,7,0.098,8,0.009,9,0.005,10,0.005,16,0.196,29,0.926,36,2.43,40,0.695,76,0.764,79,0.907,85,0.304,95,1.539,96,2.509,185,1.603,186,4.088,199,3.073,204,4.696,428,1.748,484,4.227,547,3.222,582,4.257,629,3.777,631,3.288,632,1.364,640,3.921,676,5.192,776,2.13,777,3.991,785,4.995,786,3.42,788,4.995,790,3.141,791,3.861,795,3.141,796,4.568,797,5.722,800,4.568,801,4.568,802,2.863,803,2.863,804,2.863,805,2.49,806,2.49,807,2.863,808,2.863,809,2.863,810,4.995,811,4.568,812,3.141,1233,3.42,1828,5.382,1829,5.382,1848,3.141,1849,3.564,1850,7.856,1851,5.181,1852,3.564,1853,5.181,1854,7.121,1855,3.564,1856,3.564,1857,3.564,1858,3.564,1859,3.564,1860,5.181,1861,3.564,1862,5.181,1863,5.181,1864,5.181,1865,5.181,1866,5.181,1867,3.564,1868,3.564,1869,3.564,1870,3.564,1871,3.564,1872,3.564,1873,3.564,1874,3.564]],["title/controllers/UsersController.html",[11,1.587,1875,3.266]],["body/controllers/UsersController.html",[0,0.107,3,0.054,4,0.054,5,0.049,7,0.065,8,0.01,9,0.004,10,0.004,11,0.86,13,0.884,15,1.126,16,0.222,17,0.387,18,3.967,19,2.173,20,2.381,21,2.173,22,2.271,23,2.271,24,2.271,25,2.173,26,1.253,27,2.173,28,2.381,29,0.617,31,1.165,32,0.962,36,2.472,37,1.489,38,1.489,39,1.42,40,0.589,41,1.126,42,1.42,43,1.42,44,1.358,45,1.358,46,1.358,47,1.358,76,0.713,78,1.258,79,0.899,80,1.138,82,0.962,85,0.203,86,0.684,87,2.569,90,3.815,91,3.783,92,3.815,93,3.815,95,1.459,96,2.341,98,3.317,99,3.08,100,2.093,101,3.26,103,3.142,104,1.167,105,3.584,110,2.812,113,4.063,114,1.908,116,4.177,119,3.243,124,1.908,125,3.243,127,1.742,130,1.908,131,3.243,133,2.173,135,4.146,136,1.358,137,1.303,138,1.659,139,1.77,140,1.77,141,1.77,142,4.127,143,3.789,145,1.303,149,1.908,150,1.908,151,1.908,152,1.908,154,3.401,158,3.647,159,1.489,160,3.801,161,3.972,163,1.457,166,2.318,168,2.093,170,2.093,172,4.043,173,2.093,175,2.093,442,1.659,462,2.507,470,3.401,484,1.253,492,4.422,495,1.77,547,3.131,582,2.271,943,3.349,950,3.349,1248,2.093,1875,2.831,1876,2.093,1877,4.185,1878,4.185,1879,4.185,1880,4.185,1881,2.093,1882,2.375,1883,2.375,1884,2.375,1885,2.093,1886,2.375,1887,2.375,1888,3.349,1889,2.093,1890,2.375,1891,3.349,1892,2.375,1893,2.375,1894,2.375,1895,2.375,1896,2.375,1897,2.375,1898,2.375,1899,2.375,1900,2.093,1901,2.375,1902,2.375,1903,2.093,1904,2.093,1905,2.093,1906,2.375,1907,2.375,1908,2.375,1909,2.375,1910,2.375,1911,2.375,1912,2.375,1913,2.375,1914,2.375,1915,2.375,1916,2.375,1917,2.375,1918,2.375,1919,2.375]],["title/modules/UsersModule.html",[50,1.391,57,2.62]],["body/modules/UsersModule.html",[0,0.215,3,0.109,4,0.109,5,0.098,7,0.131,8,0.01,9,0.007,10,0.007,13,2.363,16,0.262,17,0.777,40,0.407,50,2.015,52,2.119,53,3.01,57,5.205,59,3.351,60,2.518,61,2.341,63,3.115,65,3.632,69,4.206,76,0.512,78,0.903,79,0.645,80,0.817,86,0.859,104,0.838,110,3.01,154,5.495,159,2.991,249,3.796,281,3.149,311,5.106,319,4.66,321,4.206,322,5.598,323,6.707,325,5.598,380,3.556,381,4.206,384,4.206,525,4.437,526,4.206,885,3.556,886,3.834,1875,5.319,1904,4.206,1920,4.206,1921,4.771,1922,4.206,1923,4.206,1924,4.771,1925,4.771,1926,4.771,1927,4.771,1928,4.771,1929,4.771]],["title/injectables/UsersService.html",[70,0.751,154,2.747]],["body/injectables/UsersService.html",[0,0.093,3,0.047,4,0.047,5,0.042,7,0.057,8,0.01,9,0.004,10,0.004,16,0.21,17,0.336,31,1.013,32,0.837,40,0.596,70,0.581,71,0.69,73,0.837,74,1.443,75,3.131,76,0.749,78,1.321,79,0.944,80,1.195,82,0.837,85,0.176,86,0.611,87,2.59,88,2.99,89,2.99,90,2.725,91,2.58,92,3.468,93,3.468,94,2.99,95,1.45,99,1.809,103,3.532,104,1.191,105,3.626,106,2.99,107,3.491,113,3.982,114,2.725,116,4.475,119,2.987,124,1.659,125,2.987,127,0.947,130,1.659,131,2.987,133,1.181,144,1.82,148,1.82,149,1.659,150,1.659,151,1.659,152,1.659,154,2.126,159,2.705,163,1.487,166,2.42,196,0.979,199,0.947,202,2.043,205,3.382,226,1.664,278,2.617,292,1.664,442,1.443,470,3.132,477,0.979,484,1.09,495,1.539,497,1.363,547,3.455,558,1.659,559,1.659,560,1.539,561,1.443,562,2.527,566,3.939,576,2.99,580,2.725,582,3.3,585,1.861,586,4.137,595,4.767,596,2.99,598,1.82,599,1.82,636,3.468,639,1.659,758,5.053,896,1.659,959,2.37,1652,4.405,1663,4.405,1877,2.99,1878,3.804,1879,2.99,1880,3.804,1881,2.99,1885,1.82,1888,4.405,1889,2.99,1900,1.82,1903,1.82,1905,1.82,1930,1.82,1931,2.065,1932,2.065,1933,2.065,1934,2.065,1935,2.065,1936,2.065,1937,2.065,1938,2.065,1939,2.065,1940,2.065,1941,2.065,1942,2.065,1943,1.82,1944,3.391,1945,2.065,1946,2.065,1947,4.316,1948,3.391,1949,2.065,1950,3.391,1951,3.391,1952,2.065,1953,2.065,1954,2.065,1955,2.065,1956,2.065,1957,2.065,1958,2.065,1959,2.065,1960,3.391,1961,2.065,1962,3.391,1963,3.391,1964,3.391,1965,2.065,1966,4.316,1967,2.065,1968,2.065,1969,3.391,1970,2.065]],["title/injectables/ValidationPipe.html",[70,0.751,1971,3.522]],["body/injectables/ValidationPipe.html",[0,0.32,3,0.108,4,0.108,5,0.098,7,0.13,8,0.01,9,0.007,10,0.007,16,0.229,17,0.773,40,0.709,70,1.084,71,1.587,76,0.679,78,1.198,79,0.856,80,1.084,85,0.405,86,1.14,87,2.202,95,0.834,104,1.112,163,1.561,196,3.374,199,2.177,202,2.125,232,1.817,235,4.072,278,1.982,428,2.329,566,2.414,585,2.606,586,3.134,632,1.817,672,2.716,884,4.167,955,3.134,1123,3.815,1130,4.717,1495,5.086,1496,5.579,1497,6.101,1498,6.694,1500,3.815,1501,5.579,1505,4.185,1758,3.538,1824,3.538,1971,5.086,1972,4.185,1973,6.329,1974,6.329,1975,4.748,1976,7.593,1977,4.748,1978,4.748,1979,4.748,1980,4.748,1981,4.185,1982,4.748,1983,4.748,1984,4.748]],["title/changelog.html",[1985,2.935,1986,2.935,1987,3.22]],["body/changelog.html",[1,3.281,4,0.171,5,0.128,8,0.008,9,0.008,10,0.008,50,2.384,91,3.717,291,6.036,477,3.561,486,3.556,1165,4.996,1167,4.996,1526,4.633,1541,4.633,1987,6.622,1988,6.217,1989,5.48,1990,6.036,1991,6.217,1992,5.48,1993,6.217,1994,6.217,1995,6.217,1996,6.217,1997,6.217,1998,4.996,1999,6.217,2000,6.217,2001,6.217,2002,4.996,2003,6.217,2004,4.996,2005,5.48,2006,4.344,2007,6.217,2008,6.217]],["title/coverage.html",[2009,4.818]],["body/coverage.html",[0,0.387,1,0.838,5,0.033,6,1.399,8,0.01,9,0.003,10,0.003,11,2.365,12,1.183,14,1.399,31,0.779,33,1.183,40,0.136,50,0.504,58,1.109,64,1.183,70,1.355,72,1.399,75,0.838,83,1.399,84,1.399,99,0.575,107,1.109,110,0.752,119,0.949,125,0.949,131,0.949,145,0.871,154,1.705,179,2.378,180,1.109,182,2.954,184,1.109,203,1.183,207,1.183,230,1.275,231,1.399,233,1.109,240,0.995,242,1.048,254,0.871,278,0.663,284,1.183,285,1.399,300,1.048,332,1.183,342,1.183,348,1.183,353,1.183,392,2.32,393,1.399,403,1.399,426,1.109,427,1.399,452,1.183,453,1.399,470,0.995,475,1.048,482,1.109,489,1.705,491,1.275,492,1.109,493,1.183,497,1.048,523,1.109,540,1.399,560,1.183,561,1.109,562,1.183,563,1.275,585,5.038,611,1.048,612,1.399,633,1.183,634,1.399,653,1.183,654,1.399,665,0.908,674,1.109,679,0.949,681,1.9,685,0.995,689,1.048,694,0.949,698,0.949,702,0.949,708,1.795,738,1.399,748,1.275,768,1.109,769,1.399,770,2.659,774,1.399,775,3.346,805,1.109,806,1.109,819,1.048,820,1.399,821,2.185,827,1.109,828,1.399,829,2.954,830,1.048,835,1.109,836,1.399,837,1.399,844,2.954,850,1.109,851,1.399,853,1.183,854,1.399,871,1.399,872,1.399,879,1.183,880,1.399,885,1.183,886,1.275,887,1.399,900,1.109,901,1.399,909,4.777,927,1.183,928,1.399,967,1.275,968,1.275,969,1.275,970,1.048,978,1.183,996,2.185,1008,1.275,1010,3.821,1026,1.399,1038,2.185,1040,1.109,1041,1.399,1055,1.275,1056,1.399,1083,1.275,1084,1.399,1085,1.399,1097,1.275,1098,1.399,1102,1.275,1103,2.185,1106,1.275,1109,1.275,1139,1.183,1140,1.399,1172,1.183,1174,1.109,1178,1.183,1180,1.399,1181,1.399,1185,1.399,1189,1.275,1193,1.399,1221,1.399,1232,1.399,1233,1.048,1236,1.183,1237,1.399,1249,1.183,1267,1.183,1268,1.399,1276,1.048,1297,1.109,1331,1.399,1368,1.183,1369,2.185,1374,1.183,1388,1.183,1389,1.399,1416,1.048,1444,1.399,1458,1.275,1480,1.399,1492,1.275,1493,1.399,1494,1.399,1506,1.399,1524,1.183,1525,1.399,1570,1.048,1575,1.109,1579,1.048,1583,1.795,1630,1.399,1643,1.275,1688,1.399,1708,1.048,1709,1.399,1761,1.183,1762,1.183,1780,2.185,1781,2.185,1784,1.275,1785,1.399,1797,1.399,1800,1.399,1808,1.399,1809,1.399,1816,1.399,1821,1.399,1826,1.399,1833,2.659,1834,2.659,1848,1.399,1875,1.183,1876,1.399,1930,1.399,1971,1.275,1972,1.399,2006,1.109,2009,1.275,2010,1.587,2011,1.587,2012,1.399,2013,1.399,2014,8.867,2015,1.399,2016,8.483,2017,1.399,2018,1.399,2019,1.399,2020,7.597,2021,1.399,2022,1.399,2023,2.027,2024,1.399,2025,2.397,2026,1.399,2027,1.399,2028,2.397,2029,5.186,2030,1.399,2031,2.397,2032,4.227,2033,4.755,2034,2.397,2035,4.227,2036,2.397,2037,3.568,2038,4.755,2039,1.399,2040,7.738,2041,2.397,2042,1.399,2043,1.399,2044,1.587,2045,1.587,2046,1.399,2047,1.275,2048,1.399,2049,1.399,2050,4.888,2051,4.888,2052,1.399,2053,1.399,2054,1.399,2055,3.145,2056,1.399,2057,2.185,2058,1.399,2059,3.145,2060,1.399,2061,1.399,2062,1.399,2063,1.399,2064,1.399,2065,1.399,2066,1.399,2067,2.185,2068,2.185,2069,1.275,2070,1.275,2071,2.185,2072,2.185,2073,2.185,2074,2.397,2075,1.399,2076,1.399,2077,1.399,2078,3.568,2079,1.399,2080,2.867,2081,1.275,2082,1.399,2083,3.568,2084,1.587,2085,1.587,2086,2.185,2087,2.397,2088,1.399,2089,2.185,2090,2.397,2091,1.399,2092,1.587,2093,1.587]],["title/dependencies.html",[53,2.5,2094,3.22]],["body/dependencies.html",[0,0.28,8,0.01,9,0.006,10,0.006,17,0.753,29,1.202,53,2.191,191,2.898,237,3.23,259,3.281,329,3.23,338,3.051,340,3.714,351,4.075,412,2.763,432,3.23,440,4.913,441,3.897,530,3.714,632,1.769,864,2.644,876,3.051,910,4.344,964,5.48,1045,2.898,1046,4.075,1304,4.075,1307,5.48,1308,3.714,1497,3.714,1699,3.714,1758,3.445,1823,4.075,1824,3.445,2095,4.623,2096,6.217,2097,4.623,2098,4.623,2099,7.838,2100,4.623,2101,4.623,2102,6.217,2103,6.217,2104,4.623,2105,4.623,2106,6.217,2107,6.217,2108,4.623,2109,4.623,2110,4.075,2111,4.623,2112,4.075,2113,4.623,2114,4.623,2115,4.623,2116,4.623,2117,4.623,2118,4.623,2119,4.075,2120,4.623,2121,4.075,2122,4.075,2123,4.623,2124,4.623,2125,4.075,2126,4.623,2127,4.075,2128,4.623,2129,4.075,2130,4.623,2131,4.623,2132,4.623,2133,4.623,2134,4.623,2135,4.623,2136,3.714,2137,4.623,2138,4.623,2139,4.623,2140,4.623,2141,4.623,2142,4.623,2143,6.217,2144,4.623,2145,4.075,2146,4.623,2147,4.623]],["title/miscellaneous/enumerations.html",[2148,2.184,2149,4.65]],["body/miscellaneous/enumerations.html",[1,3.919,8,0.009,9,0.008,10,0.008,30,5.188,85,0.521,99,2.688,413,4.654,441,5.018,884,4.869,910,5.188,1045,4.654,1322,4.901,1488,6.546,1489,6.546,1943,6.546,2148,3.646,2149,5.377,2150,8.005,2151,6.099,2152,6.099]],["title/classes/fullNameValidator.html",[0,0.197,1761,3.266]],["body/classes/fullNameValidator.html",[0,0.307,2,1.112,3,0.122,4,0.122,5,0.109,7,0.146,8,0.009,9,0.007,10,0.007,16,0.171,40,0.582,76,0.732,78,1.291,79,1.073,80,1.168,85,0.455,86,1.229,87,1.647,95,1.394,104,1.198,163,1.496,196,3.233,200,2.612,202,1.49,232,2.61,392,2.922,428,3.346,616,2.81,632,2.037,1743,3.968,1761,5.084,2067,4.278,2153,5.259,2154,4.766,2155,4.766,2156,5.964,2157,5.324,2158,5.866,2159,5.084,2160,5.324,2161,4.766,2162,4.278,2163,3.968,2164,3.968,2165,3.72]],["title/miscellaneous/functions.html",[2148,2.184,2166,4.239]],["body/miscellaneous/functions.html",[8,0.009,9,0.006,10,0.006,15,3.355,40,0.713,78,1.581,79,1.129,80,1.43,85,0.343,95,1.543,104,1.358,105,2.992,196,2.675,199,3.718,204,3.374,240,3.538,242,4.307,281,4.922,884,2.204,955,2.651,967,4.535,968,4.535,969,4.535,990,4.975,1103,3.227,1106,5.243,1109,5.243,1110,2.993,1161,2.993,1189,5.243,1342,4.535,1695,4.535,1760,3.541,2012,3.541,2013,5.752,2021,3.541,2022,4.975,2023,2.993,2046,3.541,2047,4.535,2057,3.227,2059,3.541,2060,4.975,2061,4.975,2063,3.541,2064,4.975,2065,3.541,2066,4.975,2079,3.541,2080,6.214,2081,3.227,2082,3.541,2086,3.227,2087,6.817,2088,3.541,2148,2.401,2166,3.227,2167,4.016,2168,4.016,2169,3.541,2170,4.016,2171,4.016,2172,6.525,2173,3.541,2174,3.541,2175,4.016,2176,4.016,2177,4.016,2178,3.227,2179,4.016,2180,4.016,2181,4.016,2182,4.016,2183,4.016,2184,4.016,2185,4.016,2186,4.016,2187,4.016,2188,4.016,2189,4.016,2190,3.541,2191,4.016,2192,4.016,2193,4.016,2194,4.016,2195,4.016]],["title/classes/imageValidator.html",[0,0.197,2069,3.522]],["body/classes/imageValidator.html",[0,0.297,2,1.059,3,0.116,4,0.116,5,0.104,7,0.139,8,0.01,9,0.007,10,0.007,16,0.163,40,0.564,76,0.709,78,1.252,79,0.995,80,1.132,85,0.433,86,1.191,87,1.569,95,1.42,104,1.161,105,3.031,163,1.45,172,5.481,196,3.133,200,3.243,202,1.85,205,2.118,232,2.53,428,3.608,604,3.18,632,1.941,2068,4.076,2069,5.312,2070,4.076,2153,5.139,2154,4.619,2155,4.619,2156,5.897,2158,5.79,2161,4.619,2165,3.544,2196,5.072,2197,5.072,2198,5.072,2199,4.472,2200,5.072,2201,7.354,2202,5.072]],["title/index.html",[85,0.312,1985,2.935,1986,2.935]],["body/index.html",[0,0.188,1,1.722,4,0.045,5,0.1,8,0.009,9,0.003,10,0.003,13,0.733,36,1.009,53,1.546,61,0.966,63,0.966,79,0.266,86,0.588,91,3.671,98,4.29,99,2.774,104,0.346,109,2.153,110,0.934,116,3.551,127,1.496,133,1.127,141,1.468,159,2.617,166,2.236,172,1.468,186,2.048,201,1.468,213,1.468,226,0.966,237,2.279,242,1.3,253,0.966,254,1.081,259,1.039,267,1.376,278,2.682,288,3.76,291,3.355,292,1.6,361,1.736,371,2.431,385,2.431,387,3.681,417,2.621,418,1.468,440,1.235,441,2.045,462,1.3,472,1.468,477,2.55,484,1.722,486,4.118,547,1.722,574,1.583,582,1.178,590,1.736,632,0.754,637,1.79,638,1.081,655,2.431,667,5.518,676,1.376,681,3.393,691,2.876,704,3.681,705,1.736,759,1.736,777,2.382,834,2.204,888,1.468,910,1.376,936,5.112,937,1.736,948,1.736,955,1.3,1016,1.583,1017,1.583,1045,1.235,1112,1.736,1113,1.736,1117,1.736,1120,3.355,1130,3.112,1131,1.468,1146,1.736,1159,2.876,1164,1.583,1165,3.901,1167,2.621,1254,1.376,1306,1.583,1308,2.621,1322,1.583,1390,1.736,1399,1.736,1403,2.876,1408,2.431,1484,1.736,1495,1.583,1526,2.431,1540,1.736,1541,3.112,1558,1.583,1649,1.736,1699,1.583,1701,2.876,1743,1.468,1758,1.468,1765,3.681,1766,1.736,1791,1.583,1824,1.468,1891,2.876,1990,4.66,1992,1.736,1998,1.583,2002,1.583,2004,1.583,2005,5.874,2006,2.279,2009,1.583,2047,1.583,2089,1.583,2112,1.736,2119,1.736,2121,3.681,2122,2.876,2127,1.736,2129,1.736,2136,5.354,2145,1.736,2166,1.583,2203,1.97,2204,1.736,2205,2.876,2206,1.97,2207,3.262,2208,3.262,2209,1.97,2210,1.736,2211,1.736,2212,1.97,2213,1.97,2214,1.97,2215,1.97,2216,1.97,2217,1.97,2218,1.97,2219,1.97,2220,3.262,2221,1.97,2222,1.97,2223,1.97,2224,1.97,2225,3.262,2226,1.97,2227,3.262,2228,1.97,2229,1.97,2230,1.97,2231,4.855,2232,1.97,2233,1.97,2234,1.97,2235,1.736,2236,1.97,2237,1.97,2238,4.175,2239,1.97,2240,1.97,2241,3.262,2242,1.97,2243,3.262,2244,3.262,2245,1.97,2246,1.97,2247,1.97,2248,1.97,2249,1.97,2250,1.736,2251,1.736,2252,1.97,2253,3.262,2254,1.97,2255,4.175,2256,1.97,2257,1.97,2258,3.262,2259,1.97,2260,1.97,2261,1.97,2262,1.97,2263,1.97,2264,1.97,2265,1.97,2266,1.97,2267,1.97,2268,1.97,2269,3.262,2270,1.97,2271,1.97,2272,1.97,2273,1.97,2274,1.97,2275,1.97,2276,1.97,2277,1.97,2278,1.97,2279,1.97,2280,1.97,2281,1.736,2282,1.97,2283,3.262,2284,1.97,2285,3.262,2286,1.97,2287,1.97,2288,1.736,2289,1.97,2290,4.28,2291,1.97,2292,1.97,2293,1.97,2294,1.97,2295,1.97,2296,2.876,2297,1.97,2298,1.97,2299,1.97,2300,1.97,2301,1.97,2302,1.97,2303,1.97,2304,1.97,2305,1.97,2306,3.262,2307,1.97,2308,1.97,2309,1.736,2310,1.97,2311,1.97,2312,3.262,2313,1.97,2314,1.97,2315,1.97,2316,1.97,2317,1.97,2318,1.97,2319,1.97,2320,1.97,2321,1.97,2322,3.262,2323,7.199,2324,1.97,2325,1.97,2326,1.97,2327,1.97,2328,1.97,2329,1.97,2330,1.97,2331,3.262,2332,1.97,2333,1.97,2334,1.97,2335,1.97,2336,1.97,2337,1.97,2338,1.97,2339,1.97,2340,1.97,2341,1.97,2342,1.97,2343,5.381,2344,1.97,2345,1.97,2346,1.97,2347,1.97,2348,1.97,2349,1.97,2350,1.97,2351,1.736,2352,1.736,2353,1.97,2354,1.97,2355,1.97,2356,1.97,2357,1.736,2358,1.97,2359,1.97,2360,1.97,2361,1.97,2362,1.97,2363,7.335,2364,3.262,2365,1.97,2366,3.262,2367,1.97,2368,1.97,2369,1.97,2370,1.97,2371,3.262,2372,1.97,2373,1.97,2374,1.97,2375,3.262,2376,1.97,2377,1.97,2378,1.97,2379,1.97,2380,1.97,2381,3.262,2382,1.97,2383,3.262,2384,1.97,2385,1.97,2386,1.97,2387,3.681,2388,3.262,2389,1.97,2390,1.97,2391,1.97,2392,1.97,2393,1.97,2394,1.97,2395,3.262,2396,3.262,2397,1.97,2398,1.97,2399,1.97,2400,2.621,2401,1.97,2402,1.97,2403,1.97,2404,3.262,2405,1.97,2406,1.97,2407,1.97,2408,1.97,2409,1.97,2410,1.97,2411,1.97,2412,1.97,2413,1.97,2414,1.97,2415,1.97,2416,1.97,2417,1.97,2418,1.97,2419,1.97,2420,1.97,2421,1.97,2422,1.97,2423,3.262,2424,3.262,2425,1.97,2426,1.97,2427,1.97,2428,1.97,2429,1.97,2430,1.97,2431,1.97,2432,1.97,2433,1.97,2434,3.262,2435,3.262,2436,1.97,2437,1.97,2438,1.97,2439,3.262,2440,1.97,2441,1.97,2442,3.262,2443,1.97,2444,1.97,2445,1.97,2446,1.97,2447,1.97,2448,1.97,2449,1.97,2450,3.262,2451,3.262,2452,3.262,2453,3.262,2454,1.97,2455,1.97,2456,1.97,2457,1.97,2458,1.97,2459,2.431,2460,1.97,2461,1.97,2462,1.736,2463,1.97]],["title/license.html",[1985,2.935,1986,2.935,2459,2.723]],["body/license.html",[8,0.007,9,0.007,10,0.007,61,2.59,259,2.787,834,2.787,888,5.057,1154,4.655,1769,4.655,1998,4.243,2006,3.69,2210,4.655,2400,4.243,2459,3.936,2462,6.609,2464,4.655,2465,4.655,2466,4.243,2467,4.243,2468,6.785,2469,5.281,2470,5.281,2471,5.281,2472,5.281,2473,5.281,2474,5.281,2475,6.785,2476,8.717,2477,5.281,2478,5.281,2479,7.497,2480,5.281,2481,6.785,2482,5.281,2483,5.281,2484,5.281,2485,5.281,2486,5.281,2487,5.281,2488,5.281,2489,5.281,2490,5.281,2491,6.785,2492,5.281,2493,5.281,2494,5.281,2495,5.281,2496,5.281,2497,5.281,2498,5.281,2499,6.785,2500,6.785,2501,5.281,2502,5.281,2503,4.655,2504,5.281,2505,5.281,2506,5.281,2507,5.281,2508,5.281,2509,5.281,2510,5.281,2511,5.281,2512,5.281,2513,5.281,2514,5.281,2515,5.281,2516,5.281,2517,5.281,2518,5.281,2519,5.281,2520,5.281,2521,5.281,2522,5.281,2523,5.281,2524,5.281,2525,5.281,2526,5.281,2527,5.281]],["title/modules.html",[52,2.662]],["body/modules.html",[8,0.008,9,0.008,10,0.008,51,4.093,52,2.601,57,3.502,307,4.366,311,3.672,312,4.093,313,4.093,314,4.093,315,4.093,316,4.093,317,4.093,318,4.093,319,3.351,2290,7.877,2309,6.386,2528,8.935,2529,8.935,2530,9.023,2531,7.244]],["title/overview.html",[2532,5.286]],["body/overview.html",[2,0.764,8,0.009,9,0.005,10,0.005,13,1.361,51,5.401,52,1.624,53,2.503,54,3.225,55,3.225,56,3.225,57,5.053,58,4.33,59,2.787,60,1.931,61,1.795,71,1.223,75,4.079,154,4.845,181,2.093,226,1.795,300,4.09,307,6.663,308,3.225,309,3.225,310,3.225,311,5.34,312,5.633,313,5.028,314,4.33,315,4.33,316,5.028,317,5.853,318,5.633,319,4.682,426,4.33,489,4.845,519,3.225,520,3.225,522,3.225,523,4.33,708,4.09,733,3.225,735,3.225,900,4.33,970,4.09,1022,3.225,1023,3.225,1040,4.33,1276,4.09,1327,3.225,1328,3.225,1416,5.101,1435,3.225,1437,3.225,1438,3.225,1583,4.09,1625,3.225,1627,3.225,1683,3.225,1684,3.225,1685,3.225,1784,2.94,1920,3.225,1922,3.225,1923,3.225,2532,3.225,2533,3.658,2534,3.658,2535,3.658,2536,3.658,2537,3.658]],["title/classes/passwordValidator.html",[0,0.197,805,3.063]],["body/classes/passwordValidator.html",[0,0.305,2,1.103,3,0.121,4,0.121,5,0.109,7,0.145,8,0.009,9,0.007,10,0.007,16,0.17,40,0.579,76,0.728,78,1.285,79,1.014,80,1.162,85,0.451,86,1.222,87,1.633,95,1.438,104,1.192,163,1.488,196,3.216,200,2.59,202,1.478,232,2.596,392,2.898,428,3.329,484,2.787,616,2.787,632,2.021,805,4.741,2071,4.243,2153,5.239,2154,4.741,2155,4.741,2156,5.953,2158,5.853,2159,5.057,2161,4.741,2163,3.936,2164,3.936,2165,3.69,2538,5.281,2539,5.281,2540,4.655,2541,4.655,2542,4.655,2543,4.655]],["title/classes/phoneNumberValidator.html",[0,0.197,1762,3.266]],["body/classes/phoneNumberValidator.html",[0,0.305,2,1.103,3,0.121,4,0.121,5,0.109,7,0.145,8,0.009,9,0.007,10,0.007,16,0.17,40,0.579,76,0.728,78,1.285,79,1.014,80,1.162,85,0.451,86,1.222,87,1.633,95,1.438,104,1.192,163,1.488,196,3.216,199,2.421,200,2.59,202,1.478,232,2.596,392,2.898,428,3.329,585,2.898,616,2.787,632,2.021,1718,4.243,1762,5.057,2072,4.243,2153,5.239,2154,4.741,2155,4.741,2156,5.953,2158,5.853,2159,5.057,2161,4.741,2163,3.936,2164,3.936,2165,3.69,2544,5.281,2545,5.281,2546,4.655,2547,4.655]],["title/properties.html",[185,1.632,2094,3.22]],["body/properties.html",[8,0.009,9,0.008,10,0.008,36,1.905,185,1.905,259,3.249,288,5.219,304,5.428,371,5.991,440,3.86,441,3.86,1104,4.948,1280,5.428,1408,4.589,2136,4.948,2204,5.428,2205,5.428,2250,5.428,2251,5.428,2357,5.428,2387,5.428,2400,4.948,2459,4.589,2464,5.428,2465,5.428,2466,4.948,2467,4.948,2548,6.157,2549,6.157,2550,6.157,2551,5.428,2552,6.157,2553,5.428,2554,7.468,2555,6.157]],["title/miscellaneous/typealiases.html",[2148,2.184,2556,5.275]],["body/miscellaneous/typealiases.html",[3,0.109,8,0.009,9,0.007,10,0.007,40,0.77,41,2.256,85,0.406,122,3.326,182,3.326,192,4.724,193,3.547,194,3.824,999,5.588,1003,5.588,1006,5.588,1072,3.824,1105,6.702,2023,3.547,2080,5.094,2081,3.824,2148,2.845,2174,4.196,2178,5.094,2190,5.588,2557,4.759,2558,4.196,2559,6.339,2560,8.141,2561,6.339,2562,6.339,2563,7.916,2564,6.339,2565,7.128,2566,6.339,2567,6.339,2568,6.339,2569,6.339,2570,6.339,2571,6.339,2572,6.339,2573,6.339,2574,4.759,2575,6.339,2576,6.339,2577,6.339,2578,6.339,2579,7.128,2580,6.339,2581,4.759,2582,4.759,2583,4.759,2584,5.588,2585,5.588,2586,4.196,2587,4.759,2588,4.759]],["title/classes/usenameValidator.html",[0,0.197,806,3.063]],["body/classes/usenameValidator.html",[0,0.307,2,1.112,3,0.122,4,0.122,5,0.109,7,0.146,8,0.009,9,0.007,10,0.007,16,0.171,40,0.582,76,0.732,78,1.291,79,1.018,80,1.168,85,0.455,86,1.229,87,1.647,95,1.441,104,1.198,163,1.496,196,3.233,200,2.612,202,1.49,232,2.61,392,2.922,428,3.346,582,3.183,616,2.81,632,2.037,806,4.766,2073,4.278,2153,5.259,2154,4.766,2155,4.766,2156,5.964,2158,5.866,2159,5.084,2161,4.766,2162,4.278,2163,3.968,2164,3.968,2165,3.72,2589,5.324,2590,5.324]],["title/miscellaneous/variables.html",[2148,2.184,2591,4.65]],["body/miscellaneous/variables.html",[3,0.093,8,0.01,9,0.003,10,0.003,30,1.045,31,1.268,33,1.926,36,1.055,40,0.672,41,1.617,50,0.82,79,0.679,85,0.291,87,0.463,95,1.341,99,2.06,101,1.268,110,1.225,122,2.384,138,1.045,145,1.419,159,0.938,163,1.18,166,1.323,180,1.045,182,1.045,184,3.205,186,0.734,191,0.938,192,1.115,193,2.543,195,1.202,197,1.202,198,1.926,199,2.103,200,1.674,201,2.543,202,1.991,203,2.543,204,0.894,205,1.696,206,1.202,207,1.926,208,1.202,209,1.202,210,1.115,211,1.202,212,1.202,213,5.118,214,1.202,215,2.077,216,1.202,217,1.202,218,1.202,219,3.264,220,1.115,221,1.202,222,1.202,223,1.202,224,1.202,225,1.115,226,1.674,227,1.202,253,1.993,254,0.821,266,1.319,267,1.045,278,2.247,288,1.806,292,2.25,297,2.839,371,2.543,380,3.028,385,1.115,392,3.122,408,1.419,410,1.419,417,2.077,418,1.115,430,1.045,432,1.045,436,1.045,441,0.938,462,3.028,472,1.115,477,0.709,484,1.801,486,2.324,491,2.077,492,1.806,497,1.706,560,1.926,561,1.806,562,1.926,563,2.077,566,1.314,574,2.077,585,1.419,616,2.144,637,0.821,643,1.045,655,1.115,667,2.077,670,1.319,672,1.478,676,1.045,681,3.507,748,2.077,834,0.79,884,4.607,894,0.987,909,1.706,949,1.319,955,0.987,959,1.045,996,1.202,1008,2.077,1010,4.97,1011,2.384,1016,3.264,1017,1.202,1045,0.938,1072,2.077,1089,2.077,1104,1.202,1105,1.115,1110,1.926,1126,1.319,1127,1.319,1130,4.011,1131,1.115,1139,1.115,1145,1.319,1158,2.278,1161,6.274,1164,1.202,1168,1.319,1169,2.278,1228,2.278,1249,2.543,1306,1.202,1309,2.278,1375,3.264,1398,1.319,1458,2.077,1470,1.319,1471,2.278,1526,1.115,1541,1.115,1643,2.077,1666,2.278,1672,2.278,1695,1.202,1713,1.202,1728,1.202,1791,2.077,1792,1.319,1981,1.319,1989,1.319,1990,1.202,2002,1.202,2004,2.077,2006,1.806,2015,1.319,2017,2.278,2018,1.319,2019,2.278,2023,1.115,2024,2.278,2025,1.319,2026,2.278,2027,2.278,2028,1.319,2030,1.319,2031,1.319,2034,1.319,2036,1.319,2039,1.319,2041,1.319,2042,2.278,2043,2.278,2048,1.319,2049,2.278,2050,1.319,2051,5.015,2052,1.319,2053,2.278,2054,1.319,2055,1.319,2056,3.008,2057,1.202,2058,2.278,2062,1.319,2067,1.202,2068,1.202,2070,2.077,2071,1.202,2072,1.202,2073,1.202,2074,2.278,2075,2.278,2076,2.278,2077,1.319,2086,1.202,2089,3.264,2090,3.008,2091,2.278,2110,1.319,2125,1.319,2148,0.894,2162,2.077,2169,1.319,2173,1.319,2178,1.202,2199,1.319,2211,1.319,2235,1.319,2281,1.319,2288,2.278,2296,1.319,2351,1.319,2352,1.319,2466,1.202,2467,1.202,2503,1.319,2540,1.319,2541,1.319,2542,1.319,2543,1.319,2546,1.319,2547,1.319,2551,1.319,2553,1.319,2558,2.278,2584,2.278,2585,2.278,2586,2.278,2591,1.319,2592,5.381,2593,1.496,2594,1.496,2595,3.412,2596,2.585,2597,2.585,2598,1.496,2599,1.496,2600,1.496,2601,1.496,2602,1.496,2603,1.496,2604,2.585,2605,1.496,2606,1.496,2607,1.496,2608,1.496,2609,1.496,2610,1.496,2611,1.496,2612,1.496,2613,1.496,2614,1.496,2615,1.496,2616,1.496,2617,1.496,2618,1.496,2619,4.063,2620,1.496,2621,1.496,2622,2.585,2623,2.585,2624,1.496,2625,1.496,2626,1.496,2627,1.496,2628,1.496,2629,1.496,2630,1.496,2631,1.496,2632,1.496,2633,2.585,2634,2.585,2635,1.496,2636,1.496,2637,1.496,2638,1.496,2639,1.496,2640,1.496,2641,1.496,2642,1.496,2643,1.496,2644,1.496,2645,1.496,2646,1.496,2647,2.585,2648,1.496,2649,1.496,2650,1.496,2651,1.496,2652,1.496,2653,1.496,2654,1.496,2655,4.063,2656,1.496,2657,1.496,2658,1.496,2659,1.496,2660,1.496,2661,1.496,2662,1.496,2663,1.496,2664,1.496,2665,2.585,2666,1.496,2667,1.496,2668,1.496,2669,2.585,2670,1.496,2671,1.496,2672,1.496,2673,1.496,2674,1.496,2675,1.496,2676,1.496,2677,1.496,2678,1.496,2679,1.496,2680,1.496,2681,1.496,2682,1.496,2683,1.496,2684,1.496,2685,1.496,2686,1.496,2687,1.496,2688,1.496,2689,1.496,2690,1.496,2691,1.496,2692,1.496,2693,1.496,2694,1.496,2695,1.496,2696,1.496,2697,1.496,2698,1.496,2699,1.496,2700,1.496,2701,1.496,2702,1.496,2703,1.496,2704,1.496,2705,1.496,2706,1.496,2707,1.496,2708,1.496,2709,1.496,2710,1.496,2711,1.496,2712,1.496,2713,1.496,2714,1.496,2715,1.496,2716,2.585,2717,4.063,2718,2.585,2719,1.496,2720,1.496,2721,1.496,2722,1.496,2723,1.496,2724,1.496,2725,1.496,2726,1.496,2727,1.496,2728,1.496,2729,1.496,2730,2.585,2731,1.496,2732,1.496,2733,1.496,2734,1.496,2735,2.585,2736,1.496,2737,2.585,2738,1.496,2739,3.412,2740,1.496,2741,1.496,2742,1.496,2743,1.496]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.12",{"_index":2133,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2138,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2118,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":2111,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1082,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":2117,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2131,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2014,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2078,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2085,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2083,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2084,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2040,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2020,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2033,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2038,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2029,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2037,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2035,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2032,"title":{},"body":{"coverage.html":{}}}],["02t05:01:03.938z",{"_index":1773,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1738,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["03",{"_index":2000,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":1737,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["09",{"_index":1999,"title":{},"body":{"changelog.html":{}}}],["09999999999",{"_index":1771,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1755,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1",{"_index":226,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"controllers/AppController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.17.3",{"_index":2126,"title":{},"body":{"dependencies.html":{}}}],["1.18.0",{"_index":2146,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2123,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":1997,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":2549,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":2120,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":959,"title":{},"body":{"controllers/FileController.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1722,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1024",{"_index":1079,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2534,"title":{},"body":{"overview.html":{}}}],["12",{"_index":2533,"title":{},"body":{"overview.html":{}}}],["120",{"_index":789,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["120)@minlength(2",{"_index":784,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["123",{"_index":838,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["150",{"_index":1078,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["17.0.3",{"_index":2096,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1725,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["19",{"_index":1774,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":2664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@min(17",{"_index":1724,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1750,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2",{"_index":1076,"title":{},"body":{"controllers/HealthController.html":{},"controllers/MathController.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2.0.0",{"_index":2134,"title":{},"body":{"dependencies.html":{}}}],["2.1.11",{"_index":2108,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2100,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":2124,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":797,"title":{},"body":{"classes/CreateConversationDto.html":{},"controllers/HealthController.html":{},"classes/UserEntity.html":{}}}],["20)@minlength(2",{"_index":795,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["200",{"_index":290,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":1736,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2022",{"_index":1998,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["21",{"_index":1871,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":1859,"title":{},"body":{"classes/UserEntity.html":{}}}],["25",{"_index":2535,"title":{},"body":{"overview.html":{}}}],["3",{"_index":786,"title":{},"body":{"classes/CreateConversationDto.html":{},"interfaces/IApp.html":{},"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["3.0.0",{"_index":2103,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2140,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":2109,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":206,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":1256,"title":{},"body":{"controllers/MathController.html":{}}}],["4.0.0",{"_index":2135,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2116,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":2106,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":2142,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":296,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1745,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1742,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["456",{"_index":839,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["48",{"_index":2536,"title":{},"body":{"overview.html":{}}}],["5",{"_index":1257,"title":{},"body":{"controllers/MathController.html":{}}}],["5.0.1",{"_index":2113,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":2045,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":2537,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":2128,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":2104,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":2144,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2141,"title":{},"body":{"dependencies.html":{}}}],["768",{"_index":1075,"title":{},"body":{"controllers/HealthController.html":{}}}],["789",{"_index":849,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":840,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["8",{"_index":1860,"title":{},"body":{"classes/UserEntity.html":{}}}],["8.0.1",{"_index":2130,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2147,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":2044,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":2099,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":2101,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":2102,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":2105,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2547,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2546,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../docs",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1732,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1741,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["above",{"_index":2498,"title":{},"body":{"license.html":{}}}],["abstraction/microservices/math/math.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction/prisma/prisma.module",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["abstraction/prisma/prisma.service",{"_index":81,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["accept",{"_index":1470,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["acceptable",{"_index":2640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accepthmrupdate",{"_index":187,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["access",{"_index":417,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"classes/ProfileEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1733,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["account.'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":478,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":2521,"title":{},"body":{"license.html":{}}}],["actions",{"_index":211,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":1540,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":2698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1527,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(userid",{"_index":1538,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcookieauth('optional",{"_index":2697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["added",{"_index":2001,"title":{},"body":{"changelog.html":{}}}],["additional",{"_index":1150,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["addoauth2",{"_index":2689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1710,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adheres",{"_index":1994,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin.controller",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin01",{"_index":816,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admin02",{"_index":817,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":51,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":635,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":58,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":64,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["age",{"_index":1711,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["agedate",{"_index":2661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alert",{"_index":180,"title":{"interfaces/Alert.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertoptions",{"_index":184,"title":{"interfaces/AlertOptions.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertstyle",{"_index":192,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2557,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":938,"title":{},"body":{"controllers/FileController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":943,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":230,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(request",{"_index":265,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":2638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":1672,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":2405,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":2336,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2489,"title":{},"body":{"license.html":{}}}],["another",{"_index":419,"title":{},"body":{"injectables/AtGuard.html":{}}}],["any,info",{"_index":907,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":906,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["api",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2555,"title":{},"body":{"properties.html":{}}}],["api:latest",{"_index":2390,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":2203,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":488,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":826,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":965,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":640,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({example",{"_index":1735,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apiproperty({required",{"_index":646,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({type",{"_index":776,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["apipropertyoptional",{"_index":799,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":299,"title":{},"body":{"controllers/AppController.html":{}}}],["apiresponse({status",{"_index":295,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":2262,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":711,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":974,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('health",{"_index":1068,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('home",{"_index":303,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('microservices",{"_index":1251,"title":{},"body":{"controllers/MathController.html":{}}}],["apitags('oauth",{"_index":1418,"title":{},"body":{"controllers/OauthController.html":{}}}],["apitags('posts",{"_index":1597,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1906,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":966,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["app",{"_index":1110,"title":{},"body":{"interfaces/IApp.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1707,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":301,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":1171,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":284,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2205,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application/json",{"_index":1471,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":2249,"title":{},"body":{"index.html":{}}}],["apply",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":1929,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":307,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":2292,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":300,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appsetup",{"_index":1109,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["architecture",{"_index":2453,"title":{},"body":{"index.html":{}}}],["args",{"_index":2158,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1498,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":246,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2525,"title":{},"body":{"license.html":{}}}],["array",{"_index":955,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.from(previousnames.value",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":967,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":986,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":2181,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":1488,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":2477,"title":{},"body":{"license.html":{}}}],["async",{"_index":87,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["atguard",{"_index":332,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":426,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":527,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":1442,"title":{},"body":{"modules/OauthModule.html":{}}}],["auth/auth.service",{"_index":1459,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth/decorators",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["auth/dto/request",{"_index":1460,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth_error",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":452,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":2280,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":411,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{}}}],["authguard(estrategy.jwt",{"_index":414,"title":{},"body":{"injectables/AtGuard.html":{}}}],["authguard(estrategy.jwt_refresh",{"_index":1799,"title":{},"body":{"classes/RtGuard.html":{}}}],["authmodule",{"_index":311,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1104,"title":{},"body":{"interfaces/IApp.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":1507,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authorization",{"_index":1475,"title":{},"body":{"injectables/OauthService.html":{}}}],["authorizationurl",{"_index":2692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":2514,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":489,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":2253,"title":{},"body":{"index.html":{}}}],["available",{"_index":2531,"title":{},"body":{"modules.html":{}}}],["availablethemes",{"_index":2024,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["await",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["awesome",{"_index":1112,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["axios",{"_index":2110,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.config",{"_index":1009,"title":{},"body":{"classes/FileService.html":{}}}],["axios.create",{"_index":2648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosconfig",{"_index":1008,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosconfig.post(url",{"_index":1015,"title":{},"body":{"classes/FileService.html":{}}}],["axiosinstance",{"_index":2647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosrequest",{"_index":1458,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosrequest('get",{"_index":1473,"title":{},"body":{"injectables/OauthService.html":{}}}],["b",{"_index":1260,"title":{},"body":{"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["backend",{"_index":2224,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2406,"title":{},"body":{"index.html":{}}}],["bad",{"_index":2632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request",{"_index":2631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badgatewayexception",{"_index":862,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badgatewayexception('bad",{"_index":870,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badrequestexception",{"_index":1500,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1505,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1671,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2356,"title":{},"body":{"index.html":{}}}],["based",{"_index":1167,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["baseurl",{"_index":2649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":2112,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2441,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2414,"title":{},"body":{"index.html":{}}}],["before",{"_index":1127,"title":{},"body":{"interfaces/IApp.html":{},"miscellaneous/variables.html":{}}}],["begin",{"_index":791,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["begining",{"_index":2429,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2443,"title":{},"body":{"index.html":{}}}],["better",{"_index":2455,"title":{},"body":{"index.html":{}}}],["bindevents",{"_index":1371,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["bindevents(client",{"_index":1372,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["bio",{"_index":1712,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birthdate",{"_index":1713,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["bodies",{"_index":2295,"title":{},"body":{"index.html":{}}}],["body",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":196,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/ISwaggerOptions.html":{},"classes/MessagesGateway.html":{},"classes/PostEntity.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["bootstrap",{"_index":2087,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2530,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2528,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1119,"title":{},"body":{"interfaces/IApp.html":{}}}],["build",{"_index":2351,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":2252,"title":{},"body":{"index.html":{}}}],["building",{"_index":2245,"title":{},"body":{"index.html":{}}}],["built",{"_index":2339,"title":{},"body":{"index.html":{}}}],["c",{"_index":1769,"title":{},"body":{"classes/ProfileEntity.html":{},"license.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1721,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["cache",{"_index":2114,"title":{},"body":{"dependencies.html":{}}}],["cache.interceptor.ts",{"_index":1085,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:5",{"_index":1088,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheinterceptor",{"_index":396,"title":{},"body":{"injectables/AppService.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["cachemodule",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["calculate",{"_index":1241,"title":{},"body":{"controllers/MathController.html":{}}}],["call",{"_index":2310,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1398,"title":{},"body":{"controllers/OauthController.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":916,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["called",{"_index":2329,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":858,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":404,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":407,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":2022,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["capitalize(str",{"_index":2183,"title":{},"body":{"miscellaneous/functions.html":{}}}],["card",{"_index":2451,"title":{},"body":{"index.html":{}}}],["catch",{"_index":234,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":243,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1100,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(rpcexception",{"_index":877,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["catcherror",{"_index":865,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":869,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["categories",{"_index":1647,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1649,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["centers",{"_index":2324,"title":{},"body":{"index.html":{}}}],["change",{"_index":704,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["changelog",{"_index":1987,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":1989,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["character",{"_index":1866,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":810,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(121",{"_index":787,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["characters!'})@maxlength(21",{"_index":796,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1744,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1746,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1861,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":790,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["charge",{"_index":2472,"title":{},"body":{"license.html":{}}}],["chat",{"_index":2552,"title":{},"body":{"properties.html":{}}}],["chats",{"_index":2237,"title":{},"body":{"index.html":{}}}],["check",{"_index":1060,"title":{},"body":{"controllers/HealthController.html":{},"controllers/MathController.html":{}}}],["checkexist",{"_index":1667,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1670,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1676,"title":{},"body":{"injectables/PostsService.html":{}}}],["child",{"_index":1129,"title":{},"body":{"interfaces/IApp.html":{}}}],["city",{"_index":1719,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["claim",{"_index":2517,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":2347,"title":{},"body":{"index.html":{}}}],["client",{"_index":1254,"title":{},"body":{"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"injectables/OauthService.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1320,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.id",{"_index":1313,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.subscribe",{"_index":1384,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["client/.../alertsstore.ts",{"_index":2558,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../app.ts",{"_index":2167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../auth.dto.ts",{"_index":2574,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../auth.service.ts",{"_index":2599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../axios.config.ts",{"_index":2593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../conversations.dto.ts",{"_index":2560,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../conversations.service.ts",{"_index":2600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../count.ts",{"_index":2179,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../file.service.ts",{"_index":2601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../files.dto.ts",{"_index":2579,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../pageview.ts",{"_index":2597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../posts.dto.ts",{"_index":2563,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../posts.service.ts",{"_index":2602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../str.ts",{"_index":2171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../theme.ts",{"_index":2178,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../user.service.ts",{"_index":2603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../user.ts",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../users.dto.ts",{"_index":2565,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../usesticky.ts",{"_index":2614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/composables/count.ts",{"_index":2012,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/composables/user.ts",{"_index":2018,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/composables/usesticky.ts",{"_index":2015,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/dto/auth.dto.ts",{"_index":2587,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/conversations.dto.ts",{"_index":2581,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/files.dto.ts",{"_index":2588,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/posts.dto.ts",{"_index":2582,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/users.dto.ts",{"_index":2583,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/helpers/app.ts",{"_index":1103,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/str.ts",{"_index":2021,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/theme.ts",{"_index":2023,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/server/api/pageview.ts",{"_index":2025,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/auth.service.ts",{"_index":2028,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/axios.config.ts",{"_index":2030,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/conversations.service.ts",{"_index":2031,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts",{"_index":996,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts:21",{"_index":1004,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:35",{"_index":1007,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:7",{"_index":1001,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/posts.service.ts",{"_index":2034,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/user.service.ts",{"_index":2036,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/stores/alertsstore.ts",{"_index":182,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":912,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/MessagesService.html":{}}}],["clientproxy",{"_index":1246,"title":{},"body":{"controllers/MathController.html":{}}}],["clientsecret",{"_index":914,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsmodule",{"_index":1262,"title":{},"body":{"modules/MathModule.html":{}}}],["clientsmodule.register",{"_index":1265,"title":{},"body":{"modules/MathModule.html":{}}}],["closable",{"_index":197,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["cluster_adminmodule",{"_index":54,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":55,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":56,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":519,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":520,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":521,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":522,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":733,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":734,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":735,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1022,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1023,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1327,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1328,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_oauthmodule",{"_index":1435,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_exports",{"_index":1437,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_imports",{"_index":1436,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":1438,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1625,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1626,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1627,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1683,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1684,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1685,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1920,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1922,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1921,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1923,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":1255,"title":{},"body":{"controllers/MathController.html":{}}}],["code",{"_index":291,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{},"index.html":{}}}],["comment",{"_index":1541,"title":{},"body":{"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":770,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":611,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1558,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commitlint",{"_index":2345,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":2095,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":2097,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2456,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compatible",{"_index":2279,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":2314,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2392,"title":{},"body":{"index.html":{}}}],["compress",{"_index":2294,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2119,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computed",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["computer",{"_index":2452,"title":{},"body":{"index.html":{}}}],["concept",{"_index":2325,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2497,"title":{},"body":{"license.html":{}}}],["config",{"_index":432,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('app_secret",{"_index":448,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["config.get('google_callback_url",{"_index":2693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":430,"title":{},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"app_secret",{"_index":535,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"expire_at_time",{"_index":538,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":2634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(user_error.duplicate",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1403,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["connectedsocket",{"_index":1303,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["connection",{"_index":2526,"title":{},"body":{"license.html":{}}}],["console.log('before",{"_index":1224,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":1225,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1230,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":1183,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":1184,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(postid",{"_index":1616,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":202,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"classes/FileService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":1788,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constants/math.constant",{"_index":1250,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(math_service",{"_index":1253,"title":{},"body":{"controllers/MathController.html":{}}}],["constructor(@logger('appservice",{"_index":401,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(authservice",{"_index":1448,"title":{},"body":{"injectables/OauthService.html":{}}}],["constructor(config",{"_index":429,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":239,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(messagesservice",{"_index":1275,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["constructor(prismaservice",{"_index":74,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":405,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1862,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2391,"title":{},"body":{"index.html":{}}}],["content",{"_index":1017,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":410,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":424,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1226,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":423,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1181,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1182,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1089,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["continuous",{"_index":2340,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2522,"title":{},"body":{"license.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":712,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":977,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":1069,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('math",{"_index":1252,"title":{},"body":{"controllers/MathController.html":{}}}],["controller('oauth",{"_index":1419,"title":{},"body":{"controllers/OauthController.html":{}}}],["controller('posts",{"_index":1598,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1907,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":1168,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":1162,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":2098,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":2331,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":667,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversation.dto",{"_index":843,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":775,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:11",{"_index":1039,"title":{},"body":{"classes/GetAllConversationDto.html":{}}}],["conversation.dto.ts:14",{"_index":1820,"title":{},"body":{"classes/UpdateMembersConversationDto.html":{}}}],["conversation.dto.ts:20",{"_index":845,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:27",{"_index":846,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:32",{"_index":798,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:33",{"_index":1831,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:34",{"_index":1830,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:35",{"_index":1832,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:52",{"_index":792,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:59",{"_index":793,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1819,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:66",{"_index":779,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1818,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:73",{"_index":781,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1817,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation_error",{"_index":748,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversation_error.not_creator",{"_index":766,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationentity",{"_index":633,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"coverage.html":{}}}],["conversationid",{"_index":683,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{}}}],["conversationid).members",{"_index":1349,"title":{},"body":{"injectables/MessagesService.html":{}}}],["conversations",{"_index":655,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/MessagesService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversations.controller",{"_index":737,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":709,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":653,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":312,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":708,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":2121,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":2283,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2491,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2475,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2462,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":398,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":399,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["cors",{"_index":1308,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":2042,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":2026,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1720,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["course",{"_index":2433,"title":{},"body":{"index.html":{}}}],["cover",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coverage",{"_index":2009,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create_user",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createat",{"_index":1648,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":768,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":656,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":715,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":664,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":665,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":670,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":636,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":2060,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":2185,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":1189,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1269,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(conversationid",{"_index":1279,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":819,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.text",{"_index":1353,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createnewconversationdto",{"_index":2559,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["createparamdecorator",{"_index":2665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1528,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":1544,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":827,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["creator",{"_index":637,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creator01",{"_index":818,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["creator01'})@isstring",{"_index":780,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["criteria",{"_index":2278,"title":{},"body":{"index.html":{}}}],["crud",{"_index":2352,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":260,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":262,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":263,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":681,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":2053,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":1163,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customeimage",{"_index":2200,"title":{},"body":{"classes/imageValidator.html":{}}}],["customtext",{"_index":2163,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["damages",{"_index":2518,"title":{},"body":{"license.html":{}}}],["dark",{"_index":2584,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":292,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"controllers/MathController.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":1476,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.id.tostring",{"_index":1478,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login",{"_index":1479,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login}@gmail.com",{"_index":1477,"title":{},"body":{"injectables/OauthService.html":{}}}],["database",{"_index":2208,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1700,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":643,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":279,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1228,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1701,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2478,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2527,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1194,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1199,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":2267,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":2269,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":1141,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":1161,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":2154,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":2155,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultoptions",{"_index":203,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":76,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definestore",{"_index":188,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["definestore('alertsstore",{"_index":208,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["definestore('user",{"_index":2728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defining",{"_index":2326,"title":{},"body":{"index.html":{}}}],["definition",{"_index":2260,"title":{},"body":{"index.html":{}}}],["delete",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":724,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":675,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1622,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1550,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1610,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1554,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":1918,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":1882,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete_comment",{"_index":2627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_user",{"_index":2626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecomment",{"_index":1529,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1623,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1549,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":835,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationadminsdto",{"_index":2561,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deleteconversationbyid",{"_index":657,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":673,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":674,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1666,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["deleteoneadminconversation",{"_index":658,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":678,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":679,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":850,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteonepostdto",{"_index":2562,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deletepost",{"_index":1530,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(userid",{"_index":1553,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":1877,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1881,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":88,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserprofile",{"_index":2564,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["denied",{"_index":2629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":2308,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1489,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":2259,"title":{},"body":{"index.html":{}}}],["description",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":2277,"title":{},"body":{"index.html":{}}}],["design",{"_index":2261,"title":{},"body":{"index.html":{}}}],["development",{"_index":2380,"title":{},"body":{"index.html":{}}}],["devices",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":2209,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directly",{"_index":1399,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["disk",{"_index":1071,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1063,"title":{},"body":{"controllers/HealthController.html":{}}}],["distribute",{"_index":2487,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2460,"title":{},"body":{"index.html":{}}}],["docker",{"_index":2387,"title":{},"body":{"index.html":{},"properties.html":{}}}],["docs",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":2004,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["document.documentelement.scrolltop",{"_index":2720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":2006,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documented",{"_index":1991,"title":{},"body":{"changelog.html":{}}}],["doe",{"_index":1341,"title":{},"body":{"injectables/MessagesService.html":{}}}],["done",{"_index":904,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":926,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":1047,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto",{"_index":113,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/FileService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":754,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1658,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":761,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.creator",{"_index":755,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":752,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1669,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1646,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1680,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.members",{"_index":753,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":751,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1951,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":1965,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1661,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.published",{"_index":1662,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1675,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.text",{"_index":1678,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.title",{"_index":1645,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.userid",{"_index":757,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.username",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment/request",{"_index":1586,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/comment/response",{"_index":1596,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/request",{"_index":1585,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/response",{"_index":1592,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/request",{"_index":495,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/response",{"_index":442,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":1188,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2420,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":2397,"title":{},"body":{"index.html":{}}}],["each",{"_index":2319,"title":{},"body":{"index.html":{}}}],["easily",{"_index":2221,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":2246,"title":{},"body":{"index.html":{}}}],["el",{"_index":2714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classlist.add('sticky",{"_index":2721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classlist.remove('sticky",{"_index":2722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element.id",{"_index":1348,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.foreach((item",{"_index":1359,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.splice(element.messages.indexof(item",{"_index":1366,"title":{},"body":{"injectables/MessagesService.html":{}}}],["email",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1892,"title":{},"body":{"controllers/UsersController.html":{}}}],["emails",{"_index":920,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":921,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["empty",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":2257,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1690,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1694,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2424,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1010,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2002,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["endpoint}/avatar",{"_index":1012,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/cover",{"_index":1019,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/posts",{"_index":1020,"title":{},"body":{"classes/FileService.html":{}}}],["enhance",{"_index":2422,"title":{},"body":{"index.html":{}}}],["enter",{"_index":416,"title":{},"body":{"injectables/AtGuard.html":{}}}],["entire",{"_index":2318,"title":{},"body":{"index.html":{}}}],["entities",{"_index":710,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["entities/comment.entity",{"_index":772,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/profile.entity",{"_index":1835,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["enumerations",{"_index":2149,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2306,"title":{},"body":{"index.html":{}}}],["eorder",{"_index":1943,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["eorder.asc",{"_index":1952,"title":{},"body":{"injectables/UsersService.html":{}}}],["erole",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":905,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/TimeoutInterceptor.html":{}}}],["error",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":220,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":1981,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors.interceptor",{"_index":1176,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["errors.length",{"_index":1983,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsinterceptor",{"_index":853,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["eslint",{"_index":2335,"title":{},"body":{"index.html":{}}}],["estrategy",{"_index":413,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["estrategy.facebook",{"_index":911,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["estrategy.google",{"_index":1048,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["estrategy.jwt",{"_index":444,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["estrategy.jwt_refresh",{"_index":1804,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["ev",{"_index":1135,"title":{},"body":{"interfaces/IApp.html":{}}}],["ev.preventdefault",{"_index":1137,"title":{},"body":{"interfaces/IApp.html":{}}}],["eval",{"_index":2297,"title":{},"body":{"index.html":{}}}],["event",{"_index":2513,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2214,"title":{},"body":{"index.html":{}}}],["example",{"_index":777,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["example@gmail.com",{"_index":1851,"title":{},"body":{"classes/UserEntity.html":{}}}],["exception",{"_index":248,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":872,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:7",{"_index":875,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.geterror",{"_index":878,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.getresponse",{"_index":275,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":276,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":280,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":270,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":233,"title":{"classes/ExceptionFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["excludenullinterceptor",{"_index":879,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["excludepaths",{"_index":1094,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths.includes(httpadapter.getrequesturl(request",{"_index":1095,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["execute",{"_index":1124,"title":{},"body":{"interfaces/IApp.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{}}}],["executes",{"_index":2302,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":408,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existedusermiddleware",{"_index":885,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["experiences",{"_index":2218,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":537,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":525,"title":{},"body":{"modules/AuthModule.html":{},"classes/LoggerModule.html":{},"modules/OauthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":259,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":934,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":2285,"title":{},"body":{"index.html":{}}}],["extends",{"_index":183,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/FacebookStrategy.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["externals",{"_index":2707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1151,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extractjwt",{"_index":438,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":446,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":1142,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":910,"title":{},"body":{"injectables/FacebookStrategy.html":{},"controllers/OauthController.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["facebookauthredirect",{"_index":1391,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookauthredirect(@req",{"_index":1424,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookauthredirect(req",{"_index":1396,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebooklogin",{"_index":1392,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["facebooklogin(req",{"_index":1450,"title":{},"body":{"injectables/OauthService.html":{}}}],["facebookstrategy",{"_index":900,"title":{"injectables/FacebookStrategy.html":{}},"body":{"injectables/FacebookStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["failed",{"_index":1123,"title":{},"body":{"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":200,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1508,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":2229,"title":{},"body":{"index.html":{}}}],["feels",{"_index":2216,"title":{},"body":{"index.html":{}}}],["female",{"_index":1749,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["field",{"_index":2233,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":2080,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":2182,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":949,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":1034,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":1032,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":1036,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":927,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":1033,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":834,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.controller",{"_index":1025,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":1037,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":971,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":978,"title":{"classes/FileService.html":{}},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"coverage.html":{}}}],["filesmodule",{"_index":313,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":970,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":2165,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["find",{"_index":1891,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["find((element",{"_index":1355,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findallmessages",{"_index":1270,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findallmessages(@messagebody('conversationid",{"_index":1314,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["findallmessages(conversationid",{"_index":1283,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["firstname",{"_index":922,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2510,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2354,"title":{},"body":{"index.html":{}}}],["flip",{"_index":2450,"title":{},"body":{"index.html":{}}}],["flows",{"_index":2690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fo",{"_index":2448,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2415,"title":{},"body":{"index.html":{}}}],["following",{"_index":2496,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":2628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(auth_error.same_password",{"_index":609,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(post_error.not_author",{"_index":1659,"title":{},"body":{"injectables/PostsService.html":{}}}],["forbiddenexception(system_error.forbidden",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["form",{"_index":937,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["format",{"_index":1992,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["formattedmessage",{"_index":1215,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":2334,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":1013,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('file",{"_index":1014,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('files",{"_index":1021,"title":{},"body":{"classes/FileService.html":{}}}],["forroot",{"_index":1186,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":297,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"interfaces/IApp.html":{},"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":2244,"title":{},"body":{"index.html":{}}}],["free",{"_index":2471,"title":{},"body":{"license.html":{}}}],["front",{"_index":2423,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2207,"title":{},"body":{"index.html":{}}}],["full",{"_index":1743,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1714,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1761,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":909,"title":{},"body":{"injectables/FacebookStrategy.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2166,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":2494,"title":{},"body":{"license.html":{}}}],["game",{"_index":2439,"title":{},"body":{"index.html":{}}}],["gender",{"_index":1715,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["generate",{"_index":1165,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["generated",{"_index":2254,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":719,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":690,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1604,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1567,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1615,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1602,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1564,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('authorization",{"_index":1805,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["get('facebook",{"_index":1420,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook')@useguards(undefined)@apioperation({summary",{"_index":1402,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect",{"_index":1423,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect')@useguards(undefined)@apioperation({summary",{"_index":1397,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('find/:email",{"_index":1912,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('github/redirect",{"_index":1432,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('github/redirect')@apioperation({summary",{"_index":1407,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google",{"_index":1426,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google')@useguards(undefined)@apioperation({summary",{"_index":1411,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect",{"_index":1429,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect')@useguards(undefined)@apioperation({summary",{"_index":1414,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('profile/:useridorusername",{"_index":1909,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":157,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1894,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":1059,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1240,"title":{},"body":{"controllers/MathController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":287,"title":{},"body":{"controllers/AppController.html":{},"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1531,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(postid",{"_index":1556,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":685,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversationdto:11",{"_index":842,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["getallconversations",{"_index":659,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@body",{"_index":717,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(dto",{"_index":684,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversationsdto",{"_index":2566,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsdto",{"_index":2567,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsofuser",{"_index":1532,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(userid",{"_index":1560,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1533,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(userid",{"_index":1563,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicpostsdto",{"_index":2568,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpublicusersdto",{"_index":2569,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallusers",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getconversationbyid",{"_index":660,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":688,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":286,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember",{"_index":1332,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmember(conversationid",{"_index":1335,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getoneconversationdto",{"_index":689,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1534,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(postid",{"_index":1566,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":1878,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":1885,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":1985,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyemail",{"_index":1879,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1889,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofiledto",{"_index":2570,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gitbox",{"_index":2428,"title":{},"body":{"index.html":{}}}],["github",{"_index":1408,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{},"index.html":{},"properties.html":{}}}],["github2",{"_index":2132,"title":{},"body":{"dependencies.html":{}}}],["githubauthredirect",{"_index":1393,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(@query",{"_index":1433,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(req",{"_index":1406,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubredirect",{"_index":1445,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubredirect(req",{"_index":1452,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess",{"_index":1446,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess(token",{"_index":1454,"title":{},"body":{"injectables/OauthService.html":{}}}],["global",{"_index":1157,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["google",{"_index":1045,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["googleauth",{"_index":1394,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(@req",{"_index":1428,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(req",{"_index":1410,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect",{"_index":1395,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(@req",{"_index":1430,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(req",{"_index":1413,"title":{},"body":{"controllers/OauthController.html":{}}}],["googlelogin",{"_index":1447,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlelogin(req",{"_index":1456,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlestrategy",{"_index":1040,"title":{"injectables/GoogleStrategy.html":{}},"body":{"injectables/GoogleStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2470,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2309,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group01",{"_index":782,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["group01'})@isstring()@isnotempty()@length(3",{"_index":794,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["grow",{"_index":2402,"title":{},"body":{"index.html":{}}}],["grpc",{"_index":2322,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1784,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["hand",{"_index":420,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handle",{"_index":867,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":236,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":250,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse",{"_index":238,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(request",{"_index":252,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlers",{"_index":1379,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["handlers.foreach",{"_index":1383,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["hash",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":610,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1793,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":2288,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":1016,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":1057,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheck",{"_index":1064,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":1065,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1066,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1055,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":293,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["helmet",{"_index":2127,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["help",{"_index":2265,"title":{},"body":{"index.html":{}}}],["here",{"_index":1131,"title":{},"body":{"interfaces/IApp.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["here).'})@httpcode(httpstatus.created)@apicreatedresponse({description",{"_index":1400,"title":{},"body":{"controllers/OauthController.html":{}}}],["here).'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1404,"title":{},"body":{"controllers/OauthController.html":{}}}],["hereby",{"_index":2469,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2358,"title":{},"body":{"index.html":{}}}],["hmr.config.ts",{"_index":2090,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["holders",{"_index":2515,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":304,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":289,"title":{},"body":{"controllers/AppController.html":{}}}],["hooks",{"_index":2724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":245,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":258,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":261,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":2315,"title":{},"body":{"index.html":{}}}],["html",{"_index":195,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["htmlelement",{"_index":2715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":1306,"title":{},"body":{"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpadapter",{"_index":1090,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod(request",{"_index":1093,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request",{"_index":1096,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpargumentshost",{"_index":256,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcacheinterceptor",{"_index":1083,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpcode",{"_index":136,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":244,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1097,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":531,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://api.github.com/user",{"_index":1474,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/access_token?client_id=${process.env.github_client_id}&client_secret=${process.env.github_secret}&code=${requesttoken",{"_index":1469,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email",{"_index":1466,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2554,"title":{},"body":{"properties.html":{}}}],["https://github.com/viandwi24",{"_index":1115,"title":{},"body":{"interfaces/IApp.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":713,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":274,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.ok",{"_index":1422,"title":{},"body":{"controllers/OauthController.html":{}}}],["husky",{"_index":2129,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iapp",{"_index":1102,"title":{"interfaces/IApp.html":{}},"body":{"interfaces/IApp.html":{},"coverage.html":{}}}],["iarrayfile",{"_index":972,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["icreatecomment",{"_index":1593,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["icreatepost",{"_index":1587,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["id",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiokresponse({description",{"_index":1546,"title":{},"body":{"controllers/PostsController.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id.decorator.ts",{"_index":2075,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":2412,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":2010,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1663,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.authorid",{"_index":1664,"title":{},"body":{"injectables/PostsService.html":{}}}],["identify.length",{"_index":1957,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":1958,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifinduserbyemail",{"_index":1905,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetcomment",{"_index":1594,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpostofuser",{"_index":1588,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpublicpost",{"_index":1589,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetuserprofile",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":1156,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreexpiration",{"_index":450,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["ignoreglobalprefix",{"_index":1143,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ijwtpayload",{"_index":434,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":2202,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":957,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":2069,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["impact",{"_index":2458,"title":{},"body":{"index.html":{}}}],["implements",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implicit",{"_index":2691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implied",{"_index":2506,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["import.meta.env.vite_base_url",{"_index":2650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import.meta.hot",{"_index":228,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["import.meta.hot.accept(accepthmrupdate(usealertsstore",{"_index":229,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["imported",{"_index":1149,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MathModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":2226,"title":{},"body":{"index.html":{}}}],["include",{"_index":1144,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":1154,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2481,"title":{},"body":{"license.html":{}}}],["index",{"_index":85,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1695,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["info(message",{"_index":222,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":691,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":2427,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":302,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{}}}],["infrastructure/auth/guards",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/oauth/oauth.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":841,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["init",{"_index":2366,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":2049,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MathController.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputs",{"_index":2303,"title":{},"body":{"index.html":{}}}],["insertbefore",{"_index":1125,"title":{},"body":{"interfaces/IApp.html":{}}}],["inserted",{"_index":1128,"title":{},"body":{"interfaces/IApp.html":{}}}],["inspect",{"_index":2307,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":1153,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2413,"title":{},"body":{"index.html":{}}}],["install",{"_index":2364,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2362,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2274,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":268,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["int.pipe.ts",{"_index":1494,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1499,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2379,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2341,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2305,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":855,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":856,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":314,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1716,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["interface",{"_index":179,"title":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":181,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":266,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["internal_server_error",{"_index":2630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":1756,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["ipublicuser",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":800,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isarray",{"_index":627,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray()@isnotempty",{"_index":621,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["isboolean",{"_index":1522,"title":{},"body":{"classes/PostEntity.html":{}}}],["isboolean()@isnotempty",{"_index":1516,"title":{},"body":{"classes/PostEntity.html":{}}}],["isdate",{"_index":1759,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":801,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isgetrequest",{"_index":1092,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["isglobal",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":973,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":628,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isjson()@isnotempty",{"_index":623,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":2201,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1504,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":629,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1857,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":1849,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isstring",{"_index":617,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1853,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnumber",{"_index":1523,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isnumber()@isnotempty",{"_index":1518,"title":{},"body":{"classes/PostEntity.html":{}}}],["isobject",{"_index":630,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isoptional",{"_index":1491,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":421,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":631,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":619,"title":{},"body":{"classes/CommentEntity.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":1483,"title":{},"body":{"classes/PaginationDto.html":{}}}],["istyping",{"_index":1293,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":1139,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1381,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["item.id",{"_index":225,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/variables.html":{}}}],["item.text",{"_index":1361,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item1item2",{"_index":2239,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":989,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":991,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":992,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":993,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":994,"title":{},"body":{"controllers/FileController.html":{}}}],["items",{"_index":210,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/PaginationDto.html":{},"miscellaneous/variables.html":{}}}],["itheme",{"_index":2571,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ithemesettingoptions",{"_index":2572,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecomment",{"_index":1595,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatecover",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatepost",{"_index":1590,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatereaction",{"_index":1591,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["java",{"_index":2442,"title":{},"body":{"index.html":{}}}],["john",{"_index":1340,"title":{},"body":{"injectables/MessagesService.html":{}}}],["join",{"_index":2238,"title":{},"body":{"index.html":{}}}],["join(__dirname",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["joinconversation",{"_index":1271,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["joinconversation(conversationid",{"_index":1286,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["jpeg|jpg|gif|png",{"_index":2199,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["json.parse(item",{"_index":1382,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["json.stringify(exception.getresponse",{"_index":269,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":441,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["jwt_refresh",{"_index":2152,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jwtfromrequest",{"_index":445,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":529,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":532,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["keep",{"_index":1993,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":1375,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"miscellaneous/variables.html":{}}}],["keywords",{"_index":2550,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2505,"title":{},"body":{"license.html":{}}}],["large",{"_index":2643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":924,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["latest",{"_index":2417,"title":{},"body":{"index.html":{}}}],["league",{"_index":2447,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2435,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2431,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2449,"title":{},"body":{"index.html":{}}}],["length",{"_index":802,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(3",{"_index":808,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":1870,"title":{},"body":{"classes/UserEntity.html":{}}}],["letter",{"_index":1864,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":2519,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2516,"title":{},"body":{"license.html":{}}}],["library",{"_index":2264,"title":{},"body":{"index.html":{}}}],["license",{"_index":2459,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2401,"title":{},"body":{"index.html":{}}}],["life",{"_index":2222,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":2723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["light",{"_index":2585,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":1481,"title":{},"body":{"classes/PaginationDto.html":{}}}],["limitation",{"_index":2482,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2507,"title":{},"body":{"license.html":{}}}],["link",{"_index":1108,"title":{},"body":{"interfaces/IApp.html":{}}}],["linter",{"_index":2346,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":2344,"title":{},"body":{"index.html":{}}}],["list",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["list.authorid",{"_index":1657,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":765,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list['creator",{"_index":763,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter",{"_index":767,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["literal",{"_index":1105,"title":{},"body":{"interfaces/IApp.html":{},"interfaces/NatsSubscriber.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":1147,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2378,"title":{},"body":{"index.html":{}}}],["log",{"_index":1195,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":1204,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":242,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":2188,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":1190,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":1191,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":342,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":2061,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":2187,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":348,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":240,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1172,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logindto",{"_index":470,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":788,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["looking",{"_index":2454,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2299,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":2220,"title":{},"body":{"index.html":{}}}],["male",{"_index":1748,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["manager",{"_index":2115,"title":{},"body":{"dependencies.html":{}}}],["many",{"_index":2636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":882,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marriagestatus",{"_index":1717,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["master",{"_index":2434,"title":{},"body":{"index.html":{}}}],["match",{"_index":2235,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["matchemail",{"_index":1964,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":1966,"title":{},"body":{"injectables/UsersService.html":{}}}],["math",{"_index":1238,"title":{},"body":{"controllers/MathController.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.controller",{"_index":1264,"title":{},"body":{"modules/MathModule.html":{}}}],["math_service",{"_index":1249,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mathcontroller",{"_index":1236,"title":{"controllers/MathController.html":{}},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{}}}],["mathmodule",{"_index":315,"title":{"modules/MathModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MathModule.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":1342,"title":{},"body":{"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1776,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1779,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxcount",{"_index":990,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":803,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1770,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(121",{"_index":813,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["maxlength(151",{"_index":1777,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":811,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["maxlength(46",{"_index":1763,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["media",{"_index":2646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1345,"title":{},"body":{"injectables/MessagesService.html":{}}}],["member",{"_index":706,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["members",{"_index":638,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["members[clientid",{"_index":1351,"title":{},"body":{"injectables/MessagesService.html":{}}}],["memory",{"_index":1070,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1067,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":2509,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2485,"title":{},"body":{"license.html":{}}}],["message",{"_index":186,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/CreateConversationDto.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["message.dto",{"_index":1825,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":821,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:5",{"_index":823,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":824,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":825,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1822,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.enum.ts",{"_index":2051,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["message['conversationid",{"_index":1364,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message['messageid",{"_index":1365,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagebody",{"_index":1302,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1310,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1318,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1311,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagepattern",{"_index":1247,"title":{},"body":{"controllers/MathController.html":{}}}],["messagepattern({cmd",{"_index":1244,"title":{},"body":{"controllers/MathController.html":{}}}],["messages",{"_index":1120,"title":{},"body":{"interfaces/IApp.html":{},"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1330,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.includes(ev.message",{"_index":1136,"title":{},"body":{"interfaces/IApp.html":{}}}],["messages.push(message",{"_index":1356,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages.service",{"_index":1305,"title":{},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1267,"title":{"classes/MessagesGateway.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":316,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1276,"title":{"injectables/MessagesService.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2426,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1497,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1976,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["method_not_allowed",{"_index":2637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodkey",{"_index":1169,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":86,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["microservice",{"_index":2359,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2371,"title":{},"body":{"index.html":{}}}],["min",{"_index":1760,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["min(0",{"_index":1778,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(17",{"_index":1775,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minlength",{"_index":804,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(2",{"_index":809,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":1872,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":2148,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2400,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":2383,"title":{},"body":{"index.html":{}}}],["models",{"_index":1152,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2484,"title":{},"body":{"license.html":{}}}],["module",{"_index":50,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2409,"title":{},"body":{"index.html":{}}}],["ms",{"_index":2195,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":2286,"title":{},"body":{"index.html":{}}}],["multi",{"_index":948,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":969,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":2189,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multipart/form",{"_index":1018,"title":{},"body":{"classes/FileService.html":{}}}],["music",{"_index":1766,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mustermann",{"_index":1343,"title":{},"body":{"injectables/MessagesService.html":{}}}],["name",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":925,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":923,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["named",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natsstrategy",{"_index":1368,"title":{"classes/NatsStrategy.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["natssubscriber",{"_index":1374,"title":{"interfaces/NatsSubscriber.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["nest",{"_index":2005,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nestinterceptor",{"_index":861,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":2551,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":257,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":530,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1823,"title":{},"body":{"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":876,"title":{},"body":{"classes/ExceptionFilter.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":412,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":964,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":351,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1304,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":895,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":2212,"title":{},"body":{"index.html":{}}}],["new",{"_index":278,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":1962,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":749,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":1963,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":1829,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["newprofile",{"_index":1960,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":857,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":1813,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1783,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nextfunction",{"_index":892,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2465,"title":{},"body":{"license.html":{},"properties.html":{}}}],["nice",{"_index":1344,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node",{"_index":1126,"title":{},"body":{"interfaces/IApp.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":2282,"title":{},"body":{"index.html":{}}}],["nodeexternals",{"_index":2091,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":2243,"title":{},"body":{"index.html":{}}}],["non",{"_index":2270,"title":{},"body":{"index.html":{}}}],["none",{"_index":194,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{}}}],["noninfringement",{"_index":2512,"title":{},"body":{"license.html":{}}}],["not_acceptable",{"_index":2639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_author",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_creator",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notable",{"_index":1988,"title":{},"body":{"changelog.html":{}}}],["notacceptableexception",{"_index":1941,"title":{},"body":{"injectables/UsersService.html":{}}}],["notacceptableexception(auth_error.password_not_match",{"_index":1967,"title":{},"body":{"injectables/UsersService.html":{}}}],["notedev",{"_index":2430,"title":{},"body":{"index.html":{}}}],["notfounderror",{"_index":1122,"title":{},"body":{"interfaces/IApp.html":{}}}],["notfoundexception",{"_index":896,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":899,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["notfoundexception(post_error.empty",{"_index":1653,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(post_error.not_found",{"_index":1656,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(user_error.not_found",{"_index":1652,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2499,"title":{},"body":{"license.html":{}}}],["notify(message",{"_index":212,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["now",{"_index":1227,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1231,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2363,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2367,"title":{},"body":{"index.html":{}}}],["null",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/imageValidator.html":{}}}],["null.interceptor",{"_index":1177,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["nullable",{"_index":647,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{}}}],["number",{"_index":199,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/MathController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1948,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1947,"title":{},"body":{"injectables/UsersService.html":{}}}],["nuxt",{"_index":1111,"title":{},"body":{"interfaces/IApp.html":{}}}],["oauth",{"_index":1390,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["oauth.controller",{"_index":1440,"title":{},"body":{"modules/OauthModule.html":{}}}],["oauth.service",{"_index":1417,"title":{},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{}}}],["oauth2",{"_index":2553,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":1046,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["oauthcontroller",{"_index":1388,"title":{"controllers/OauthController.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":317,"title":{"modules/OauthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OauthModule.html":{},"modules.html":{},"overview.html":{}}}],["oauthservice",{"_index":1416,"title":{"injectables/OauthService.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["object",{"_index":1130,"title":{},"body":{"interfaces/IApp.html":{},"injectables/ValidationPipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.values",{"_index":1350,"title":{},"body":{"injectables/MessagesService.html":{}}}],["observable",{"_index":860,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2474,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2321,"title":{},"body":{"index.html":{}}}],["official",{"_index":2204,"title":{},"body":{"index.html":{},"properties.html":{}}}],["offset",{"_index":2716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["old",{"_index":1728,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["old!'})@max(101",{"_index":1727,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["oldpassword",{"_index":1828,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["one",{"_index":676,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["onmoduledestroy",{"_index":1691,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1692,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onscroll",{"_index":2717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onunmounted",{"_index":2726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onuploadprogress",{"_index":1000,"title":{},"body":{"classes/FileService.html":{}}}],["oop",{"_index":2440,"title":{},"body":{"index.html":{}}}],["open",{"_index":2375,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":1166,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":1145,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":2333,"title":{},"body":{"index.html":{}}}],["option",{"_index":2655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":213,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options.timeout",{"_index":215,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1482,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":1950,"title":{},"body":{"injectables/UsersService.html":{}}}],["oriented",{"_index":2436,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1309,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":1031,"title":{},"body":{"classes/FilesService.html":{}}}],["othernames",{"_index":2737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":2524,"title":{},"body":{"license.html":{}}}],["out",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2532,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2094,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1484,"title":{},"body":{"classes/PaginationDto.html":{},"index.html":{}}}],["pagecurrent",{"_index":1956,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":1953,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":1955,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":107,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["param('conversationid",{"_index":727,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":1913,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":720,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('postid",{"_index":1605,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["param('useridorusername",{"_index":1910,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":2287,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1503,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1492,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":2122,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1582,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":2284,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":847,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createconversationdto",{"_index":848,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2511,"title":{},"body":{"license.html":{}}}],["parttern",{"_index":2070,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":440,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["passportstrategy",{"_index":437,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":443,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["passreqtocallback",{"_index":451,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["password",{"_index":484,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1883,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":1854,"title":{},"body":{"classes/UserEntity.html":{}}}],["password123'})@length(8",{"_index":1858,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_not_match",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":2266,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":805,"title":{"classes/passwordValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":729,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":680,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":726,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":699,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":731,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":703,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":722,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":695,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":1915,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":1901,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1607,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1580,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":281,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"controllers/MathController.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":2164,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["patterns",{"_index":1377,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["patterns.map((item",{"_index":1380,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["payload",{"_index":436,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["payload_too_large",{"_index":2642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":1486,"title":{},"body":{"classes/PaginationDto.html":{}}}],["perform",{"_index":2271,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2468,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2492,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2473,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2493,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1718,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1762,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["photos",{"_index":1052,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":1054,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picktype",{"_index":771,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/LoginDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(commententity",{"_index":773,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(postentity",{"_index":832,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":1836,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(userentity",{"_index":1235,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["picture",{"_index":1053,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pinia",{"_index":189,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["pipe",{"_index":868,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["pipe(map((value",{"_index":883,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipe(tap",{"_index":1229,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":2342,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1501,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":2273,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":1978,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1980,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":2213,"title":{},"body":{"index.html":{}}}],["playground",{"_index":2348,"title":{},"body":{"index.html":{}}}],["please",{"_index":2408,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":2710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugins",{"_index":2242,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2502,"title":{},"body":{"license.html":{}}}],["post",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiokresponse({description",{"_index":1551,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('avatar",{"_index":979,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":935,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1618,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1539,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":982,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":942,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":988,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":947,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":985,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":956,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1600,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1561,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1612,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1571,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1545,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":666,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":829,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:6",{"_index":852,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post_error",{"_index":1643,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postentity",{"_index":830,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2357,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1702,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":613,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2355,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1526,"title":{},"body":{"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":1629,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1584,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1524,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":318,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1583,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":2223,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2445,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":1192,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":2058,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":2145,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":2206,"title":{},"body":{"index.html":{}}}],["previousnames",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previousnames.value.add(savedname.value",{"_index":2742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["print",{"_index":2298,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":2136,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1687,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1699,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma:generate",{"_index":2370,"title":{},"body":{"index.html":{}}}],["prisma:migrate",{"_index":2372,"title":{},"body":{"index.html":{}}}],["prisma:pull",{"_index":2369,"title":{},"body":{"index.html":{}}}],["prisma:push",{"_index":2374,"title":{},"body":{"index.html":{}}}],["prisma:studiorunning",{"_index":2377,"title":{},"body":{"index.html":{}}}],["prisma@latest",{"_index":2365,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1689,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":319,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":75,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":235,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":2338,"title":{},"body":{"index.html":{}}}],["process.env.app_secret",{"_index":449,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["process.env.database_url",{"_index":1703,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.facebook_callback_url",{"_index":917,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_id",{"_index":913,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_secret",{"_index":915,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.google_callback_url",{"_index":1051,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_client_id",{"_index":1049,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":1050,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.white_list",{"_index":2658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2385,"title":{},"body":{"index.html":{}}}],["profile",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profileentity",{"_index":1708,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["profileentity:101",{"_index":1838,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:111",{"_index":1840,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:121",{"_index":1844,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:35",{"_index":1843,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:43",{"_index":1839,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:51",{"_index":1842,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:58",{"_index":1846,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:65",{"_index":1845,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:75",{"_index":1837,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:83",{"_index":1847,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:88",{"_index":1841,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profilefields",{"_index":919,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["programming",{"_index":2227,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2416,"title":{},"body":{"index.html":{}}}],["project",{"_index":1990,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":185,"title":{"properties.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"interfaces/NatsSubscriber.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["property",{"_index":1850,"title":{},"body":{"classes/UserEntity.html":{}}}],["provide",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":2503,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":2186,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":63,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1557,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":1890,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":1886,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get('users/all')@apioperation({summary",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":952,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":960,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":2486,"title":{},"body":{"license.html":{}}}],["published",{"_index":1509,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["pull",{"_index":2388,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":2210,"title":{},"body":{"index.html":{},"license.html":{}}}],["put",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1620,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1576,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":1916,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":1896,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":1917,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":1898,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["query",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["queue",{"_index":1376,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["quickly",{"_index":2337,"title":{},"body":{"index.html":{}}}],["randomint",{"_index":2066,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomint(min",{"_index":2191,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rapidy",{"_index":2353,"title":{},"body":{"index.html":{}}}],["reach",{"_index":2457,"title":{},"body":{"index.html":{}}}],["react",{"_index":1572,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1673,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":2236,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1535,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1613,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1569,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":614,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1570,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1510,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":2296,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["readiness",{"_index":1058,"title":{},"body":{"controllers/HealthController.html":{}}}],["readme",{"_index":2003,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["realtime",{"_index":2586,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["recompile",{"_index":2317,"title":{},"body":{"index.html":{}}}],["reduce((a",{"_index":1259,"title":{},"body":{"controllers/MathController.html":{}}}],["ref",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref(new",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":2349,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":2137,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1322,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["refreshtoken",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reload",{"_index":2316,"title":{},"body":{"index.html":{}}}],["remotely",{"_index":2330,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1272,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["remove(@messagebody",{"_index":1325,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["remove(id",{"_index":223,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["remove(message",{"_index":1289,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":2300,"title":{},"body":{"index.html":{}}}],["replace('bearer",{"_index":1806,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["replies",{"_index":615,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":2251,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":894,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.params.userid",{"_index":897,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["req.user",{"_index":1461,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.email",{"_index":1465,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.user.email",{"_index":1462,"title":{},"body":{"injectables/OauthService.html":{}}}],["req['code",{"_index":1468,"title":{},"body":{"injectables/OauthService.html":{}}}],["request",{"_index":253,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":282,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1792,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_timeout",{"_index":2641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod",{"_index":1926,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":2281,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":1811,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["requesttoken",{"_index":1467,"title":{},"body":{"injectables/OauthService.html":{}}}],["require('run",{"_index":2708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('webpack",{"_index":2706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":204,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":1789,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":891,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["reset",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":254,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":2652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.status(status).json",{"_index":1101,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":283,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":272,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responses_message",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responses_message.create_user",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["responses_message.delete_comment",{"_index":1682,"title":{},"body":{"injectables/PostsService.html":{}}}],["responses_message.delete_user",{"_index":1969,"title":{},"body":{"injectables/UsersService.html":{}}}],["rest",{"_index":2673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2480,"title":{},"body":{"license.html":{}}}],["result",{"_index":2304,"title":{},"body":{"index.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2483,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":2139,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":705,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["roledecorator",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(erole.admin",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roles",{"_index":1791,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":353,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":1148,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["rpcexception",{"_index":874,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rpcexceptionfilter",{"_index":873,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rt",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":493,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":523,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2323,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":864,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":866,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":2056,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["same_password",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sample_image",{"_index":2234,"title":{},"body":{"index.html":{}}}],["savedname",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["savedname.value",{"_index":2739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saves",{"_index":2740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":2247,"title":{},"body":{"index.html":{}}}],["scale",{"_index":2263,"title":{},"body":{"index.html":{}}}],["schema",{"_index":2255,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":918,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1213,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scopes",{"_index":2694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":2709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrolltop",{"_index":2718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":534,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":447,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":2291,"title":{},"body":{"index.html":{}}}],["see",{"_index":2240,"title":{},"body":{"index.html":{}}}],["select",{"_index":758,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2490,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":1995,"title":{},"body":{"changelog.html":{}}}],["senderid",{"_index":822,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["serialize",{"_index":2276,"title":{},"body":{"index.html":{}}}],["serve",{"_index":2312,"title":{},"body":{"index.html":{}}}],["server",{"_index":267,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servernats",{"_index":1370,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["servestaticmodule",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":2327,"title":{},"body":{"index.html":{}}}],["session",{"_index":2125,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":1158,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["setcontact",{"_index":2676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":1160,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setmetadata('ispublic",{"_index":2712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname",{"_index":2743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname(name",{"_index":2741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":1196,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1206,"title":{},"body":{"injectables/LoggerService.html":{}}}],["settimeout",{"_index":216,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":2293,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2047,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["setup(app",{"_index":2192,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.6.0",{"_index":2681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2500,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":2215,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":2421,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2419,"title":{},"body":{"index.html":{}}}],["short",{"_index":785,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["side",{"_index":2248,"title":{},"body":{"index.html":{}}}],["signed",{"_index":2289,"title":{},"body":{"index.html":{}}}],["signin",{"_index":2231,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":536,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":2232,"title":{},"body":{"index.html":{}}}],["signup",{"_index":2230,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":475,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocaldto",{"_index":2573,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["single",{"_index":1765,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1753,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["singlefielddecorator",{"_index":968,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":980,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":983,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":2193,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":1035,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":2225,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1946,"title":{},"body":{"injectables/UsersService.html":{}}}],["snake",{"_index":2438,"title":{},"body":{"index.html":{}}}],["social",{"_index":2361,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1280,"title":{},"body":{"classes/MessagesGateway.html":{},"properties.html":{}}}],["socket.io",{"_index":1307,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2476,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":2313,"title":{},"body":{"index.html":{}}}],["special",{"_index":1865,"title":{},"body":{"classes/UserEntity.html":{}}}],["specification",{"_index":1155,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2404,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1767,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":2598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":2168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../axios.ts",{"_index":2594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":2180,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../fullname.validator.ts",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.validator.ts",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":2173,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":2172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2169,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../math.constant.ts",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../multi",{"_index":2174,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../options.enum.ts",{"_index":2150,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../password.validator.ts",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":2175,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../repl.ts",{"_index":2170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":2613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../setup.config.ts",{"_index":2176,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../single",{"_index":2177,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":2592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/constants/math.constant.ts",{"_index":2039,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/filters/rpc",{"_index":871,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts",{"_index":1237,"title":{},"body":{"controllers/MathController.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:35",{"_index":1242,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:42",{"_index":1245,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.module.ts",{"_index":1261,"title":{},"body":{"modules/MathModule.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts",{"_index":1369,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts:12",{"_index":1373,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["src/abstraction/prisma/prisma.module",{"_index":526,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/abstraction/prisma/prisma.module.ts",{"_index":1686,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/abstraction/prisma/prisma.service",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["src/abstraction/prisma/prisma.service.ts",{"_index":1688,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/abstraction/prisma/prisma.service.ts:13",{"_index":1693,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:25",{"_index":1698,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:29",{"_index":1697,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:33",{"_index":1696,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/app.controller.ts",{"_index":285,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":298,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:72",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":393,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:10",{"_index":395,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":394,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/common/dto/pagination.dto",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/common/dto/pagination.dto.ts",{"_index":1480,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/core/common/dto/pagination.dto.ts:13",{"_index":1485,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:23",{"_index":1487,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:33",{"_index":1490,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/configs/cors.config.ts",{"_index":2041,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":1140,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/setup.config.ts",{"_index":2046,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/configs/swagger.config.ts",{"_index":2048,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"injectables/GoogleStrategy.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/constants/options.enum.ts",{"_index":2151,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":2050,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":241,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":247,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:26",{"_index":251,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:38",{"_index":255,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":1098,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":1099,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{}}}],["src/core/helpers/age.ts",{"_index":2052,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/axios.ts",{"_index":2054,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":1942,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":2055,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/errors.interceptor.ts",{"_index":854,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/errors.interceptor.ts:13",{"_index":859,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["src/core/interceptors/http",{"_index":1084,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":1170,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":1173,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1221,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1222,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/null.interceptor.ts",{"_index":880,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/null.interceptor.ts:12",{"_index":881,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1809,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1810,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":1175,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1781,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1815,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":2057,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":1185,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":1187,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":2059,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":1193,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1205,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1203,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1211,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1200,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1209,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1212,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1207,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":886,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/logger",{"_index":1180,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1493,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":1972,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":1977,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":1975,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":2062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1785,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:6",{"_index":1786,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:9",{"_index":1787,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/utils/delay.ts",{"_index":2063,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random.ts",{"_index":2065,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":807,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":2067,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":2160,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":2157,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":2068,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":2198,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":2196,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":2071,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2539,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2538,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":2072,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2545,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2544,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":2073,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2590,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2589,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/health.controller.ts",{"_index":1056,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:25",{"_index":1062,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infrastructure/admin/admin",{"_index":83,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":72,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:111",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:71",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:80",{"_index":473,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:89",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:99",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1928,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":524,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:107",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:119",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:139",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:16",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:24",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:50",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:62",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:87",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1248,"title":{},"body":{"controllers/MathController.html":{},"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":2074,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":2077,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto/request",{"_index":1903,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":1826,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1232,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":1808,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":403,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:13",{"_index":409,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:7",{"_index":406,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1797,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:4",{"_index":1798,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":427,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:20",{"_index":435,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:9",{"_index":431,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1800,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:12",{"_index":1801,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:25",{"_index":1803,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":654,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:104",{"_index":692,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:119",{"_index":696,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:134",{"_index":677,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:149",{"_index":700,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:168",{"_index":682,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:187",{"_index":707,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:79",{"_index":671,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:91",{"_index":687,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":736,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":738,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:104",{"_index":741,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:121",{"_index":746,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:136",{"_index":742,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:17",{"_index":739,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:171",{"_index":747,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:20",{"_index":740,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:35",{"_index":743,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:63",{"_index":744,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:89",{"_index":745,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":774,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":837,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":1038,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":844,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":634,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:11",{"_index":648,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:14",{"_index":642,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:17",{"_index":644,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":652,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:23",{"_index":650,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:26",{"_index":645,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:29",{"_index":641,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:5",{"_index":649,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:8",{"_index":651,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":2079,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":2081,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":2082,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":928,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:112",{"_index":953,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:70",{"_index":940,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:81",{"_index":945,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:92",{"_index":961,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":1024,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":1026,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":1028,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":1030,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":1029,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":1027,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/create",{"_index":820,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/update",{"_index":1821,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1268,"title":{},"body":{"classes/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:15",{"_index":1277,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:19",{"_index":1288,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1285,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:37",{"_index":1282,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:52",{"_index":1295,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:66",{"_index":1299,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:73",{"_index":1291,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1329,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1331,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:32",{"_index":1337,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:42",{"_index":1334,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:47",{"_index":1336,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:52",{"_index":1333,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:68",{"_index":1339,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1346,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:81",{"_index":1338,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts",{"_index":1389,"title":{},"body":{"controllers/OauthController.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:102",{"_index":1415,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:115",{"_index":1409,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:63",{"_index":1405,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:77",{"_index":1401,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:88",{"_index":1412,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.module.ts",{"_index":1439,"title":{},"body":{"modules/OauthModule.html":{}}}],["src/infrastructure/oauth/oauth.service.ts",{"_index":1444,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:10",{"_index":1451,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:26",{"_index":1457,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:42",{"_index":1453,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:58",{"_index":1455,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:7",{"_index":1449,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts",{"_index":901,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:10",{"_index":902,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:21",{"_index":908,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts",{"_index":1041,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:13",{"_index":1042,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:23",{"_index":1044,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/posts/dto/comment/request/create",{"_index":769,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/delete",{"_index":836,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/update",{"_index":1816,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":828,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":851,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1780,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":612,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:12",{"_index":618,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":625,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:20",{"_index":626,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:24",{"_index":620,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:28",{"_index":622,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:32",{"_index":624,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":831,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1506,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:12",{"_index":1520,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:16",{"_index":1512,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:20",{"_index":1514,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:24",{"_index":1517,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:28",{"_index":1511,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:32",{"_index":1515,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:36",{"_index":1513,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:40",{"_index":1519,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:44",{"_index":1521,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1525,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:110",{"_index":1562,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:123",{"_index":1565,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:135",{"_index":1568,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:147",{"_index":1581,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:157",{"_index":1555,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:170",{"_index":1573,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:180",{"_index":1559,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:193",{"_index":1543,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:206",{"_index":1577,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:218",{"_index":1552,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:94",{"_index":1548,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1628,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1630,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:125",{"_index":1639,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:143",{"_index":1642,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:174",{"_index":1635,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:200",{"_index":1640,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:228",{"_index":1636,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:239",{"_index":1632,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:261",{"_index":1641,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:276",{"_index":1634,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:34",{"_index":1631,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:37",{"_index":1633,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:71",{"_index":1637,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:89",{"_index":1638,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/users/dto/request/update",{"_index":1833,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1709,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:101",{"_index":1729,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:111",{"_index":1734,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:121",{"_index":1751,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:35",{"_index":1747,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:43",{"_index":1731,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:51",{"_index":1740,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:58",{"_index":1754,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:65",{"_index":1752,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:75",{"_index":1723,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:83",{"_index":1757,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:88",{"_index":1739,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/user.entity",{"_index":1827,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/users/entities/user.entity.ts",{"_index":1848,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:22",{"_index":1852,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:41",{"_index":1867,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:50",{"_index":1856,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:59",{"_index":1855,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:78",{"_index":1869,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1876,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:103",{"_index":1895,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:114",{"_index":1902,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:128",{"_index":1897,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:142",{"_index":1899,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:154",{"_index":1884,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:77",{"_index":1887,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:90",{"_index":1893,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1924,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":1925,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1930,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:115",{"_index":1940,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:135",{"_index":1938,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:164",{"_index":1939,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:193",{"_index":1932,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:226",{"_index":1933,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:33",{"_index":1931,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:36",{"_index":1934,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:61",{"_index":1935,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:81",{"_index":1936,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:96",{"_index":1937,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":2086,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/repl.ts",{"_index":2088,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":2381,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2384,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":2386,"title":{},"body":{"index.html":{}}}],["startat",{"_index":2027,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":1986,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1113,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["state",{"_index":209,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":2011,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":237,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":305,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["status_message",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["status_message.success",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":273,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":2410,"title":{},"body":{"index.html":{}}}],["str",{"_index":2184,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strategies",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/facebook.strategy",{"_index":1443,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategies/google.strategy",{"_index":1441,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategy",{"_index":439,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/FacebookStrategy.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":2241,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2376,"title":{},"body":{"index.html":{}}}],["style",{"_index":201,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2495,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2488,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1301,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1281,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1284,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('joinconversation",{"_index":1287,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1290,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1294,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('updatemessage",{"_index":1298,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["substantial",{"_index":2501,"title":{},"body":{"license.html":{}}}],["success",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["success(message",{"_index":218,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["successfuly",{"_index":1547,"title":{},"body":{"controllers/PostsController.html":{}}}],["sum",{"_index":1239,"title":{},"body":{"controllers/MathController.html":{}}}],["sum(data",{"_index":1243,"title":{},"body":{"controllers/MathController.html":{}}}],["summary",{"_index":158,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":415,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":425,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1219,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1217,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1216,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1220,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1218,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":2290,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2529,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1146,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2373,"title":{},"body":{"index.html":{}}}],["system",{"_index":1072,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["system'})@healthcheck",{"_index":1061,"title":{},"body":{"controllers/HealthController.html":{}}}],["system_error",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["system_error.conflict",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.forbidden",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.internal_server_error",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.method_not_allowed",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_acceptable",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_found",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.payload_too_large",{"_index":975,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["system_error.request_timeout",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.too_many_requests",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unauthorized",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unsupported_media_type",{"_index":976,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["t",{"_index":1782,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":2093,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2092,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":2256,"title":{},"body":{"index.html":{}}}],["take",{"_index":1949,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":2301,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1223,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tar.gz",{"_index":2008,"title":{},"body":{"changelog.html":{}}}],["templates",{"_index":2360,"title":{},"body":{"index.html":{}}}],["teneno",{"_index":288,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":2311,"title":{},"body":{"index.html":{}}}],["terminusmodule",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["terms",{"_index":2328,"title":{},"body":{"index.html":{}}}],["test",{"_index":2396,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2399,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2398,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2395,"title":{},"body":{"index.html":{}}}],["text",{"_index":616,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateMessageDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["thanks",{"_index":2403,"title":{},"body":{"index.html":{}}}],["theme",{"_index":1107,"title":{},"body":{"interfaces/IApp.html":{}}}],["thememanager",{"_index":1106,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["then(async",{"_index":2651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thinking",{"_index":2228,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":2217,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1704,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1705,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1706,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":306,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(payload",{"_index":1464,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.signuplocal(dto",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(payload",{"_index":1463,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.updatepassword(dto",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.client.send(pattern",{"_index":1258,"title":{},"body":{"controllers/MathController.html":{}}}],["this.configservice.get('app_secret",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversations",{"_index":1354,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.find((element",{"_index":1347,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.foreach((element",{"_index":1357,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversationsservice",{"_index":714,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":716,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":725,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":730,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(dto",{"_index":718,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":721,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":723,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":728,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":732,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.disk.checkstorage('storage",{"_index":1080,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":981,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":984,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":995,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":987,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findallmessages(message['conversationid",{"_index":1367,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.findallmessages(updatemessagedto['conversationid",{"_index":1363,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmember(conversationid",{"_index":1352,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmessagehandler(key).bind(this",{"_index":1387,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1655,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":1961,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens(newuser.id",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.githubsuccess(data.access_token",{"_index":1472,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.handlemessage(exception",{"_index":264,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.health.check",{"_index":1073,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpadapterhost",{"_index":1091,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.items.findindex((item",{"_index":224,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.push",{"_index":214,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.splice(index",{"_index":227,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.jwtservice.signasync",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":271,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":402,"title":{},"body":{"injectables/AppService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":1077,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('mem_rss",{"_index":1074,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagehandlers.keys",{"_index":1378,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.messagesservice.createmessage",{"_index":1316,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.findallmessages(conversationid",{"_index":1315,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.getmember",{"_index":1319,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.joinconversation",{"_index":1312,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.remove(message",{"_index":1326,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.updatemessage(updatemessagedto",{"_index":1323,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.notify(message",{"_index":219,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.oauthservice.facebooklogin(req",{"_index":1425,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.githubredirect(req",{"_index":1434,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.googlelogin(req",{"_index":1431,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.postsservice.addcomment(userid",{"_index":1619,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(userid",{"_index":1599,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1624,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":1611,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1617,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(userid",{"_index":1601,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1603,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1606,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1614,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1621,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1609,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1214,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1677,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1681,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1679,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":750,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":764,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":756,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":762,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.update",{"_index":760,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.post.create",{"_index":1644,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1665,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1650,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1654,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1660,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1674,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1668,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1945,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":1970,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":1968,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":1959,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride",{"_index":1790,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":422,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.remove(id",{"_index":217,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.server.emit('message",{"_index":1317,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.server.emit('refresh",{"_index":1324,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.tovalidate(metatype",{"_index":1979,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1908,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":1919,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":1911,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":1914,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["thresholdpercent",{"_index":1081,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":1159,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":863,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["thuong",{"_index":2466,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2463,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2389,"title":{},"body":{"index.html":{}}}],["time",{"_index":2320,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":198,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["timeout(5000",{"_index":1814,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout.interceptor",{"_index":1179,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["timeouterror",{"_index":1812,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1178,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":277,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":2350,"title":{},"body":{"index.html":{}}}],["title",{"_index":833,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":2219,"title":{},"body":{"index.html":{}}}],["token",{"_index":418,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/OauthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{}}}],["too_many_requests",{"_index":2635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":2332,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2523,"title":{},"body":{"license.html":{}}}],["total",{"_index":1944,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2411,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1973,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1974,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1202,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trackby",{"_index":1086,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1087,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trading",{"_index":2418,"title":{},"body":{"index.html":{}}}],["training",{"_index":2444,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2464,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1495,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1496,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1758,"title":{},"body":{"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":1174,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transition",{"_index":1118,"title":{},"body":{"interfaces/IApp.html":{}}}],["transport",{"_index":1263,"title":{},"body":{"modules/MathModule.html":{}}}],["transport.tcp",{"_index":1266,"title":{},"body":{"modules/MathModule.html":{}}}],["travel",{"_index":1768,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":1807,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":205,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"classes/PaginationDto.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty()@length(3",{"_index":783,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["truong",{"_index":2467,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["tslint",{"_index":2143,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":2368,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2437,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2425,"title":{},"body":{"index.html":{}}}],["type",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2556,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1132,"title":{},"body":{"interfaces/IApp.html":{}}}],["types",{"_index":1824,"title":{},"body":{"classes/UpdateMessageDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":1984,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":2107,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2250,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1273,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["typing(conversationid",{"_index":1292,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["ui/ux",{"_index":2446,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":2633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uncaught",{"_index":1121,"title":{},"body":{"interfaces/IApp.html":{}}}],["undefined",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apicreatedresponse({description",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["undefined})@apicreatedresponse({type",{"_index":669,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["undefined})@apioperation({summary",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MathController.html":{}}}],["undefined})@arrayfielddecorator('files",{"_index":958,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":778,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["undefined})@multifielddecorator(['undefined",{"_index":951,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/avatars",{"_index":939,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/covers",{"_index":944,"title":{},"body":{"controllers/FileController.html":{}}}],["under",{"_index":2461,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2394,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":672,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":2645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported_media_type",{"_index":2644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":91,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{}}}],["update(userid",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1536,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(dto",{"_index":1574,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1575,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":661,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":693,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":694,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateconversationmembersdto",{"_index":2575,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updateconversationroles",{"_index":2576,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updated",{"_index":759,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":639,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":662,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":697,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":698,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updatemessage",{"_index":1274,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@messagebody",{"_index":1321,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["updatemessage(updatemessagedto",{"_index":1296,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":1297,"title":{"classes/UpdateMessageDto.html":{}},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto['conversationid",{"_index":1358,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['messageid",{"_index":1360,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['text",{"_index":1362,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updateoneconversationbyiddto",{"_index":2577,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updatepassword",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":482,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1537,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1608,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1578,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1579,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostsdto",{"_index":2578,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updaterolesconversation",{"_index":663,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":701,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":702,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuseravatardto",{"_index":125,"title":{"classes/UpdateUserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusercoverdto",{"_index":131,"title":{"classes/UpdateUserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":119,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusersavatar",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":130,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1880,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1900,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":936,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":929,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadavatar(data",{"_index":998,"title":{},"body":{"classes/FileService.html":{}}}],["uploadavatar(file",{"_index":933,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatardto",{"_index":999,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadcover",{"_index":930,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadcover(data",{"_index":1002,"title":{},"body":{"classes/FileService.html":{}}}],["uploadcover(file",{"_index":941,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcoverdto",{"_index":1003,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadedfile",{"_index":962,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":963,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":2190,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":931,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":946,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpost",{"_index":997,"title":{},"body":{"classes/FileService.html":{}}}],["uploadpost(data",{"_index":1005,"title":{},"body":{"classes/FileService.html":{}}}],["uploadposts",{"_index":932,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":954,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpostsdto",{"_index":1006,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":1863,"title":{},"body":{"classes/UserEntity.html":{}}}],["upsertreactpostdto",{"_index":2580,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uptest",{"_index":2393,"title":{},"body":{"index.html":{}}}],["url",{"_index":1011,"title":{},"body":{"classes/FileService.html":{},"injectables/OauthService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/variables.html":{}}}],["url'})@isstring()@isnotempty",{"_index":1730,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["use",{"_index":888,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":890,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["usealertsstore",{"_index":207,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["usecount",{"_index":2013,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["used",{"_index":1164,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usednames",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usednames.value.filter((name",{"_index":2738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":533,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["useguards(authguard('facebook",{"_index":1421,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(authguard('google",{"_index":1427,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(rtguard",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":397,"title":{},"body":{"injectables/AppService.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":400,"title":{},"body":{"injectables/AppService.html":{}}}],["usenamevalidator",{"_index":806,"title":{"classes/usenameValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiokresponse({description",{"_index":1542,"title":{},"body":{"controllers/PostsController.html":{}}}],["user)'})@apiokresponse({description",{"_index":668,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":686,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":950,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":2076,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":1927,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":887,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":889,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":893,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1796,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.includes(role",{"_index":1795,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1794,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user01",{"_index":814,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user02",{"_index":815,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user:read",{"_index":2696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user:write",{"_index":2695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_error",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":1233,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":898,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":1888,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1874,"title":{},"body":{"classes/UserEntity.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1868,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":84,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:109",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:121",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:133",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:75",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:86",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:97",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.dto.ts",{"_index":1834,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["users.length",{"_index":1954,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":1904,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/request",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/entities/user.entity",{"_index":1234,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["users/users.module",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["userscontroller",{"_index":1875,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":57,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":154,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usestate('app",{"_index":1116,"title":{},"body":{"interfaces/IApp.html":{}}}],["usesticky",{"_index":2017,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["useuserstore",{"_index":2019,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":191,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["v4",{"_index":190,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["val",{"_index":1502,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":428,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/CreateConversationDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(accesstoken",{"_index":903,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(fullnamevalidator",{"_index":1764,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":2197,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":1982,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1873,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":433,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1772,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":1802,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":2159,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":812,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["validation",{"_index":2272,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":2156,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":1971,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":632,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":2161,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":2153,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":884,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.pattern",{"_index":1385,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["value.queue",{"_index":1386,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["variable",{"_index":2016,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2591,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":2258,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":1197,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1208,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":2268,"title":{},"body":{"index.html":{}}}],["verifycallback",{"_index":1043,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["versa",{"_index":2275,"title":{},"body":{"index.html":{}}}],["version",{"_index":2548,"title":{},"body":{"properties.html":{}}}],["versioning",{"_index":1996,"title":{},"body":{"changelog.html":{}}}],["viandwi24",{"_index":1114,"title":{},"body":{"interfaces/IApp.html":{}}}],["view",{"_index":2675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":249,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/FacebookStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"classes/NatsStrategy.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":1117,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["wait",{"_index":2064,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":2194,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":1198,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1210,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":193,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["warning(message",{"_index":221,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":2508,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2504,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2382,"title":{},"body":{"index.html":{}}}],["web",{"_index":2432,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":2211,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":2089,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["websocketgateway",{"_index":1300,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["websocketserver",{"_index":1278,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["whether",{"_index":2520,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":2043,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["window",{"_index":1133,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('error",{"_index":1134,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('scroll",{"_index":2725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.location.reload",{"_index":1138,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.pageyoffset",{"_index":2719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.removeeventlistener('scroll",{"_index":2727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["without",{"_index":2479,"title":{},"body":{"license.html":{}}}],["world",{"_index":294,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{}}}],["writtenposts",{"_index":1651,"title":{},"body":{"injectables/PostsService.html":{}}}],["x",{"_index":2343,"title":{},"body":{"index.html":{}}}],["years",{"_index":1726,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["yes",{"_index":1201,"title":{},"body":{"injectables/LoggerService.html":{}}}],["you'd",{"_index":2407,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2543,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2540,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2541,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":2162,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2542,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zip",{"_index":2007,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":59,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { EROLE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@RoleDecorator(EROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n    constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport { EROLE, STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\nimport { Public } from '../auth/decorators';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from '../users/dto/request';\nimport {\n    IAllUsers,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@RoleDecorator(EROLE.ADMIN)\n@Controller('admin')\nexport class AdminUsersController {\n    constructor(private readonly usersService: UsersService) {}\n\n    @Public()\n    @Get('users/all')\n    @ApiOperation({ summary: 'Get list all public users' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getAllUsers(@Query() dto: PaginationDto): Promise {\n        return this.usersService.getAllUsers(dto);\n    }\n\n    @Public()\n    @Get('users/:userId')\n    @ApiOperation({\n        summary: 'Get user profile by user-id',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @Param('userId') userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('users/profile/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: 'Success' })\n    async update(\n        @Param('userId') userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('users/avatar/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersAvatar(\n        @Param() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('users/cover/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersCover(\n        @Param() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('users/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user by user-id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUserById(@Param('userId') userId: string): Promise {\n        return this.usersService.deleteUserById(userId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Alert.html":{"url":"interfaces/Alert.html","title":"interface - Alert","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Alert\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AlertOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AlertOptions.html":{"url":"interfaces/AlertOptions.html","title":"interface - AlertOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlertOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            closable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            html\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        closable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        html\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        html:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:         AlertStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlertStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(request, response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    request: Request,\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        timestamp: new Date().toISOString(),\n        message: exception.stack,\n        path: request.url,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: '{code: 1, data: {Hello world}, message: \"\"'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@Public()\n@Controller('/')\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Teneno homepage' })\n    @ApiResponse({\n        status: 200,\n        description: '{code: 1, data: {Hello world}, message: \"\"',\n    })\n    @ApiResponse({ status: 404, description: 'Not found' })\n    getHello(): string {\n        return this.appService.getHello();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MathModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            OauthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n    CacheModule,\n    MiddlewareConsumer,\n    Module,\n    NestModule,\n} from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './abstraction/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\nimport { OauthModule } from './infrastructure/oauth/oauth.module';\nimport { MathModule } from './abstraction/microservices/math/math.module';\n\n@Module({\n    imports: [\n        InterceptorModule,\n        PrismaModule,\n        TerminusModule,\n        CacheModule.register(),\n        MathModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            // envFilePath: ['.env'],\n            envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n        }),\n        LoggerModule.forRoot(),\n        ServeStaticModule.forRoot({\n            rootPath: `${__dirname}/../docs`,\n            // rootPath: join(__dirname, '..', 'docs'),\n            renderPath: '/',\n            // exclude: ['/api*'],\n        }),\n        AuthModule,\n        OauthModule,\n        AdminModule,\n        UsersModule,\n        FilesModule,\n        PostsModule,\n        ConversationsModule,\n        MessagesModule,\n    ],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n        {\n            provide: APP_GUARD,\n            useClass: AtGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: RolesGuard,\n        },\n    ],\n})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer.apply(LoggerContextMiddleware).forRoutes('*');\n        //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n        //   .forRoutes(UsersController);\n        // .forRoutes('users');\n        // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n        // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor, Injectable, UseInterceptors } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\n@UseInterceptors(CacheInterceptor)\nexport class AppService {\n    constructor(@Logger('AppService') private logger: LoggerService) {}\n\n    getHello(): string {\n        this.logger.log('Hello World', '200');\n        return 'Hello World from Teneno!';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtGuard extends AuthGuard(ESTRATEGY.JWT) {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    // if true will enter with access-token , and another hand\n    public canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride('isPublic', [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n        if (isPublic) return true;\n\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, ESTRATEGY.JWT) {\n    constructor(private config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            ignoreExpiration: false,\n            passReqToCallback: false,\n        });\n    }\n\n    validate(payload: IJwtPayload): IJwtPayload {\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: undefined})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account.'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: undefined, type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { ITokens } from './dto/response';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {\n        this.authService = authService;\n    }\n\n    @Public()\n    @Post('signup')\n    @ApiOperation({ summary: 'Create new user account.' })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n        type: SignupDto,\n    })\n    async signupLocal(@Body() dto: SignupDto): Promise {\n        return this.authService.signupLocal(dto);\n    }\n\n    @Public()\n    @Post('signin')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Login to user account' })\n    async signinLocal(@Body() dto: LoginDto): Promise {\n        return this.authService.signinLocal(dto);\n    }\n\n    @Post('logout')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Logout user account (user)' })\n    async logout(@GetCurrentUserId() userId: string): Promise {\n        return this.authService.logout(userId);\n    }\n\n    @Post('refresh')\n    @ApiBearerAuth()\n    @UseGuards(RtGuard)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Logout account on all devices' })\n    async refreshToken(\n        @GetCurrentUserId() userId: string,\n        @GetCurrentUser('refreshToken') refreshToken: string,\n    ): Promise {\n        return this.authService.refreshToken(userId, refreshToken);\n    }\n\n    @Put('password')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Update user password' })\n    async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n        return this.authService.updatePassWord(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n    imports: [\n        PrismaModule,\n        JwtModule,\n        // HttpModule,\n        // JwtModule.registerAsync({\n        //   imports: [ConfigModule],\n        //   useFactory: async (configService: ConfigService) => ({\n        //     secret: configService.get(\"APP_SECRET\"),\n        //     signOptions: { expiresIn: configService.get(\"EXPIRE_AT_TIME\") },\n        //   }),\n        //   inject: [ConfigService],\n        // })\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, AtStrategy, RtStrategy],\n    exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ConflictException,\n    ForbiddenException,\n    Inject,\n    Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport { ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { AUTH_ERROR, SYSTEM_ERROR, USER_ERROR } from 'src/core/constants';\nimport { comparePassword, hashPassword } from 'src/core/helpers';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(ConfigService)\n        private configService: ConfigService,\n        private prismaService: PrismaService,\n        private jwtService: JwtService,\n    ) {}\n\n    async getTokens(userId: string, email: string): Promise {\n        const [at, rt] = await Promise.all([\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n                },\n            ),\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n                },\n            ),\n        ]);\n        return { accessToken: at, refreshToken: rt };\n    }\n\n    async updateRtHash(userId: string, rt: string) {\n        const hash = await hashPassword(rt);\n        await this.prismaService.user.update({\n            where: {\n                id: userId,\n            },\n            data: {\n                hashedRefreshToken: hash,\n            },\n        });\n    }\n\n    async signupLocal(dto: SignupDto): Promise {\n        const hash = await hashPassword(dto.password);\n\n        const userExist = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ email: dto.email }, { username: dto.username }],\n            },\n        });\n\n        if (userExist.length > 0)\n            throw new ConflictException(USER_ERROR.DUPLICATE);\n\n        const newUser = await this.prismaService.user.create({\n            data: {\n                email: dto.email,\n                password: hash,\n                username: dto.username,\n            },\n        });\n\n        const tokens = await this.getTokens(newUser.id, newUser.email);\n        await this.updateRtHash(newUser.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async signinLocal(dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const passwordMatches = await comparePassword(\n            dto.password,\n            user.password,\n        );\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async logout(userId: string): Promise {\n        await this.prismaService.user.updateMany({\n            where: {\n                id: userId,\n                hashedRefreshToken: {\n                    not: null,\n                },\n            },\n            data: { hashedRefreshToken: null },\n        });\n    }\n\n    async refreshToken(userId: string, refreshToken: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n        if (!user || !user.hashedRefreshToken)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const hashMatches = await comparePassword(\n            refreshToken,\n            user.hashedRefreshToken,\n        );\n        if (!hashMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async updatePassWord(dto: UpdatePasswordDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n\n        const passwordMatches = await comparePassword(\n            dto.oldPassword,\n            user.password,\n        );\n\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (dto.newPassword === dto.oldPassword)\n            throw new ForbiddenException(AUTH_ERROR.SAME_PASSWORD);\n\n        if (passwordMatches) {\n            await this.prismaService.user.update({\n                where: { email: dto.email },\n                data: {\n                    password: await hashPassword(dto.newPassword),\n                },\n            });\n        }\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\n\nexport class CommentEntity {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  reactions: number[];\n\n  @IsJSON()\n  @IsNotEmpty()\n  replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ConversationEntity {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty({ required: false, nullable: true })\n  description: string | null;\n\n  @ApiProperty()\n  avatar: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  @ApiProperty()\n  members: string[];\n\n  @ApiProperty()\n  creator: string;\n\n  @ApiProperty()\n  admins: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { ConversationsService } from './conversations.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetAllConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n    constructor(private readonly conversationsService: ConversationsService) {\n        this.conversationsService = conversationsService;\n    }\n\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create a new conversation (user)' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({\n        type: ConversationEntity,\n        description: 'The new conversation has been created.',\n    })\n    async createConversation(@Body() dto: CreateConversationDto) {\n        return await this.conversationsService.createConversation(dto);\n    }\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        isArray: true,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllConversations(@Body() dto: GetAllConversationDto) {\n        return this.conversationsService.getAllConversations(dto);\n    }\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getConversationById(\n        @Param('id') id: string,\n        @Body() dto: GetOneConversationDto,\n    ) {\n        return this.conversationsService.getConversationById(id, dto);\n    }\n\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    updateConversationById(\n        @Param('id') id: string,\n        @Body() dto: UpdateConversationDto,\n    ) {\n        return this.conversationsService.updateConversationById(id, dto);\n    }\n\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Delete one conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteConversationById(\n        @Param('id') id: string,\n        @Body() dto: DeleteConversationDto,\n    ) {\n        return this.conversationsService.deleteConversationById(id, dto);\n    }\n\n    @Patch(':conversationId/updateMembers')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update members list of current conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateMembersConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateMembersConversationDto,\n    ) {\n        return this.conversationsService.updateMembersConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/deleteAdmins')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Delete one admin of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteOneAdminConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: DeleteOneAdminConversationDto,\n    ) {\n        return this.conversationsService.deleteOneAdminConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/updateRoles')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Change role of any member of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateRolesConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateRolesConversationDto,\n    ) {\n        return this.conversationsService.updateRolesConversation(\n            conversationId,\n            dto,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_imports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [ConversationsController],\n    providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetAllConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\nimport { CONVERSATION_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class ConversationsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createConversation(dto: CreateConversationDto) {\n        const newConversation = await this.prismaService.conversation.create({\n            data: {\n                id: uuid(),\n                name: dto.name,\n                description: dto.description,\n                avatar: '',\n                members: dto.members,\n                admins: dto.admins,\n                creator: dto.creator,\n            },\n        });\n        return newConversation;\n    }\n\n    async getAllConversations(dto: GetAllConversationDto) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.userId,\n                    },\n                    {\n                        admins: {\n                            has: dto.userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: dto.userId,\n                        },\n                    },\n                ],\n            },\n            select: {\n                id: true,\n                name: true,\n                avatar: true,\n            },\n        });\n        return list;\n    }\n\n    async getConversationById(id: string, dto: GetOneConversationDto) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.userId,\n                    },\n                    {\n                        admins: {\n                            has: dto.userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: dto.userId,\n                        },\n                    },\n                ],\n                AND: {\n                    id: id,\n                },\n            },\n        });\n        return list;\n    }\n\n    updateConversationById(id: string, dto: UpdateConversationDto) {\n        const updated = this.prismaService.conversation.update({\n            where: {\n                id: id,\n            },\n            data: {\n                name: dto.name,\n                description: dto.description,\n                avatar: dto.avatar,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteConversationById(id: string, dto: DeleteConversationDto) {\n        const list = await this.prismaService.conversation.findUnique({\n            where: {\n                id: id,\n            },\n        });\n        if (list['creator'] === dto.userId) {\n            await this.prismaService.conversation.delete({\n                where: {\n                    id: id,\n                },\n            });\n            return '';\n        }\n        return false;\n    }\n\n    async updateMembersConversation(\n        conversationId: string,\n        dto: UpdateMembersConversationDto,\n    ) {\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteOneAdminConversation(\n        conversationId: string,\n        dto: DeleteOneAdminConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n        const updated = list[0]['admins'].filter(\n            (admin) => admin !== dto.userId,\n        );\n\n        await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: updated,\n            },\n        });\n        return updated;\n    }\n\n    async updateRolesConversation(\n        conversationId: string,\n        dto: UpdateRolesConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: dto.admins,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'creator01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01', required: false, nullable: true})@IsString()@IsNotEmpty()@Length(3, 120)@MinLength(2, {message: 'Description is too short, must be at least 3 characters!'})@MaxLength(121, {message: 'Description is too long, must be at most 120 characters!'})@Validate(usenameValidator, {message: 'Description must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01'})@IsString()@IsNotEmpty()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class CreateConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Name must be not begin with number!',\n  })\n  name: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n    required: false,\n    nullable: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 120)\n  @MinLength(2, {\n    message: 'Description is too short, must be at least 3 characters!',\n  })\n  @MaxLength(121, {\n    message: 'Description is too long, must be at most 120 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Description must be not begin with number!',\n  })\n  description?: string;\n\n  @ApiProperty({\n    type: String,\n    example: ['user01', 'user02'],\n  })\n  @IsArray()\n  members: string[];\n\n  @ApiProperty({\n    type: String,\n    example: ['admin01', 'admin02'],\n  })\n  @IsArray()\n  admins: string[];\n\n  @ApiProperty({\n    type: String,\n    example: 'creator01',\n  })\n  @IsString()\n  creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels } from '@nestjs/swagger';\n\n@ApiExtraModels()\nexport class CreateMessageDto {\n  id: string;\n  senderId: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetAllConversationDto } from './get-conversation.dto';\n\nexport class DeleteConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/errors.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/errors.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    BadGatewayException,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(\n                catchError((err) =>\n                    throwError(() => new BadGatewayException('Bad request...')),\n                ),\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionFilter.html":{"url":"classes/ExceptionFilter.html","title":"class - ExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/filters/rpc-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            RpcExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: RpcException)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/filters/rpc-exception.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            RpcException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, RpcExceptionFilter } from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { Observable, throwError } from 'rxjs';\n\n@Catch(RpcException)\nexport class ExceptionFilter implements RpcExceptionFilter {\n    catch(exception: RpcException): Observable {\n        return throwError(() => exception.getError());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/null.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(map((value) => (value === null ? '' : value)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n    constructor(private prismaService: PrismaService) {}\n\n    async use(req: Request, res: Response, next: NextFunction) {\n        const userId = req.params.userId;\n        const userExist = await this.prismaService.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n            },\n        });\n        if (\n            userExist === null ||\n            userExist === undefined ||\n            userExist.id === ''\n        ) {\n            throw new NotFoundException('User not found');\n        }\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/facebook.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (err: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-facebook';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.FACEBOOK,\n) {\n    constructor() {\n        super({\n            clientID: process.env.FACEBOOK_CLIENT_ID,\n            clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\n            callbackURL: process.env.FACEBOOK_CALLBACK_URL,\n            scope: 'email',\n            profileFields: ['emails', 'name'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: Profile,\n        done: (err: any, user: any, info?: any) => void,\n    ): Promise {\n        const { name, emails } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n        };\n        const payload = {\n            user,\n            accessToken,\n        };\n\n        done(null, payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    UploadedFile,\n    UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport {\n    ArrayFieldDecorator,\n    SingleFieldDecorator,\n    MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('files')\nexport class FileController {\n    constructor(private readonly fileService: FilesService) {}\n\n    @Post('avatar')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/avatars')\n    async uploadAvatar(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadAvatar(file);\n    }\n\n    @Post('cover')\n    @ApiOperation({ summary: 'Upload cover file form data (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/covers')\n    async uploadCover(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadCover(file);\n    }\n\n    @Post('posts')\n    @ApiOperation({ summary: 'Upload post with multi images (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ArrayFieldDecorator('files', true, 10, './public/posts')\n    async uploadPosts(\n        @UploadedFiles() files: Array,\n    ): Promise {\n        return this.fileService.uploadPosts(files);\n    }\n\n    @Post('multi')\n    @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @MultiFieldDecorator(\n        [\n            { name: 'item_1', maxCount: 1, required: true },\n            { name: 'item_2', maxCount: 1 },\n            { name: 'item_3', maxCount: 1 },\n            { name: 'item_4', maxCount: 1 },\n            { name: 'item_5', maxCount: 1 },\n        ],\n        './public/multi',\n    )\n    async uploadMulti(\n        @UploadedFiles() files: Express.Multer.File[],\n    ): Promise {\n        return this.fileService.uploadMulti(files);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileService.html":{"url":"classes/FileService.html","title":"class - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/services/file.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadAvatar\n                            \n                            \n                                uploadCover\n                            \n                            \n                                uploadPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \nuploadAvatar(data: UploadAvatarDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadCover\n                        \n                    \n                \n            \n            \n                \nuploadCover(data: UploadCoverDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPost\n                        \n                    \n                \n            \n            \n                \nuploadPost(data: UploadPostsDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadPostsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { UploadAvatarDto, UploadCoverDto, UploadPostsDto } from '@/dto';\nimport axiosConfig from './axios.config';\n\nconst ENDPOINT = '/files';\n\nexport class FileService {\n    uploadAvatar(data: UploadAvatarDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/avatar`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadCover(data: UploadCoverDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/cover`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadPost(data: UploadPostsDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/posts`;\n\n        const formData = new FormData();\n        formData.append('files', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/get-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/google.strategy.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/google.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\nimport { Injectable } from '@nestjs/common';\nimport { ESTRATEGY } from 'src/core/constants';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.GOOGLE,\n) {\n    constructor() {\n        super({\n            clientID: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: process.env.GOOGLE_CALLBACK_URL,\n            scope: ['email', 'profile'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: any,\n        done: VerifyCallback,\n    ): Promise {\n        const { name, emails, photos } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n            picture: photos[0].value,\n            accessToken,\n        };\n        done(null, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                readiness\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        readiness\n                        \n                    \n                \n            \n            \n                \n                    \n                    readiness()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Health check for server system'})@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n    DiskHealthIndicator,\n    HealthCheck,\n    HealthCheckResult,\n    HealthCheckService,\n    MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Health')\n@Public()\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private memory: MemoryHealthIndicator,\n        private disk: DiskHealthIndicator,\n    ) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Health check for server system' })\n    @HealthCheck()\n    async readiness(): Promise {\n        return await this.health.check([\n            async () => await this.memory.checkRSS('mem_rss', 768 * 2 ** 20),\n            async () =>\n                await this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n            async () =>\n                await this.disk.checkStorage('storage', {\n                    path: '/',\n                    thresholdPercent: 0.5,\n                }),\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/http-cache.interceptor.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n    trackBy(context: ExecutionContext): string | undefined {\n        const request = context.switchToHttp().getRequest();\n        const { httpAdapter } = this.httpAdapterHost;\n\n        const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';\n        const excludePaths = [];\n        if (\n            !isGetRequest ||\n            (isGetRequest &&\n                excludePaths.includes(httpAdapter.getRequestUrl(request)))\n        ) {\n            return undefined;\n        }\n        return httpAdapter.getRequestUrl(request);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IApp.html":{"url":"interfaces/IApp.html","title":"interface - IApp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IApp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/helpers/app.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ThemeManager } from './theme';\n\nexport interface IApp {\n    name: string;\n    author: {\n        name: string;\n        link: string;\n    };\n}\n\nexport function AppSetup() {\n    const app: IApp = {\n        name: 'Nuxt 3 Awesome Starter',\n        author: {\n            name: 'viandwi24',\n            link: 'https://github.com/viandwi24',\n        },\n    };\n    useState('app', () => app);\n\n    const themeManager = ThemeManager();\n\n    // vue transition bug handle\n    const messages = [\n        \"Uncaught NotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\",\n        'NotFoundError: The object can not be found here.',\n    ];\n    if (typeof window !== 'undefined') {\n        window.addEventListener('error', (ev) => {\n            if (messages.includes(ev.message)) {\n                ev.preventDefault();\n                window.location.reload();\n            }\n        });\n    }\n\n    return {\n        app,\n        themeManager,\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\nimport { ErrorsInterceptor } from './errors.interceptor';\nimport { ExcludeNullInterceptor } from './null.interceptor';\nimport { TimeoutInterceptor } from './timeout.interceptor';\n\n@Module({\n    providers: [\n        { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ExcludeNullInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: TimeoutInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ErrorsInterceptor },\n    ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MathController.html":{"url":"controllers/MathController.html","title":"controller - MathController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MathController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                math\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                execute\n                            \n                            \n                                sum\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Calculate check sum pattern'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sum\n                        \n                    \n                \n            \n            \n                \nsum(data: number[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'sum'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus, Inject } from '@nestjs/common';\nimport { ClientProxy, MessagePattern } from '@nestjs/microservices';\nimport {\n    ApiConflictResponse,\n    ApiInternalServerErrorResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { Public } from 'src/infrastructure/auth/decorators';\nimport { MATH_SERVICE } from '../constants/math.constant';\n\n@ApiTags('Microservices')\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('math')\nexport class MathController {\n    constructor(@Inject(MATH_SERVICE) private readonly client: ClientProxy) {}\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Calculate check sum pattern' })\n    execute(): Observable {\n        const pattern = { cmd: 'sum' };\n        const data = [1, 2, 3, 4, 5];\n        return this.client.send(pattern, data);\n    }\n\n    @MessagePattern({ cmd: 'sum' })\n    sum(data: number[]): number {\n        return (data || []).reduce((a, b) => a + b);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MathModule.html":{"url":"modules/MathModule.html","title":"module - MathModule","body":"\n                   \n\n\n\n\n    Modules\n    MathModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            MathController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { MATH_SERVICE } from '../constants/math.constant';\nimport { MathController } from './math.controller';\n\n@Module({\n    imports: [\n        ClientsModule.register([\n            { name: MATH_SERVICE, transport: Transport.TCP },\n        ]),\n    ],\n    controllers: [MathController],\n})\nexport class MathModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesGateway.html":{"url":"classes/MessagesGateway.html","title":"class - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                typing\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(conversationId: string, createMessageDto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinConversation')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(conversationId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\n\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n  @WebSocketServer() server: Server;\n  constructor(private readonly messagesService: MessagesService) {}\n\n  @SubscribeMessage('joinConversation')\n  joinConversation(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('senderId') senderId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    return this.messagesService.joinConversation(\n      conversationId,\n      senderId,\n      client.id,\n    );\n  }\n\n  @SubscribeMessage('findAllMessages')\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\n    return this.messagesService.findAllMessages(conversationId);\n  }\n\n  @SubscribeMessage('createMessage')\n  async createMessage(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody() createMessageDto: CreateMessageDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const message = await this.messagesService.createMessage(\n      conversationId,\n      createMessageDto,\n      client.id,\n    );\n    this.server.emit('message', message);\n    return message;\n  }\n\n  @SubscribeMessage('typing')\n  async typing(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('isTyping') isTyping: boolean,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const name = await this.messagesService.getMember(\n      conversationId,\n      client.id,\n    );\n\n    client.broadcast.emit('typing', { senderId: name, isTyping });\n  }\n\n  @SubscribeMessage('updateMessage')\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n\n  @SubscribeMessage('removeMessage')\n  async remove(@MessageBody() message: string) {\n    const refresh = await this.messagesService.remove(message);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                getMember\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMessage\n                        \n                    \n                \n            \n            \n                \ncreateMessage(conversationId: string, createMessageDto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: any; senderId: any; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMember\n                        \n                    \n                \n            \n            \n                \ngetMember(conversationId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class MessagesService {\n  conversations = [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ];\n\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\n    this.conversations.find((element) => element.id === conversationId).members[\n      clientId\n    ] = senderId;\n    return Object.values(\n      this.conversations.find((element) => element.id === conversationId)\n        .members,\n    );\n  }\n\n  findAllMessages(conversationId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .messages;\n  }\n\n  getMember(conversationId: string, clientId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .members[clientId];\n  }\n\n  createMessage(\n    conversationId: string,\n    createMessageDto: CreateMessageDto,\n    clientId: string,\n  ) {\n    const message = {\n      id: uuid(),\n      senderId: this.getMember(conversationId, clientId),\n      text: createMessageDto.text,\n    };\n    this.conversations\n      .find((element) => element.id === conversationId)\n      .messages.push(message);\n    return message;\n  }\n\n  updateMessage(updateMessageDto: UpdateMessageDto) {\n    this.conversations.forEach((element) => {\n      if (element.id === updateMessageDto['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === updateMessageDto['messageId']) {\n            item.text = updateMessageDto['text'];\n          }\n        });\n      }\n    });\n    return this.findAllMessages(updateMessageDto['conversationId']);\n  }\n\n  async remove(message: string) {\n    this.conversations.forEach((element) => {\n      if (element.id === message['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === message['messageId']) {\n            element.messages.splice(element.messages.indexOf(item), 1);\n          }\n        });\n      }\n    });\n\n    return this.findAllMessages(message['conversationId']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NatsStrategy.html":{"url":"classes/NatsStrategy.html","title":"class - NatsStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NatsStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ServerNats\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        bindEvents\n                        \n                    \n                \n            \n            \n                \nbindEvents(client: any)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/strategies/nats.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NatsSubscriber.html":{"url":"interfaces/NatsSubscriber.html","title":"interface - NatsSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NatsSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OauthController.html":{"url":"controllers/OauthController.html","title":"controller - OauthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OauthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookAuthRedirect\n                            \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                githubAuthRedirect\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookAuthRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubAuthRedirect(req: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/redirect')@ApiOperation({summary: 'Create login callback with your Github account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Google account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Google account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Query,\n    Req,\n    UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\nimport { Public } from '../auth/decorators';\nimport { OauthService } from './oauth.service';\nimport { Request } from 'express';\n\n@ApiTags('OAuth')\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('oauth')\nexport class OauthController {\n    constructor(private readonly oauthService: OauthService) {}\n\n    @Get('facebook')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Connect to your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async facebookLogin(): Promise {\n        return HttpStatus.OK;\n    }\n\n    @Get('facebook/redirect')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async facebookAuthRedirect(@Req() req: Request): Promise {\n        return this.oauthService.facebookLogin(req);\n    }\n\n    @Get('google')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary: 'Connect to your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async googleAuth(@Req() req: Request): Promise {\n        return req;\n    }\n\n    @Get('google/redirect')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async googleAuthRedirect(@Req() req: Request): Promise {\n        return this.oauthService.googleLogin(req);\n    }\n\n    @Get('github/redirect')\n    @ApiOperation({\n        summary:\n            'Create login callback with your Github account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async githubAuthRedirect(@Query() req: string) {\n        return this.oauthService.githubRedirect(req);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OauthModule.html":{"url":"modules/OauthModule.html","title":"module - OauthModule","body":"\n                   \n\n\n\n\n    Modules\n    OauthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_imports\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OauthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OauthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OauthService } from './oauth.service';\nimport { OauthController } from './oauth.controller';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { AuthModule } from '../auth/auth.module';\nimport { FacebookStrategy } from './strategies/facebook.strategy';\n\n@Module({\n    imports: [AuthModule],\n    controllers: [OauthController],\n    providers: [OauthService, GoogleStrategy, FacebookStrategy],\n    exports: [OauthService],\n})\nexport class OauthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OauthService.html":{"url":"injectables/OauthService.html","title":"injectable - OauthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OauthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                githubRedirect\n                            \n                            \n                                    Async\n                                githubSuccess\n                            \n                            \n                                    Async\n                                googleLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/oauth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubRedirect(req: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubSuccess(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { axiosRequest } from 'src/core/helpers';\nimport { AuthService } from '../auth/auth.service';\nimport { SignupDto } from '../auth/dto/request';\n\n@Injectable()\nexport class OauthService {\n    constructor(private readonly authService: AuthService) {}\n\n    async facebookLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from google';\n        }\n\n        const payload = {\n            email: req.user.user.email,\n            password: req.user.user.email,\n            username: req.user.user.email,\n        } as SignupDto;\n\n        await this.authService.signupLocal(payload);\n\n        return await this.authService.signinLocal(payload);\n    }\n\n    async googleLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from google';\n        }\n\n        const payload = {\n            email: req.user.email,\n            password: req.user.email,\n            username: req.user.email,\n        } as SignupDto;\n\n        await this.authService.signupLocal(payload);\n\n        return await this.authService.signinLocal(payload);\n    }\n\n    async githubRedirect(req: string) {\n        // client must request to this url https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email\n        if (!req) {\n            return 'Not found user from github';\n        }\n\n        const requestToken = req['code'];\n\n        const data = await axiosRequest(\n            'post',\n            `https://github.com/login/oauth/access_token?client_id=${process.env.GITHUB_CLIENT_ID}&client_secret=${process.env.GITHUB_SECRET}&code=${requestToken}`,\n            { accept: 'application/json' },\n        );\n        return await this.githubSuccess(data.access_token);\n    }\n\n    async githubSuccess(token: string) {\n        const data = await axiosRequest('get', 'https://api.github.com/user', {\n            Authorization: 'token ' + token,\n        });\n        const payload = {\n            email: data.email || `${data.login}@gmail.com`,\n            password: data.id.toString(),\n            username: data.login,\n        } as SignupDto;\n        await this.authService.signupLocal(payload);\n        return await this.authService.signinLocal(payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                limit\n                            \n                            \n                                order\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 1, nullable: true, description: 'Page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 10, nullable: true, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, description: 'asc, desc', example: 'asc', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    example: 1,\n    nullable: true,\n    description: 'Page number',\n  })\n  current: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    example: 10,\n    nullable: true,\n    description: 'Number of items per page',\n  })\n  limit: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    description: 'asc, desc',\n    example: 'asc',\n    nullable: true,\n  })\n  order: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                published\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class PostEntity {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  files: string[];\n\n  @IsBoolean()\n  @IsNotEmpty()\n  published: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n    ParseUUIDPipe,\n    Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    UpdatePostDto,\n    ReactionsPost,\n} from './dto/post/request';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Posts')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('posts')\nexport class PostsController {\n    constructor(private postsService: PostsService) {}\n\n    @Post()\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Get all posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({ description: 'Create new post successfuly' })\n    async createPost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreatePostDto,\n    ): Promise {\n        return this.postsService.createPost(userId, dto);\n    }\n\n    @Post('private/all')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get all public and private posts of user',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPostsOfUser(\n        @GetCurrentUserId() userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPostsOfUser(userId);\n    }\n\n    @Get(':userId/all')\n    @Public()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all public posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPublicPosts(\n        @Param('userId', new ParseUUIDPipe()) userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPublicPosts(userId);\n    }\n\n    @Get(':postId')\n    @Public()\n    @ApiOperation({ summary: 'Get one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getOnePostById(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        return this.postsService.getOnePostById(postId);\n    }\n\n    @Patch('update')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updatePost(@Body() dto: UpdatePostDto): Promise {\n        return this.postsService.updatePost(dto);\n    }\n\n    @Delete('delete')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deletePost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: DeleteOnePost,\n    ): Promise {\n        return this.postsService.deletePost(userId, dto);\n    }\n\n    @Post('reaction')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'React to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async reactionPost(@Body() dto: ReactionsPost): Promise {\n        return this.postsService.reactionPost(dto);\n    }\n\n    @Public()\n    @Get(':postId/comments')\n    @ApiOperation({ summary: 'Get all comments of the post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllComments(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        console.log(postId);\n        return this.postsService.getAllComments(postId);\n    }\n\n    @Post('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Add a new comment to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async addComment(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreateCommentDto,\n    ): Promise {\n        return this.postsService.addComment(userId, dto);\n    }\n\n    @Put('comments/update/text')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateComment(\n        @Body() dto: UpdateCommentTextDto,\n    ): Promise {\n        return this.postsService.updateComment(dto);\n    }\n\n    @Delete('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteComment(@Body() dto: DeleteCommentDto): Promise {\n        return this.postsService.deleteComment(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [PostsController],\n    providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    ReactionsPost,\n    UpdatePostDto,\n} from './dto/post/request';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { POST_ERROR, RESPONSES_MESSAGE, USER_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class PostsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createPost(userId: string, dto: CreatePostDto): Promise {\n        const post = await this.prismaService.post.create({\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                authorId: userId,\n                // categories: {\n                //   create: [\n                //     {\n                //       createAt: new Date(),\n                //       category: {\n                //         create: {\n                //           id: uuid(),\n                //           name: 'New category',\n                //         },\n                //       },\n                //     },\n                //   ],\n                // },\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n            },\n        });\n        return post;\n    }\n\n    async getAllPostsOfUser(userId: string): Promise | null {\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllPublicPosts(userId: string): Promise | null {\n        const list = await this.prismaService.user.findMany({\n            where: {\n                id: userId,\n            },\n            select: {\n                writtenPosts: {\n                    select: {\n                        id: true,\n                    },\n                },\n            },\n        });\n        if (!list) {\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        }\n        if (list.length === 0) {\n            throw new NotFoundException(POST_ERROR.EMPTY);\n        }\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n                published: true,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getOnePostById(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async updatePost(dto: UpdatePostDto): Promise {\n        const list = await this.getOnePostById(dto.postId);\n\n        if (!list) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (list.authorId !== dto.authorId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        return await this.prismaService.post.update({\n            where: {\n                id: dto.postId,\n            },\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                published: dto.published,\n            },\n            select: {\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deletePost(userId: string, dto: DeleteOnePost): Promise {\n        const identify = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                authorId: true,\n            },\n        });\n\n        if (!identify) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (identify.authorId !== userId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        await this.prismaService.post.delete({\n            where: {\n                id: dto.postId,\n            },\n        });\n        return 'This post has been deleted!';\n    }\n\n    async reactionPost(dto: ReactionsPost): Promise {\n        const checkExist = await this.prismaService.reaction.findMany({\n            where: {\n                postId: dto.postId,\n                userId: dto.favouritorId,\n            },\n        });\n\n        if (checkExist.length > 0) {\n            throw new BadRequestException('You already reacted to this post');\n        }\n        await this.prismaService.reaction.create({\n            data: {\n                userId: dto.favouritorId,\n                postId: dto.postId,\n                type: dto.reactionType,\n            },\n        });\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllComments(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                comments: true,\n            },\n        });\n    }\n\n    async addComment(\n        userId: string,\n        dto: CreateCommentDto,\n    ): Promise {\n        const checkPost = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n        });\n\n        if (!checkPost) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n        return this.prismaService.comment.create({\n            data: {\n                text: dto.text,\n                postId: dto.postId,\n                authorId: userId,\n            },\n        });\n    }\n\n    async updateComment(dto: UpdateCommentTextDto): Promise {\n        return await this.prismaService.comment.update({\n            where: {\n                id: dto.id,\n            },\n            data: {\n                text: dto.text,\n            },\n            select: {\n                text: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deleteComment(dto: DeleteCommentDto): Promise {\n        await this.prismaService.comment.delete({\n            where: {\n                id: dto.id,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_COMMENT;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService, ConfigModule],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/abstraction/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    super({\n      datasources: {\n        db: {\n          url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n          // url: process.env.DATABASE_URL,\n        },\n      },\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { EROLE } from '../constants';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    canActivate(context: ExecutionContext): boolean {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            'roles',\n            [context.getHandler(), context.getClass()],\n        );\n        if (!requiredRoles) {\n            return true;\n        }\n        // return false;\n        const { request } = context.switchToHttp().getRequest();\n        const user = request.user;\n        const hasRole = () =>\n            user.roles.some((role) => user.roles.includes(role));\n\n        return user && user.roles && hasRole();\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:4\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\nexport class RtGuard extends AuthGuard(ESTRATEGY.JWT_REFRESH) {\n    constructor() {\n        super();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.JWT_REFRESH,\n) {\n    constructor(\n        @Inject(ConfigService)\n        private config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            passReqToCallback: true,\n        });\n    }\n\n    validate(req: Request, payload: any) {\n        const refreshToken = req\n            .get('authorization')\n            .replace('Bearer', '')\n            .trim();\n        return {\n            ...payload,\n            refreshToken,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(5000),\n            catchError((err) => {\n                if (err instanceof TimeoutError) {\n                    return throwError(() => new RequestTimeoutException());\n                }\n                return throwError(() => err);\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(\n  CreateMessageDto,\n) {\n  id: string;\n  conversationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from 'src/infrastructure/users/entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, [\n  'email',\n  'oldPassword',\n  'newPassword',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAvatarDto.html":{"url":"classes/UpdateUserAvatarDto.html","title":"class - UpdateUserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCoverDto.html":{"url":"classes/UpdateUserCoverDto.html","title":"class - UpdateUserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:75\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:101\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:111\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:88\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:51\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:65\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:58\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:83\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport { UsersService } from './users.service';\nimport {\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('users')\nexport class UsersController {\n    constructor(private usersService: UsersService) {\n        this.usersService = usersService;\n    }\n\n    @Public()\n    @Get('profile/:userIdOrUsername')\n    @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getPublicUserByIdOrUsername(\n        @Param('userIdOrUsername') userIdOrUsername: string,\n    ): Promise {\n        return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n    }\n\n    @Public()\n    @Get('find/:email')\n    @ApiOperation({ summary: 'Find user account by email' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getUserByEmail(\n        @Param('email') email: string,\n    ): Promise {\n        return this.usersService.getUserByEmail(email);\n    }\n\n    @Get()\n    @ApiBearerAuth()\n    @ApiOperation({\n        summary: 'Get user profile by user-id (all)',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @GetCurrentUserId() userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersProfile(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('profile/avatar')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersAvatar(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('profile/cover')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image by user id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersCover(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user profile by email & password' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUser(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: LoginDto,\n    ): Promise {\n        return this.usersService.deleteUser(userId, dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n    imports: [PrismaModule, AuthModule],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        // consumer\n        //   .apply(ExistedUserMiddleware)\n        //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotAcceptableException,\n    NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport {\n    IAllUsers,\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport {\n    AUTH_ERROR,\n    EORDER,\n    RESPONSES_MESSAGE,\n    SYSTEM_ERROR,\n    USER_ERROR,\n} from 'src/core/constants';\n\n@Injectable()\nexport class UsersService {\n    constructor(private prismaService: PrismaService) {}\n\n    async getAllUsers(dto: PaginationDto): Promise {\n        const total = await this.prismaService.user.count();\n        const users = await this.prismaService.user.findMany({\n            // skip: Number(dto.limit) * (Number(dto.current) - 1),\n            take: Number(dto.limit) || 10,\n            orderBy: {\n                id: dto.order as any,\n            },\n            select: {\n                id: true,\n                email: true,\n                username: true,\n                createdAt: true,\n            },\n        });\n        return {\n            total,\n            orderBy: dto.order || EORDER.ASC,\n            pageItems: users.length,\n            pageLimit: Number(dto.limit) || 10,\n            pageCurrent: Number(dto.current) || 1,\n            users: users,\n        };\n    }\n\n    async getPublicUserByIdOrUsername(\n        userIdOrUsername: string,\n    ): Promise {\n        const identify = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n            },\n        });\n        if (identify.length === 0)\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify[0];\n    }\n\n    async getUserByEmail(email: string): Promise {\n        const identify = await this.prismaService.user.findUnique({\n            where: {\n                email: email,\n            },\n            select: {\n                username: true,\n                email: true,\n            },\n        });\n\n        if (!identify) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify;\n    }\n\n    async getUserProfile(userId: string): Promise {\n        const profile = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n                updatedAt: true,\n            },\n        });\n\n        if (!profile) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return profile;\n    }\n\n    async updateUsersProfile(\n        userId: string,\n        dto: UpdateUserProfileDto,\n    ): Promise {\n        await this.prismaService.userProfile.upsert({\n            where: {\n                userId: userId,\n            },\n            create: {\n                ...dto,\n                userId: userId,\n            },\n            update: {\n                ...dto,\n            },\n        });\n        const newProfile = await this.getPublicUserByIdOrUsername(userId);\n        return newProfile;\n    }\n\n    async updateUsersAvatar(\n        userId: string,\n        dto: UpdateUserAvatarDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newAvatar = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        avatar: true,\n                    },\n                },\n            },\n        });\n        return newAvatar;\n    }\n\n    async updateUsersCover(\n        userId: string,\n        dto: UpdateUserCoverDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newCover = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        cover: true,\n                    },\n                },\n            },\n        });\n        return newCover;\n    }\n\n    async deleteUser(userId: string, dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                email: true,\n                password: true,\n            },\n        });\n\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const matchEmail: number = dto.password.localeCompare(user.password);\n        const matchPassword: boolean = await comparePassword(\n            dto.password,\n            user.password,\n        );\n\n        if (matchEmail === 0 || !matchPassword)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (!matchPassword)\n            throw new NotAcceptableException(AUTH_ERROR.PASSWORD_NOT_MATCH);\n\n        await this.prismaService.userProfile.delete({\n            where: {\n                userId: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n\n    async deleteUserById(userId: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n\n        if (!user) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n\n        await this.prismaService.user.delete({\n            where: {\n                id: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n1.5.0 - 2022-09-03\nAdded\n\nPosts endpoints module\nCreate comment for post\nUpdate README document\nGenerate Nest documentation\nCreate admin module\n\nSource code (.zip)\nSource code (.tar.gz)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/composables/count.ts\n            \n            function\n            useCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/useSticky.ts\n            \n            variable\n            useSticky\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/user.ts\n            \n            variable\n            useUserStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            interface\n            IApp\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            function\n            AppSetup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/str.ts\n            \n            function\n            capitalize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            function\n            ThemeManager\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            variable\n            availableThemes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            count\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            startAt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            class\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/axios.config.ts\n            \n            variable\n            axiosConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            class\n            ConversationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            class\n            FileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            class\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            class\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            Alert\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            AlertOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            useAlertsStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/constants/math.constant.ts\n            \n            variable\n            MATH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/filters/rpc-exception.filter.ts\n            \n            class\n            ExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/math/math.controller.ts\n            \n            controller\n            MathController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            class\n            NatsStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            interface\n            NatsSubscriber\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/setup.config.ts\n            \n            function\n            setup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.config.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            AUTH_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            CONVERSATION_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            POST_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            RESPONSES_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            STATUS_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            SYSTEM_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            USER_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/axios.ts\n            \n            variable\n            axiosRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/errors.interceptor.ts\n            \n            injectable\n            ErrorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            randomInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            class\n            MessagesGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.controller.ts\n            \n            controller\n            OauthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.service.ts\n            \n            injectable\n            OauthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            nodeExternals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.2.1\n        \n            @types/passport-facebook : ^2.1.11\n        \n            @types/passport-jwt : ^3.0.6\n        \n            axios : ^0.27.2\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : ^4.2.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EORDER   (src/.../options.enum.ts)\n                        \n                        \n                            EROLE   (src/.../options.enum.ts)\n                        \n                        \n                            ESTRATEGY   (src/.../options.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/options.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EORDER\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ESTRATEGY\n                    \n                \n                        \n                            \n                                 JWT\n                            \n                        \n                        \n                            \n                                Value : jwt\n                            \n                        \n                        \n                            \n                                 JWT_REFRESH\n                            \n                        \n                        \n                            \n                                Value : jwt-refresh\n                            \n                        \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppSetup   (client/.../app.ts)\n                        \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                        \n                            capitalize   (client/.../str.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            randomInt   (src/.../random.ts)\n                        \n                        \n                            setup   (src/.../setup.config.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            ThemeManager   (client/.../theme.ts)\n                        \n                        \n                            useCount   (client/.../count.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/helpers/app.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppSetup\n                        \n                    \n                \n            \n            \n                \nAppSetup()\n                \n            \n\n\n\n\n        \n    \n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    client/helpers/str.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInt\n                        \n                    \n                \n            \n            \n                \nrandomInt(min: number, max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/configs/setup.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setup\n                        \n                    \n                \n            \n            \n                \nsetup(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ThemeManager\n                        \n                    \n                \n            \n            \n                \nThemeManager()\n                \n            \n\n\n\n\n        \n    \n    client/composables/count.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useCount\n                        \n                    \n                \n            \n            \n                \nuseCount()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\nProject documentation\n\nDatabase diagram\n\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAdmin\nAuth\n\n\n\n\n✅ Get list all users\n✅ Signup\n\n\n✅ Get user profile by id\n✅ Signin\n\n\n✅ Update user profile\n✅ Signout\n\n\n✅ Delete user by user-id\n✅ Refresh access-token\n\n\n\n✅  Update password\n\n\n\n\n\n\nOAuth\nFiles\n\n\n\n\n✅ Google signin\n✅ Upload single file (avatar, cover)\n\n\n✅ Facebook signin\n✅ Upload multi files\n\n\n✅ Github signin\n✅ Upload array-field files (post, sample_image)\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅ Create a new post\n\n\n✅ Find user account by email\n✅ Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅ Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅ Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅ Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅ Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\nWebpack hot-reload auto recompile the entire project each time a change occurs\ngRPC support to run in any environment across data centers based on the concept of defining a service in terms of functions (methods) that called remotely\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nPostgre x Heroku\nNest x Prisma\ngRPC for Microservice\n\n\n\nExample templates\n\nNest example\nNest awesome\nNest structure\nNest auth example\nNest social login\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nnpm run prisma:pull\n\n# generate the Prisma Client\nnpm run prisma:generate\n\n# Create env and migrate db\nnpm run prisma:migrate\n\n# Sync migrate change to db\nnpm run prisma:push# Open prisma studio\nnpm run prisma:studioRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MathModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OauthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    48 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.6.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github, chat, socket, passport, jwt, oauth2\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlertStyle   (client/.../AlertsStore.ts)\n                        \n                        \n                            CreateNewConversationDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteConversationAdminsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteOnePostDto   (client/.../posts.dto.ts)\n                        \n                        \n                            DeleteUserProfile   (client/.../users.dto.ts)\n                        \n                        \n                            GetAllConversationsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            GetAllPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicUsersDto   (client/.../users.dto.ts)\n                        \n                        \n                            GetUserProfileDto   (client/.../users.dto.ts)\n                        \n                        \n                            ITheme   (client/.../theme.ts)\n                        \n                        \n                            IThemeSettingOptions   (client/.../theme.ts)\n                        \n                        \n                            SignUpLocalDto   (client/.../auth.dto.ts)\n                        \n                        \n                            UpdateConversationMembersDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateConversationRoles   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateOneConversationByIdDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdatePostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            UploadAvatarDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadCoverDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            UploadPostsDto   (client/.../files.dto.ts)\n                        \n                        \n                            UpsertReactPostDto   (client/.../posts.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/stores/AlertsStore.ts\n    \n    \n        \n            \n                \n                    \n                    AlertStyle\n                \n            \n            \n                \n                        \"error\" | \"success\" | \"warning\" | \"info\" | \"none\"\n\n                \n            \n        \n    \n    client/dto/conversations.dto.ts\n    \n    \n        \n            \n                \n                    \n                    CreateNewConversationDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteConversationAdminsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllConversationsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationMembersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationRoles\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateOneConversationByIdDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/posts.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteOnePostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdatePostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpsertReactPostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/users.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteUserProfile\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicUsersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetUserProfileDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n    \n        \n            \n                \n                    \n                    ITheme\n                \n            \n            \n                \n                        \"dark\" | \"light\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IThemeSettingOptions\n                \n            \n            \n                \n                        \"dark\" | \"light\" | \"system\" | \"realtime\"\n\n                \n            \n        \n    \n    client/dto/auth.dto.ts\n    \n    \n        \n            \n                \n                    \n                    SignUpLocalDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/files.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UploadAvatarDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadCoverDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            availableThemes   (client/.../theme.ts)\n                        \n                        \n                            axiosConfig   (client/.../axios.config.ts)\n                        \n                        \n                            axiosRequest   (src/.../axios.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            CONVERSATION_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            count   (client/.../pageview.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            defaultOptions   (client/.../AlertsStore.ts)\n                        \n                        \n                            ENDPOINT   (client/.../auth.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../conversations.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../file.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../posts.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../user.service.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.config.ts)\n                        \n                        \n                            MATH_SERVICE   (src/.../math.constant.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            nodeExternals   (webpack-hmr.config.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            POST_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSES_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            startAt   (client/.../pageview.ts)\n                        \n                        \n                            STATUS_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            SYSTEM_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                               (webpack-hmr.config.ts)\n                        \n                        \n                            useAlertsStore   (client/.../AlertsStore.ts)\n                        \n                        \n                            USER_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            useSticky   (client/.../useSticky.ts)\n                        \n                        \n                            useUserStore   (client/.../user.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/status-message.enum.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SAME_PASSWORD: 'New password must be different from old password',\n    PASSWORD_NOT_MATCH: 'Password does not match',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CONVERSATION_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Conversation not found',\n    NOT_CREATOR: 'You are not creator of this conversation',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Post not found',\n    EMPTY: 'User not have post',\n    DUPLICATE: 'Post already exist',\n    NOT_AUTHOR: 'You are not author of this post',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSES_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CREATE_USER: 'The new account has been created.',\n    DELETE_USER: 'The user account has been deleted.',\n    DELETE_COMMENT: 'The comment has been deleted.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATUS_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SUCCESS: 'Success.',\n    ERROR: 'Errors.',\n    WARNING: 'Warning.',\n    INFO: 'Info.',\n    UNKNOWN: 'Unknown.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    FORBIDDEN: 'Access denied',\n    NOT_FOUND: 'Not found',\n    INTERNAL_SERVER_ERROR: 'Internal server error',\n    BAD_REQUEST: 'Bad request',\n    UNAUTHORIZED: 'Unauthorized',\n    CONFLICT: 'Conflict',\n    TOO_MANY_REQUESTS: 'Too many requests',\n    METHOD_NOT_ALLOWED: 'Method not allowed',\n    NOT_ACCEPTABLE: 'Provided fields are not acceptable',\n    REQUEST_TIMEOUT: 'Request timeout',\n    PAYLOAD_TOO_LARGE: 'Payload too large',\n    UNSUPPORTED_MEDIA_TYPE: 'Unsupported media type',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'User not found',\n    DUPLICATE: 'User already exist',\n}\n                    \n                \n\n\n        \n    \n\n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        availableThemes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { key: 'light', text: 'Light' },\n    { key: 'dark', text: 'Dark' },\n    { key: 'system', text: 'System' },\n    { key: 'realtime', text: 'Realtime' },\n]\n                    \n                \n\n\n        \n    \n\n    client/services/axios.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                \n                    \n                        Default value : axios.create({\n    baseURL: import.meta.env.VITE_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n    },\n}) as AxiosInstance\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/axios.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    method: string,\n    url: string,\n    headers?: any,\n) => {\n    return await axios({\n        method: method,\n        url: url,\n        headers: headers,\n    }).then(async (response: any) => await response.data);\n}\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    client/server/api/pageview.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startAt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Date.now()\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    client/stores/AlertsStore.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        useAlertsStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n})\n                    \n                \n\n\n        \n    \n\n    client/services/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/auth'\n                    \n                \n\n\n        \n    \n\n    client/services/conversations.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/conversations'\n                    \n                \n\n\n        \n    \n\n    client/services/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/files'\n                    \n                \n\n\n        \n    \n\n    client/services/posts.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/posts'\n                    \n                \n\n\n        \n    \n\n    client/services/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/users'\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n    const config: ConfigService = app.get(ConfigService);\n\n    const swaggerConfig = new DocumentBuilder()\n        .setTitle('Teneno API')\n        .setDescription(\n            `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n        )\n        .setContact(\n            'Thuong Truong',\n            'https://github.com/thuongtruong1009',\n            'ititiu19228@student.hcmiu.edu.vn',\n        )\n        .addServer(config.get('BASE_URL'))\n        .addServer(config.get('HOST_URL'))\n        .setVersion('1.6.0')\n        // .addTag('cats', 'default description')\n        .addBearerAuth({\n            type: 'http',\n            scheme: 'Bearer',\n            bearerFormat: 'JWT',\n            description: 'Paste a valid access token here.',\n            in: 'Header',\n        })\n        .addOAuth2({\n            type: 'oauth2',\n            description: 'Login with Google account',\n            flows: {\n                implicit: {\n                    authorizationUrl: config.get('GOOGLE_CALLBACK_URL'),\n                    scopes: {\n                        'user:write': 'create your account',\n                        'user:read': 'read your account',\n                    },\n                },\n            },\n        })\n        .addCookieAuth('optional-session-id')\n        .addBasicAuth()\n        .addSecurity('api_key', {\n            type: 'apiKey',\n            name: 'api_key',\n            in: 'header',\n        })\n        .build();\n\n    const options: ISwaggerOptions = {\n        operationIdFactory: (controllerKey: string, methodKey: string) =>\n            methodKey,\n    };\n    const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n    SwaggerModule.setup('api', app, document, {\n        swaggerOptions: {\n            persistAuthorization: true,\n        },\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/abstraction/microservices/constants/math.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MATH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MATH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    webpack-hmr.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodeExternals\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('webpack-node-externals')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('run-script-webpack-plugin')\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: EROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    client/composables/useSticky.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useSticky\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (el: HTMLElement, offset: number) => {\n    const onScroll = () => {\n        const scrollTop =\n            window.pageYOffset || document.documentElement.scrollTop;\n        if (scrollTop > offset) el.classList.add('sticky');\n        else el.classList.remove('sticky');\n    };\n\n    // lifecycle hooks\n    window.addEventListener('scroll', onScroll);\n    onUnmounted(() => {\n        window.removeEventListener('scroll', onScroll);\n    });\n\n    return {\n        onScroll,\n    };\n}\n                    \n                \n\n\n        \n    \n\n    client/composables/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useUserStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('user', () => {\n    /**\n     * Current named of the user.\n     */\n    const savedName = ref('');\n    const previousNames = ref(new Set());\n\n    const usedNames = computed(() => Array.from(previousNames.value));\n    const otherNames = computed(() =>\n        usedNames.value.filter((name) => name !== savedName.value),\n    );\n\n    /**\n     * Changes the current name of the user and saves the one that was used\n     * before.\n     *\n     * @param name - new name to set\n     */\n    function setNewName(name: string) {\n        if (savedName.value) previousNames.value.add(savedName.value);\n\n        savedName.value = name;\n    }\n\n    return {\n        setNewName,\n        otherNames,\n        savedName,\n    };\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
