var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.197,1,2.313]],["body/classes/Admin.html",[0,0.31,1,4.211,2,1.438,3,0.157,4,0.157,5,0.141,6,6.069,7,0.189,8,0.009,9,0.008,10,0.008]],["title/controllers/AdminController.html",[11,1.587,12,3.266]],["body/controllers/AdminController.html",[0,0.244,1,2.869,3,0.124,4,0.124,5,0.112,7,0.149,8,0.009,9,0.007,10,0.007,11,1.968,12,5.152,13,2.023,14,4.793,15,2.577,16,0.257,17,0.885,18,4.333,19,3.954,20,4.333,21,3.954,22,4.132,23,4.132,24,4.132,25,3.954,26,2.869,27,3.954,28,4.333,29,1.413,30,3.799,31,2.667,32,2.203,33,4.052,34,4.793,35,4.793,36,2.711,37,3.408,38,3.408,39,3.25,40,0.448,41,2.577,42,3.25,43,3.25,44,3.11,45,3.11,46,3.11,47,3.11,48,4.793,49,4.793]],["title/modules/AdminModule.html",[50,1.391,51,3.063]],["body/modules/AdminModule.html",[0,0.252,1,2.952,3,0.128,4,0.128,5,0.115,7,0.153,8,0.009,9,0.007,10,0.007,12,5.739,13,2.619,16,0.268,17,0.911,50,2.233,51,6.099,52,2.484,53,3.336,54,4.931,55,4.931,56,4.931,57,4.863,58,5.941,59,3.714,60,2.952,61,2.744,62,5.593,63,3.453,64,5.739,65,4.026,66,5.593,67,5.593,68,4.169,69,4.931]],["title/injectables/AdminService.html",[58,3.063,70,0.751]],["body/injectables/AdminService.html",[0,0.282,3,0.143,4,0.143,5,0.129,7,0.172,8,0.009,9,0.008,10,0.008,16,0.243,17,1.019,40,0.516,58,5.272,70,1.292,71,2.093,72,5.52,73,2.538,74,4.375,75,4.611,76,0.672,77,6.262,78,1.156,79,0.824,80,1.046,81,5.032,82,2.614]],["title/controllers/AdminUsersController.html",[11,1.587,64,3.266]],["body/controllers/AdminUsersController.html",[0,0.119,1,1.391,3,0.06,4,0.06,5,0.054,7,0.072,8,0.01,9,0.004,10,0.004,11,0.954,13,0.981,15,1.249,16,0.237,17,0.429,18,3.913,19,2.36,20,2.586,21,2.36,22,2.466,23,2.466,24,2.466,25,2.36,26,1.391,27,2.36,28,2.586,29,0.685,30,1.842,31,1.293,32,1.068,33,1.964,34,2.323,35,2.323,36,2.501,37,1.652,38,1.652,39,1.576,40,0.57,41,1.249,42,1.576,43,1.576,44,1.508,45,1.508,46,1.508,47,1.508,48,2.323,49,2.323,64,3.075,76,0.71,78,1.223,79,0.871,80,1.106,82,1.1,83,6.099,84,2.323,85,0.225,86,0.743,87,2.565,88,3.637,89,3.637,90,4.085,91,4.401,92,4.085,93,4.085,94,2.323,95,1.493,96,2.333,97,2.636,98,3.552,99,2.897,100,3.637,101,3.062,102,2.636,103,3.241,104,1.163,105,3.576,106,2.323,107,4.018,108,2.636,109,2.723,110,2.959,111,2.636,112,2.636,113,4.068,114,2.118,115,2.636,116,3.355,117,2.636,118,2.636,119,3.438,120,2.636,121,2.636,122,2.883,123,2.636,124,2.118,125,3.438,126,2.636,127,1.892,128,4.125,129,2.636,130,2.118,131,3.438,132,2.636,133,2.36,134,2.636,135,4.018,136,1.508,137,1.447,138,3.552,139,1.964,140,1.964,141,1.964,142,4.136,143,3.797,144,2.323,145,1.447,146,2.118,147,2.636,148,2.323,149,2.118,150,2.118,151,2.118,152,2.118,153,2.636,154,3.039,155,2.323,156,1.508,157,2.636,158,3.633,159,1.652,160,3.787,161,3.732,162,2.636,163,1.452,164,2.636,165,2.636,166,1.343,167,3.637,168,2.323,169,2.636,170,2.323,171,2.636,172,3.075,173,2.323,174,2.636,175,2.323,176,2.636,177,2.636,178,2.636]],["title/interfaces/Alert.html",[179,2.01,180,3.063]],["body/interfaces/Alert.html",[3,0.163,4,0.093,5,0.084,7,0.196,8,0.01,9,0.006,10,0.006,16,0.184,40,0.543,41,2.707,85,0.562,95,1.578,122,3.991,166,2.598,179,2.619,180,4.601,181,2.337,182,2.854,183,1.598,184,5.689,185,1.767,186,3.557,187,3.601,188,3.601,189,3.601,190,3.044,191,4.128,192,4.908,193,4.256,194,3.282,195,4.589,196,2.707,197,4.589,198,4.256,199,1.873,200,3.23,201,5.314,202,1.995,203,4.256,204,2.442,205,1.706,206,3.282,207,3.044,208,3.282,209,3.282,210,3.044,211,3.282,212,3.282,213,6.37,214,3.282,215,4.589,216,3.282,217,3.282,218,3.282,219,5.73,220,3.044,221,3.282,222,3.282,223,3.282,224,3.282,225,3.044,226,2.707,227,3.282,228,5.035,229,3.601]],["title/interfaces/AlertOptions.html",[179,2.01,184,3.063]],["body/interfaces/AlertOptions.html",[3,0.16,4,0.089,5,0.08,7,0.192,8,0.01,9,0.006,10,0.006,16,0.178,40,0.608,41,2.622,80,1.344,85,0.549,95,1.487,122,3.865,166,2.276,179,2.537,180,3.865,181,2.233,182,2.728,183,1.092,184,5.625,185,1.711,186,2.622,187,3.442,188,3.442,189,3.442,190,2.91,191,4.027,192,5.499,193,4.123,194,3.137,195,5.928,196,3.632,197,5.928,198,5.499,199,2.946,200,3.152,201,5.872,202,1.956,203,4.123,204,2.334,205,1.63,206,3.137,207,2.91,208,3.137,209,3.137,210,2.91,211,3.137,212,3.137,213,6.319,214,3.137,215,4.445,216,3.137,217,3.137,218,3.137,219,5.616,220,2.91,221,3.137,222,3.137,223,3.137,224,3.137,225,2.91,226,2.622,227,3.137,228,4.877,229,3.442]],["title/classes/AllExceptionsFilter.html",[0,0.197,230,3.522]],["body/classes/AllExceptionsFilter.html",[0,0.167,2,0.776,3,0.085,4,0.085,5,0.076,7,0.102,8,0.01,9,0.006,10,0.006,16,0.201,17,0.605,40,0.563,41,4.018,73,1.506,76,0.734,78,1.262,79,0.899,80,1.142,82,1.552,85,0.317,86,0.962,104,1.098,137,2.04,186,3.432,202,1.75,230,4.292,231,3.277,232,2.044,233,4.369,234,5.492,235,4.137,236,5.341,237,4.369,238,6.252,239,3.277,240,4.285,241,3.717,242,3.525,243,4.292,244,7.406,245,5.512,246,6.026,247,3.717,248,6.681,249,4.506,250,5.341,251,3.717,252,3.717,253,3.898,254,4.508,255,3.717,256,5.341,257,3.717,258,3.717,259,1.962,260,3.277,261,3.277,262,3.277,263,3.277,264,3.717,265,3.717,266,4.709,267,3.732,268,6.026,269,3.717,270,3.717,271,3.717,272,6.252,273,6.026,274,3.717,275,3.717,276,3.277,277,3.277,278,1.552,279,3.277,280,3.717,281,2.453,282,3.277,283,3.717]],["title/controllers/AppController.html",[11,1.587,284,3.266]],["body/controllers/AppController.html",[0,0.227,3,0.115,4,0.115,5,0.104,7,0.139,8,0.009,9,0.007,10,0.007,11,2.388,13,1.881,15,2.396,16,0.25,17,0.823,26,2.667,29,1.314,36,2.407,40,0.416,76,0.542,78,0.933,79,0.665,80,0.844,82,2.11,85,0.431,86,1.188,96,1.781,104,0.888,110,3.126,136,2.891,137,2.774,143,3.62,156,2.891,158,2.774,160,2.891,163,1.108,186,3.126,226,3.126,284,4.915,285,4.455,286,5.814,287,4.455,288,6.472,289,4.455,290,4.608,291,5.054,292,5.814,293,5.3,294,3.235,295,4.608,296,5.3,297,5.054,298,6.595,299,4.608,300,5.054,301,5.13,302,7.341,303,4.845,304,4.455,305,4.455,306,5.054,307,4.455,308,5.814,309,5.054,310,5.054]],["title/modules/AppModule.html",[50,1.391,311,3.266]],["body/modules/AppModule.html",[0,0.138,3,0.07,4,0.07,5,0.063,7,0.084,8,0.01,9,0.005,10,0.006,13,1.73,16,0.279,17,0.501,40,0.254,50,1.475,51,4.923,52,1.367,53,2.204,57,4.03,59,2.454,60,1.625,61,1.511,63,2.281,65,2.66,76,0.33,78,0.569,79,0.405,80,0.514,86,0.555,104,0.541,110,2.204,159,2.915,205,1.286,232,1.178,237,2.152,249,2.78,253,1.511,281,3.697,284,4.175,303,4.65,304,2.715,311,6.582,312,2.715,313,2.715,314,2.715,315,4.416,316,4.923,317,4.923,318,4.923,319,4.923,320,4.923,321,4.923,322,4.923,323,4.03,324,3.079,325,2.715,326,4.099,327,5.502,328,3.079,329,2.715,330,3.079,331,4.65,332,5.602,333,2.152,334,3.079,335,3.079,336,3.465,337,3.079,338,2.474,339,3.079,340,3.079,341,2.474,342,2.032,343,4.65,344,2.474,345,3.079,346,2.295,347,3.079,348,3.079,349,3.079,350,3.079,351,3.079,352,2.295,353,3.079,354,3.079,355,2.715,356,3.079,357,3.465,358,3.079,359,3.079,360,3.079,361,3.079,362,3.079,363,3.079,364,4.65,365,4.099,366,3.079,367,3.079,368,3.079,369,4.65,370,3.079,371,3.079,372,3.079,373,3.079,374,4.65,375,2.295,376,3.079,377,3.079,378,3.079,379,2.474,380,3.079,381,4.099,382,4.099,383,3.079,384,4.175,385,4.099,386,3.079,387,3.079,388,4.099,389,3.465,390,4.65,391,4.099,392,3.079,393,4.65,394,3.079,395,3.079,396,1.69]],["title/injectables/AppService.html",[70,0.751,303,2.893]],["body/injectables/AppService.html",[0,0.24,3,0.122,4,0.122,5,0.11,7,0.147,8,0.01,9,0.007,10,0.007,16,0.242,17,0.87,40,0.564,70,1.172,71,1.787,73,2.167,76,0.734,78,1.263,79,0.9,80,1.142,85,0.456,86,1.232,104,0.939,163,1.172,186,2.534,226,3.242,235,2.934,239,4.713,240,4.983,242,4.977,286,6.029,287,6.029,288,6.648,290,3.736,292,4.713,295,3.736,296,5.496,301,4.779,303,4.514,397,4.713,398,5.347,399,5.347,400,4.713,401,5.347,402,5.347,403,5.347,404,5.347,405,5.347,406,5.347,407,7.949,408,5.347]],["title/injectables/AtGuard.html",[70,0.751,336,3.266]],["body/injectables/AtGuard.html",[0,0.235,3,0.119,4,0.119,5,0.108,7,0.144,8,0.01,9,0.007,10,0.007,16,0.253,17,0.852,32,2.12,40,0.556,70,1.155,71,1.748,73,2.12,76,0.724,78,1.246,79,0.887,80,1.126,82,2.184,85,0.447,86,1.215,104,0.919,110,3.538,163,1.479,183,1.464,202,1.464,205,2.816,333,3.655,336,5.026,379,6.714,409,4.612,410,5.945,411,4.612,412,5.231,413,5.945,414,4.327,415,5.231,416,2.871,417,4.204,418,3.127,419,3.279,420,5.231,421,3.279,422,5.231,423,4.204,424,3.899,425,5.231,426,5.231,427,6.744,428,5.231,429,4.612,430,4.612,431,5.231]],["title/injectables/AtStrategy.html",[70,0.751,432,3.063]],["body/injectables/AtStrategy.html",[0,0.233,3,0.118,4,0.118,5,0.106,7,0.142,8,0.01,9,0.007,10,0.007,16,0.268,17,0.842,32,2.098,40,0.552,70,1.147,71,1.73,73,2.098,76,0.719,78,1.237,79,0.881,80,1.119,82,2.161,85,0.442,86,1.206,104,0.909,163,1.135,183,1.448,200,3.286,342,3.416,418,3.094,419,3.244,421,3.244,432,4.68,433,4.562,434,3.286,435,4.562,436,5.487,437,5.175,438,4.68,439,6.698,440,8.331,441,5.175,442,4.68,443,3.857,444,4.562,445,3.857,446,3.244,447,3.244,448,3.616,449,5.175,450,5.175,451,4.562,452,4.562,453,5.904,454,4.562,455,4.562,456,5.175,457,4.562]],["title/controllers/AuthController.html",[11,1.587,458,3.266]],["body/controllers/AuthController.html",[0,0.132,3,0.067,4,0.067,5,0.06,7,0.081,8,0.01,9,0.005,10,0.005,11,1.063,13,1.092,15,1.391,16,0.238,17,0.478,18,3.817,19,2.564,20,2.81,21,2.564,22,2.68,23,2.68,24,2.68,25,2.564,26,1.549,27,2.564,28,2.81,29,0.763,31,1.44,32,1.19,36,2.555,37,1.84,38,1.84,39,1.755,40,0.611,41,1.391,42,1.755,43,1.755,44,1.679,45,1.679,46,1.679,47,1.679,76,0.704,78,1.211,79,0.863,80,1.095,82,1.225,85,0.251,86,0.808,87,2.555,91,2.68,95,1.404,96,2.437,99,2.808,101,1.44,103,2.621,104,1.152,105,3.557,110,2.578,113,3.516,135,2.051,136,1.679,137,1.611,140,2.187,142,4.134,143,3.795,145,1.611,156,1.679,158,3.6,160,3.483,161,3.921,163,1.438,278,1.872,389,2.187,448,2.051,458,3.341,459,2.587,460,6.096,461,5.027,462,3.952,463,3.952,464,3.952,465,2.587,466,2.935,467,4.795,468,4.748,469,2.935,470,2.587,471,2.935,472,2.935,473,4.483,474,2.935,475,2.587,476,3.817,477,2.935,478,3.341,479,2.935,480,2.587,481,4.564,482,2.935,483,2.125,484,2.935,485,2.587,486,2.935,487,2.587,488,4.255,489,2.935,490,2.366,491,2.935,492,1.679,493,2.587,494,3.341,495,3.817,496,2.587,497,2.358,498,3.133,499,2.187,500,2.587,501,2.187,502,2.587,503,1.937,504,2.935,505,2.935,506,2.935,507,2.935,508,2.187,509,2.587,510,2.935,511,2.935,512,2.935,513,2.935,514,2.935,515,2.935,516,2.935,517,2.935,518,2.935,519,2.935,520,2.935,521,2.935,522,2.935,523,2.935,524,2.935]],["title/modules/AuthModule.html",[50,1.391,315,2.747]],["body/modules/AuthModule.html",[0,0.213,3,0.108,4,0.108,5,0.097,7,0.13,8,0.01,9,0.007,10,0.007,13,2.35,16,0.261,17,0.771,50,2.004,52,2.102,53,2.994,59,3.333,60,2.498,61,2.322,63,3.098,65,4.066,87,1.464,315,5.521,323,4.649,341,3.803,432,5.679,436,4.967,458,5.298,495,5.488,496,4.173,525,4.173,526,4.733,527,4.173,528,4.173,529,5.679,530,4.733,531,4.413,532,4.173,533,4.733,534,4.733,535,6.316,536,3.803,537,4.733,538,4.733,539,4.733,540,4.173,541,4.733,542,4.733,543,4.173,544,4.733,545,3.528]],["title/injectables/AuthService.html",[70,0.751,495,2.747]],["body/injectables/AuthService.html",[0,0.108,3,0.055,4,0.055,5,0.049,7,0.066,8,0.01,9,0.004,10,0.004,16,0.223,17,0.39,31,1.176,32,0.972,40,0.571,70,0.656,71,0.801,73,1.552,75,3.52,76,0.743,78,1.279,79,0.911,80,1.157,85,0.205,86,0.69,87,2.573,95,1.536,99,2.159,103,3.074,104,1.172,105,3.491,113,2.429,163,1.307,166,1.556,202,2.218,235,2.622,278,2.785,294,2.676,342,1.583,436,4.441,448,1.675,460,3.375,461,4.661,462,3.375,463,3.375,464,3.375,465,3.375,470,3.375,475,3.375,476,3.42,480,3.375,481,3.601,487,3.375,488,3.812,490,2.02,495,2.4,501,1.787,502,2.114,536,1.927,540,3.375,543,3.375,545,1.787,546,2.114,547,3.828,548,3.828,549,2.398,550,6.67,551,2.398,552,3.828,553,4.017,554,2.398,555,2.398,556,2.398,557,2.398,558,2.398,559,2.398,560,3.828,561,5.962,562,2.398,563,2.398,564,1.927,565,1.927,566,1.787,567,1.675,568,4.066,569,1.927,570,2.114,571,2.114,572,4.274,573,2.398,574,3.828,575,3.828,576,3.828,577,2.398,578,2.398,579,1.927,580,4.384,581,2.398,582,3.375,583,4.778,584,2.398,585,2.114,586,1.927,587,5.962,588,2.289,589,3.828,590,2.398,591,1.316,592,4.403,593,2.398,594,2.398,595,2.398,596,6.107,597,2.398,598,2.398,599,2.398,600,5.455,601,3.84,602,5.256,603,5.962,604,2.114,605,3.375,606,4.778,607,4.778,608,4.778,609,2.398,610,2.4,611,3.828,612,3.828,613,3.828,614,2.398,615,2.398,616,2.398]],["title/classes/CommentEntity.html",[0,0.197,617,2.893]],["body/classes/CommentEntity.html",[0,0.3,2,1.072,3,0.117,4,0.117,5,0.106,7,0.141,8,0.009,9,0.007,10,0.007,16,0.165,40,0.685,76,0.892,85,0.438,95,1.584,96,2.93,103,3.184,166,2.409,185,2.061,199,3.055,617,4.398,618,4.526,619,4.232,620,6.521,621,7.397,622,3.904,623,5.134,624,5.134,625,5.944,626,5.134,627,4.526,628,5.134,629,5.134,630,5.134,631,5.134,632,5.134,633,4.656,634,6.663,635,4.303,636,5.134,637,3.98,638,1.965]],["title/classes/ConversationEntity.html",[0,0.197,639,3.266]],["body/classes/ConversationEntity.html",[0,0.208,2,0.965,3,0.105,4,0.105,5,0.095,7,0.127,8,0.009,9,0.006,10,0.006,16,0.149,29,1.201,36,2.172,40,0.7,76,0.912,79,0.924,85,0.394,95,1.63,96,2.993,127,3.22,166,2.286,185,1.922,200,3.049,204,2.762,205,2.595,610,3.896,639,4.632,640,4.073,641,4.402,642,5.643,643,3.854,644,3.854,645,5.643,646,4.731,647,4.62,648,4.62,649,5.248,650,4.62,651,4.62,652,4.62,653,4.994,654,4.62,655,4.62,656,4.62,657,4.62,658,4.62]],["title/controllers/ConversationsController.html",[11,1.587,659,3.266]],["body/controllers/ConversationsController.html",[0,0.097,1,1.862,3,0.049,4,0.049,5,0.045,7,0.059,8,0.01,9,0.004,10,0.004,11,0.785,13,0.806,15,1.027,16,0.195,17,0.353,18,2.212,19,2.018,20,2.212,21,2.018,22,2.109,23,2.109,24,2.109,25,2.018,26,1.144,27,2.018,28,2.212,29,0.563,31,1.063,32,0.878,36,2.528,37,1.359,38,1.359,39,1.296,40,0.61,41,1.027,42,1.296,43,1.296,44,1.24,45,1.24,46,1.24,47,1.24,76,0.716,78,1.232,79,0.878,80,1.114,82,0.905,85,0.185,86,0.636,87,2.528,91,3.075,95,1.475,96,2.351,98,3.957,99,2.767,101,3.14,104,1.172,109,2.329,113,4.321,135,4.472,136,1.24,137,1.189,138,1.514,139,1.615,142,4.124,143,3.786,145,1.189,156,1.24,158,3.661,160,3.661,161,3.988,163,1.463,166,1.977,205,1.473,278,2.148,289,1.911,483,1.672,492,2.018,494,2.63,508,1.615,572,1.102,633,2.466,639,4.77,643,3.332,644,1.937,659,2.63,660,1.911,661,3.326,662,3.111,663,3.934,664,3.934,665,3.111,666,3.934,667,3.934,668,3.934,669,3.934,670,1.911,671,2.943,672,2.167,673,6.61,674,6.071,675,2.167,676,3.111,677,2.167,678,3.661,679,1.911,680,3.594,681,2.167,682,4.662,683,2.167,684,1.911,685,3.075,686,2.167,687,5.174,688,2.167,689,4.821,690,1.911,691,3.225,692,3.529,693,2.167,694,1.911,695,3.395,696,2.167,697,4.535,698,2.167,699,1.911,700,3.075,701,2.167,702,2.167,703,1.911,704,3.075,705,2.167,706,2.167,707,1.911,708,3.075,709,2.167,710,3.111,711,3.111,712,3.529,713,2.167,714,3.395,715,1.911,716,2.167,717,2.167,718,2.167,719,2.167,720,2.167,721,2.167,722,2.167,723,2.167,724,2.167,725,2.167,726,4.463,727,2.167,728,2.167,729,2.167,730,2.167,731,2.167,732,2.167,733,4.463,734,2.167,735,2.167,736,2.167,737,2.167,738,2.167]],["title/modules/ConversationsModule.html",[50,1.391,316,3.063]],["body/modules/ConversationsModule.html",[0,0.248,3,0.126,4,0.126,5,0.113,7,0.151,8,0.009,9,0.007,10,0.007,13,2.595,16,0.267,17,0.898,50,2.213,52,2.448,53,3.306,57,4.846,59,3.681,60,2.91,61,2.705,63,3.422,65,3.99,68,4.109,316,6.184,323,4.846,338,4.431,659,5.702,714,5.591,715,4.861,739,4.861,740,4.861,741,5.514,742,5.514,743,5.514]],["title/injectables/ConversationsService.html",[70,0.751,714,2.893]],["body/injectables/ConversationsService.html",[0,0.108,1,2.018,3,0.055,4,0.055,5,0.049,7,0.066,8,0.01,9,0.004,10,0.004,16,0.192,17,0.39,32,0.971,36,1.183,40,0.588,70,0.655,71,0.8,73,0.971,74,1.673,75,3.352,76,0.766,78,1.318,79,1.001,80,1.192,81,1.924,82,1,85,0.204,86,0.689,87,2.572,95,1.505,104,1.216,109,4.401,113,4.228,127,2.189,163,1.639,166,2.653,190,1.785,191,2.993,200,1.175,202,2.048,205,1.993,294,2.923,572,3.722,591,2.099,641,3.735,643,3.27,644,3.486,662,3.371,663,3.371,664,4.209,665,3.371,666,3.371,667,3.371,668,4.209,669,4.209,670,3.371,671,3.118,678,3.814,679,3.371,680,3.809,684,2.111,685,3.259,689,5.224,690,3.371,691,3.417,694,3.371,695,3.598,699,3.371,700,3.259,703,2.111,704,3.259,707,2.111,708,3.259,714,2.524,744,2.111,745,2.395,746,2.395,747,2.395,748,2.395,749,2.395,750,2.395,751,2.395,752,2.395,753,2.395,754,1.924,755,3.824,756,2.395,757,3.824,758,3.371,759,5.451,760,3.824,761,4.774,762,5.451,763,6.925,764,1.785,765,6.293,766,5.451,767,2.395,768,2.395,769,2.395,770,2.395,771,3.371,772,3.824,773,2.395]],["title/classes/CreateCommentDto.html",[0,0.197,774,3.063]],["body/classes/CreateCommentDto.html",[0,0.292,2,1.356,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.688,183,1.817,617,4.285,619,3.714,622,3.426,774,5.387,775,5.723,776,4.839,777,3.301,778,5.217,779,5.217]],["title/classes/CreateConversationDto.html",[0,0.197,671,2.507]],["body/classes/CreateConversationDto.html",[0,0.24,2,0.776,3,0.085,4,0.085,5,0.076,7,0.102,8,0.009,9,0.006,10,0.006,16,0.201,29,0.966,36,2.503,40,0.677,76,0.777,79,1.065,80,0.892,85,0.317,95,1.626,96,2.551,185,1.652,186,3.982,199,3.134,200,2.62,204,3.193,205,1.552,434,1.823,633,4.369,635,3.179,637,3.353,638,1.422,641,3.919,643,3.431,644,3.431,646,3.978,653,4.292,671,3.055,780,6.645,781,2.126,782,4.328,783,4.029,784,4.292,785,3.717,786,3.717,787,3.717,788,6.252,789,3.717,790,3.717,791,5.094,792,4.511,793,3.717,794,5.094,795,6.252,796,4.709,797,5.094,798,3.717,799,3.717,800,3.717,801,3.277,802,3.277,803,5.024,804,3.717,805,3.717,806,3.277,807,3.277,808,2.987,809,2.987,810,2.987,811,2.597,812,2.597,813,2.987,814,4.292,815,4.292,816,5.094,817,3.277,818,4.709,819,3.717,820,3.717,821,3.717,822,3.717,823,3.717,824,3.717]],["title/classes/CreateMessageDto.html",[0,0.197,825,2.893]],["body/classes/CreateMessageDto.html",[0,0.27,2,1.255,3,0.137,4,0.137,5,0.123,7,0.165,8,0.009,9,0.008,10,0.008,16,0.193,29,1.562,40,0.655,76,0.854,85,0.513,95,1.598,166,2.59,185,2.276,622,4.197,825,4.857,826,7.307,827,4.829,828,6.391,829,6.009,830,6.009,831,5.298,832,7.359]],["title/classes/CreatePostDto.html",[0,0.197,833,3.063]],["body/classes/CreatePostDto.html",[0,0.291,2,1.351,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.247,29,1.682,36,2.002,183,1.811,777,3.29,833,5.376,834,5.704,835,4.521,836,4.271,837,5.2,838,5.2,839,4.521,840,3.415]],["title/classes/DeleteCommentDto.html",[0,0.197,841,3.063]],["body/classes/DeleteCommentDto.html",[0,0.292,2,1.356,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.688,166,2.114,183,1.817,617,4.285,619,3.714,776,4.839,777,3.301,778,5.217,779,5.217,841,5.387,842,5.723]],["title/classes/DeleteConversationDto.html",[0,0.197,680,3.063]],["body/classes/DeleteConversationDto.html",[0,0.278,2,1.291,3,0.141,4,0.141,5,0.127,7,0.17,8,0.009,9,0.008,10,0.008,16,0.199,40,0.509,76,0.663,85,0.528,95,1.383,96,2.178,99,2.238,103,3.222,166,2.013,183,2.095,185,2.316,680,5.231,691,5.246,781,3.536,782,3.696,783,3.033,843,5.45,844,3.536,845,3.875,846,4.607,847,4.967,848,5.45,849,4.32]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.197,685,2.62]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.361,2,1.037,3,0.113,4,0.113,5,0.102,7,0.212,8,0.009,9,0.007,10,0.007,16,0.234,29,1.29,36,1.535,40,0.6,76,0.699,79,0.653,85,0.424,95,1.638,96,1.749,99,2.36,103,3.132,127,2.276,166,2.122,183,2.162,185,2.016,483,2.353,635,3.314,637,3.197,638,1.899,641,3.111,643,4.241,644,3.577,646,3.44,671,4.42,685,3.896,700,2.967,704,2.967,708,2.967,781,2.839,782,2.967,783,3.197,844,3.728,845,4.085,846,3.699,849,3.468,850,5.085,851,4.963,852,4.963,853,5.4,854,3.699,855,3.276]],["title/classes/DeleteOnePost.html",[0,0.197,856,3.063]],["body/classes/DeleteOnePost.html",[0,0.34,2,1.312,3,0.143,4,0.143,5,0.129,7,0.172,8,0.009,9,0.008,10,0.008,16,0.202,40,0.518,76,0.674,85,0.536,95,1.396,96,2.214,185,2.338,619,4.639,625,5.048,635,3.843,637,3.708,638,2.404,835,4.39,856,5.282,857,6.664,858,6.282]],["title/injectables/ErrorsInterceptor.html",[70,0.751,859,3.266]],["body/injectables/ErrorsInterceptor.html",[0,0.25,3,0.127,4,0.127,5,0.114,7,0.153,8,0.009,9,0.007,10,0.007,16,0.247,17,0.905,40,0.458,70,1.201,71,1.859,76,0.597,78,1.027,79,0.732,80,0.929,85,0.475,86,1.263,104,0.977,163,1.219,232,2.128,253,2.728,278,2.322,414,4.426,416,3.052,859,5.226,860,4.903,861,4.628,862,4.9,863,4.821,864,5.323,865,5.561,866,4.592,867,4.628,868,5.561,869,5.635,870,3.181,871,4.903,872,3.671,873,4.145,874,5.561,875,4.903,876,5.561]],["title/classes/ExceptionFilter.html",[0,0.197,233,3.063]],["body/classes/ExceptionFilter.html",[0,0.261,2,1.21,3,0.132,4,0.132,5,0.119,7,0.159,8,0.009,9,0.007,10,0.007,16,0.252,17,0.943,40,0.477,76,0.622,78,1.07,79,0.762,80,0.968,85,0.495,86,1.296,104,1.018,163,1.27,232,2.753,233,5.027,234,6.288,243,5.781,248,4.656,866,4.678,869,5.781,870,3.314,877,6.343,878,5.108,879,7.825,880,8.184,881,5.794,882,3.824,883,5.794,884,5.794]],["title/injectables/ExcludeNullInterceptor.html",[70,0.751,885,3.266]],["body/injectables/ExcludeNullInterceptor.html",[0,0.252,3,0.128,4,0.128,5,0.115,7,0.154,8,0.009,9,0.007,10,0.007,16,0.248,17,0.913,40,0.462,70,1.208,71,1.875,76,0.602,78,1.036,79,0.738,80,0.937,85,0.479,86,1.27,104,0.985,163,1.23,232,2.147,414,4.44,416,3.079,610,3.516,861,4.654,862,4.927,863,4.836,864,5.34,866,4.61,867,4.654,870,3.209,872,3.702,873,4.181,885,5.255,886,4.945,887,5.61,888,4.508,889,5.61,890,3.87]],["title/injectables/ExistedUserMiddleware.html",[70,0.751,891,3.266]],["body/injectables/ExistedUserMiddleware.html",[0,0.218,3,0.111,4,0.111,5,0.1,7,0.133,8,0.01,9,0.007,10,0.007,16,0.231,17,0.79,40,0.529,70,1.1,71,1.621,73,1.966,74,3.39,75,4.319,76,0.689,78,1.186,79,0.845,80,1.072,82,2.026,85,0.414,86,1.157,87,2.226,101,2.38,103,2.763,104,0.852,166,2.09,202,1.797,205,2.026,232,1.857,253,3.757,254,4.203,259,2.56,278,2.026,299,3.39,565,3.898,572,2.467,585,6.344,592,3.202,601,3.898,610,3.041,764,3.616,863,4.579,891,4.785,892,5.782,893,4.277,894,4.785,895,4.852,896,5.66,897,6.344,898,7.659,899,4.852,900,3.202,901,5.66,902,3.898,903,4.852,904,4.852,905,4.852]],["title/injectables/FacebookStrategy.html",[70,0.751,906,3.063]],["body/injectables/FacebookStrategy.html",[0,0.211,3,0.143,4,0.107,5,0.097,7,0.129,8,0.01,9,0.007,10,0.007,16,0.243,17,0.765,32,1.904,40,0.387,70,1.077,71,1.57,73,2.87,76,0.675,78,0.868,79,0.932,80,0.785,85,0.401,86,1.132,87,2.191,95,1.498,99,2.564,104,0.825,105,2.882,116,5.555,183,1.315,202,1.982,249,3.757,418,2.809,419,2.945,421,2.945,434,3.474,442,4.392,443,4.684,445,4.684,446,2.945,461,4.949,553,3.317,579,5.691,906,4.392,907,4.142,908,4.699,909,4.142,910,6.243,911,5.541,912,4.699,913,4.699,914,4.699,915,3.101,916,3.101,917,4.699,918,3.776,919,4.699,920,4.142,921,4.699,922,4.142,923,4.699,924,3.776,925,4.699,926,5.541,927,4.142,928,4.142,929,4.142,930,4.142,931,4.142,932,4.142]],["title/controllers/FileController.html",[11,1.587,933,3.266]],["body/controllers/FileController.html",[0,0.131,3,0.066,4,0.066,5,0.156,7,0.08,8,0.01,9,0.005,10,0.005,11,1.053,13,1.082,15,1.379,16,0.238,17,0.473,18,2.791,19,2.547,20,2.791,21,2.547,22,2.662,23,2.662,24,2.662,25,2.547,26,1.535,27,2.547,28,2.791,29,0.756,31,1.427,32,1.179,36,2.55,37,1.823,38,1.823,39,1.739,40,0.538,41,1.379,42,1.739,43,1.739,44,1.664,45,1.664,46,1.664,47,1.664,76,0.65,78,1.119,79,0.998,80,1.012,82,1.214,85,0.248,86,0.802,87,2.469,96,2.302,99,1.612,101,3.205,104,1.065,105,3.392,127,2.041,133,2.547,136,1.664,137,1.596,142,3.905,143,3.585,145,1.596,156,1.664,158,3.326,160,3.467,161,3.623,163,1.329,181,1.664,204,1.739,205,1.859,226,3.096,259,2.855,294,3.38,492,3.094,840,3.448,933,3.318,934,2.564,935,4.347,936,4.347,937,4.769,938,4.769,939,2.564,940,6.684,941,2.908,942,6.521,943,6.074,944,2.908,945,2.908,946,2.908,947,2.564,948,2.908,949,2.564,950,2.908,951,2.908,952,2.564,953,2.908,954,5.343,955,3.925,956,3.925,957,2.908,958,4.452,959,2.908,960,2.564,961,3.57,962,2.908,963,4.452,964,2.908,965,3.111,966,4.452,967,2.908,968,5.409,969,5.409,970,2.564,971,3.925,972,3.925,973,2.337,974,2.337,975,3.578,976,2.939,977,2.564,978,2.564,979,2.564,980,2.908,981,2.564,982,2.564,983,2.908,984,2.168,985,2.908,986,2.908,987,2.908,988,2.908,989,2.908,990,2.908,991,2.908,992,2.908,993,2.908,994,2.908,995,2.908,996,5.759,997,2.908,998,2.908,999,2.908,1000,2.908,1001,2.908]],["title/classes/FileService.html",[0,0.197,984,3.266]],["body/classes/FileService.html",[0,0.199,2,0.923,3,0.101,4,0.101,5,0.091,7,0.121,8,0.01,9,0.006,10,0.006,16,0.194,40,0.672,76,0.737,78,1.268,79,0.903,80,1.146,85,0.377,86,1.086,104,1.206,113,2.247,163,1.505,202,2.282,278,2.866,294,4.129,840,2.333,935,4.846,936,4.846,984,4.495,1002,3.552,1003,6.031,1004,6.031,1005,6.501,1006,8.661,1007,4.42,1008,6.031,1009,6.501,1010,4.42,1011,6.031,1012,6.501,1013,4.42,1014,3.552,1015,4.42,1016,3.552,1017,4.797,1018,4.42,1019,8.416,1020,6.031,1021,6.865,1022,5.516,1023,5.516,1024,6.865,1025,4.42,1026,4.42,1027,4.42]],["title/modules/FilesModule.html",[50,1.391,317,3.063]],["body/modules/FilesModule.html",[0,0.269,3,0.136,4,0.136,5,0.123,7,0.164,8,0.009,9,0.008,10,0.008,13,2.728,16,0.255,17,0.972,50,2.326,52,2.652,53,3.475,59,3.869,60,3.152,61,2.93,63,2.93,65,4.193,317,6.038,933,5.912,976,5.777,977,5.265,1028,5.265,1029,5.265,1030,5.972,1031,5.972]],["title/classes/FilesService.html",[0,0.197,976,2.893]],["body/classes/FilesService.html",[0,0.204,2,0.947,3,0.103,4,0.103,5,0.143,7,0.124,8,0.01,9,0.006,10,0.006,16,0.146,40,0.614,76,0.8,78,1.376,79,0.981,80,1.245,85,0.387,86,1.105,87,2.69,104,1.309,105,3.828,163,1.707,181,2.594,840,4.109,935,4.931,936,4.931,937,5.409,938,5.409,939,5.409,940,7.459,947,5.409,952,5.409,960,5.409,961,4.591,976,4.05,978,3.997,979,3.997,1032,3.997,1033,4.534,1034,4.534,1035,4.534,1036,4.534,1037,6.955,1038,6.955,1039,6.955,1040,6.955,1041,6.955,1042,6.955,1043,4.534]],["title/classes/GetAllConversationDto.html",[0,0.197,691,2.747]],["body/classes/GetAllConversationDto.html",[0,0.351,2,1.203,3,0.131,4,0.131,5,0.118,7,0.197,8,0.009,9,0.007,10,0.007,16,0.23,29,1.497,40,0.591,76,0.618,85,0.492,95,1.508,96,2.03,99,2.595,103,3.359,166,2.334,183,1.612,185,2.217,635,3.644,637,3.516,638,2.204,646,3.783,691,4.892,695,3.801,781,3.295,782,3.443,783,3.516,844,4.1,845,4.493,846,4.292,855,3.801,1044,5.76,1045,5.76]],["title/classes/GetOneConversationDto.html",[0,0.197,695,2.893]],["body/classes/GetOneConversationDto.html",[0,0.35,2,1.192,3,0.13,4,0.13,5,0.117,7,0.196,8,0.009,9,0.007,10,0.007,16,0.229,29,1.484,40,0.587,76,0.613,85,0.487,95,1.503,96,2.012,99,2.581,103,3.345,166,2.321,183,1.995,185,2.205,635,3.624,637,3.497,638,2.185,646,3.762,691,5.103,695,4.705,781,3.266,782,3.413,783,3.497,844,4.078,845,4.468,846,4.255,847,4.587,848,5.033,855,3.768,1044,4.587]],["title/injectables/GoogleStrategy.html",[70,0.751,1046,3.063]],["body/injectables/GoogleStrategy.html",[0,0.216,3,0.11,4,0.11,5,0.099,7,0.132,8,0.01,9,0.007,10,0.007,16,0.255,17,0.782,32,1.947,40,0.396,70,1.093,71,1.605,73,2.902,76,0.685,78,0.887,79,0.839,80,0.802,85,0.41,86,1.149,87,2.215,95,1.507,99,2.309,104,0.844,105,2.925,116,5.24,183,1.344,202,1.785,418,2.872,419,3.011,421,3.011,434,3.513,438,4.457,443,4.754,445,4.754,446,3.011,461,5.004,553,3.366,579,5.754,909,4.235,910,6.313,918,3.86,920,4.235,922,4.235,924,3.86,926,4.235,927,4.235,928,4.235,929,4.235,930,4.235,931,4.235,932,4.235,1046,4.457,1047,4.235,1048,4.804,1049,7.629,1050,4.804,1051,3.011,1052,4.235,1053,4.804,1054,4.804,1055,4.804,1056,4.804,1057,4.804,1058,4.804,1059,4.804,1060,4.804]],["title/controllers/HealthController.html",[11,1.587,1061,3.522]],["body/controllers/HealthController.html",[0,0.222,3,0.113,4,0.113,5,0.101,7,0.135,8,0.01,9,0.007,10,0.007,11,1.788,13,1.838,15,2.341,16,0.248,17,0.804,26,2.606,29,1.284,73,2.001,76,0.53,85,0.422,86,1.17,87,2.544,96,1.74,104,0.867,105,2.978,110,3.079,143,3.565,158,2.71,163,1.083,235,3.984,267,4.539,281,3.259,305,4.353,344,3.968,572,3.921,803,3.968,1061,5.22,1062,4.353,1063,7.712,1064,7.712,1065,4.938,1066,5.726,1067,4.938,1068,4.938,1069,6.496,1070,6.496,1071,4.938,1072,6.496,1073,6.496,1074,4.938,1075,4.938,1076,4.938,1077,4.938,1078,3.968,1079,4.938,1080,4.938,1081,4.938,1082,3.451,1083,4.938,1084,3.968,1085,6.496,1086,4.938,1087,4.938,1088,4.938]],["title/injectables/HttpCacheInterceptor.html",[70,0.751,1089,3.522]],["body/injectables/HttpCacheInterceptor.html",[0,0.244,3,0.124,4,0.124,5,0.112,7,0.149,8,0.01,9,0.007,10,0.007,16,0.175,17,0.885,40,0.448,70,1.184,71,1.817,76,0.583,78,1.004,79,0.715,80,0.908,85,0.464,86,1.245,95,1.277,101,3.728,104,0.955,163,1.516,183,1.934,202,2.238,253,2.667,400,6.7,414,4.39,416,2.984,1089,5.555,1090,6.094,1091,4.793,1092,6.913,1093,6.913,1094,5.437,1095,4.369,1096,5.437,1097,5.437,1098,7.6,1099,5.437,1100,5.437,1101,5.437,1102,5.437]],["title/classes/HttpExceptionFilter.html",[0,0.197,1103,3.522]],["body/classes/HttpExceptionFilter.html",[0,0.245,2,1.139,3,0.124,4,0.124,5,0.112,7,0.15,8,0.009,9,0.007,10,0.007,16,0.223,17,0.888,40,0.449,76,0.585,78,1.007,79,0.717,80,0.91,85,0.465,86,1.247,104,0.958,202,2.241,232,2.65,233,5.318,234,6.115,243,5.564,244,7.058,245,6.709,246,7.058,248,4.381,249,3.259,253,3.397,254,3.801,259,2.877,260,4.806,261,4.806,262,4.806,263,4.806,273,4.806,276,4.806,277,4.806,278,2.276,279,4.806,281,3.598,282,4.806,308,6.105,1103,5.564,1104,4.806,1105,5.452,1106,5.452,1107,5.452]],["title/interfaces/IApp.html",[179,2.01,1108,3.522]],["body/interfaces/IApp.html",[3,0.112,4,0.112,5,0.101,7,0.178,8,0.01,9,0.007,10,0.007,16,0.158,40,0.634,79,1.102,85,0.419,95,1.477,101,2.41,163,1.077,179,2.253,181,2.81,185,2.003,202,2.026,278,2.051,299,3.433,792,3.243,873,3.662,915,3.243,1108,5.818,1109,3.948,1110,6.427,1111,4.825,1112,6.185,1113,4.913,1114,6.474,1115,3.948,1116,5.396,1117,4.913,1118,4.331,1119,4.331,1120,4.913,1121,4.913,1122,4.913,1123,4.331,1124,4.913,1125,4.913,1126,3.948,1127,4.913,1128,6.474,1129,3.948,1130,3.948,1131,4.913,1132,6.785,1133,4.331,1134,4.913,1135,4.913,1136,3.662,1137,3.662,1138,4.913,1139,4.913,1140,4.913,1141,4.913,1142,4.913,1143,4.913,1144,4.913]],["title/interfaces/ISwaggerOptions.html",[179,2.01,1145,3.266]],["body/interfaces/ISwaggerOptions.html",[3,0.1,4,0.1,5,0.09,7,0.12,8,0.009,9,0.006,10,0.006,15,2.841,40,0.634,52,3.528,80,1.419,85,0.374,95,1.262,109,3.956,179,2.008,181,2.506,185,1.854,196,3.766,205,3.067,384,4.467,890,2.404,915,5.466,1145,4.467,1146,3.861,1147,7.347,1148,7.347,1149,7.347,1150,8.281,1151,7.004,1152,6.477,1153,5.994,1154,5.994,1155,5.994,1156,5.994,1157,5.994,1158,5.994,1159,5.994,1160,5.284,1161,7.347,1162,5.994,1163,5.284,1164,5.284,1165,5.284,1166,5.994,1167,4.467,1168,5.994,1169,5.994,1170,4.816,1171,4.816,1172,5.994,1173,4.816,1174,6.023,1175,6.023]],["title/modules/InterceptorModule.html",[50,1.391,318,3.063]],["body/modules/InterceptorModule.html",[0,0.248,3,0.126,4,0.126,5,0.113,7,0.151,8,0.01,9,0.007,10,0.007,16,0.277,17,0.898,50,2.213,52,2.448,63,2.705,318,4.874,333,3.853,381,7.311,382,7.311,859,5.198,885,5.198,1176,5.514,1177,8.471,1178,5.198,1179,5.514,1180,4.874,1181,5.514,1182,5.514,1183,5.514,1184,5.198,1185,5.514]],["title/injectables/LoggerContextMiddleware.html",[70,0.751,346,3.266]],["body/injectables/LoggerContextMiddleware.html",[0,0.252,3,0.128,4,0.128,5,0.115,7,0.153,8,0.009,9,0.007,10,0.007,16,0.226,17,0.911,40,0.58,70,1.206,71,1.869,76,0.6,78,1.033,79,0.736,80,0.934,85,0.478,86,1.268,104,0.983,163,1.226,232,2.14,249,4.831,253,3.965,254,4.435,259,2.952,346,5.245,863,4.831,894,5.245,896,6.204,897,7.124,900,4.645,901,6.204,915,3.692,1186,6.204,1187,4.931,1188,5.593,1189,5.593,1190,5.593]],["title/classes/LoggerModule.html",[0,0.197,352,3.266]],["body/classes/LoggerModule.html",[0,0.264,2,1.225,3,0.134,4,0.134,5,0.121,7,0.161,8,0.009,9,0.008,10,0.008,16,0.253,17,0.955,50,1.861,63,2.877,76,0.629,85,0.501,86,1.306,104,1.03,163,1.286,202,1.641,237,5.498,240,4.932,352,5.864,531,4.098,1191,5.17,1192,8.219,1193,5.864,1194,7.868,1195,5.825,1196,5.864,1197,5.864,1198,7.868]],["title/injectables/LoggerService.html",[70,0.751,240,2.747]],["body/injectables/LoggerService.html",[0,0.178,3,0.09,4,0.09,5,0.081,7,0.108,8,0.009,9,0.006,10,0.006,15,4.259,16,0.127,17,0.643,40,0.651,41,2.645,70,0.956,71,1.321,76,0.849,78,1.421,79,1.012,80,1.348,85,0.337,86,1.005,95,1.663,104,1.351,183,1.561,185,1.726,186,3.747,220,4.158,235,3.55,240,3.498,242,4.269,249,4.599,924,4.484,1199,3.484,1200,5.58,1201,5.58,1202,5.58,1203,5.58,1204,5.58,1205,5.58,1206,3.952,1207,7.692,1208,7.027,1209,3.952,1210,5.58,1211,3.952,1212,5.58,1213,3.952,1214,5.58,1215,3.952,1216,5.58,1217,3.952,1218,3.952,1219,3.952,1220,6.468,1221,5.58,1222,3.952,1223,3.952,1224,3.952,1225,3.952,1226,3.952]],["title/injectables/LoggingInterceptor.html",[70,0.751,1178,3.266]],["body/injectables/LoggingInterceptor.html",[0,0.249,3,0.126,4,0.126,5,0.114,7,0.152,8,0.009,9,0.007,10,0.007,16,0.246,17,0.9,40,0.456,70,1.197,71,1.848,76,0.593,78,1.021,79,0.728,80,0.923,85,0.472,86,1.259,104,0.971,163,1.212,202,1.547,232,2.116,414,4.417,416,3.035,861,4.612,862,4.882,863,4.811,864,5.312,866,4.58,867,4.612,870,3.163,872,3.65,873,4.121,1178,5.207,1227,4.875,1228,5.53,1229,5.53,1230,5.53,1231,5.53,1232,5.53,1233,5.53,1234,6.16,1235,5.53,1236,5.53,1237,5.53]],["title/classes/LoginDto.html",[0,0.197,476,2.747]],["body/classes/LoginDto.html",[0,0.295,2,1.37,3,0.15,4,0.15,5,0.135,7,0.18,8,0.009,9,0.008,10,0.008,16,0.249,29,1.705,183,1.835,476,4.862,490,3.461,553,3.461,777,3.334,1238,5.782,1239,4.329,1240,5.782,1241,5.27]],["title/controllers/MathController.html",[11,1.587,1242,3.266]],["body/controllers/MathController.html",[0,0.196,3,0.099,4,0.099,5,0.089,7,0.119,8,0.01,9,0.006,10,0.006,11,1.575,13,1.619,15,2.062,16,0.261,17,0.708,19,3.413,21,3.413,25,3.413,26,2.296,27,3.413,29,1.131,31,2.134,32,1.763,36,2.374,40,0.359,44,2.489,45,2.489,46,2.489,47,2.489,76,0.64,78,0.803,79,0.572,80,0.727,85,0.371,86,1.075,96,2.102,104,1.048,110,2.828,136,2.489,137,2.388,142,3.567,143,3.274,145,2.388,156,2.489,158,2.388,160,2.489,161,2.601,163,1.308,199,3.52,202,1.67,226,2.062,235,2.388,294,3.594,396,3.737,467,3.835,545,3.243,792,2.872,866,4.07,870,2.489,882,2.872,1066,5.259,1082,3.04,1130,5.887,1242,4.446,1243,3.835,1244,4.351,1245,8.119,1246,4.351,1247,5.966,1248,4.351,1249,5.966,1250,4.351,1251,4.351,1252,5.966,1253,5.966,1254,3.835,1255,3.243,1256,3.835,1257,4.351,1258,4.351,1259,4.351,1260,3.04,1261,5.966,1262,4.351,1263,4.351,1264,4.351,1265,4.351,1266,4.794]],["title/modules/MathModule.html",[50,1.391,319,3.063]],["body/modules/MathModule.html",[0,0.273,3,0.138,4,0.138,5,0.125,7,0.166,8,0.01,9,0.008,10,0.008,13,2.754,16,0.267,17,0.987,50,2.348,52,2.693,65,3.47,79,0.798,319,5.171,882,4.004,1242,5.952,1255,5.516,1256,5.347,1267,6.066,1268,6.066,1269,7.401,1270,6.066,1271,6.066,1272,6.066]],["title/classes/MessagesGateway.html",[0,0.197,1273,3.266]],["body/classes/MessagesGateway.html",[0,0.143,2,0.664,3,0.073,4,0.073,5,0.065,7,0.087,8,0.01,9,0.005,10,0.005,16,0.218,40,0.627,73,1.289,76,0.816,78,1.365,79,1.023,80,1.235,82,1.328,85,0.272,86,0.858,87,2.405,95,1.578,96,2.605,104,1.253,113,1.617,156,1.819,163,1.49,185,1.474,186,3.22,196,2.707,202,1.775,267,4.983,572,2.904,678,2.725,689,5.617,825,5.018,828,5.459,1260,5.433,1273,3.55,1274,2.804,1275,5.036,1276,4.2,1277,5.036,1278,4.2,1279,5.712,1280,4.2,1281,3.18,1282,4.707,1283,4.764,1284,5.712,1285,2.804,1286,6.98,1287,4.764,1288,3.18,1289,2.804,1290,4.764,1291,3.18,1292,2.804,1293,4.764,1294,3.18,1295,2.804,1296,4.764,1297,3.18,1298,3.18,1299,6.343,1300,4.764,1301,3.18,1302,2.804,1303,4.983,1304,4.764,1305,3.18,1306,4.764,1307,3.18,1308,4.764,1309,6.343,1310,2.804,1311,2.804,1312,2.556,1313,2.804,1314,2.556,1315,2.804,1316,5.712,1317,3.18,1318,3.18,1319,5.712,1320,3.18,1321,3.18,1322,3.18,1323,3.18,1324,3.18,1325,3.18,1326,3.18,1327,3.18,1328,5.73,1329,3.18,1330,4.764,1331,3.18,1332,3.18]],["title/modules/MessagesModule.html",[50,1.391,320,3.063]],["body/modules/MessagesModule.html",[0,0.273,3,0.138,4,0.138,5,0.125,7,0.166,8,0.009,9,0.008,10,0.008,16,0.257,17,0.987,50,2.348,52,2.693,53,3.508,59,3.906,60,3.201,61,2.976,63,3.63,320,6.06,1273,5.516,1282,5.724,1311,5.347,1333,5.347,1334,5.347,1335,6.066,1336,6.066]],["title/injectables/MessagesService.html",[70,0.751,1282,2.893]],["body/injectables/MessagesService.html",[0,0.13,3,0.066,4,0.066,5,0.059,7,0.079,8,0.01,9,0.005,10,0.005,16,0.173,17,0.471,40,0.59,70,0.759,71,0.966,76,0.768,78,1.27,79,1.016,80,1.148,85,0.247,86,0.798,87,1.667,95,1.616,104,1.208,113,1.47,163,1.507,166,2.515,185,1.371,186,2.554,190,2.155,191,3.378,202,0.809,225,3.303,226,3.392,295,3.097,296,3.561,622,3.628,644,3.576,661,4.016,678,1.654,689,5.289,825,4.723,828,5.524,890,1.587,918,6.315,1082,3.097,1126,5.235,1167,2.155,1275,4.751,1276,3.907,1277,3.907,1278,3.907,1280,3.907,1282,2.925,1285,2.549,1289,3.907,1292,3.907,1295,3.907,1302,3.907,1303,4.552,1337,2.549,1338,4.432,1339,2.891,1340,2.891,1341,4.432,1342,2.891,1343,2.891,1344,2.891,1345,2.891,1346,4.432,1347,4.432,1348,3.561,1349,4.432,1350,4.432,1351,4.432,1352,2.891,1353,6.042,1354,7.156,1355,2.891,1356,2.891,1357,2.891,1358,2.891,1359,2.891,1360,2.891,1361,2.891,1362,2.891,1363,4.432,1364,2.891,1365,4.432,1366,2.891,1367,2.891,1368,2.891,1369,2.891,1370,2.891,1371,2.891,1372,2.891,1373,2.891]],["title/classes/NatsStrategy.html",[0,0.197,1374,3.266]],["body/classes/NatsStrategy.html",[0,0.245,2,1.139,3,0.124,4,0.124,5,0.112,7,0.19,8,0.01,9,0.007,10,0.007,16,0.175,40,0.449,76,0.585,78,1.007,79,0.717,80,0.91,85,0.465,86,1.247,95,1.405,104,0.958,179,2.5,183,1.938,202,1.938,249,3.259,396,2.992,882,3.598,890,4.177,1260,3.809,1374,5.161,1375,4.381,1376,6.709,1377,6.925,1378,6.105,1379,5.452,1380,5.161,1381,6.115,1382,6.105,1383,4.806,1384,4.806,1385,4.806,1386,4.806,1387,4.806,1388,4.806,1389,4.806,1390,4.806,1391,4.806,1392,4.806,1393,4.806]],["title/interfaces/NatsSubscriber.html",[179,2.01,1380,3.266]],["body/interfaces/NatsSubscriber.html",[0,0.245,3,0.124,4,0.124,5,0.112,7,0.19,8,0.01,9,0.007,10,0.007,16,0.175,40,0.66,85,0.465,95,1.526,179,2.5,181,3.119,183,1.526,185,2.142,202,1.938,396,2.992,882,3.598,890,4.636,1111,5.161,1374,4.063,1375,4.381,1376,6.105,1378,4.806,1380,5.672,1381,6.787,1382,6.105,1383,4.806,1384,4.806,1385,4.806,1386,4.806,1387,4.806,1388,4.806,1389,4.806,1390,4.806,1391,4.806,1392,4.806,1393,4.806]],["title/controllers/OauthController.html",[11,1.587,1394,3.266]],["body/controllers/OauthController.html",[0,0.136,3,0.069,4,0.069,5,0.062,7,0.083,8,0.01,9,0.005,10,0.005,11,1.092,13,1.123,15,1.43,16,0.233,17,0.491,19,2.619,21,2.619,22,2.737,23,2.737,24,2.737,25,2.619,26,1.592,27,2.619,29,0.784,31,1.48,32,1.223,36,2.49,39,1.804,40,0.547,41,1.43,42,1.804,43,1.804,44,1.726,45,1.726,46,1.726,47,1.726,76,0.713,78,1.141,79,0.813,80,1.032,82,1.26,85,0.258,86,0.825,87,2.568,95,1.022,96,2.34,101,3.257,104,1.166,105,3.431,110,2.17,136,1.726,137,1.656,141,2.249,142,3.308,143,3.836,145,1.656,146,2.424,156,1.726,158,3.644,160,2.619,161,2.737,163,1.456,253,3.833,259,1.592,417,2.424,418,1.804,468,5.157,478,5.209,483,3.313,493,2.66,494,4.603,503,1.991,508,4.123,509,4.877,678,1.726,900,5.157,916,4.077,1051,3.872,1130,6.278,1137,4.949,1394,3.412,1395,2.66,1396,2.66,1397,4.578,1398,5.445,1399,4.578,1400,4.578,1401,4.578,1402,3.017,1403,3.017,1404,6.162,1405,6.887,1406,5.533,1407,3.017,1408,3.017,1409,5.445,1410,4.578,1411,3.017,1412,3.017,1413,3.017,1414,3.412,1415,3.017,1416,3.017,1417,3.017,1418,3.017,1419,3.017,1420,3.017,1421,3.017,1422,3.652,1423,2.66,1424,3.017,1425,3.017,1426,3.017,1427,4.578,1428,3.017,1429,3.017,1430,3.017,1431,3.017,1432,3.017,1433,4.578,1434,3.017,1435,3.017,1436,3.017,1437,3.017,1438,3.017,1439,3.017,1440,3.017]],["title/modules/OauthModule.html",[50,1.391,321,3.063]],["body/modules/OauthModule.html",[0,0.224,3,0.114,4,0.114,5,0.103,7,0.137,8,0.009,9,0.007,10,0.007,13,2.434,16,0.27,17,0.812,50,2.075,52,2.215,53,3.1,57,4.719,59,3.451,60,2.633,61,2.447,63,3.208,65,3.741,68,3.718,315,5.171,321,6.254,531,4.57,906,5.764,1046,5.764,1394,5.437,1422,5.825,1423,4.398,1441,4.398,1442,4.398,1443,4.398,1444,4.989,1445,4.989,1446,4.989,1447,4.989,1448,4.989,1449,4.989]],["title/injectables/OauthService.html",[70,0.751,1422,2.893]],["body/injectables/OauthService.html",[0,0.155,3,0.079,4,0.079,5,0.071,7,0.095,8,0.01,9,0.005,10,0.005,16,0.226,17,0.561,40,0.579,70,0.866,71,1.152,73,2.049,76,0.754,78,1.297,79,0.924,80,1.173,85,0.294,86,0.911,87,2.561,95,1.356,99,2.168,104,1.159,154,4.536,155,3.038,156,2.892,163,1.77,202,2.222,235,2.775,253,1.69,294,2.48,299,4.184,424,4.463,442,4.184,481,4.354,490,3.16,492,1.971,495,4.603,553,3.16,570,3.038,572,4.209,588,3.58,678,3.774,900,4.354,916,2.274,1017,2.408,1051,2.16,1260,2.408,1398,4.457,1414,2.568,1422,3.337,1450,3.038,1451,5.056,1452,5.056,1453,5.056,1454,3.446,1455,3.446,1456,5.056,1457,3.446,1458,5.056,1459,3.446,1460,5.056,1461,3.446,1462,5.056,1463,3.446,1464,4.063,1465,3.446,1466,3.446,1467,5.056,1468,5.988,1469,5.9,1470,5.988,1471,5.988,1472,5.988,1473,5.988,1474,3.446,1475,3.446,1476,3.446,1477,3.446,1478,3.038,1479,3.038,1480,3.446,1481,3.446,1482,3.446,1483,3.446,1484,3.446,1485,3.446,1486,3.446,1487,3.446]],["title/classes/PaginationDto.html",[0,0.197,107,3.063]],["body/classes/PaginationDto.html",[0,0.288,2,1.011,3,0.11,4,0.11,5,0.099,7,0.133,8,0.009,9,0.007,10,0.007,16,0.206,29,1.258,36,2.53,40,0.674,76,0.771,85,0.413,95,1.564,96,2.533,107,4.479,185,1.983,199,3.884,205,3.415,210,4.777,226,3.038,637,3.753,638,1.852,646,4.038,653,6.572,687,5.022,783,4.012,965,4.479,1488,4.266,1489,7.187,1490,7.187,1491,7.187,1492,6.745,1493,4.839,1494,6.41,1495,4.839,1496,6.745,1497,5.651,1498,4.839,1499,6.745]],["title/injectables/ParseIntPipe.html",[70,0.751,1500,3.522]],["body/injectables/ParseIntPipe.html",[0,0.255,3,0.13,4,0.13,5,0.117,7,0.156,8,0.009,9,0.007,10,0.007,16,0.182,17,0.924,40,0.468,70,1.217,71,1.897,76,0.609,78,1.048,79,0.747,80,0.948,85,0.485,86,1.279,87,2.398,95,1.432,104,0.997,163,1.244,202,1.588,232,2.172,278,2.369,592,3.746,678,3.246,890,3.115,965,3.966,1129,4.56,1500,5.707,1501,6.261,1502,5.003,1503,5.707,1504,6.261,1505,6.229,1506,7.162,1507,5.675,1508,4.56,1509,6.261,1510,7.102,1511,5.675,1512,5.675,1513,5.003]],["title/classes/PostEntity.html",[0,0.197,836,2.893]],["body/classes/PostEntity.html",[0,0.279,2,0.96,3,0.105,4,0.105,5,0.095,7,0.126,8,0.009,9,0.006,10,0.006,16,0.148,36,2.167,40,0.699,76,0.911,85,0.393,95,1.629,96,2.99,103,3.015,185,1.916,196,2.936,199,2.84,619,4.007,625,6.477,627,4.054,633,4.329,635,4.36,637,4.041,638,1.76,836,4.089,839,4.895,840,3.697,1514,4.054,1515,5.221,1516,5.629,1517,5.221,1518,5.629,1519,4.598,1520,4.598,1521,4.598,1522,4.598,1523,4.598,1524,4.598,1525,4.598,1526,4.598,1527,4.598,1528,4.598,1529,4.598,1530,6.195,1531,5.461]],["title/controllers/PostsController.html",[11,1.587,1532,3.266]],["body/controllers/PostsController.html",[0,0.086,3,0.044,4,0.044,5,0.039,7,0.053,8,0.01,9,0.003,10,0.003,11,0.695,13,0.714,15,0.909,16,0.212,17,0.312,18,4.135,19,1.826,20,2.001,21,1.826,22,1.908,23,1.908,24,1.908,25,1.826,26,1.012,27,1.826,28,2.001,29,0.499,31,0.941,32,0.778,36,2.505,37,1.203,38,1.203,39,1.147,40,0.588,41,0.909,42,1.147,43,1.147,44,1.097,45,1.097,46,1.097,47,1.097,76,0.749,78,1.29,79,0.919,80,1.166,82,0.801,85,0.164,86,0.575,87,2.622,91,2.856,95,1.475,96,2.461,98,3.706,99,2.68,101,3.338,103,2.928,104,1.227,105,3.689,110,3.012,113,4.029,135,3.706,136,1.097,137,1.053,138,1.341,139,1.43,140,1.43,142,4.269,143,3.919,145,1.053,146,1.542,158,3.833,160,1.826,161,4.175,163,1.531,166,1.039,167,1.691,235,1.752,278,2.533,483,1.513,485,1.691,492,4.405,494,2.379,498,3.706,508,1.43,610,2.994,619,2.732,682,4,774,3.338,833,3.338,841,3.338,856,3.338,971,2.814,972,2.814,981,1.691,982,1.691,1532,2.379,1533,1.691,1534,4.522,1535,3.613,1536,3.613,1537,2.814,1538,3.613,1539,3.613,1540,3.613,1541,3.613,1542,3.613,1543,2.814,1544,3.613,1545,2.814,1546,1.691,1547,1.918,1548,2.814,1549,4.266,1550,5.724,1551,1.918,1552,1.691,1553,1.918,1554,3.192,1555,3.192,1556,1.918,1557,1.691,1558,1.918,1559,4.098,1560,1.918,1561,1.691,1562,1.918,1563,1.918,1564,1.691,1565,1.918,1566,2.565,1567,1.918,1568,1.691,1569,1.918,1570,1.918,1571,1.691,1572,1.918,1573,1.918,1574,1.691,1575,1.918,1576,1.918,1577,1.691,1578,3.153,1579,1.918,1580,3.192,1581,1.918,1582,1.691,1583,3.338,1584,1.918,1585,1.918,1586,1.691,1587,3.153,1588,1.918,1589,1.918,1590,4.777,1591,2.705,1592,1.691,1593,1.691,1594,1.691,1595,1.691,1596,1.691,1597,1.691,1598,1.691,1599,1.691,1600,1.691,1601,1.691,1602,1.691,1603,1.691,1604,1.691,1605,1.918,1606,1.918,1607,1.918,1608,1.918,1609,1.918,1610,1.918,1611,1.918,1612,1.918,1613,3.192,1614,1.918,1615,1.918,1616,1.918,1617,1.918,1618,1.918,1619,1.918,1620,1.918,1621,1.918,1622,1.918,1623,1.918,1624,1.918,1625,1.918,1626,1.918,1627,1.918,1628,1.918,1629,1.918,1630,1.918,1631,1.918,1632,1.918]],["title/modules/PostsModule.html",[50,1.391,322,3.063]],["body/modules/PostsModule.html",[0,0.248,3,0.126,4,0.126,5,0.113,7,0.151,8,0.009,9,0.007,10,0.007,13,2.595,16,0.267,17,0.898,50,2.213,52,2.448,53,3.306,57,4.846,59,3.681,60,2.91,61,2.705,63,3.422,65,3.99,68,4.109,322,6.184,323,4.846,338,4.431,1532,5.702,1591,5.591,1592,4.861,1633,4.861,1634,5.514,1635,4.861,1636,5.514,1637,5.514]],["title/injectables/PostsService.html",[70,0.751,1591,2.893]],["body/injectables/PostsService.html",[0,0.084,3,0.043,4,0.043,5,0.038,7,0.051,8,0.01,9,0.003,10,0.003,16,0.192,17,0.303,32,0.755,36,1.852,40,0.595,70,0.534,71,0.623,73,0.755,74,1.302,75,2.977,76,0.759,78,1.307,79,0.949,80,1.182,81,1.497,82,0.778,85,0.159,86,0.561,87,2.611,95,1.467,103,3.16,104,1.215,105,3.668,109,3.095,113,3.669,163,1.516,166,2.46,191,1.168,202,1.579,205,3.61,278,2.811,294,2.56,483,1.476,492,2.683,503,1.23,564,1.497,567,1.302,572,3.841,586,1.497,591,1.709,592,4.143,610,2.94,619,3.425,620,4.134,622,2.118,642,3.769,645,2.503,649,1.302,758,2.746,764,5.154,771,1.642,774,3.277,833,3.277,839,4.184,840,3.16,841,3.277,856,3.277,902,1.497,1469,2.503,1508,1.497,1515,4.861,1517,4.204,1535,3.538,1536,2.746,1537,2.746,1538,2.746,1539,2.746,1540,2.746,1541,2.746,1542,2.746,1543,2.746,1544,2.746,1545,2.746,1546,1.642,1552,2.746,1557,2.746,1561,2.746,1564,2.746,1566,1.497,1568,2.746,1571,2.746,1574,2.746,1577,2.746,1578,3.095,1582,2.746,1583,3.277,1586,2.746,1587,3.095,1591,2.056,1593,1.642,1594,1.642,1595,1.642,1596,1.642,1597,1.642,1598,1.642,1599,1.642,1600,1.642,1601,1.642,1602,1.642,1603,1.642,1604,1.642,1638,1.642,1639,1.863,1640,1.863,1641,1.863,1642,1.863,1643,1.863,1644,1.863,1645,1.863,1646,1.863,1647,1.863,1648,1.863,1649,1.863,1650,1.863,1651,1.497,1652,1.863,1653,3.115,1654,3.115,1655,1.863,1656,1.863,1657,2.746,1658,3.115,1659,1.863,1660,1.642,1661,1.863,1662,5.218,1663,1.863,1664,4.013,1665,1.863,1666,1.863,1667,3.115,1668,1.863,1669,6.277,1670,1.863,1671,1.863,1672,1.863,1673,1.642,1674,1.863,1675,1.863,1676,3.115,1677,1.863,1678,1.863,1679,1.642,1680,1.863,1681,1.863,1682,1.863,1683,3.115,1684,1.863,1685,3.115,1686,1.863,1687,3.115,1688,1.863,1689,1.863]],["title/modules/PrismaModule.html",[50,1.391,323,2.507]],["body/modules/PrismaModule.html",[0,0.262,3,0.133,4,0.133,5,0.12,7,0.16,8,0.009,9,0.007,10,0.007,16,0.252,17,0.949,50,2.291,52,2.588,53,3.423,59,3.811,60,3.076,61,2.859,63,3.543,75,4.759,323,4.981,341,5.803,342,3.847,531,5.046,1163,6.366,1690,5.138,1691,5.138,1692,5.138,1693,5.829,1694,5.829]],["title/injectables/PrismaService.html",[70,0.751,75,2.313]],["body/injectables/PrismaService.html",[0,0.226,3,0.114,4,0.114,5,0.103,7,0.138,8,0.01,9,0.007,10,0.007,16,0.211,17,0.816,40,0.413,70,1.124,71,1.676,73,2.964,75,3.463,76,0.833,78,0.926,79,0.66,80,0.837,85,0.428,86,1.182,87,2.695,104,1.285,183,1.836,232,1.919,421,3.143,572,3.718,1017,4.585,1116,3.737,1695,4.421,1696,7.314,1697,6.562,1698,8.26,1699,8.26,1700,5.015,1701,6.562,1702,6.234,1703,5.015,1704,5.015,1705,5.015,1706,4.03,1707,5.015,1708,4.421,1709,5.015,1710,5.015,1711,5.015,1712,5.015,1713,5.015,1714,5.015]],["title/classes/ProfileEntity.html",[0,0.197,1715,2.893]],["body/classes/ProfileEntity.html",[0,0.233,2,0.566,3,0.062,4,0.062,5,0.056,7,0.074,8,0.009,9,0.004,10,0.004,16,0.188,29,0.704,36,1.304,40,0.705,76,0.83,79,0.881,85,0.231,95,1.609,96,2.724,101,1.329,127,2.9,133,3.617,185,1.304,186,3.889,199,3.6,226,3.313,295,4.079,434,1.329,468,1.788,591,2.313,633,2.945,635,2.63,637,3.546,638,1.037,646,4.144,649,3.615,782,4.537,783,4.231,784,2.177,791,3.141,792,2.782,794,4.99,797,3.141,808,2.177,809,2.177,810,2.177,813,2.177,814,2.177,815,2.177,816,4.99,844,2.411,1017,2.945,1082,2.945,1084,3.387,1266,3.387,1348,2.177,1499,2.388,1531,4.561,1715,2.782,1716,2.388,1717,6.162,1718,4.561,1719,6.162,1720,4.157,1721,4.561,1722,4.561,1723,4.561,1724,4.561,1725,5.082,1726,3.716,1727,3.716,1728,2.388,1729,5.146,1730,2.709,1731,2.388,1732,3.716,1733,5.146,1734,2.388,1735,4.157,1736,2.709,1737,3.716,1738,2.709,1739,4.561,1740,2.388,1741,2.709,1742,2.388,1743,3.716,1744,3.716,1745,2.388,1746,2.709,1747,2.709,1748,2.388,1749,2.388,1750,4.35,1751,2.388,1752,4.561,1753,2.388,1754,2.709,1755,3.716,1756,3.716,1757,2.388,1758,2.709,1759,2.709,1760,2.388,1761,2.709,1762,2.388,1763,3.716,1764,2.709,1765,2.019,1766,4.215,1767,2.388,1768,2.019,1769,2.019,1770,2.709,1771,2.709,1772,2.388,1773,2.388,1774,2.709,1775,2.709,1776,2.388,1777,2.709,1778,2.709,1779,2.709,1780,2.709,1781,2.709,1782,2.709,1783,2.709,1784,2.709,1785,2.709,1786,2.709]],["title/classes/ReactionsPost.html",[0,0.197,1578,2.893]],["body/classes/ReactionsPost.html",[0,0.337,2,1.291,3,0.141,4,0.141,5,0.127,7,0.205,8,0.009,9,0.008,10,0.008,16,0.241,29,1.607,36,1.912,183,2.095,619,4.282,777,3.143,835,4.32,836,4.08,837,4.967,838,6.016,839,4.32,840,3.262,1515,4.607,1516,4.967,1517,4.607,1518,4.967,1578,4.941,1587,4.08,1787,4.967]],["title/interfaces/Response.html",[179,2.01,254,2.405]],["body/interfaces/Response.html",[0,0.26,3,0.132,4,0.132,5,0.119,7,0.197,8,0.01,9,0.007,10,0.007,16,0.251,17,0.94,40,0.476,70,1.23,85,0.493,163,1.267,179,2.649,181,3.304,185,2.221,232,2.211,254,3.941,294,4.125,414,3.941,416,3.17,861,3.813,863,3.453,864,4.74,866,4.293,867,4.74,870,3.304,872,3.813,888,4.642,1180,4.036,1788,4.642,1789,6.889,1790,5.093]],["title/guards/RolesGuard.html",[357,3.266,1791,3.522]],["body/guards/RolesGuard.html",[0,0.228,3,0.116,4,0.116,5,0.104,7,0.139,8,0.01,9,0.007,10,0.007,16,0.236,17,0.825,30,3.541,40,0.544,70,1.132,73,2.054,76,0.709,78,1.22,79,0.869,80,1.103,82,2.116,85,0.433,86,1.19,99,2.392,104,0.89,163,1.612,196,3.131,200,2.486,202,2.18,205,2.116,232,1.939,253,2.486,333,3.541,357,4.924,379,6.657,410,6.867,411,4.467,413,5.824,414,4.275,416,2.781,429,4.467,430,4.467,500,4.467,1095,4.072,1792,4.467,1793,5.067,1794,5.067,1795,5.067,1796,6.606,1797,5.067,1798,4.072,1799,4.467,1800,6.606,1801,5.067,1802,5.067,1803,5.067]],["title/classes/RtGuard.html",[0,0.197,499,3.266]],["body/classes/RtGuard.html",[0,0.288,2,1.338,3,0.146,4,0.146,5,0.132,7,0.176,8,0.009,9,0.008,10,0.008,16,0.246,32,2.597,73,3.314,76,0.688,183,1.793,417,5.148,418,3.83,419,4.016,421,4.016,499,5.701,1804,5.648,1805,6.407,1806,6.407]],["title/injectables/RtStrategy.html",[70,0.751,529,3.063]],["body/injectables/RtStrategy.html",[0,0.223,3,0.113,4,0.113,5,0.102,7,0.136,8,0.01,9,0.007,10,0.007,16,0.265,17,0.808,32,2.012,40,0.537,70,1.116,71,1.659,73,2.642,76,0.699,78,1.204,79,0.858,80,1.088,85,0.424,86,1.174,104,0.872,163,1.088,183,1.389,202,1.389,205,2.072,235,2.724,253,3.791,259,2.619,342,3.276,418,2.967,419,3.111,421,3.111,434,3.197,435,4.376,436,5.4,438,4.554,442,5.4,443,4.857,444,4.376,445,4.857,446,3.111,447,3.111,451,4.376,452,4.376,453,5.746,454,4.376,455,4.376,457,4.376,461,4.554,529,4.554,545,3.699,571,4.376,900,4.302,1807,4.376,1808,4.963,1809,6.518,1810,4.963,1811,4.963,1812,4.963,1813,4.963,1814,4.963]],["title/classes/SignupDto.html",[0,0.197,481,2.893]],["body/classes/SignupDto.html",[0,0.292,2,1.356,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.688,183,1.817,481,5.089,490,3.426,553,3.426,588,3.881,777,3.301,1239,4.285,1240,5.723,1241,5.217,1815,5.723]],["title/injectables/TimeoutInterceptor.html",[70,0.751,1184,3.266]],["body/injectables/TimeoutInterceptor.html",[0,0.242,3,0.123,4,0.123,5,0.111,7,0.148,8,0.01,9,0.007,10,0.007,16,0.243,17,0.878,40,0.444,70,1.178,71,1.802,76,0.579,78,0.996,79,0.709,80,0.9,85,0.46,86,1.239,104,0.947,163,1.66,198,4.018,232,2.063,268,4.753,278,2.251,414,4.376,416,2.959,861,4.538,862,4.804,863,4.526,864,5.263,866,4.526,867,4.538,869,6.083,870,3.084,871,4.753,872,3.558,875,4.753,911,6.061,1184,5.124,1816,4.753,1817,5.391,1818,6.876,1819,6.876,1820,5.391,1821,5.391]],["title/injectables/TransformInterceptor.html",[70,0.751,1180,3.063]],["body/injectables/TransformInterceptor.html",[0,0.25,3,0.127,4,0.127,5,0.114,7,0.192,8,0.01,9,0.007,10,0.007,16,0.247,17,0.905,40,0.458,70,1.201,71,1.859,76,0.597,78,1.027,79,0.732,80,0.929,85,0.475,86,1.263,104,0.977,163,1.219,179,2.55,232,2.128,254,3.052,294,3.44,414,4.426,416,3.849,861,5.069,862,3.886,863,4.592,864,5.323,866,4.592,867,4.628,870,3.181,872,3.671,888,4.469,1180,4.9,1788,4.469,1789,4.903,1790,4.903,1822,5.561]],["title/classes/UpdateCommentTextDto.html",[0,0.197,1583,3.063]],["body/classes/UpdateCommentTextDto.html",[0,0.292,2,1.356,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.688,166,2.114,183,1.817,617,4.285,622,3.426,776,4.839,777,3.301,778,5.217,779,5.217,1583,5.387,1823,5.723]],["title/classes/UpdateConversationDto.html",[0,0.197,700,2.62]],["body/classes/UpdateConversationDto.html",[0,0.36,2,1.026,3,0.112,4,0.112,5,0.101,7,0.211,8,0.009,9,0.007,10,0.007,16,0.233,29,1.277,36,2.24,40,0.634,76,0.777,79,0.953,80,1.372,85,0.419,95,1.635,99,1.779,103,2.115,127,3.32,166,1.6,183,2.154,185,2.003,483,2.329,635,3.291,637,3.176,638,1.88,641,3.08,643,3.553,644,3.553,646,3.417,671,4.403,685,2.937,700,3.87,704,2.937,708,2.937,781,2.81,783,2.41,844,2.81,845,3.08,849,3.433,850,5.378,853,5.378,854,3.662,855,3.243,1824,4.913,1825,4.913,1826,4.913]],["title/classes/UpdateMembersConversationDto.html",[0,0.197,704,2.62]],["body/classes/UpdateMembersConversationDto.html",[0,0.366,2,1.087,3,0.119,4,0.119,5,0.107,7,0.216,8,0.009,9,0.007,10,0.007,16,0.239,29,1.353,36,1.609,40,0.554,76,0.558,79,0.685,85,0.444,95,1.63,99,1.884,103,2.239,127,2.386,166,1.694,183,2.202,185,2.079,483,2.466,635,3.417,637,3.297,638,1.991,641,3.262,643,3.689,644,4.318,646,3.547,671,4.501,685,3.111,700,3.111,704,4.018,708,3.111,781,2.976,783,2.552,844,2.976,845,3.262,849,3.636,850,4.696,853,5.498,854,3.878,855,3.434,1827,5.203]],["title/classes/UpdateMessageDto.html",[0,0.197,1303,3.063]],["body/classes/UpdateMessageDto.html",[0,0.27,2,1.255,3,0.137,4,0.137,5,0.123,7,0.165,8,0.009,9,0.008,10,0.008,16,0.237,40,0.606,76,0.79,85,0.513,95,1.531,166,2.59,183,1.682,185,2.276,483,2.848,689,5.558,825,4.857,827,4.829,831,5.298,853,5.142,1303,5.142,1828,7.012,1829,6.009,1830,5.298,1831,4.479,1832,6.009]],["title/classes/UpdatePasswordDto.html",[0,0.197,488,3.063]],["body/classes/UpdatePasswordDto.html",[0,0.292,2,1.356,3,0.148,4,0.148,5,0.133,7,0.178,8,0.009,9,0.008,10,0.008,16,0.248,29,1.688,183,1.817,488,5.387,553,3.426,777,3.301,1239,4.285,1241,5.217,1833,5.723,1834,6.492,1835,5.723,1836,5.723]],["title/classes/UpdatePostDto.html",[0,0.197,1587,2.893]],["body/classes/UpdatePostDto.html",[0,0.337,2,1.291,3,0.141,4,0.141,5,0.127,7,0.205,8,0.009,9,0.008,10,0.008,16,0.241,29,1.607,36,1.912,183,2.095,619,4.282,777,3.143,835,4.32,836,4.08,837,4.967,838,6.016,839,4.32,840,3.262,1515,4.607,1516,4.967,1517,4.607,1518,4.967,1578,4.08,1587,4.941,1787,4.967]],["title/classes/UpdateRolesConversationDto.html",[0,0.197,708,2.62]],["body/classes/UpdateRolesConversationDto.html",[0,0.361,2,1.042,3,0.114,4,0.114,5,0.103,7,0.212,8,0.009,9,0.007,10,0.007,16,0.235,29,1.297,36,1.543,40,0.638,76,0.783,79,0.656,85,0.426,95,1.639,99,1.806,103,2.147,127,2.288,166,1.624,183,2.167,185,2.023,483,2.365,635,3.325,637,3.208,638,1.909,641,4.573,643,4.249,644,4.249,646,3.451,671,4.429,685,2.982,700,2.982,704,2.982,708,3.909,781,2.854,783,2.447,844,2.854,845,3.127,849,3.486,850,5.41,853,5.41,854,3.718,855,3.293,1837,4.989,1838,4.989,1839,4.989]],["title/classes/UpdateUserAvatarDto.html",[0,0.197,125,2.62]],["body/classes/UpdateUserAvatarDto.html",[0,0.365,2,1.312,3,0.143,4,0.143,5,0.129,7,0.222,8,0.009,9,0.008,10,0.008,16,0.243,29,1.633,119,3.756,125,4.519,127,2.881,131,3.756,133,3.594,183,2.269,777,3.194,1715,4.989,1840,4.682,1841,4.682,1842,5.048,1843,6.074]],["title/classes/UpdateUserCoverDto.html",[0,0.197,131,2.62]],["body/classes/UpdateUserCoverDto.html",[0,0.365,2,1.312,3,0.143,4,0.143,5,0.129,7,0.222,8,0.009,9,0.008,10,0.008,16,0.243,29,1.633,119,3.756,125,3.756,127,2.881,131,4.519,133,3.594,183,2.269,777,3.194,1715,4.989,1840,4.682,1841,4.682,1842,5.048,1843,6.074]],["title/classes/UpdateUserProfileDto.html",[0,0.197,119,2.62]],["body/classes/UpdateUserProfileDto.html",[0,0.276,2,0.752,3,0.082,4,0.082,5,0.074,7,0.168,8,0.009,9,0.005,10,0.005,16,0.168,29,0.936,36,1.113,40,0.681,76,0.886,79,0.808,85,0.307,95,1.569,96,2.911,101,1.766,119,3.12,125,2.152,127,3.088,131,2.152,133,3.852,183,1.885,185,1.614,186,3.734,199,3.419,226,2.91,295,3.647,591,1.976,649,2.515,777,1.83,782,4.875,783,4.096,784,2.892,791,2.683,792,2.376,794,4.576,797,2.683,816,3.89,844,2.059,847,6.637,1082,2.515,1084,2.892,1266,2.892,1715,5.607,1717,5.937,1718,4.601,1719,5.937,1720,4.194,1721,4.601,1722,4.601,1723,4.601,1724,4.601,1725,4.934,1726,3.173,1727,3.173,1728,3.173,1729,4.601,1731,3.173,1732,3.173,1733,4.601,1734,3.173,1735,2.892,1737,4.601,1739,3.173,1740,3.173,1742,3.173,1743,3.173,1744,3.173,1745,3.173,1748,3.173,1749,3.173,1750,3.89,1751,3.173,1752,3.173,1753,3.173,1755,3.173,1756,3.173,1757,3.173,1760,3.173,1762,3.173,1763,3.173,1840,2.683,1841,2.683,1842,2.892,1843,4.194,1844,3.6,1845,3.6,1846,3.6,1847,3.6,1848,3.6,1849,3.6,1850,3.6,1851,3.6,1852,3.6,1853,3.6,1854,3.6]],["title/classes/UserEntity.html",[0,0.197,1239,2.893]],["body/classes/UserEntity.html",[0,0.233,2,0.746,3,0.082,4,0.082,5,0.073,7,0.098,8,0.009,9,0.005,10,0.005,16,0.197,29,0.929,36,2.432,40,0.671,76,0.765,79,0.883,85,0.305,95,1.618,96,2.512,185,1.606,186,3.952,199,3.077,204,4.7,434,1.753,490,4.229,553,3.227,588,4.261,635,3.781,637,3.292,638,1.367,646,3.925,682,5.196,782,2.136,783,3.994,791,5.002,792,3.426,794,5.002,796,3.15,797,3.869,801,3.15,802,4.576,803,5.728,806,4.576,807,4.576,808,2.871,809,2.871,810,2.871,811,2.497,812,2.497,813,2.871,814,2.871,815,2.871,816,5.002,817,4.576,818,3.15,1239,3.426,1835,5.39,1836,5.39,1855,3.15,1856,3.573,1857,7.862,1858,5.191,1859,3.573,1860,5.191,1861,7.128,1862,3.573,1863,3.573,1864,3.573,1865,3.573,1866,3.573,1867,5.191,1868,3.573,1869,5.191,1870,5.191,1871,5.191,1872,5.191,1873,5.191,1874,3.573,1875,3.573,1876,3.573,1877,3.573,1878,3.573,1879,3.573,1880,3.573,1881,3.573]],["title/controllers/UsersController.html",[11,1.587,1882,3.266]],["body/controllers/UsersController.html",[0,0.107,3,0.054,4,0.054,5,0.049,7,0.065,8,0.01,9,0.004,10,0.004,11,0.863,13,0.887,15,1.13,16,0.222,17,0.388,18,3.973,19,2.179,20,2.388,21,2.179,22,2.277,23,2.277,24,2.277,25,2.179,26,1.258,27,2.179,28,2.388,29,0.619,31,1.169,32,0.966,36,2.474,37,1.494,38,1.494,39,1.425,40,0.57,41,1.13,42,1.425,43,1.425,44,1.363,45,1.363,46,1.363,47,1.363,76,0.714,78,1.229,79,0.875,80,1.111,82,0.995,85,0.203,86,0.686,87,2.57,90,3.824,91,3.789,92,3.824,93,3.824,95,1.534,96,2.345,98,3.325,99,3.082,100,2.101,101,3.264,103,3.146,104,1.169,105,3.587,110,2.817,113,4.066,114,1.915,116,4.184,119,3.25,124,1.915,125,3.25,127,1.747,130,1.915,131,3.25,133,2.179,135,4.153,136,1.363,137,1.308,138,1.665,139,1.776,140,1.776,141,1.776,142,4.132,143,3.794,145,1.308,149,1.915,150,1.915,151,1.915,152,1.915,154,3.25,158,3.652,159,1.494,160,3.806,161,3.978,163,1.459,166,2.321,168,2.101,170,2.101,172,4.051,173,2.101,175,2.101,448,1.665,468,2.514,476,3.408,490,1.258,498,4.429,501,1.776,553,3.137,588,2.277,949,3.358,956,3.358,1254,2.101,1882,2.839,1883,2.101,1884,4.195,1885,4.195,1886,4.195,1887,4.195,1888,2.101,1889,2.383,1890,2.383,1891,2.383,1892,2.101,1893,2.383,1894,2.383,1895,3.358,1896,2.101,1897,2.383,1898,3.358,1899,2.383,1900,2.383,1901,2.383,1902,2.383,1903,2.383,1904,2.383,1905,2.383,1906,2.383,1907,2.101,1908,2.383,1909,2.383,1910,2.101,1911,2.101,1912,2.101,1913,2.383,1914,2.383,1915,2.383,1916,2.383,1917,2.383,1918,2.383,1919,2.383,1920,2.383,1921,2.383,1922,2.383,1923,2.383,1924,2.383,1925,2.383,1926,2.383]],["title/modules/UsersModule.html",[50,1.391,57,2.507]],["body/modules/UsersModule.html",[0,0.215,3,0.109,4,0.109,5,0.098,7,0.131,8,0.01,9,0.007,10,0.007,13,2.366,16,0.262,17,0.778,40,0.394,50,2.017,52,2.122,53,3.013,57,4.982,59,3.355,60,2.522,61,2.345,63,3.119,65,3.637,69,4.214,76,0.513,78,0.883,79,0.629,80,0.798,86,0.861,104,0.84,110,3.013,154,5.242,159,2.996,249,3.801,281,3.155,315,5.109,323,4.662,325,4.214,326,5.604,327,6.712,329,5.604,384,3.562,385,4.214,388,4.214,531,4.442,532,4.214,891,3.562,892,3.841,1882,5.324,1911,4.214,1927,4.214,1928,4.214,1929,4.78,1930,4.214,1931,4.78,1932,4.78,1933,4.78,1934,4.78,1935,4.78,1936,4.78]],["title/injectables/UsersService.html",[70,0.751,154,2.62]],["body/injectables/UsersService.html",[0,0.093,3,0.047,4,0.047,5,0.043,7,0.057,8,0.01,9,0.004,10,0.004,16,0.211,17,0.337,31,1.017,32,0.84,40,0.576,70,0.583,71,0.693,73,0.84,74,1.448,75,3.137,76,0.75,78,1.29,79,0.919,80,1.167,82,0.865,85,0.177,86,0.613,87,2.592,88,2.999,89,2.999,90,2.733,91,2.587,92,3.477,93,3.477,94,2.999,95,1.525,99,1.813,103,3.534,104,1.193,105,3.629,106,2.999,107,3.499,113,3.985,114,2.733,116,4.481,119,2.994,124,1.665,125,2.994,127,0.95,130,1.665,131,2.994,133,1.185,144,1.827,148,1.827,149,1.665,150,1.665,151,1.665,152,1.665,154,2.034,159,2.712,163,1.489,166,2.423,196,0.982,199,0.95,202,2.045,205,3.385,226,1.612,278,2.621,294,1.669,448,1.448,476,3.139,483,0.982,490,1.094,501,1.544,503,1.368,553,3.46,564,1.665,565,1.665,566,1.544,567,1.448,568,2.535,572,3.942,582,2.999,586,2.733,588,3.306,591,1.867,592,4.144,601,4.776,602,2.999,604,1.827,605,1.827,642,3.477,645,1.665,764,5.06,902,1.665,965,2.377,1469,4.024,1660,4.415,1884,2.999,1885,3.814,1886,2.999,1887,3.814,1888,2.999,1892,1.827,1895,4.415,1896,2.999,1907,1.827,1910,1.827,1912,1.827,1937,1.827,1938,2.072,1939,2.072,1940,2.072,1941,2.072,1942,2.072,1943,2.072,1944,2.072,1945,2.072,1946,2.072,1947,2.072,1948,2.072,1949,2.072,1950,1.827,1951,3.402,1952,2.072,1953,2.072,1954,4.327,1955,3.402,1956,2.072,1957,3.402,1958,3.402,1959,2.072,1960,2.072,1961,2.072,1962,2.072,1963,2.072,1964,2.072,1965,2.072,1966,2.072,1967,3.402,1968,2.072,1969,3.402,1970,3.402,1971,3.402,1972,2.072,1973,4.327,1974,2.072,1975,2.072,1976,3.402,1977,2.072]],["title/injectables/ValidationPipe.html",[70,0.751,1978,3.522]],["body/injectables/ValidationPipe.html",[0,0.32,3,0.109,4,0.109,5,0.098,7,0.131,8,0.01,9,0.007,10,0.007,16,0.229,17,0.774,40,0.685,70,1.085,71,1.59,76,0.68,78,1.17,79,0.834,80,1.058,85,0.406,86,1.141,87,2.204,95,0.878,104,1.113,163,1.562,196,3.377,199,2.181,202,2.126,232,1.82,235,3.911,278,1.986,434,2.333,572,2.418,591,2.61,592,3.139,638,1.82,678,2.721,890,4.17,961,3.139,1129,3.822,1136,4.722,1503,5.092,1504,5.586,1505,6.106,1506,6.699,1508,3.822,1509,5.586,1513,4.193,1765,3.545,1831,3.545,1978,5.092,1979,4.193,1980,6.336,1981,6.336,1982,4.756,1983,7.599,1984,4.756,1985,4.756,1986,4.756,1987,4.756,1988,4.193,1989,4.756,1990,4.756,1991,4.756]],["title/changelog.html",[1992,2.935,1993,2.935,1994,3.22]],["body/changelog.html",[1,3.283,4,0.172,5,0.128,8,0.008,9,0.008,10,0.008,50,2.385,91,3.719,293,6.039,483,3.562,492,3.559,1171,4.999,1173,4.999,1534,4.637,1549,4.637,1994,6.625,1995,6.222,1996,5.485,1997,6.039,1998,6.222,1999,5.485,2000,6.222,2001,6.222,2002,6.222,2003,6.222,2004,6.222,2005,4.999,2006,6.222,2007,6.222,2008,6.222,2009,4.999,2010,6.222,2011,4.999,2012,5.485,2013,4.347,2014,6.222,2015,6.222]],["title/coverage.html",[2016,4.818]],["body/coverage.html",[0,0.387,1,0.841,5,0.033,6,1.405,8,0.01,9,0.003,10,0.003,11,2.369,12,1.188,14,1.405,31,0.782,33,1.188,40,0.131,50,0.506,58,1.114,64,1.188,70,1.357,72,1.405,75,0.841,83,1.405,84,1.405,99,0.577,107,1.114,110,0.755,119,0.953,125,0.953,131,0.953,145,0.875,154,1.631,179,2.383,180,1.114,182,2.962,184,1.114,203,1.188,207,1.188,230,1.281,231,1.405,233,1.114,240,0.999,242,1.052,254,0.875,278,0.665,284,1.188,285,1.405,303,1.052,336,1.188,346,1.188,352,1.188,357,1.188,396,2.326,397,1.405,409,1.405,432,1.114,433,1.405,458,1.188,459,1.405,476,0.999,481,1.052,488,1.114,495,1.711,497,1.281,498,1.114,499,1.188,503,1.052,529,1.114,546,1.405,566,1.188,567,1.114,568,1.188,569,1.281,591,5.039,617,1.052,618,1.405,639,1.188,640,1.405,659,1.188,660,1.405,671,0.912,680,1.114,685,0.953,687,1.907,691,0.999,695,1.052,700,0.953,704,0.953,708,0.953,714,1.801,744,1.405,754,1.281,774,1.114,775,1.405,776,2.667,780,1.405,781,3.352,811,1.114,812,1.114,825,1.052,826,1.405,827,2.193,833,1.114,834,1.405,835,2.962,836,1.052,841,1.114,842,1.405,843,1.405,850,2.962,856,1.114,857,1.405,859,1.188,860,1.405,877,1.405,878,1.405,885,1.188,886,1.405,891,1.188,892,1.281,893,1.405,906,1.114,907,1.405,915,4.782,933,1.188,934,1.405,973,1.281,974,1.281,975,1.281,976,1.052,984,1.188,1002,2.193,1014,1.281,1016,3.83,1032,1.405,1044,2.193,1046,1.114,1047,1.405,1061,1.281,1062,1.405,1089,1.281,1090,1.405,1091,1.405,1103,1.281,1104,1.405,1108,1.281,1109,2.193,1112,1.281,1115,1.281,1145,1.188,1146,1.405,1178,1.188,1180,1.114,1184,1.188,1186,1.405,1187,1.405,1191,1.405,1195,1.281,1199,1.405,1227,1.405,1238,1.405,1239,1.052,1242,1.188,1243,1.405,1255,1.188,1273,1.188,1274,1.405,1282,1.052,1303,1.114,1337,1.405,1374,1.188,1375,2.193,1380,1.188,1394,1.188,1395,1.405,1422,1.052,1450,1.405,1464,1.281,1488,1.405,1500,1.281,1501,1.405,1502,1.405,1514,1.405,1532,1.188,1533,1.405,1578,1.052,1583,1.114,1587,1.052,1591,1.801,1638,1.405,1651,1.281,1695,1.405,1715,1.052,1716,1.405,1768,1.188,1769,1.188,1787,2.193,1788,2.193,1791,1.281,1792,1.405,1804,1.405,1807,1.405,1815,1.405,1816,1.405,1823,1.405,1828,1.405,1833,1.405,1840,2.667,1841,2.667,1855,1.405,1882,1.188,1883,1.405,1937,1.405,1978,1.281,1979,1.405,2013,1.114,2016,1.281,2017,1.594,2018,1.594,2019,1.405,2020,1.405,2021,8.87,2022,1.405,2023,8.488,2024,1.405,2025,1.405,2026,1.405,2027,7.605,2028,1.405,2029,1.405,2030,2.034,2031,1.405,2032,2.406,2033,1.405,2034,1.405,2035,2.406,2036,5.197,2037,1.405,2038,2.406,2039,4.239,2040,4.766,2041,2.406,2042,4.239,2043,2.406,2044,3.579,2045,4.766,2046,1.405,2047,7.745,2048,2.406,2049,1.405,2050,1.405,2051,1.594,2052,1.594,2053,1.405,2054,1.281,2055,1.405,2056,1.405,2057,4.898,2058,4.898,2059,1.405,2060,1.405,2061,1.405,2062,3.155,2063,1.405,2064,2.193,2065,1.405,2066,3.155,2067,1.405,2068,1.405,2069,1.405,2070,1.405,2071,1.405,2072,1.405,2073,1.405,2074,2.193,2075,2.193,2076,1.281,2077,1.281,2078,2.193,2079,2.193,2080,2.193,2081,2.406,2082,1.405,2083,1.405,2084,1.405,2085,3.579,2086,1.405,2087,2.876,2088,1.281,2089,1.405,2090,3.579,2091,1.594,2092,1.594,2093,2.193,2094,2.406,2095,1.405,2096,2.193,2097,2.406,2098,1.405,2099,1.594,2100,1.594]],["title/dependencies.html",[53,2.5,2101,3.22]],["body/dependencies.html",[0,0.28,8,0.01,9,0.006,10,0.006,17,0.754,29,1.204,53,2.195,191,2.903,237,3.236,259,3.285,301,3.236,333,3.236,342,3.057,344,3.722,355,4.083,418,2.769,438,3.236,446,4.917,447,3.902,536,3.722,638,1.772,870,2.649,882,3.057,916,4.108,970,5.487,1051,2.903,1052,4.083,1310,4.083,1313,5.487,1314,3.722,1505,3.722,1706,3.722,1765,3.452,1830,4.083,1831,3.452,2102,4.631,2103,6.225,2104,4.631,2105,4.631,2106,7.843,2107,4.631,2108,4.631,2109,6.225,2110,6.225,2111,4.631,2112,4.631,2113,6.225,2114,6.225,2115,4.631,2116,4.631,2117,4.083,2118,4.631,2119,4.083,2120,4.631,2121,4.631,2122,4.631,2123,4.631,2124,4.631,2125,4.631,2126,4.083,2127,4.631,2128,4.083,2129,4.083,2130,4.631,2131,4.631,2132,4.631,2133,4.083,2134,4.631,2135,4.083,2136,4.631,2137,4.631,2138,4.631,2139,4.631,2140,4.631,2141,4.631,2142,3.722,2143,4.631,2144,4.631,2145,4.631,2146,4.631,2147,4.631,2148,4.631,2149,6.225,2150,4.631,2151,4.083,2152,4.631,2153,4.631]],["title/miscellaneous/enumerations.html",[2154,2.184,2155,4.65]],["body/miscellaneous/enumerations.html",[1,3.921,8,0.009,9,0.008,10,0.008,30,5.191,85,0.521,99,2.69,419,4.657,447,5.02,890,4.87,916,4.903,1051,4.657,1328,4.905,1496,6.549,1497,6.549,1950,6.549,2154,3.649,2155,5.381,2156,8.008,2157,6.104,2158,6.104]],["title/classes/fullNameValidator.html",[0,0.197,1768,3.266]],["body/classes/fullNameValidator.html",[0,0.307,2,1.114,3,0.122,4,0.122,5,0.11,7,0.146,8,0.009,9,0.007,10,0.007,16,0.171,40,0.563,76,0.733,78,1.261,79,1.045,80,1.14,85,0.455,86,1.23,87,1.649,95,1.467,104,1.199,163,1.497,196,3.236,200,2.616,202,1.492,232,2.613,396,2.926,434,3.349,622,2.814,638,2.04,1750,3.974,1768,5.088,2074,4.284,2159,5.263,2160,4.771,2161,4.771,2162,5.966,2163,5.332,2164,5.868,2165,5.088,2166,5.332,2167,4.771,2168,4.284,2169,3.974,2170,3.974,2171,3.726]],["title/miscellaneous/functions.html",[2154,2.184,2172,4.239]],["body/miscellaneous/functions.html",[8,0.009,9,0.006,10,0.006,15,3.358,40,0.688,78,1.543,79,1.099,80,1.395,85,0.344,95,1.623,104,1.359,105,2.996,196,2.679,199,3.72,204,3.379,240,3.543,242,4.312,281,4.926,890,2.209,961,2.657,973,4.542,974,4.542,975,4.542,996,4.983,1109,3.235,1112,5.25,1115,5.25,1116,3,1167,3,1195,5.25,1348,4.542,1702,4.542,1767,3.549,2019,3.549,2020,5.759,2028,3.549,2029,4.983,2030,3,2053,3.549,2054,4.542,2064,3.235,2066,3.549,2067,4.983,2068,4.983,2070,3.549,2071,4.983,2072,3.549,2073,4.983,2086,3.549,2087,6.218,2088,3.235,2089,3.549,2093,3.235,2094,6.822,2095,3.549,2154,2.407,2172,3.235,2173,4.026,2174,4.026,2175,3.549,2176,4.026,2177,4.026,2178,6.533,2179,3.549,2180,3.549,2181,4.026,2182,4.026,2183,4.026,2184,3.235,2185,4.026,2186,4.026,2187,4.026,2188,4.026,2189,4.026,2190,4.026,2191,4.026,2192,4.026,2193,4.026,2194,4.026,2195,4.026,2196,3.549,2197,4.026,2198,4.026,2199,4.026,2200,4.026,2201,4.026]],["title/classes/imageValidator.html",[0,0.197,2076,3.522]],["body/classes/imageValidator.html",[0,0.298,2,1.061,3,0.116,4,0.116,5,0.104,7,0.139,8,0.01,9,0.007,10,0.007,16,0.163,40,0.545,76,0.71,78,1.222,79,0.968,80,1.105,85,0.434,86,1.192,87,1.571,95,1.493,104,1.163,105,3.034,163,1.451,172,5.485,196,3.137,200,3.246,202,1.852,205,2.121,232,2.532,434,3.611,610,3.185,638,1.944,2075,4.082,2076,5.318,2077,4.082,2159,5.143,2160,4.624,2161,4.624,2162,5.899,2164,5.793,2167,4.624,2171,3.55,2202,5.08,2203,5.08,2204,5.08,2205,4.479,2206,5.08,2207,7.36,2208,5.08]],["title/index.html",[85,0.312,1992,2.935,1993,2.935]],["body/index.html",[0,0.187,1,1.713,4,0.045,5,0.099,8,0.009,9,0.003,10,0.003,13,0.728,36,1.004,53,1.538,61,0.96,63,0.96,79,0.258,86,0.585,91,3.66,98,4.278,99,2.801,104,0.344,109,2.142,110,0.928,116,3.539,127,1.488,133,1.12,141,1.459,159,2.606,166,2.231,172,1.459,186,1.97,201,1.459,213,1.459,226,0.928,237,2.267,242,1.292,253,0.96,254,1.074,259,1.033,267,1.368,278,2.675,290,3.747,293,3.34,294,1.592,301,1.368,365,1.725,375,2.418,389,2.418,391,3.664,423,2.608,424,1.459,446,1.227,447,2.034,468,1.292,478,1.459,483,2.542,490,1.713,492,4.11,553,1.713,580,1.573,588,1.17,596,1.725,638,0.749,643,1.781,644,1.074,661,2.418,673,5.506,682,1.368,687,3.379,697,3.664,710,3.664,711,1.725,765,1.725,783,2.372,840,2.194,894,1.459,916,1.292,942,5.096,943,1.725,954,1.725,961,1.292,1022,1.573,1023,1.573,1051,1.227,1118,1.725,1119,1.725,1123,1.725,1126,3.34,1136,3.098,1137,1.459,1152,1.725,1165,2.861,1170,1.573,1171,3.886,1173,2.608,1260,1.368,1312,1.573,1314,2.608,1328,1.573,1396,1.725,1405,1.725,1409,2.861,1414,2.418,1492,1.725,1503,1.573,1534,2.418,1548,1.725,1549,3.098,1566,1.573,1657,1.725,1706,1.573,1708,2.861,1750,1.459,1765,1.459,1772,3.664,1773,1.725,1798,1.573,1831,1.459,1898,2.861,1997,4.645,1999,1.725,2005,1.573,2009,1.573,2011,1.573,2012,5.86,2013,2.267,2016,1.573,2054,1.573,2096,1.573,2119,1.725,2126,1.725,2128,3.664,2129,2.861,2133,1.725,2135,1.725,2142,5.341,2151,1.725,2172,1.573,2209,1.957,2210,1.725,2211,2.861,2212,1.957,2213,3.245,2214,3.245,2215,1.957,2216,1.725,2217,1.725,2218,1.957,2219,1.957,2220,1.957,2221,1.957,2222,1.957,2223,1.957,2224,1.957,2225,1.957,2226,3.245,2227,1.957,2228,1.957,2229,1.957,2230,1.957,2231,3.245,2232,1.957,2233,3.245,2234,1.957,2235,1.957,2236,1.957,2237,4.836,2238,1.957,2239,1.957,2240,1.957,2241,1.725,2242,1.957,2243,1.957,2244,4.157,2245,1.957,2246,1.957,2247,3.245,2248,1.957,2249,3.245,2250,3.245,2251,1.957,2252,1.957,2253,1.957,2254,1.957,2255,3.245,2256,1.725,2257,1.725,2258,1.957,2259,3.245,2260,1.957,2261,4.157,2262,1.957,2263,1.957,2264,3.245,2265,1.957,2266,1.957,2267,1.957,2268,1.957,2269,1.957,2270,1.957,2271,1.957,2272,1.957,2273,1.957,2274,1.957,2275,3.245,2276,1.957,2277,1.957,2278,1.957,2279,1.957,2280,1.957,2281,1.957,2282,1.957,2283,1.957,2284,1.957,2285,1.957,2286,1.957,2287,2.861,2288,1.957,2289,3.245,2290,1.957,2291,3.245,2292,1.957,2293,1.957,2294,1.725,2295,1.957,2296,4.263,2297,1.957,2298,1.957,2299,1.957,2300,1.957,2301,1.957,2302,2.861,2303,1.957,2304,1.957,2305,1.957,2306,1.957,2307,1.957,2308,1.957,2309,1.957,2310,1.957,2311,1.957,2312,3.245,2313,1.957,2314,1.957,2315,1.725,2316,1.957,2317,1.957,2318,3.245,2319,1.957,2320,1.957,2321,1.957,2322,1.957,2323,1.957,2324,1.957,2325,1.957,2326,1.957,2327,1.957,2328,3.245,2329,7.185,2330,1.957,2331,1.957,2332,1.957,2333,1.957,2334,1.957,2335,1.957,2336,1.957,2337,1.957,2338,1.957,2339,1.957,2340,1.957,2341,1.957,2342,3.245,2343,1.957,2344,1.957,2345,1.957,2346,1.957,2347,1.957,2348,1.957,2349,1.957,2350,1.957,2351,1.957,2352,1.957,2353,1.957,2354,5.362,2355,1.957,2356,1.957,2357,1.957,2358,1.957,2359,1.957,2360,1.957,2361,1.957,2362,1.725,2363,1.725,2364,1.957,2365,1.957,2366,1.957,2367,1.957,2368,1.725,2369,1.957,2370,1.957,2371,1.957,2372,1.957,2373,1.957,2374,7.321,2375,3.245,2376,1.957,2377,3.245,2378,1.957,2379,1.957,2380,1.957,2381,1.957,2382,3.245,2383,1.957,2384,1.957,2385,1.957,2386,3.245,2387,1.957,2388,1.957,2389,1.957,2390,1.957,2391,1.957,2392,3.245,2393,1.957,2394,3.245,2395,1.957,2396,1.957,2397,1.957,2398,3.664,2399,3.245,2400,1.957,2401,1.957,2402,1.957,2403,1.957,2404,1.957,2405,1.957,2406,3.245,2407,3.245,2408,1.957,2409,1.957,2410,1.957,2411,2.418,2412,1.957,2413,1.957,2414,1.957,2415,3.245,2416,1.957,2417,1.957,2418,1.957,2419,1.957,2420,1.957,2421,1.957,2422,1.957,2423,1.957,2424,1.957,2425,1.957,2426,1.957,2427,1.957,2428,1.957,2429,1.957,2430,1.957,2431,1.957,2432,1.957,2433,1.957,2434,3.245,2435,3.245,2436,1.957,2437,1.957,2438,1.957,2439,1.957,2440,1.957,2441,1.957,2442,1.957,2443,1.957,2444,1.957,2445,3.245,2446,3.245,2447,1.957,2448,1.957,2449,1.957,2450,3.245,2451,1.957,2452,1.957,2453,3.245,2454,1.957,2455,1.957,2456,1.957,2457,1.957,2458,1.957,2459,1.957,2460,1.957,2461,3.245,2462,3.245,2463,3.245,2464,3.245,2465,1.957,2466,1.957,2467,1.957,2468,1.957,2469,1.957,2470,2.267,2471,1.957,2472,1.957,2473,1.725,2474,1.957]],["title/license.html",[1992,2.935,1993,2.935,2470,2.553]],["body/license.html",[8,0.007,9,0.007,10,0.007,61,2.594,259,2.791,840,2.791,894,5.062,1160,4.662,1776,4.662,2005,4.249,2013,3.695,2216,4.662,2411,3.941,2470,3.695,2473,6.614,2475,4.662,2476,4.662,2477,4.249,2478,4.249,2479,6.791,2480,5.288,2481,5.288,2482,5.288,2483,5.288,2484,5.288,2485,5.288,2486,6.791,2487,8.719,2488,5.288,2489,5.288,2490,7.502,2491,5.288,2492,6.791,2493,5.288,2494,5.288,2495,5.288,2496,5.288,2497,5.288,2498,5.288,2499,5.288,2500,5.288,2501,5.288,2502,6.791,2503,5.288,2504,5.288,2505,5.288,2506,5.288,2507,5.288,2508,5.288,2509,5.288,2510,6.791,2511,6.791,2512,5.288,2513,5.288,2514,4.662,2515,5.288,2516,5.288,2517,5.288,2518,5.288,2519,5.288,2520,5.288,2521,5.288,2522,5.288,2523,5.288,2524,5.288,2525,5.288,2526,5.288,2527,5.288,2528,5.288,2529,5.288,2530,5.288,2531,5.288,2532,5.288,2533,5.288,2534,5.288,2535,5.288,2536,5.288,2537,5.288,2538,5.288]],["title/modules.html",[52,2.662]],["body/modules.html",[8,0.008,9,0.008,10,0.008,51,4.098,52,2.604,57,3.354,311,4.37,315,3.676,316,4.098,317,4.098,318,4.098,319,4.098,320,4.098,321,4.098,322,4.098,323,3.354,2296,7.878,2315,6.39,2539,8.936,2540,8.936,2541,9.024,2542,7.249]],["title/overview.html",[2543,5.286]],["body/overview.html",[2,0.76,8,0.009,9,0.005,10,0.005,13,1.355,51,5.393,52,1.616,53,2.494,54,3.209,55,3.209,56,3.209,57,4.869,58,4.318,59,2.777,60,1.921,61,1.786,71,1.216,75,4.073,154,4.614,181,2.082,226,1.725,303,4.078,311,6.66,312,3.209,313,3.209,314,3.209,315,5.336,316,5.626,317,5.018,318,4.318,319,4.318,320,5.018,321,5.948,322,5.626,323,4.676,432,4.318,495,4.838,525,3.209,527,3.209,528,3.209,529,4.318,714,4.078,739,3.209,740,3.209,906,4.318,976,4.078,1028,3.209,1029,3.209,1046,4.318,1282,4.078,1333,3.209,1334,3.209,1422,5.094,1441,3.209,1442,3.209,1443,3.209,1591,4.078,1633,3.209,1635,3.209,1690,3.209,1691,3.209,1692,3.209,1791,2.925,1927,3.209,1928,3.209,1930,3.209,2543,3.209,2544,3.64,2545,3.64,2546,3.64,2547,3.64,2548,3.64]],["title/classes/passwordValidator.html",[0,0.197,811,3.063]],["body/classes/passwordValidator.html",[0,0.305,2,1.104,3,0.121,4,0.121,5,0.109,7,0.145,8,0.009,9,0.007,10,0.007,16,0.17,40,0.56,76,0.729,78,1.254,79,0.987,80,1.134,85,0.451,86,1.223,87,1.636,95,1.512,104,1.193,163,1.489,196,3.219,200,2.594,202,1.48,232,2.599,396,2.902,434,3.332,490,2.791,622,2.791,638,2.024,811,4.746,2078,4.249,2159,5.242,2160,4.746,2161,4.746,2162,5.955,2164,5.855,2165,5.062,2167,4.746,2169,3.941,2170,3.941,2171,3.695,2549,5.288,2550,5.288,2551,4.662,2552,4.662,2553,4.662,2554,4.662]],["title/classes/phoneNumberValidator.html",[0,0.197,1769,3.266]],["body/classes/phoneNumberValidator.html",[0,0.305,2,1.104,3,0.121,4,0.121,5,0.109,7,0.145,8,0.009,9,0.007,10,0.007,16,0.17,40,0.56,76,0.729,78,1.254,79,0.987,80,1.134,85,0.451,86,1.223,87,1.636,95,1.512,104,1.193,163,1.489,196,3.219,199,2.425,200,2.594,202,1.48,232,2.599,396,2.902,434,3.332,591,2.902,622,2.791,638,2.024,1725,4.249,1769,5.062,2079,4.249,2159,5.242,2160,4.746,2161,4.746,2162,5.955,2164,5.855,2165,5.062,2167,4.746,2169,3.941,2170,3.941,2171,3.695,2555,5.288,2556,5.288,2557,4.662,2558,4.662]],["title/properties.html",[185,1.632,2101,3.22]],["body/properties.html",[8,0.009,9,0.008,10,0.008,36,1.906,185,1.906,259,3.252,290,5.221,307,5.432,375,5.993,446,3.863,447,3.863,1110,4.952,1286,5.432,1414,4.593,2142,4.952,2210,5.432,2211,5.432,2256,5.432,2257,5.432,2368,5.432,2398,5.432,2411,4.593,2470,4.306,2475,5.432,2476,5.432,2477,4.952,2478,4.952,2559,6.162,2560,6.162,2561,6.162,2562,5.432,2563,6.162,2564,5.432,2565,6.587,2566,6.162]],["title/miscellaneous/typealiases.html",[2154,2.184,2567,5.275]],["body/miscellaneous/typealiases.html",[3,0.109,8,0.009,9,0.007,10,0.007,40,0.743,41,2.26,85,0.407,122,3.332,182,3.332,192,4.73,193,3.554,194,3.831,1005,5.595,1009,5.595,1012,5.595,1078,3.831,1111,6.703,2030,3.554,2087,5.1,2088,3.831,2154,2.85,2180,4.203,2184,5.1,2196,5.595,2568,4.768,2569,4.203,2570,6.347,2571,8.145,2572,6.347,2573,6.347,2574,7.92,2575,6.347,2576,7.134,2577,6.347,2578,6.347,2579,6.347,2580,6.347,2581,6.347,2582,6.347,2583,6.347,2584,6.347,2585,4.768,2586,6.347,2587,6.347,2588,6.347,2589,6.347,2590,7.134,2591,6.347,2592,4.768,2593,4.768,2594,4.768,2595,5.595,2596,5.595,2597,4.203,2598,4.768,2599,4.768]],["title/classes/usenameValidator.html",[0,0.197,812,3.063]],["body/classes/usenameValidator.html",[0,0.307,2,1.114,3,0.122,4,0.122,5,0.11,7,0.146,8,0.009,9,0.007,10,0.007,16,0.171,40,0.563,76,0.733,78,1.261,79,0.991,80,1.14,85,0.455,86,1.23,87,1.649,95,1.516,104,1.199,163,1.497,196,3.236,200,2.616,202,1.492,232,2.613,396,2.926,434,3.349,588,3.188,622,2.814,638,2.04,812,4.771,2080,4.284,2159,5.263,2160,4.771,2161,4.771,2162,5.966,2164,5.868,2165,5.088,2167,4.771,2168,4.284,2169,3.974,2170,3.974,2171,3.726,2600,5.332,2601,5.332]],["title/miscellaneous/variables.html",[2154,2.184,2602,4.65]],["body/miscellaneous/variables.html",[3,0.093,8,0.01,9,0.003,10,0.003,30,1.045,31,1.267,33,1.925,36,1.055,40,0.649,41,1.617,50,0.82,79,0.66,85,0.291,87,0.463,95,1.41,99,2.059,101,1.267,110,1.225,122,2.383,138,1.045,145,1.418,159,0.937,163,1.18,166,1.322,180,1.045,182,1.045,184,3.204,186,0.709,191,0.937,192,1.114,193,2.542,195,1.202,197,1.202,198,1.925,199,2.103,200,1.673,201,2.542,202,1.99,203,2.542,204,0.894,205,1.696,206,1.202,207,1.925,208,1.202,209,1.202,210,1.114,211,1.202,212,1.202,213,5.118,214,1.202,215,2.076,216,1.202,217,1.202,218,1.202,219,3.263,220,1.114,221,1.202,222,1.202,223,1.202,224,1.202,225,1.114,226,1.617,227,1.202,253,1.992,254,0.821,266,1.318,267,1.045,278,2.246,290,1.805,294,2.25,299,2.838,301,1.045,375,2.542,384,3.027,389,1.114,396,3.122,414,1.418,416,1.418,423,2.076,424,1.114,436,1.045,438,1.045,442,1.045,447,0.937,468,3.027,478,1.114,483,0.709,490,1.8,492,2.323,497,2.076,498,1.805,503,1.705,566,1.925,567,1.805,568,1.925,569,2.076,572,1.313,580,2.076,591,1.418,622,2.143,643,0.821,649,1.045,661,1.114,673,2.076,676,1.318,678,1.478,682,1.045,687,3.506,754,2.076,840,0.789,890,4.607,900,0.987,915,1.705,955,1.318,961,0.987,965,1.045,1002,1.202,1014,2.076,1016,4.969,1017,2.383,1022,3.263,1023,1.202,1051,0.937,1078,2.076,1095,2.076,1110,1.202,1111,1.114,1116,1.925,1132,1.318,1133,1.318,1136,4.01,1137,1.114,1145,1.114,1151,1.318,1164,2.277,1167,6.273,1170,1.202,1174,1.318,1175,2.277,1234,2.277,1255,2.542,1312,1.202,1315,2.277,1381,3.263,1404,1.318,1464,2.076,1478,1.318,1479,2.277,1534,1.114,1549,1.114,1651,2.076,1673,2.277,1679,2.277,1702,1.202,1720,1.202,1735,1.202,1798,2.076,1799,1.318,1988,1.318,1996,1.318,1997,1.202,2009,1.202,2011,2.076,2013,1.805,2022,1.318,2024,2.277,2025,1.318,2026,2.277,2030,1.114,2031,2.277,2032,1.318,2033,2.277,2034,2.277,2035,1.318,2037,1.318,2038,1.318,2041,1.318,2043,1.318,2046,1.318,2048,1.318,2049,2.277,2050,2.277,2055,1.318,2056,2.277,2057,1.318,2058,5.014,2059,1.318,2060,2.277,2061,1.318,2062,1.318,2063,3.007,2064,1.202,2065,2.277,2069,1.318,2074,1.202,2075,1.202,2077,2.076,2078,1.202,2079,1.202,2080,1.202,2081,2.277,2082,2.277,2083,2.277,2084,1.318,2093,1.202,2096,3.263,2097,3.007,2098,2.277,2117,1.318,2154,0.894,2168,2.076,2175,1.318,2179,1.318,2184,1.202,2205,1.318,2217,1.318,2241,1.318,2287,1.318,2294,2.277,2302,1.318,2362,1.318,2363,1.318,2411,1.114,2470,1.045,2477,1.202,2478,1.202,2514,1.318,2551,1.318,2552,1.318,2553,1.318,2554,1.318,2557,1.318,2558,1.318,2562,1.318,2564,1.318,2565,1.318,2569,2.277,2595,2.277,2596,2.277,2597,2.277,2602,1.318,2603,5.38,2604,1.495,2605,1.495,2606,3.411,2607,2.583,2608,2.583,2609,1.495,2610,1.495,2611,1.495,2612,1.495,2613,1.495,2614,1.495,2615,2.583,2616,1.495,2617,1.495,2618,1.495,2619,1.495,2620,1.495,2621,1.495,2622,1.495,2623,1.495,2624,1.495,2625,1.495,2626,1.495,2627,1.495,2628,1.495,2629,1.495,2630,4.061,2631,1.495,2632,1.495,2633,2.583,2634,2.583,2635,1.495,2636,1.495,2637,1.495,2638,1.495,2639,1.495,2640,1.495,2641,1.495,2642,1.495,2643,1.495,2644,2.583,2645,2.583,2646,1.495,2647,1.495,2648,1.495,2649,1.495,2650,1.495,2651,1.495,2652,1.495,2653,1.495,2654,1.495,2655,1.495,2656,1.495,2657,1.495,2658,2.583,2659,1.495,2660,1.495,2661,1.495,2662,1.495,2663,1.495,2664,1.495,2665,1.495,2666,4.061,2667,1.495,2668,1.495,2669,1.495,2670,1.495,2671,1.495,2672,1.495,2673,1.495,2674,1.495,2675,1.495,2676,2.583,2677,1.495,2678,1.495,2679,1.495,2680,2.583,2681,1.495,2682,1.495,2683,1.495,2684,1.495,2685,1.495,2686,1.495,2687,1.495,2688,1.495,2689,1.495,2690,1.495,2691,1.495,2692,1.495,2693,1.495,2694,1.495,2695,1.495,2696,1.495,2697,1.495,2698,1.495,2699,1.495,2700,1.495,2701,1.495,2702,1.495,2703,1.495,2704,1.495,2705,1.495,2706,1.495,2707,1.495,2708,1.495,2709,1.495,2710,1.495,2711,1.495,2712,1.495,2713,1.495,2714,1.495,2715,1.495,2716,1.495,2717,1.495,2718,1.495,2719,1.495,2720,1.495,2721,1.495,2722,1.495,2723,1.495,2724,1.495,2725,1.495,2726,1.495,2727,1.495,2728,1.495,2729,2.583,2730,4.061,2731,2.583,2732,1.495,2733,1.495,2734,1.495,2735,1.495,2736,1.495,2737,1.495,2738,1.495,2739,1.495,2740,1.495,2741,1.495,2742,1.495,2743,2.583,2744,1.495,2745,1.495,2746,1.495,2747,1.495,2748,2.583,2749,1.495,2750,2.583,2751,1.495,2752,3.411,2753,1.495,2754,1.495,2755,1.495,2756,1.495]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.12",{"_index":2139,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2144,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2125,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":2118,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1088,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":2124,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2137,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2021,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2085,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2092,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2090,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2091,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2047,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2027,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2040,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2045,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2036,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2044,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2042,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2039,"title":{},"body":{"coverage.html":{}}}],["02t05:01:03.938z",{"_index":1780,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1745,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["03",{"_index":2007,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":1744,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["09",{"_index":2006,"title":{},"body":{"changelog.html":{}}}],["09999999999",{"_index":1778,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1762,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1",{"_index":226,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.17.3",{"_index":2132,"title":{},"body":{"dependencies.html":{}}}],["1.18.0",{"_index":2152,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2130,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2004,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":2560,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":2127,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":965,"title":{},"body":{"controllers/FileController.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1729,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1024",{"_index":1085,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2545,"title":{},"body":{"overview.html":{}}}],["12",{"_index":2544,"title":{},"body":{"overview.html":{}}}],["120",{"_index":795,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["120)@minlength(2",{"_index":790,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["123",{"_index":844,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["150",{"_index":1084,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["17.0.3",{"_index":2103,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1732,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["19",{"_index":1781,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":2675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@min(17",{"_index":1731,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1757,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2",{"_index":1082,"title":{},"body":{"controllers/HealthController.html":{},"controllers/MathController.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2.0.0",{"_index":2140,"title":{},"body":{"dependencies.html":{}}}],["2.1.11",{"_index":2115,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2107,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":2131,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":803,"title":{},"body":{"classes/CreateConversationDto.html":{},"controllers/HealthController.html":{},"classes/UserEntity.html":{}}}],["20)@minlength(2",{"_index":801,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["200",{"_index":292,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":1743,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2022",{"_index":2005,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["21",{"_index":1878,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":1866,"title":{},"body":{"classes/UserEntity.html":{}}}],["25",{"_index":2546,"title":{},"body":{"overview.html":{}}}],["3",{"_index":792,"title":{},"body":{"classes/CreateConversationDto.html":{},"interfaces/IApp.html":{},"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["3.0.0",{"_index":2110,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2146,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":2116,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":206,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":1262,"title":{},"body":{"controllers/MathController.html":{}}}],["4.0.0",{"_index":2141,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2123,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":2113,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":2148,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":298,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1752,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1749,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["456",{"_index":845,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["48",{"_index":2547,"title":{},"body":{"overview.html":{}}}],["5",{"_index":1263,"title":{},"body":{"controllers/MathController.html":{}}}],["5.0.1",{"_index":2120,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":2052,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":2548,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":2134,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":2111,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":2150,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2147,"title":{},"body":{"dependencies.html":{}}}],["768",{"_index":1081,"title":{},"body":{"controllers/HealthController.html":{}}}],["789",{"_index":855,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":846,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["8",{"_index":1867,"title":{},"body":{"classes/UserEntity.html":{}}}],["8.0.1",{"_index":2136,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2153,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":2051,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":2106,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":2108,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":2109,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":2112,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2558,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2557,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../docs",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1739,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1748,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["above",{"_index":2509,"title":{},"body":{"license.html":{}}}],["abstraction/microservices/math/math.module",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction/prisma/prisma.module",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["abstraction/prisma/prisma.service",{"_index":81,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["accept",{"_index":1478,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["acceptable",{"_index":2651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accepthmrupdate",{"_index":187,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["access",{"_index":423,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"classes/ProfileEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1740,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["account.'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":484,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":2532,"title":{},"body":{"license.html":{}}}],["actions",{"_index":211,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":1548,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":2711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1535,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(userid",{"_index":1546,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcookieauth('optional",{"_index":2710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["added",{"_index":2008,"title":{},"body":{"changelog.html":{}}}],["additional",{"_index":1156,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["addoauth2",{"_index":2702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1717,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adheres",{"_index":2001,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin.controller",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin01",{"_index":822,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admin02",{"_index":823,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":51,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":641,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":58,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":64,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["age",{"_index":1718,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["agedate",{"_index":2672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alert",{"_index":180,"title":{"interfaces/Alert.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertoptions",{"_index":184,"title":{"interfaces/AlertOptions.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alertstyle",{"_index":192,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2568,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":944,"title":{},"body":{"controllers/FileController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":949,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":230,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(request",{"_index":265,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":2649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":1679,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":2416,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":2347,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2500,"title":{},"body":{"license.html":{}}}],["another",{"_index":425,"title":{},"body":{"injectables/AtGuard.html":{}}}],["any,info",{"_index":913,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":912,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["api",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2566,"title":{},"body":{"properties.html":{}}}],["api/blob/main/license",{"_index":2691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api:latest",{"_index":2401,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":2209,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":832,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":971,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":646,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({example",{"_index":1742,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apiproperty({required",{"_index":652,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({type",{"_index":782,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["apipropertyoptional",{"_index":805,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":302,"title":{},"body":{"controllers/AppController.html":{}}}],["apiresponse({status",{"_index":297,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":2268,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":717,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":980,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('health",{"_index":1074,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('home",{"_index":306,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('microservices",{"_index":1257,"title":{},"body":{"controllers/MathController.html":{}}}],["apitags('oauth",{"_index":1424,"title":{},"body":{"controllers/OauthController.html":{}}}],["apitags('posts",{"_index":1605,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1913,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":972,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["app",{"_index":1116,"title":{},"body":{"interfaces/IApp.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1714,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":304,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":1177,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":284,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2211,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application/json",{"_index":1479,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":2255,"title":{},"body":{"index.html":{}}}],["apply",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":1936,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":311,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":2298,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":303,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appsetup",{"_index":1115,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["architecture",{"_index":2464,"title":{},"body":{"index.html":{}}}],["args",{"_index":2164,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1506,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":246,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2536,"title":{},"body":{"license.html":{}}}],["array",{"_index":961,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.from(previousnames.value",{"_index":2749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":973,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":992,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":2187,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":1496,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":2488,"title":{},"body":{"license.html":{}}}],["async",{"_index":87,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["atguard",{"_index":336,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":432,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":533,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":1448,"title":{},"body":{"modules/OauthModule.html":{}}}],["auth/auth.service",{"_index":1465,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth/decorators",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["auth/dto/request",{"_index":1466,"title":{},"body":{"injectables/OauthService.html":{}}}],["auth_error",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":458,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":2286,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":417,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{}}}],["authguard(estrategy.jwt",{"_index":420,"title":{},"body":{"injectables/AtGuard.html":{}}}],["authguard(estrategy.jwt_refresh",{"_index":1806,"title":{},"body":{"classes/RtGuard.html":{}}}],["authmodule",{"_index":315,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1110,"title":{},"body":{"interfaces/IApp.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":1515,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authorization",{"_index":1483,"title":{},"body":{"injectables/OauthService.html":{}}}],["authorizationurl",{"_index":2705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":2525,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":495,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":2259,"title":{},"body":{"index.html":{}}}],["available",{"_index":2542,"title":{},"body":{"modules.html":{}}}],["availablethemes",{"_index":2031,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["await",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["awesome",{"_index":1118,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["axios",{"_index":2117,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.config",{"_index":1015,"title":{},"body":{"classes/FileService.html":{}}}],["axios.create",{"_index":2659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosconfig",{"_index":1014,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosconfig.post(url",{"_index":1021,"title":{},"body":{"classes/FileService.html":{}}}],["axiosinstance",{"_index":2658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosrequest",{"_index":1464,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosrequest('get",{"_index":1481,"title":{},"body":{"injectables/OauthService.html":{}}}],["b",{"_index":1266,"title":{},"body":{"controllers/MathController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["backend",{"_index":2230,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2417,"title":{},"body":{"index.html":{}}}],["bad",{"_index":2643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request",{"_index":2642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badgatewayexception",{"_index":868,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badgatewayexception('bad",{"_index":876,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["badrequestexception",{"_index":1508,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1513,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1678,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2367,"title":{},"body":{"index.html":{}}}],["based",{"_index":1173,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["baseurl",{"_index":2660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":2119,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2452,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2425,"title":{},"body":{"index.html":{}}}],["before",{"_index":1133,"title":{},"body":{"interfaces/IApp.html":{},"miscellaneous/variables.html":{}}}],["begin",{"_index":797,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["begining",{"_index":2440,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2454,"title":{},"body":{"index.html":{}}}],["better",{"_index":2466,"title":{},"body":{"index.html":{}}}],["bindevents",{"_index":1377,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["bindevents(client",{"_index":1378,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["bio",{"_index":1719,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birthdate",{"_index":1720,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["bodies",{"_index":2301,"title":{},"body":{"index.html":{}}}],["body",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":196,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/ISwaggerOptions.html":{},"classes/MessagesGateway.html":{},"classes/PostEntity.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["bootstrap",{"_index":2094,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2541,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2539,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1125,"title":{},"body":{"interfaces/IApp.html":{}}}],["build",{"_index":2362,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":2258,"title":{},"body":{"index.html":{}}}],["building",{"_index":2251,"title":{},"body":{"index.html":{}}}],["built",{"_index":2350,"title":{},"body":{"index.html":{}}}],["c",{"_index":1776,"title":{},"body":{"classes/ProfileEntity.html":{},"license.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1728,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["cache",{"_index":2121,"title":{},"body":{"dependencies.html":{}}}],["cache.interceptor.ts",{"_index":1091,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:5",{"_index":1094,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheinterceptor",{"_index":400,"title":{},"body":{"injectables/AppService.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["cachemodule",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["calculate",{"_index":1247,"title":{},"body":{"controllers/MathController.html":{}}}],["call",{"_index":2316,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1404,"title":{},"body":{"controllers/OauthController.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":922,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["called",{"_index":2335,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":864,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":410,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":413,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["capitalize",{"_index":2029,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["capitalize(str",{"_index":2189,"title":{},"body":{"miscellaneous/functions.html":{}}}],["card",{"_index":2462,"title":{},"body":{"index.html":{}}}],["catch",{"_index":234,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":243,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1106,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(rpcexception",{"_index":883,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["catcherror",{"_index":871,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":875,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["categories",{"_index":1655,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1657,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["centers",{"_index":2330,"title":{},"body":{"index.html":{}}}],["change",{"_index":710,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["changelog",{"_index":1994,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":1996,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["character",{"_index":1873,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":816,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(121",{"_index":793,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["characters!'})@maxlength(21",{"_index":802,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1751,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1753,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1868,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":796,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["charge",{"_index":2483,"title":{},"body":{"license.html":{}}}],["chat",{"_index":2563,"title":{},"body":{"properties.html":{}}}],["chats",{"_index":2243,"title":{},"body":{"index.html":{}}}],["check",{"_index":1066,"title":{},"body":{"controllers/HealthController.html":{},"controllers/MathController.html":{}}}],["checkexist",{"_index":1674,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1677,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1683,"title":{},"body":{"injectables/PostsService.html":{}}}],["child",{"_index":1135,"title":{},"body":{"interfaces/IApp.html":{}}}],["city",{"_index":1726,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["claim",{"_index":2528,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ExceptionFilter.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":2358,"title":{},"body":{"index.html":{}}}],["client",{"_index":1260,"title":{},"body":{"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"classes/NatsStrategy.html":{},"injectables/OauthService.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1326,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.id",{"_index":1319,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.subscribe",{"_index":1390,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["client/.../alertsstore.ts",{"_index":2569,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../app.ts",{"_index":2173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../auth.dto.ts",{"_index":2585,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../auth.service.ts",{"_index":2610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../axios.config.ts",{"_index":2604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../conversations.dto.ts",{"_index":2571,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../conversations.service.ts",{"_index":2611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../count.ts",{"_index":2185,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../file.service.ts",{"_index":2612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../files.dto.ts",{"_index":2590,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../pageview.ts",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../posts.dto.ts",{"_index":2574,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../posts.service.ts",{"_index":2613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../str.ts",{"_index":2177,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../theme.ts",{"_index":2184,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/.../user.service.ts",{"_index":2614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../user.ts",{"_index":2626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../users.dto.ts",{"_index":2576,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../usesticky.ts",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/composables/count.ts",{"_index":2019,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/composables/user.ts",{"_index":2025,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/composables/usesticky.ts",{"_index":2022,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/dto/auth.dto.ts",{"_index":2598,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/conversations.dto.ts",{"_index":2592,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/files.dto.ts",{"_index":2599,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/posts.dto.ts",{"_index":2593,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/dto/users.dto.ts",{"_index":2594,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/helpers/app.ts",{"_index":1109,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/str.ts",{"_index":2028,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/helpers/theme.ts",{"_index":2030,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["client/server/api/pageview.ts",{"_index":2032,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/auth.service.ts",{"_index":2035,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/axios.config.ts",{"_index":2037,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/conversations.service.ts",{"_index":2038,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts",{"_index":1002,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/file.service.ts:21",{"_index":1010,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:35",{"_index":1013,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/file.service.ts:7",{"_index":1007,"title":{},"body":{"classes/FileService.html":{}}}],["client/services/posts.service.ts",{"_index":2041,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/services/user.service.ts",{"_index":2043,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/stores/alertsstore.ts",{"_index":182,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":918,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/MessagesService.html":{}}}],["clientproxy",{"_index":1252,"title":{},"body":{"controllers/MathController.html":{}}}],["clientsecret",{"_index":920,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsmodule",{"_index":1268,"title":{},"body":{"modules/MathModule.html":{}}}],["clientsmodule.register",{"_index":1271,"title":{},"body":{"modules/MathModule.html":{}}}],["closable",{"_index":197,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["cluster_adminmodule",{"_index":54,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":55,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":56,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":525,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":527,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":526,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":739,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":741,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":740,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1028,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1029,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1333,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1334,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_oauthmodule",{"_index":1441,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_exports",{"_index":1443,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_imports",{"_index":1444,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":1442,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1633,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1634,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1635,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1690,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1691,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1692,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1927,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1930,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1929,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1928,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":1261,"title":{},"body":{"controllers/MathController.html":{}}}],["code",{"_index":293,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{},"index.html":{}}}],["comment",{"_index":1549,"title":{},"body":{"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":776,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":617,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1566,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commitlint",{"_index":2356,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":2102,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":2104,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2467,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compatible",{"_index":2285,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":2320,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2403,"title":{},"body":{"index.html":{}}}],["compress",{"_index":2300,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2126,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computed",{"_index":2748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["computer",{"_index":2463,"title":{},"body":{"index.html":{}}}],["concept",{"_index":2331,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2508,"title":{},"body":{"license.html":{}}}],["config",{"_index":438,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('app_secret",{"_index":454,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["config.get('google_callback_url",{"_index":2706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":436,"title":{},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"app_secret",{"_index":541,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"expire_at_time",{"_index":544,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":2645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(user_error.duplicate",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1409,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["connectedsocket",{"_index":1309,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["connection",{"_index":2537,"title":{},"body":{"license.html":{}}}],["console.log('before",{"_index":1230,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":1231,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1236,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":1189,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":1190,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(postid",{"_index":1624,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":202,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"classes/FileService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":1795,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constants/math.constant",{"_index":1256,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(math_service",{"_index":1259,"title":{},"body":{"controllers/MathController.html":{}}}],["constructor(@logger('appservice",{"_index":405,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(authservice",{"_index":1454,"title":{},"body":{"injectables/OauthService.html":{}}}],["constructor(config",{"_index":435,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":239,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(messagesservice",{"_index":1281,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["constructor(prismaservice",{"_index":74,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":411,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1869,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2402,"title":{},"body":{"index.html":{}}}],["content",{"_index":1023,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":416,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":430,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1232,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":429,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1187,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1188,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1095,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["continuous",{"_index":2351,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2533,"title":{},"body":{"license.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":718,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":983,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":1075,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('math",{"_index":1258,"title":{},"body":{"controllers/MathController.html":{}}}],["controller('oauth",{"_index":1425,"title":{},"body":{"controllers/OauthController.html":{}}}],["controller('posts",{"_index":1606,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1914,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":1174,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":1168,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":2105,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":2342,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":673,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversation.dto",{"_index":849,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":781,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:11",{"_index":1045,"title":{},"body":{"classes/GetAllConversationDto.html":{}}}],["conversation.dto.ts:14",{"_index":1827,"title":{},"body":{"classes/UpdateMembersConversationDto.html":{}}}],["conversation.dto.ts:20",{"_index":851,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:27",{"_index":852,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:32",{"_index":804,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:33",{"_index":1838,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:34",{"_index":1837,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:35",{"_index":1839,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:52",{"_index":798,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:59",{"_index":799,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1826,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:66",{"_index":785,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1825,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:73",{"_index":787,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1824,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation_error",{"_index":754,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversation_error.not_creator",{"_index":772,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationentity",{"_index":639,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"coverage.html":{}}}],["conversationid",{"_index":689,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{}}}],["conversationid).members",{"_index":1355,"title":{},"body":{"injectables/MessagesService.html":{}}}],["conversations",{"_index":661,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/MessagesService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversations.controller",{"_index":743,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":715,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":659,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":316,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":714,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":2128,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":2289,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2502,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2486,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2473,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":402,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":403,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["cors",{"_index":1314,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":2049,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":2033,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1727,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["course",{"_index":2444,"title":{},"body":{"index.html":{}}}],["cover",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coverage",{"_index":2016,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create_user",{"_index":2636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createat",{"_index":1656,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":774,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":662,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":721,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":670,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":671,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":676,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":642,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":2067,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":2191,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":1195,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1275,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(conversationid",{"_index":1285,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":825,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.text",{"_index":1359,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createnewconversationdto",{"_index":2570,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["createparamdecorator",{"_index":2676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1536,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":1552,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":833,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["creator",{"_index":643,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creator01",{"_index":824,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["creator01'})@isstring",{"_index":786,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["criteria",{"_index":2284,"title":{},"body":{"index.html":{}}}],["crud",{"_index":2363,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":260,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":262,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":263,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":687,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":2060,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":1169,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customeimage",{"_index":2206,"title":{},"body":{"classes/imageValidator.html":{}}}],["customtext",{"_index":2169,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["damages",{"_index":2529,"title":{},"body":{"license.html":{}}}],["dark",{"_index":2595,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":294,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"controllers/MathController.html":{},"injectables/OauthService.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":1484,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.id.tostring",{"_index":1486,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login",{"_index":1487,"title":{},"body":{"injectables/OauthService.html":{}}}],["data.login}@gmail.com",{"_index":1485,"title":{},"body":{"injectables/OauthService.html":{}}}],["database",{"_index":2214,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1707,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":649,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":279,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1234,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1708,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2489,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2538,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1200,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1205,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":2273,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":2275,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":1147,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":1167,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":2160,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":2161,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultoptions",{"_index":203,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":76,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definestore",{"_index":188,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["definestore('alertsstore",{"_index":208,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["definestore('user",{"_index":2741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defining",{"_index":2332,"title":{},"body":{"index.html":{}}}],["definition",{"_index":2266,"title":{},"body":{"index.html":{}}}],["delete",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":730,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":681,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1630,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1558,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1618,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1562,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":1925,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":1889,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete_comment",{"_index":2638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_user",{"_index":2637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecomment",{"_index":1537,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1631,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1557,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":841,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationadminsdto",{"_index":2572,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deleteconversationbyid",{"_index":663,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":679,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":680,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1673,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["deleteoneadminconversation",{"_index":664,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":684,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":685,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":856,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteonepostdto",{"_index":2573,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deletepost",{"_index":1538,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(userid",{"_index":1561,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":1884,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1888,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":88,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserprofile",{"_index":2575,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["denied",{"_index":2640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":2314,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1497,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":2265,"title":{},"body":{"index.html":{}}}],["description",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":2283,"title":{},"body":{"index.html":{}}}],["design",{"_index":2267,"title":{},"body":{"index.html":{}}}],["development",{"_index":2391,"title":{},"body":{"index.html":{}}}],["devices",{"_index":473,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":2215,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":2628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directly",{"_index":1405,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["disk",{"_index":1077,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1069,"title":{},"body":{"controllers/HealthController.html":{}}}],["distribute",{"_index":2498,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2471,"title":{},"body":{"index.html":{}}}],["docker",{"_index":2398,"title":{},"body":{"index.html":{},"properties.html":{}}}],["docs",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":2011,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["document.documentelement.scrolltop",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":2013,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documented",{"_index":1998,"title":{},"body":{"changelog.html":{}}}],["doe",{"_index":1347,"title":{},"body":{"injectables/MessagesService.html":{}}}],["done",{"_index":910,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":932,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":1053,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto",{"_index":113,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/FileService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":760,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1666,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":767,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.creator",{"_index":761,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":758,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1676,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1654,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1687,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.members",{"_index":759,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":757,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":614,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":613,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1958,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":1972,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1669,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.published",{"_index":1670,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1682,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.text",{"_index":1685,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.title",{"_index":1653,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.userid",{"_index":763,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.username",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment/request",{"_index":1594,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/comment/response",{"_index":1604,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/request",{"_index":1593,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/response",{"_index":1600,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/request",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/response",{"_index":448,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":2633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":1194,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2431,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":2408,"title":{},"body":{"index.html":{}}}],["each",{"_index":2325,"title":{},"body":{"index.html":{}}}],["easily",{"_index":2227,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":2252,"title":{},"body":{"index.html":{}}}],["el",{"_index":2727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classlist.add('sticky",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classlist.remove('sticky",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element.id",{"_index":1354,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.foreach((item",{"_index":1365,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.splice(element.messages.indexof(item",{"_index":1372,"title":{},"body":{"injectables/MessagesService.html":{}}}],["email",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1899,"title":{},"body":{"controllers/UsersController.html":{}}}],["emails",{"_index":926,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":927,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["empty",{"_index":2632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":2263,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1697,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1701,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2435,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1016,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2009,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["endpoint}/avatar",{"_index":1018,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/cover",{"_index":1025,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/posts",{"_index":1026,"title":{},"body":{"classes/FileService.html":{}}}],["enhance",{"_index":2433,"title":{},"body":{"index.html":{}}}],["enter",{"_index":422,"title":{},"body":{"injectables/AtGuard.html":{}}}],["entire",{"_index":2324,"title":{},"body":{"index.html":{}}}],["entities",{"_index":716,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["entities/comment.entity",{"_index":778,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/profile.entity",{"_index":1842,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["enumerations",{"_index":2155,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2312,"title":{},"body":{"index.html":{}}}],["eorder",{"_index":1950,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["eorder.asc",{"_index":1959,"title":{},"body":{"injectables/UsersService.html":{}}}],["erole",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":911,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/TimeoutInterceptor.html":{}}}],["error",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":220,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":1988,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors.interceptor",{"_index":1182,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["errors.length",{"_index":1990,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsinterceptor",{"_index":859,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["eslint",{"_index":2346,"title":{},"body":{"index.html":{}}}],["estrategy",{"_index":419,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["estrategy.facebook",{"_index":917,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["estrategy.google",{"_index":1054,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["estrategy.jwt",{"_index":450,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["estrategy.jwt_refresh",{"_index":1811,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["ev",{"_index":1141,"title":{},"body":{"interfaces/IApp.html":{}}}],["ev.preventdefault",{"_index":1143,"title":{},"body":{"interfaces/IApp.html":{}}}],["eval",{"_index":2303,"title":{},"body":{"index.html":{}}}],["event",{"_index":2524,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2220,"title":{},"body":{"index.html":{}}}],["example",{"_index":783,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["example@gmail.com",{"_index":1858,"title":{},"body":{"classes/UserEntity.html":{}}}],["exception",{"_index":248,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":878,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:7",{"_index":881,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.geterror",{"_index":884,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["exception.getresponse",{"_index":275,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":276,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":280,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":270,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":233,"title":{"classes/ExceptionFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/ExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["excludenullinterceptor",{"_index":885,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"modules/InterceptorModule.html":{},"coverage.html":{}}}],["excludepaths",{"_index":1100,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths.includes(httpadapter.getrequesturl(request",{"_index":1101,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["execute",{"_index":1130,"title":{},"body":{"interfaces/IApp.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{}}}],["executes",{"_index":2308,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":414,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":2634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existedusermiddleware",{"_index":891,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["experiences",{"_index":2224,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":543,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":531,"title":{},"body":{"modules/AuthModule.html":{},"classes/LoggerModule.html":{},"modules/OauthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":259,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":940,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":2291,"title":{},"body":{"index.html":{}}}],["extends",{"_index":183,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/FacebookStrategy.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["externals",{"_index":2720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1157,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extractjwt",{"_index":444,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":452,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":1148,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":916,"title":{},"body":{"injectables/FacebookStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["facebookauthredirect",{"_index":1397,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookauthredirect(@req",{"_index":1430,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebookauthredirect(req",{"_index":1402,"title":{},"body":{"controllers/OauthController.html":{}}}],["facebooklogin",{"_index":1398,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["facebooklogin(req",{"_index":1456,"title":{},"body":{"injectables/OauthService.html":{}}}],["facebookstrategy",{"_index":906,"title":{"injectables/FacebookStrategy.html":{}},"body":{"injectables/FacebookStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["failed",{"_index":1129,"title":{},"body":{"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":200,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1516,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":2235,"title":{},"body":{"index.html":{}}}],["feels",{"_index":2222,"title":{},"body":{"index.html":{}}}],["female",{"_index":1756,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["field",{"_index":2239,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":2087,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":2188,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":955,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":1040,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":1038,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":1042,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":933,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":1039,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":840,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.controller",{"_index":1031,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":1043,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":977,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":984,"title":{"classes/FileService.html":{}},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"coverage.html":{}}}],["filesmodule",{"_index":317,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":976,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":2171,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["find",{"_index":1898,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["find((element",{"_index":1361,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findallmessages",{"_index":1276,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findallmessages(@messagebody('conversationid",{"_index":1320,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["findallmessages(conversationid",{"_index":1289,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["firstname",{"_index":928,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2521,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2365,"title":{},"body":{"index.html":{}}}],["flip",{"_index":2461,"title":{},"body":{"index.html":{}}}],["flows",{"_index":2703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fo",{"_index":2459,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2426,"title":{},"body":{"index.html":{}}}],["following",{"_index":2507,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":2639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(auth_error.same_password",{"_index":615,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(post_error.not_author",{"_index":1667,"title":{},"body":{"injectables/PostsService.html":{}}}],["forbiddenexception(system_error.forbidden",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["form",{"_index":943,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["format",{"_index":1999,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["formattedmessage",{"_index":1221,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":2345,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":1019,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('file",{"_index":1020,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('files",{"_index":1027,"title":{},"body":{"classes/FileService.html":{}}}],["forroot",{"_index":1192,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":387,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":299,"title":{},"body":{"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"interfaces/IApp.html":{},"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":2250,"title":{},"body":{"index.html":{}}}],["free",{"_index":2482,"title":{},"body":{"license.html":{}}}],["front",{"_index":2434,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2213,"title":{},"body":{"index.html":{}}}],["full",{"_index":1750,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1721,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1768,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":915,"title":{},"body":{"injectables/FacebookStrategy.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2172,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":2505,"title":{},"body":{"license.html":{}}}],["game",{"_index":2450,"title":{},"body":{"index.html":{}}}],["gender",{"_index":1722,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["generate",{"_index":1171,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"changelog.html":{},"index.html":{}}}],["generated",{"_index":2260,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":725,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":696,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1612,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1575,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1623,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1610,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1572,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('authorization",{"_index":1812,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["get('facebook",{"_index":1426,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook')@useguards(undefined)@apioperation({summary",{"_index":1408,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect",{"_index":1429,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('facebook/redirect')@useguards(undefined)@apioperation({summary",{"_index":1403,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('find/:email",{"_index":1919,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('github/redirect",{"_index":1438,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('github/redirect')@apioperation({summary",{"_index":1413,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google",{"_index":1432,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google')@useguards(undefined)@apioperation({summary",{"_index":1417,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect",{"_index":1435,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect')@useguards(undefined)@apioperation({summary",{"_index":1420,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('profile/:useridorusername",{"_index":1916,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":157,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1901,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":1065,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1246,"title":{},"body":{"controllers/MathController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":289,"title":{},"body":{"controllers/AppController.html":{},"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1539,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(postid",{"_index":1564,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":691,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversationdto:11",{"_index":848,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["getallconversations",{"_index":665,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@body",{"_index":723,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(dto",{"_index":690,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversationsdto",{"_index":2577,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsdto",{"_index":2578,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsofuser",{"_index":1540,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(userid",{"_index":1568,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1541,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(userid",{"_index":1571,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicpostsdto",{"_index":2579,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpublicusersdto",{"_index":2580,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallusers",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getconversationbyid",{"_index":666,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":694,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":286,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethello(@session",{"_index":309,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello(session",{"_index":287,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember",{"_index":1338,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmember(conversationid",{"_index":1341,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getoneconversationdto",{"_index":695,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1542,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(postid",{"_index":1574,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":1885,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":1892,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":1992,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyemail",{"_index":1886,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1896,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofiledto",{"_index":2581,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gitbox",{"_index":2439,"title":{},"body":{"index.html":{}}}],["github",{"_index":1414,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{},"index.html":{},"properties.html":{}}}],["github2",{"_index":2138,"title":{},"body":{"dependencies.html":{}}}],["githubauthredirect",{"_index":1399,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(@query",{"_index":1439,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(req",{"_index":1412,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubredirect",{"_index":1451,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubredirect(req",{"_index":1458,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess",{"_index":1452,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubsuccess(token",{"_index":1460,"title":{},"body":{"injectables/OauthService.html":{}}}],["global",{"_index":1163,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["google",{"_index":1051,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["googleauth",{"_index":1400,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(@req",{"_index":1434,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(req",{"_index":1416,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect",{"_index":1401,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(@req",{"_index":1436,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(req",{"_index":1419,"title":{},"body":{"controllers/OauthController.html":{}}}],["googlelogin",{"_index":1453,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlelogin(req",{"_index":1462,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlestrategy",{"_index":1046,"title":{"injectables/GoogleStrategy.html":{}},"body":{"injectables/GoogleStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2481,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2315,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group01",{"_index":788,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["group01'})@isstring()@isnotempty()@length(3",{"_index":800,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["grow",{"_index":2413,"title":{},"body":{"index.html":{}}}],["grpc",{"_index":2328,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1791,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["hand",{"_index":426,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handle",{"_index":873,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":236,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":250,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse",{"_index":238,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(request",{"_index":252,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlers",{"_index":1385,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["handlers.foreach",{"_index":1389,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["hash",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":612,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":616,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1800,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":2294,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":1022,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":1063,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheck",{"_index":1070,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":1071,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1072,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1061,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":295,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["helmet",{"_index":2133,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["help",{"_index":2271,"title":{},"body":{"index.html":{}}}],["here",{"_index":1137,"title":{},"body":{"interfaces/IApp.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["here).'})@httpcode(httpstatus.created)@apicreatedresponse({description",{"_index":1406,"title":{},"body":{"controllers/OauthController.html":{}}}],["here).'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1410,"title":{},"body":{"controllers/OauthController.html":{}}}],["hereby",{"_index":2480,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2369,"title":{},"body":{"index.html":{}}}],["hmr.config.ts",{"_index":2097,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["holders",{"_index":2526,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":307,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":291,"title":{},"body":{"controllers/AppController.html":{}}}],["hooks",{"_index":2737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":245,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":258,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":261,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":2321,"title":{},"body":{"index.html":{}}}],["html",{"_index":195,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["htmlelement",{"_index":2728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":1312,"title":{},"body":{"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpadapter",{"_index":1096,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod(request",{"_index":1099,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request",{"_index":1102,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpargumentshost",{"_index":256,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcacheinterceptor",{"_index":1089,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpcode",{"_index":136,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":244,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1103,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":537,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://api.github.com/user",{"_index":1482,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/access_token?client_id=${process.env.github_client_id}&client_secret=${process.env.github_secret}&code=${requesttoken",{"_index":1477,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email",{"_index":1474,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2565,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["https://github.com/viandwi24",{"_index":1121,"title":{},"body":{"interfaces/IApp.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":719,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":274,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.ok",{"_index":1428,"title":{},"body":{"controllers/OauthController.html":{}}}],["husky",{"_index":2135,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iapp",{"_index":1108,"title":{"interfaces/IApp.html":{}},"body":{"interfaces/IApp.html":{},"coverage.html":{}}}],["iarrayfile",{"_index":978,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["icreatecomment",{"_index":1601,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["icreatepost",{"_index":1595,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["id",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiokresponse({description",{"_index":1554,"title":{},"body":{"controllers/PostsController.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id.decorator.ts",{"_index":2082,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":2423,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":2017,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1469,"title":{},"body":{"injectables/OauthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.authorid",{"_index":1671,"title":{},"body":{"injectables/PostsService.html":{}}}],["identify.length",{"_index":1964,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":1965,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifinduserbyemail",{"_index":1912,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetcomment",{"_index":1602,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpostofuser",{"_index":1596,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpublicpost",{"_index":1597,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetuserprofile",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":1162,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreexpiration",{"_index":456,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["ignoreglobalprefix",{"_index":1149,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ijwtpayload",{"_index":440,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":2208,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":963,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":2076,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["impact",{"_index":2469,"title":{},"body":{"index.html":{}}}],["implements",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implicit",{"_index":2704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implied",{"_index":2517,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["import.meta.env.vite_base_url",{"_index":2661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import.meta.hot",{"_index":228,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["import.meta.hot.accept(accepthmrupdate(usealertsstore",{"_index":229,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["imported",{"_index":1155,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MathModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":2232,"title":{},"body":{"index.html":{}}}],["include",{"_index":1150,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":1160,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2492,"title":{},"body":{"license.html":{}}}],["index",{"_index":85,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1702,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["info(message",{"_index":222,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":697,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":2438,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":305,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{}}}],["infrastructure/auth/guards",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/oauth/oauth.module",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":847,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["init",{"_index":2377,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":2056,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":545,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MathController.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputs",{"_index":2309,"title":{},"body":{"index.html":{}}}],["insertbefore",{"_index":1131,"title":{},"body":{"interfaces/IApp.html":{}}}],["inserted",{"_index":1134,"title":{},"body":{"interfaces/IApp.html":{}}}],["inspect",{"_index":2313,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":1159,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2424,"title":{},"body":{"index.html":{}}}],["install",{"_index":2375,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2373,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2280,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":268,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["int.pipe.ts",{"_index":1502,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1507,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2390,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2352,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2311,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":861,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":862,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":318,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1723,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["interface",{"_index":179,"title":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":181,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/NatsSubscriber.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":266,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["internal_server_error",{"_index":2641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":1763,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["ipublicuser",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":806,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isarray",{"_index":633,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray()@isnotempty",{"_index":627,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["isboolean",{"_index":1530,"title":{},"body":{"classes/PostEntity.html":{}}}],["isboolean()@isnotempty",{"_index":1524,"title":{},"body":{"classes/PostEntity.html":{}}}],["isdate",{"_index":1766,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":807,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isgetrequest",{"_index":1098,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["isglobal",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":979,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":634,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isjson()@isnotempty",{"_index":629,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":2207,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1512,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":635,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1864,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":1856,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isstring",{"_index":623,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1860,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnumber",{"_index":1531,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isnumber()@isnotempty",{"_index":1526,"title":{},"body":{"classes/PostEntity.html":{}}}],["isobject",{"_index":636,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isoptional",{"_index":1499,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":427,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":637,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":625,"title":{},"body":{"classes/CommentEntity.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":1491,"title":{},"body":{"classes/PaginationDto.html":{}}}],["istyping",{"_index":1299,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":1145,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1387,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["item.id",{"_index":225,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/variables.html":{}}}],["item.text",{"_index":1367,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item1item2",{"_index":2245,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":995,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":997,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":998,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":999,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":1000,"title":{},"body":{"controllers/FileController.html":{}}}],["items",{"_index":210,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/PaginationDto.html":{},"miscellaneous/variables.html":{}}}],["itheme",{"_index":2582,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ithemesettingoptions",{"_index":2583,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecomment",{"_index":1603,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatecover",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatepost",{"_index":1598,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatereaction",{"_index":1599,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["java",{"_index":2453,"title":{},"body":{"index.html":{}}}],["john",{"_index":1346,"title":{},"body":{"injectables/MessagesService.html":{}}}],["join",{"_index":2244,"title":{},"body":{"index.html":{}}}],["join(__dirname",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["joinconversation",{"_index":1277,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["joinconversation(conversationid",{"_index":1292,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["jpeg|jpg|gif|png",{"_index":2205,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["json.parse(item",{"_index":1388,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["json.stringify(exception.getresponse",{"_index":269,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":447,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["jwt_refresh",{"_index":2158,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jwtfromrequest",{"_index":451,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":535,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":538,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["keep",{"_index":2000,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":1381,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"miscellaneous/variables.html":{}}}],["keywords",{"_index":2561,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2516,"title":{},"body":{"license.html":{}}}],["large",{"_index":2654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":930,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["latest",{"_index":2428,"title":{},"body":{"index.html":{}}}],["league",{"_index":2458,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2446,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2442,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2460,"title":{},"body":{"index.html":{}}}],["length",{"_index":808,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(3",{"_index":814,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":1877,"title":{},"body":{"classes/UserEntity.html":{}}}],["letter",{"_index":1871,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":2530,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2527,"title":{},"body":{"license.html":{}}}],["library",{"_index":2270,"title":{},"body":{"index.html":{}}}],["license",{"_index":2470,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["licensed",{"_index":2412,"title":{},"body":{"index.html":{}}}],["life",{"_index":2228,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["light",{"_index":2596,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":1489,"title":{},"body":{"classes/PaginationDto.html":{}}}],["limitation",{"_index":2493,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2518,"title":{},"body":{"license.html":{}}}],["link",{"_index":1114,"title":{},"body":{"interfaces/IApp.html":{}}}],["linter",{"_index":2357,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":2355,"title":{},"body":{"index.html":{}}}],["list",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["list.authorid",{"_index":1665,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":771,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list['creator",{"_index":769,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter",{"_index":773,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["literal",{"_index":1111,"title":{},"body":{"interfaces/IApp.html":{},"interfaces/NatsSubscriber.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":1153,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2389,"title":{},"body":{"index.html":{}}}],["log",{"_index":1201,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":1210,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":242,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":2194,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":1196,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":1197,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":346,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":2068,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":2193,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":352,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":240,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1178,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":478,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logindto",{"_index":476,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":794,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["looking",{"_index":2465,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2305,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":2226,"title":{},"body":{"index.html":{}}}],["male",{"_index":1755,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["manager",{"_index":2122,"title":{},"body":{"dependencies.html":{}}}],["many",{"_index":2647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":888,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marriagestatus",{"_index":1724,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["master",{"_index":2445,"title":{},"body":{"index.html":{}}}],["match",{"_index":2241,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["matchemail",{"_index":1971,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":1973,"title":{},"body":{"injectables/UsersService.html":{}}}],["math",{"_index":1244,"title":{},"body":{"controllers/MathController.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.controller",{"_index":1270,"title":{},"body":{"modules/MathModule.html":{}}}],["math_service",{"_index":1255,"title":{},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mathcontroller",{"_index":1242,"title":{"controllers/MathController.html":{}},"body":{"controllers/MathController.html":{},"modules/MathModule.html":{},"coverage.html":{}}}],["mathmodule",{"_index":319,"title":{"modules/MathModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MathModule.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":1348,"title":{},"body":{"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1783,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1786,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxcount",{"_index":996,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":809,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1777,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(121",{"_index":819,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["maxlength(151",{"_index":1784,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":817,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["maxlength(46",{"_index":1770,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["media",{"_index":2657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1351,"title":{},"body":{"injectables/MessagesService.html":{}}}],["member",{"_index":712,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["members",{"_index":644,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["members[clientid",{"_index":1357,"title":{},"body":{"injectables/MessagesService.html":{}}}],["memory",{"_index":1076,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1073,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":2520,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2496,"title":{},"body":{"license.html":{}}}],["message",{"_index":186,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateConversationDto.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["message.dto",{"_index":1832,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":827,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:5",{"_index":829,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":830,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":831,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1829,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.enum.ts",{"_index":2058,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["message['conversationid",{"_index":1370,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message['messageid",{"_index":1371,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagebody",{"_index":1308,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1316,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1324,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1317,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagepattern",{"_index":1253,"title":{},"body":{"controllers/MathController.html":{}}}],["messagepattern({cmd",{"_index":1250,"title":{},"body":{"controllers/MathController.html":{}}}],["messages",{"_index":1126,"title":{},"body":{"interfaces/IApp.html":{},"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1336,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.includes(ev.message",{"_index":1142,"title":{},"body":{"interfaces/IApp.html":{}}}],["messages.push(message",{"_index":1362,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages.service",{"_index":1311,"title":{},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1273,"title":{"classes/MessagesGateway.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":320,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1282,"title":{"injectables/MessagesService.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2437,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1505,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1983,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["method_not_allowed",{"_index":2648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodkey",{"_index":1175,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":86,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["microservice",{"_index":2370,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2382,"title":{},"body":{"index.html":{}}}],["min",{"_index":1767,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["min(0",{"_index":1785,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(17",{"_index":1782,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minlength",{"_index":810,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(2",{"_index":815,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":1879,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":2154,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2411,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2394,"title":{},"body":{"index.html":{}}}],["models",{"_index":1158,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2495,"title":{},"body":{"license.html":{}}}],["module",{"_index":50,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2420,"title":{},"body":{"index.html":{}}}],["ms",{"_index":2201,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":2292,"title":{},"body":{"index.html":{}}}],["multi",{"_index":954,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":975,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":2195,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multipart/form",{"_index":1024,"title":{},"body":{"classes/FileService.html":{}}}],["multiple",{"_index":2338,"title":{},"body":{"index.html":{}}}],["music",{"_index":1773,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mustermann",{"_index":1349,"title":{},"body":{"injectables/MessagesService.html":{}}}],["mvc",{"_index":2341,"title":{},"body":{"index.html":{}}}],["name",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":931,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":929,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["named",{"_index":2742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natsstrategy",{"_index":1374,"title":{"classes/NatsStrategy.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["natssubscriber",{"_index":1380,"title":{"interfaces/NatsSubscriber.html":{}},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["nest",{"_index":2012,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nestinterceptor",{"_index":867,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":2562,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":257,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":536,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1830,"title":{},"body":{"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":882,"title":{},"body":{"classes/ExceptionFilter.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":418,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":970,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":355,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1310,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":901,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":2218,"title":{},"body":{"index.html":{}}}],["new",{"_index":278,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":1969,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":755,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":1970,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":1836,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["newprofile",{"_index":1967,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":863,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":1820,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1790,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nextfunction",{"_index":898,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2476,"title":{},"body":{"license.html":{},"properties.html":{}}}],["nice",{"_index":1350,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node",{"_index":1132,"title":{},"body":{"interfaces/IApp.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":2288,"title":{},"body":{"index.html":{}}}],["nodeexternals",{"_index":2098,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":2249,"title":{},"body":{"index.html":{}}}],["non",{"_index":2276,"title":{},"body":{"index.html":{}}}],["none",{"_index":194,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{}}}],["noninfringement",{"_index":2523,"title":{},"body":{"license.html":{}}}],["not_acceptable",{"_index":2650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_author",{"_index":2635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_creator",{"_index":2631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":2630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notable",{"_index":1995,"title":{},"body":{"changelog.html":{}}}],["notacceptableexception",{"_index":1948,"title":{},"body":{"injectables/UsersService.html":{}}}],["notacceptableexception(auth_error.password_not_match",{"_index":1974,"title":{},"body":{"injectables/UsersService.html":{}}}],["notedev",{"_index":2441,"title":{},"body":{"index.html":{}}}],["notfounderror",{"_index":1128,"title":{},"body":{"interfaces/IApp.html":{}}}],["notfoundexception",{"_index":902,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":905,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["notfoundexception(post_error.empty",{"_index":1661,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(post_error.not_found",{"_index":1664,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(user_error.not_found",{"_index":1660,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2510,"title":{},"body":{"license.html":{}}}],["notify(message",{"_index":212,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["now",{"_index":1233,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1237,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2374,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2378,"title":{},"body":{"index.html":{}}}],["null",{"_index":610,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/imageValidator.html":{}}}],["null.interceptor",{"_index":1183,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["nullable",{"_index":653,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{}}}],["number",{"_index":199,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/MathController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1955,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1954,"title":{},"body":{"injectables/UsersService.html":{}}}],["nuxt",{"_index":1117,"title":{},"body":{"interfaces/IApp.html":{}}}],["oauth",{"_index":1396,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["oauth.controller",{"_index":1446,"title":{},"body":{"modules/OauthModule.html":{}}}],["oauth.service",{"_index":1423,"title":{},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{}}}],["oauth2",{"_index":2564,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":1052,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["oauthcontroller",{"_index":1394,"title":{"controllers/OauthController.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":321,"title":{"modules/OauthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OauthModule.html":{},"modules.html":{},"overview.html":{}}}],["oauthservice",{"_index":1422,"title":{"injectables/OauthService.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["object",{"_index":1136,"title":{},"body":{"interfaces/IApp.html":{},"injectables/ValidationPipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.values",{"_index":1356,"title":{},"body":{"injectables/MessagesService.html":{}}}],["observable",{"_index":866,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2485,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2327,"title":{},"body":{"index.html":{}}}],["official",{"_index":2210,"title":{},"body":{"index.html":{},"properties.html":{}}}],["offset",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["old",{"_index":1735,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["old!'})@max(101",{"_index":1734,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["oldpassword",{"_index":1835,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["one",{"_index":682,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["onmoduledestroy",{"_index":1698,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1699,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onscroll",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onunmounted",{"_index":2739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onuploadprogress",{"_index":1006,"title":{},"body":{"classes/FileService.html":{}}}],["oop",{"_index":2451,"title":{},"body":{"index.html":{}}}],["open",{"_index":2386,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":1172,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":1151,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":2344,"title":{},"body":{"index.html":{}}}],["option",{"_index":2666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":213,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options.timeout",{"_index":215,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1490,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":1957,"title":{},"body":{"injectables/UsersService.html":{}}}],["oriented",{"_index":2447,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1315,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":1037,"title":{},"body":{"classes/FilesService.html":{}}}],["othernames",{"_index":2750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":2535,"title":{},"body":{"license.html":{}}}],["out",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2543,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2101,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1492,"title":{},"body":{"classes/PaginationDto.html":{},"index.html":{}}}],["pagecurrent",{"_index":1963,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":1960,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":1962,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":107,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["param('conversationid",{"_index":733,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":1920,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":726,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('postid",{"_index":1613,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["param('useridorusername",{"_index":1917,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":2293,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1511,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1500,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":2129,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1590,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":2290,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":853,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createconversationdto",{"_index":854,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2522,"title":{},"body":{"license.html":{}}}],["particularly",{"_index":2339,"title":{},"body":{"index.html":{}}}],["parttern",{"_index":2077,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":446,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["passportstrategy",{"_index":443,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":449,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["passreqtocallback",{"_index":457,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["password",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1890,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":1861,"title":{},"body":{"classes/UserEntity.html":{}}}],["password123'})@length(8",{"_index":1865,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_not_match",{"_index":2629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":2272,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":811,"title":{"classes/passwordValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":735,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":686,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":732,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":705,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":737,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":709,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":728,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":701,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":1922,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":1908,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1615,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1588,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":281,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"controllers/MathController.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":2170,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["patterns",{"_index":1383,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["patterns.map((item",{"_index":1386,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["payload",{"_index":442,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["payload_too_large",{"_index":2653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":1494,"title":{},"body":{"classes/PaginationDto.html":{}}}],["perform",{"_index":2277,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2479,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2503,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2484,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2504,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1725,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1769,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["photos",{"_index":1058,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":1060,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picktype",{"_index":777,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/LoginDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(commententity",{"_index":779,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(postentity",{"_index":838,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":1843,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(userentity",{"_index":1241,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["picture",{"_index":1059,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pinia",{"_index":189,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{}}}],["pipe",{"_index":874,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["pipe(map((value",{"_index":889,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipe(tap",{"_index":1235,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":2353,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1509,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":2279,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":1985,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1987,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":2219,"title":{},"body":{"index.html":{}}}],["playground",{"_index":2359,"title":{},"body":{"index.html":{}}}],["please",{"_index":2419,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":2723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugins",{"_index":2248,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2513,"title":{},"body":{"license.html":{}}}],["post",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiokresponse({description",{"_index":1559,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('avatar",{"_index":985,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":941,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1626,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1547,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":988,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":948,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":994,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":953,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":991,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":962,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1608,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1569,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1620,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1579,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1553,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":672,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":835,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:6",{"_index":858,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post_error",{"_index":1651,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postentity",{"_index":836,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2368,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1709,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":619,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2366,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1534,"title":{},"body":{"controllers/PostsController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":1637,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1592,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1532,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":322,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1591,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":2229,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2456,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":1198,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":2065,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":2151,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":2212,"title":{},"body":{"index.html":{}}}],["previousnames",{"_index":2745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previousnames.value.add(savedname.value",{"_index":2755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["print",{"_index":2304,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":2142,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1694,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1706,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma:generate",{"_index":2381,"title":{},"body":{"index.html":{}}}],["prisma:migrate",{"_index":2383,"title":{},"body":{"index.html":{}}}],["prisma:pull",{"_index":2380,"title":{},"body":{"index.html":{}}}],["prisma:push",{"_index":2385,"title":{},"body":{"index.html":{}}}],["prisma:studiorunning",{"_index":2388,"title":{},"body":{"index.html":{}}}],["prisma@latest",{"_index":2376,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1696,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":323,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":75,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":235,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/LoggerService.html":{},"controllers/MathController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":2349,"title":{},"body":{"index.html":{}}}],["process.env.app_secret",{"_index":455,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["process.env.database_url",{"_index":1710,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.facebook_callback_url",{"_index":923,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_id",{"_index":919,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.facebook_client_secret",{"_index":921,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.google_callback_url",{"_index":1057,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_client_id",{"_index":1055,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":1056,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.white_list",{"_index":2669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2396,"title":{},"body":{"index.html":{}}}],["profile",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profileentity",{"_index":1715,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["profileentity:101",{"_index":1845,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:111",{"_index":1847,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:121",{"_index":1851,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:35",{"_index":1850,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:43",{"_index":1846,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:51",{"_index":1849,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:58",{"_index":1853,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:65",{"_index":1852,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:75",{"_index":1844,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:83",{"_index":1854,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:88",{"_index":1848,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profilefields",{"_index":925,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["programming",{"_index":2233,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2427,"title":{},"body":{"index.html":{}}}],["project",{"_index":1997,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":185,"title":{"properties.html":{}},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"interfaces/NatsSubscriber.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["property",{"_index":1857,"title":{},"body":{"classes/UserEntity.html":{}}}],["provide",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":2514,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":2192,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":63,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1565,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":1897,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":1893,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get('users/all')@apioperation({summary",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":958,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":966,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":2497,"title":{},"body":{"license.html":{}}}],["published",{"_index":1517,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["pull",{"_index":2399,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":2216,"title":{},"body":{"index.html":{},"license.html":{}}}],["put",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1628,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1584,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":489,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":1923,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":1903,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":1924,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":1905,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["query",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["queue",{"_index":1382,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["quickly",{"_index":2348,"title":{},"body":{"index.html":{}}}],["randomint",{"_index":2073,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomint(min",{"_index":2197,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rapidy",{"_index":2364,"title":{},"body":{"index.html":{}}}],["reach",{"_index":2468,"title":{},"body":{"index.html":{}}}],["react",{"_index":1580,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1680,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":2242,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1543,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1621,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1577,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":620,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1578,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1518,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":2302,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["readiness",{"_index":1064,"title":{},"body":{"controllers/HealthController.html":{}}}],["readme",{"_index":2010,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["realtime",{"_index":2597,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["recompile",{"_index":2323,"title":{},"body":{"index.html":{}}}],["record",{"_index":288,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["reduce((a",{"_index":1265,"title":{},"body":{"controllers/MathController.html":{}}}],["ref",{"_index":2744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref(new",{"_index":2746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":2360,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":2143,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1328,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["refreshtoken",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reload",{"_index":2322,"title":{},"body":{"index.html":{}}}],["remotely",{"_index":2336,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1278,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["remove(@messagebody",{"_index":1331,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["remove(id",{"_index":223,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["remove(message",{"_index":1295,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":2306,"title":{},"body":{"index.html":{}}}],["replace('bearer",{"_index":1813,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["replies",{"_index":621,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":2257,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":900,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.params.userid",{"_index":903,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["req.user",{"_index":1467,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.email",{"_index":1473,"title":{},"body":{"injectables/OauthService.html":{}}}],["req.user.user.email",{"_index":1468,"title":{},"body":{"injectables/OauthService.html":{}}}],["req['code",{"_index":1476,"title":{},"body":{"injectables/OauthService.html":{}}}],["request",{"_index":253,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":282,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1799,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_timeout",{"_index":2652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod",{"_index":1933,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":2287,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":1818,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["requesttoken",{"_index":1475,"title":{},"body":{"injectables/OauthService.html":{}}}],["require('run",{"_index":2721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('webpack",{"_index":2719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":204,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":1796,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":897,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["reset",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":254,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":2663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.status(status).json",{"_index":1107,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":283,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":272,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responses_message",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responses_message.create_user",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["responses_message.delete_comment",{"_index":1689,"title":{},"body":{"injectables/PostsService.html":{}}}],["responses_message.delete_user",{"_index":1976,"title":{},"body":{"injectables/UsersService.html":{}}}],["rest",{"_index":2684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2491,"title":{},"body":{"license.html":{}}}],["result",{"_index":2310,"title":{},"body":{"index.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2494,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":2145,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":711,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["roledecorator",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(erole.admin",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roles",{"_index":1798,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":357,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":392,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":1154,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["rpcexception",{"_index":880,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rpcexceptionfilter",{"_index":879,"title":{},"body":{"classes/ExceptionFilter.html":{}}}],["rt",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":499,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":529,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2329,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":870,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":872,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":2063,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["same_password",{"_index":2627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sample_image",{"_index":2240,"title":{},"body":{"index.html":{}}}],["savedname",{"_index":2743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["savedname.value",{"_index":2752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saves",{"_index":2753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":2253,"title":{},"body":{"index.html":{}}}],["scale",{"_index":2269,"title":{},"body":{"index.html":{}}}],["schema",{"_index":2261,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":924,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1219,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scopes",{"_index":2707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":2722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrolltop",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":540,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":453,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":2297,"title":{},"body":{"index.html":{}}}],["see",{"_index":2246,"title":{},"body":{"index.html":{}}}],["select",{"_index":764,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2501,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":2002,"title":{},"body":{"changelog.html":{}}}],["senderid",{"_index":828,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["serialize",{"_index":2282,"title":{},"body":{"index.html":{}}}],["serve",{"_index":2318,"title":{},"body":{"index.html":{}}}],["server",{"_index":267,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servernats",{"_index":1376,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["servestaticmodule",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":2333,"title":{},"body":{"index.html":{}}}],["session",{"_index":301,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["session.visits",{"_index":407,"title":{},"body":{"injectables/AppService.html":{}}}],["set",{"_index":1164,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["setcontact",{"_index":2687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":1166,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setlicense",{"_index":2690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('ispublic",{"_index":2725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname",{"_index":2756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setnewname(name",{"_index":2754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":1202,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1212,"title":{},"body":{"injectables/LoggerService.html":{}}}],["settimeout",{"_index":216,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":2299,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2054,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["setup(app",{"_index":2198,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.6.0",{"_index":2694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2511,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":2221,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":2432,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2430,"title":{},"body":{"index.html":{}}}],["short",{"_index":791,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["side",{"_index":2254,"title":{},"body":{"index.html":{}}}],["signed",{"_index":2295,"title":{},"body":{"index.html":{}}}],["signin",{"_index":2237,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":542,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":2238,"title":{},"body":{"index.html":{}}}],["signup",{"_index":2236,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":481,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocaldto",{"_index":2584,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["single",{"_index":1772,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1760,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["singlefielddecorator",{"_index":974,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":986,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":989,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":2199,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":1041,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":2231,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1953,"title":{},"body":{"injectables/UsersService.html":{}}}],["snake",{"_index":2449,"title":{},"body":{"index.html":{}}}],["social",{"_index":2372,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1286,"title":{},"body":{"classes/MessagesGateway.html":{},"properties.html":{}}}],["socket.io",{"_index":1313,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2487,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"controllers/MathController.html":{},"modules/MathModule.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"changelog.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":2319,"title":{},"body":{"index.html":{}}}],["special",{"_index":1872,"title":{},"body":{"classes/UserEntity.html":{}}}],["specification",{"_index":1161,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2415,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1774,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":2174,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../axios.ts",{"_index":2605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":2186,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../fullname.validator.ts",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.validator.ts",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":2179,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":2178,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2175,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../math.constant.ts",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../multi",{"_index":2180,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../options.enum.ts",{"_index":2156,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../password.validator.ts",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":2181,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../repl.ts",{"_index":2176,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../setup.config.ts",{"_index":2182,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../single",{"_index":2183,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":2603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/constants/math.constant.ts",{"_index":2046,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/abstraction/microservices/filters/rpc",{"_index":877,"title":{},"body":{"classes/ExceptionFilter.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts",{"_index":1243,"title":{},"body":{"controllers/MathController.html":{},"coverage.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:35",{"_index":1248,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.controller.ts:42",{"_index":1251,"title":{},"body":{"controllers/MathController.html":{}}}],["src/abstraction/microservices/math/math.module.ts",{"_index":1267,"title":{},"body":{"modules/MathModule.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts",{"_index":1375,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"coverage.html":{}}}],["src/abstraction/microservices/strategies/nats.strategy.ts:12",{"_index":1379,"title":{},"body":{"classes/NatsStrategy.html":{}}}],["src/abstraction/prisma/prisma.module",{"_index":532,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/abstraction/prisma/prisma.module.ts",{"_index":1693,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/abstraction/prisma/prisma.service",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["src/abstraction/prisma/prisma.service.ts",{"_index":1695,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/abstraction/prisma/prisma.service.ts:13",{"_index":1700,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:25",{"_index":1705,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:29",{"_index":1704,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/abstraction/prisma/prisma.service.ts:33",{"_index":1703,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/app.controller.ts",{"_index":285,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":300,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:72",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":397,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:12",{"_index":398,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:15",{"_index":399,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/common/dto/pagination.dto",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/common/dto/pagination.dto.ts",{"_index":1488,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/core/common/dto/pagination.dto.ts:13",{"_index":1493,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:23",{"_index":1495,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/dto/pagination.dto.ts:33",{"_index":1498,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/configs/cors.config.ts",{"_index":2048,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":1146,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/setup.config.ts",{"_index":2053,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/configs/swagger.config.ts",{"_index":2055,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"injectables/GoogleStrategy.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/constants/options.enum.ts",{"_index":2157,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":2057,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":241,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":247,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:26",{"_index":251,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:38",{"_index":255,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":1104,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":1105,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{}}}],["src/core/helpers/age.ts",{"_index":2059,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/axios.ts",{"_index":2061,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":1949,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":2062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/errors.interceptor.ts",{"_index":860,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/errors.interceptor.ts:13",{"_index":865,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["src/core/interceptors/http",{"_index":1090,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":1176,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":1179,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1227,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1228,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/null.interceptor.ts",{"_index":886,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/null.interceptor.ts:12",{"_index":887,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1816,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1817,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":1181,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1788,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1822,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":2064,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":1191,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":1193,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":2066,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":1199,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1211,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1209,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1217,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1206,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1215,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1218,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1213,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":892,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/logger",{"_index":1186,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1501,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":1979,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":1984,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":1982,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":2069,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1792,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:6",{"_index":1793,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:9",{"_index":1794,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/utils/delay.ts",{"_index":2070,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random.ts",{"_index":2072,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":813,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":2074,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":2166,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":2163,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":2075,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":2204,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":2202,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":2078,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2550,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2549,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":2079,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2556,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2555,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":2080,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2601,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2600,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/health.controller.ts",{"_index":1062,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:25",{"_index":1068,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infrastructure/admin/admin",{"_index":83,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":72,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:111",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:71",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:80",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:89",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:99",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1935,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":530,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:107",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:119",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:139",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:16",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:24",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:50",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:62",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:87",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1254,"title":{},"body":{"controllers/MathController.html":{},"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":2081,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":2084,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto/request",{"_index":1910,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":1833,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1238,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":1815,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":409,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:13",{"_index":415,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:7",{"_index":412,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1804,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:4",{"_index":1805,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":433,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:20",{"_index":441,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:9",{"_index":437,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1807,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:12",{"_index":1808,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:25",{"_index":1810,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":660,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:104",{"_index":698,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:119",{"_index":702,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:134",{"_index":683,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:149",{"_index":706,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:168",{"_index":688,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:187",{"_index":713,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:79",{"_index":677,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:91",{"_index":693,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":742,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":744,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:104",{"_index":747,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:121",{"_index":752,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:136",{"_index":748,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:17",{"_index":745,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:171",{"_index":753,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:20",{"_index":746,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:35",{"_index":749,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:63",{"_index":750,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:89",{"_index":751,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":780,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":843,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":1044,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":850,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":640,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:11",{"_index":654,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:14",{"_index":648,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:17",{"_index":650,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":658,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:23",{"_index":656,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:26",{"_index":651,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:29",{"_index":647,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:5",{"_index":655,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:8",{"_index":657,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":2086,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":2088,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":2089,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":934,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:112",{"_index":959,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:70",{"_index":946,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:81",{"_index":951,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:92",{"_index":967,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":1030,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":1032,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":1034,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":1036,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":1035,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":1033,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/create",{"_index":826,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/update",{"_index":1828,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1274,"title":{},"body":{"classes/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:15",{"_index":1283,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:19",{"_index":1294,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1291,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:37",{"_index":1288,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:52",{"_index":1301,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:66",{"_index":1305,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:73",{"_index":1297,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1335,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1337,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:32",{"_index":1343,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:42",{"_index":1340,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:47",{"_index":1342,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:52",{"_index":1339,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:68",{"_index":1345,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1352,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:81",{"_index":1344,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts",{"_index":1395,"title":{},"body":{"controllers/OauthController.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:102",{"_index":1421,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:115",{"_index":1415,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:63",{"_index":1411,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:77",{"_index":1407,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:88",{"_index":1418,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.module.ts",{"_index":1445,"title":{},"body":{"modules/OauthModule.html":{}}}],["src/infrastructure/oauth/oauth.service.ts",{"_index":1450,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:14",{"_index":1457,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:32",{"_index":1463,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:50",{"_index":1459,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:66",{"_index":1461,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:8",{"_index":1455,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts",{"_index":907,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:10",{"_index":908,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/facebook.strategy.ts:21",{"_index":914,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts",{"_index":1047,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:13",{"_index":1048,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:23",{"_index":1050,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/posts/dto/comment/request/create",{"_index":775,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/delete",{"_index":842,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/update",{"_index":1823,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":834,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":857,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1787,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":618,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:12",{"_index":624,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":631,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:20",{"_index":632,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:24",{"_index":626,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:28",{"_index":628,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:32",{"_index":630,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":837,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1514,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:12",{"_index":1528,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:16",{"_index":1520,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:20",{"_index":1522,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:24",{"_index":1525,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:28",{"_index":1519,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:32",{"_index":1523,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:36",{"_index":1521,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:40",{"_index":1527,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:44",{"_index":1529,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1533,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:110",{"_index":1570,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:123",{"_index":1573,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:135",{"_index":1576,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:147",{"_index":1589,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:157",{"_index":1563,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:170",{"_index":1581,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:180",{"_index":1567,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:193",{"_index":1551,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:206",{"_index":1585,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:218",{"_index":1560,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:94",{"_index":1556,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1636,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1638,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:125",{"_index":1647,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:143",{"_index":1650,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:174",{"_index":1643,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:200",{"_index":1648,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:228",{"_index":1644,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:239",{"_index":1640,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:261",{"_index":1649,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:276",{"_index":1642,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:34",{"_index":1639,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:37",{"_index":1641,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:71",{"_index":1645,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:89",{"_index":1646,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/users/dto/request/update",{"_index":1840,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1716,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:101",{"_index":1736,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:111",{"_index":1741,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:121",{"_index":1758,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:35",{"_index":1754,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:43",{"_index":1738,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:51",{"_index":1747,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:58",{"_index":1761,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:65",{"_index":1759,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:75",{"_index":1730,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:83",{"_index":1764,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:88",{"_index":1746,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/user.entity",{"_index":1834,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/users/entities/user.entity.ts",{"_index":1855,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:22",{"_index":1859,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:41",{"_index":1874,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:50",{"_index":1863,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:59",{"_index":1862,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:78",{"_index":1876,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1883,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:103",{"_index":1902,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:114",{"_index":1909,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:128",{"_index":1904,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:142",{"_index":1906,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:154",{"_index":1891,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:77",{"_index":1894,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:90",{"_index":1900,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1931,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":1932,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1937,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:115",{"_index":1947,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:135",{"_index":1945,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:164",{"_index":1946,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:193",{"_index":1939,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:226",{"_index":1940,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:33",{"_index":1938,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:36",{"_index":1941,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:61",{"_index":1942,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:81",{"_index":1943,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:96",{"_index":1944,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":2093,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/repl.ts",{"_index":2095,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":2392,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2395,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":2397,"title":{},"body":{"index.html":{}}}],["startat",{"_index":2034,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":1993,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1119,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["state",{"_index":209,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":2018,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":237,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":308,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["status_message",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["status_message.success",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":273,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":2421,"title":{},"body":{"index.html":{}}}],["store",{"_index":2337,"title":{},"body":{"index.html":{}}}],["str",{"_index":2190,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strategies",{"_index":534,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/facebook.strategy",{"_index":1449,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategies/google.strategy",{"_index":1447,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategy",{"_index":445,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/FacebookStrategy.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":2247,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2387,"title":{},"body":{"index.html":{}}}],["style",{"_index":201,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2506,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2499,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1307,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1287,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1290,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('joinconversation",{"_index":1293,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1296,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1300,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('updatemessage",{"_index":1304,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["substantial",{"_index":2512,"title":{},"body":{"license.html":{}}}],["success",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["success(message",{"_index":218,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["successfuly",{"_index":1555,"title":{},"body":{"controllers/PostsController.html":{}}}],["sum",{"_index":1245,"title":{},"body":{"controllers/MathController.html":{}}}],["sum(data",{"_index":1249,"title":{},"body":{"controllers/MathController.html":{}}}],["summary",{"_index":158,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":421,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":431,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1225,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1223,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1222,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1226,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1224,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":2296,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2540,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1152,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2384,"title":{},"body":{"index.html":{}}}],["system",{"_index":1078,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["system'})@healthcheck",{"_index":1067,"title":{},"body":{"controllers/HealthController.html":{}}}],["system_error",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["system_error.conflict",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.forbidden",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.internal_server_error",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.method_not_allowed",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_acceptable",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_found",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.payload_too_large",{"_index":981,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["system_error.request_timeout",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.too_many_requests",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/MathController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unauthorized",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unsupported_media_type",{"_index":982,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["t",{"_index":1789,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":2100,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2099,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":2262,"title":{},"body":{"index.html":{}}}],["take",{"_index":1956,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":2307,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1229,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tar.gz",{"_index":2015,"title":{},"body":{"changelog.html":{}}}],["templates",{"_index":2371,"title":{},"body":{"index.html":{}}}],["teneno",{"_index":290,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":2317,"title":{},"body":{"index.html":{}}}],["terminusmodule",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["terms",{"_index":2334,"title":{},"body":{"index.html":{}}}],["test",{"_index":2407,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2410,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2409,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2406,"title":{},"body":{"index.html":{}}}],["text",{"_index":622,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateMessageDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["thanks",{"_index":2414,"title":{},"body":{"index.html":{}}}],["theme",{"_index":1113,"title":{},"body":{"interfaces/IApp.html":{}}}],["thememanager",{"_index":1112,"title":{},"body":{"interfaces/IApp.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["then(async",{"_index":2662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thinking",{"_index":2234,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":2223,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1711,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1712,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1713,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello(session",{"_index":310,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(payload",{"_index":1472,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.signuplocal(dto",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(payload",{"_index":1471,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.authservice.updatepassword(dto",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.client.send(pattern",{"_index":1264,"title":{},"body":{"controllers/MathController.html":{}}}],["this.configservice.get('app_secret",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversations",{"_index":1360,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.find((element",{"_index":1353,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.foreach((element",{"_index":1363,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversationsservice",{"_index":720,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":722,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":731,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":736,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(dto",{"_index":724,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":727,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":729,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":734,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":738,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.disk.checkstorage('storage",{"_index":1086,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":987,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":990,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":1001,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":993,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findallmessages(message['conversationid",{"_index":1373,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.findallmessages(updatemessagedto['conversationid",{"_index":1369,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmember(conversationid",{"_index":1358,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmessagehandler(key).bind(this",{"_index":1393,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1663,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":1968,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens(newuser.id",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.githubsuccess(data.access_token",{"_index":1480,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.handlemessage(exception",{"_index":264,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.health.check",{"_index":1079,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpadapterhost",{"_index":1097,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.items.findindex((item",{"_index":224,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.push",{"_index":214,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.items.splice(index",{"_index":227,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.jwtservice.signasync",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":271,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":406,"title":{},"body":{"injectables/AppService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":1083,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('mem_rss",{"_index":1080,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagehandlers.keys",{"_index":1384,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["this.messagesservice.createmessage",{"_index":1322,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.findallmessages(conversationid",{"_index":1321,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.getmember",{"_index":1325,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.joinconversation",{"_index":1318,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.remove(message",{"_index":1332,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.updatemessage(updatemessagedto",{"_index":1329,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.notify(message",{"_index":219,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.oauthservice.facebooklogin(req",{"_index":1431,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.githubredirect(req",{"_index":1440,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.oauthservice.googlelogin(req",{"_index":1437,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.postsservice.addcomment(userid",{"_index":1627,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(userid",{"_index":1607,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1632,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":1619,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1625,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(userid",{"_index":1609,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1611,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1614,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1622,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1629,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1617,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1220,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1684,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1688,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1686,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":756,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":770,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":762,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":768,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.update",{"_index":766,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.post.create",{"_index":1652,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1672,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1658,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1662,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1668,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1681,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1675,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1952,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":1977,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":609,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":1975,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":1966,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride",{"_index":1797,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":428,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.remove(id",{"_index":217,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["this.server.emit('message",{"_index":1323,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.server.emit('refresh",{"_index":1330,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.tovalidate(metatype",{"_index":1986,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1915,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":1926,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":1918,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":1921,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(payload.email",{"_index":1470,"title":{},"body":{"injectables/OauthService.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["thresholdpercent",{"_index":1087,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":1165,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":869,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["thuong",{"_index":2477,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2474,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2400,"title":{},"body":{"index.html":{}}}],["time",{"_index":2326,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":198,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["timeout(5000",{"_index":1821,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout.interceptor",{"_index":1185,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["timeouterror",{"_index":1819,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1184,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":277,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":2361,"title":{},"body":{"index.html":{}}}],["title",{"_index":839,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":2225,"title":{},"body":{"index.html":{}}}],["token",{"_index":424,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/OauthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["too_many_requests",{"_index":2646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":2343,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2534,"title":{},"body":{"license.html":{}}}],["total",{"_index":1951,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2422,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1980,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1981,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1208,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trackby",{"_index":1092,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1093,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trading",{"_index":2429,"title":{},"body":{"index.html":{}}}],["training",{"_index":2455,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2475,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1503,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1504,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1765,"title":{},"body":{"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":1180,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transition",{"_index":1124,"title":{},"body":{"interfaces/IApp.html":{}}}],["transport",{"_index":1269,"title":{},"body":{"modules/MathModule.html":{}}}],["transport.tcp",{"_index":1272,"title":{},"body":{"modules/MathModule.html":{}}}],["travel",{"_index":1775,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":1814,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":205,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"classes/PaginationDto.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty()@length(3",{"_index":789,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["truong",{"_index":2478,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["tslint",{"_index":2149,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":2379,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2448,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2436,"title":{},"body":{"index.html":{}}}],["type",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsInterceptor.html":{},"classes/ExceptionFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IApp.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/MathController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2567,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1138,"title":{},"body":{"interfaces/IApp.html":{}}}],["types",{"_index":1831,"title":{},"body":{"classes/UpdateMessageDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":1991,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":2114,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2256,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1279,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["typing(conversationid",{"_index":1298,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["ui/ux",{"_index":2457,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":2644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uncaught",{"_index":1127,"title":{},"body":{"interfaces/IApp.html":{}}}],["undefined",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IApp.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apicreatedresponse({description",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["undefined})@apicreatedresponse({type",{"_index":675,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["undefined})@apioperation({summary",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MathController.html":{}}}],["undefined})@arrayfielddecorator('files",{"_index":964,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":784,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["undefined})@multifielddecorator(['undefined",{"_index":957,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/avatars",{"_index":945,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/covers",{"_index":950,"title":{},"body":{"controllers/FileController.html":{}}}],["under",{"_index":2472,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2405,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":678,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":2656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported_media_type",{"_index":2655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":91,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"changelog.html":{},"index.html":{}}}],["update(userid",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1544,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(dto",{"_index":1582,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1583,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":667,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":699,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":700,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateconversationmembersdto",{"_index":2586,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updateconversationroles",{"_index":2587,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updated",{"_index":765,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":645,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":668,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":703,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":704,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updatemessage",{"_index":1280,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@messagebody",{"_index":1327,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["updatemessage(updatemessagedto",{"_index":1302,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":1303,"title":{"classes/UpdateMessageDto.html":{}},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto['conversationid",{"_index":1364,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['messageid",{"_index":1366,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['text",{"_index":1368,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updateoneconversationbyiddto",{"_index":2588,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updatepassword",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":488,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1545,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1616,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1586,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1587,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostsdto",{"_index":2589,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updaterolesconversation",{"_index":669,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":707,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":708,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuseravatardto",{"_index":125,"title":{"classes/UpdateUserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusercoverdto",{"_index":131,"title":{"classes/UpdateUserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":119,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusersavatar",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":130,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1887,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1907,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":942,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":935,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadavatar(data",{"_index":1004,"title":{},"body":{"classes/FileService.html":{}}}],["uploadavatar(file",{"_index":939,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatardto",{"_index":1005,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadcover",{"_index":936,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadcover(data",{"_index":1008,"title":{},"body":{"classes/FileService.html":{}}}],["uploadcover(file",{"_index":947,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcoverdto",{"_index":1009,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadedfile",{"_index":968,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":969,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":2196,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":937,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":952,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpost",{"_index":1003,"title":{},"body":{"classes/FileService.html":{}}}],["uploadpost(data",{"_index":1011,"title":{},"body":{"classes/FileService.html":{}}}],["uploadposts",{"_index":938,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":960,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpostsdto",{"_index":1012,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":1870,"title":{},"body":{"classes/UserEntity.html":{}}}],["upsertreactpostdto",{"_index":2591,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uptest",{"_index":2404,"title":{},"body":{"index.html":{}}}],["url",{"_index":1017,"title":{},"body":{"classes/FileService.html":{},"injectables/OauthService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/variables.html":{}}}],["url'})@isstring()@isnotempty",{"_index":1737,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["use",{"_index":894,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":896,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["usealertsstore",{"_index":207,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["usecount",{"_index":2020,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["used",{"_index":1170,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usednames",{"_index":2747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usednames.value.filter((name",{"_index":2751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{}}}],["useful",{"_index":2340,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["useguards(authguard('facebook",{"_index":1427,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(authguard('google",{"_index":1433,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(rtguard",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":401,"title":{},"body":{"injectables/AppService.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":404,"title":{},"body":{"injectables/AppService.html":{}}}],["usenamevalidator",{"_index":812,"title":{"classes/usenameValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/FacebookStrategy.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiokresponse({description",{"_index":1550,"title":{},"body":{"controllers/PostsController.html":{}}}],["user)'})@apiokresponse({description",{"_index":674,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":692,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":956,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":2083,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":611,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":1934,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":893,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":895,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":899,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1803,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.includes(role",{"_index":1802,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1801,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user01",{"_index":820,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user02",{"_index":821,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user:read",{"_index":2709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user:write",{"_index":2708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_error",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":1239,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":904,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":1895,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OauthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1881,"title":{},"body":{"classes/UserEntity.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1875,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":84,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:109",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:121",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:133",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:75",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:86",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:97",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.dto.ts",{"_index":1841,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["users.length",{"_index":1961,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":1911,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/request",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/entities/user.entity",{"_index":1240,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["users/users.module",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/OauthService.html":{}}}],["userscontroller",{"_index":1882,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":57,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":154,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"injectables/OauthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usestate('app",{"_index":1122,"title":{},"body":{"interfaces/IApp.html":{}}}],["usesticky",{"_index":2024,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["useuserstore",{"_index":2026,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":191,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["v4",{"_index":190,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["val",{"_index":1510,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":434,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/CreateConversationDto.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(accesstoken",{"_index":909,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(fullnamevalidator",{"_index":1771,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":2203,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":1989,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1880,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":439,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1779,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":1809,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":2165,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":818,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["validation",{"_index":2278,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":2162,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":1978,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":638,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":2167,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":2159,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":890,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.pattern",{"_index":1391,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["value.queue",{"_index":1392,"title":{},"body":{"classes/NatsStrategy.html":{},"interfaces/NatsSubscriber.html":{}}}],["variable",{"_index":2023,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2602,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":2264,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":1203,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1214,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":2274,"title":{},"body":{"index.html":{}}}],["verifycallback",{"_index":1049,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["versa",{"_index":2281,"title":{},"body":{"index.html":{}}}],["version",{"_index":2559,"title":{},"body":{"properties.html":{}}}],["versioning",{"_index":2003,"title":{},"body":{"changelog.html":{}}}],["viandwi24",{"_index":1120,"title":{},"body":{"interfaces/IApp.html":{}}}],["view",{"_index":2686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["views",{"_index":408,"title":{},"body":{"injectables/AppService.html":{}}}],["void",{"_index":249,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/FacebookStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"classes/NatsStrategy.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":1123,"title":{},"body":{"interfaces/IApp.html":{},"index.html":{}}}],["wait",{"_index":2071,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":2200,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":1204,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1216,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":193,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["warning(message",{"_index":221,"title":{},"body":{"interfaces/Alert.html":{},"interfaces/AlertOptions.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":2519,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2515,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2393,"title":{},"body":{"index.html":{}}}],["web",{"_index":2443,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":2217,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":2096,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["websocketgateway",{"_index":1306,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["websocketserver",{"_index":1284,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["whether",{"_index":2531,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":2050,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["window",{"_index":1139,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('error",{"_index":1140,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.addeventlistener('scroll",{"_index":2738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.location.reload",{"_index":1144,"title":{},"body":{"interfaces/IApp.html":{}}}],["window.pageyoffset",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.removeeventlistener('scroll",{"_index":2740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["without",{"_index":2490,"title":{},"body":{"license.html":{}}}],["world",{"_index":296,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{}}}],["writtenposts",{"_index":1659,"title":{},"body":{"injectables/PostsService.html":{}}}],["x",{"_index":2354,"title":{},"body":{"index.html":{}}}],["years",{"_index":1733,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["yes",{"_index":1207,"title":{},"body":{"injectables/LoggerService.html":{}}}],["you'd",{"_index":2418,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2554,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2551,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2552,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":2168,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2553,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zip",{"_index":2014,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":59,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { EROLE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@RoleDecorator(EROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n    constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport { EROLE, STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { RoleDecorator } from 'src/core/roles';\nimport { Public } from '../auth/decorators';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from '../users/dto/request';\nimport {\n    IAllUsers,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@RoleDecorator(EROLE.ADMIN)\n@Controller('admin')\nexport class AdminUsersController {\n    constructor(private readonly usersService: UsersService) {}\n\n    @Public()\n    @Get('users/all')\n    @ApiOperation({ summary: 'Get list all public users' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getAllUsers(@Query() dto: PaginationDto): Promise {\n        return this.usersService.getAllUsers(dto);\n    }\n\n    @Public()\n    @Get('users/:userId')\n    @ApiOperation({\n        summary: 'Get user profile by user-id',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @Param('userId') userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('users/profile/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: 'Success' })\n    async update(\n        @Param('userId') userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('users/avatar/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersAvatar(\n        @Param() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('users/cover/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersCover(\n        @Param() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('users/:userId')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user by user-id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUserById(@Param('userId') userId: string): Promise {\n        return this.usersService.deleteUserById(userId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Alert.html":{"url":"interfaces/Alert.html","title":"interface - Alert","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Alert\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AlertOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AlertOptions.html":{"url":"interfaces/AlertOptions.html","title":"interface - AlertOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlertOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/stores/AlertsStore.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            closable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            html\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        closable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        html\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        html:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:         AlertStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlertStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { acceptHMRUpdate, defineStore } from 'pinia';\nimport { v4 as uuid } from 'uuid';\n\nexport type AlertStyle = 'error' | 'success' | 'warning' | 'info' | 'none';\n\nexport interface AlertOptions {\n    html?: boolean;\n    closable?: boolean;\n    timeout?: number | false;\n    style?: AlertStyle;\n}\n\nconst defaultOptions: Required = {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n};\n\nexport interface Alert extends AlertOptions {\n    id: string;\n    message: string;\n}\n\nexport const useAlertsStore = defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n});\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useAlertsStore, import.meta.hot));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(request, response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    request: Request,\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        timestamp: new Date().toISOString(),\n        message: exception.stack,\n        path: request.url,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello(session: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: '{code: 1, data: {Hello world}, message: \"\"'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus, Session } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@Public()\n@Controller('/')\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Teneno homepage' })\n    @ApiResponse({\n        status: 200,\n        description: '{code: 1, data: {Hello world}, message: \"\"',\n    })\n    @ApiResponse({ status: 404, description: 'Not found' })\n    getHello(@Session() session: Record): any {\n        return this.appService.getHello(session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MathModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            OauthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n    CacheModule,\n    MiddlewareConsumer,\n    Module,\n    NestModule,\n} from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './abstraction/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\nimport { OauthModule } from './infrastructure/oauth/oauth.module';\nimport { MathModule } from './abstraction/microservices/math/math.module';\n\n@Module({\n    imports: [\n        InterceptorModule,\n        PrismaModule,\n        TerminusModule,\n        CacheModule.register(),\n        MathModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            // envFilePath: ['.env'],\n            envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n        }),\n        LoggerModule.forRoot(),\n        ServeStaticModule.forRoot({\n            rootPath: `${__dirname}/../docs`,\n            // rootPath: join(__dirname, '..', 'docs'),\n            renderPath: '/',\n            // exclude: ['/api*'],\n        }),\n        AuthModule,\n        OauthModule,\n        AdminModule,\n        UsersModule,\n        FilesModule,\n        PostsModule,\n        ConversationsModule,\n        MessagesModule,\n    ],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n        {\n            provide: APP_GUARD,\n            useClass: AtGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: RolesGuard,\n        },\n    ],\n})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer.apply(LoggerContextMiddleware).forRoutes('*');\n        //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n        //   .forRoutes(UsersController);\n        // .forRoutes('users');\n        // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n        // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello(session: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CacheInterceptor,\n    Injectable,\n    Session,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\n@UseInterceptors(CacheInterceptor)\nexport class AppService {\n    constructor(@Logger('AppService') private logger: LoggerService) {}\n\n    getHello(session: Record): any {\n        this.logger.log('Hello World', '200');\n        session.visits = session.visits ? session.visits + 1 : 1;\n        return { views: session.visits, message: 'Hello World from Teneno!' };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtGuard extends AuthGuard(ESTRATEGY.JWT) {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    // if true will enter with access-token , and another hand\n    public canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride('isPublic', [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n        if (isPublic) return true;\n\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, ESTRATEGY.JWT) {\n    constructor(private config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            ignoreExpiration: false,\n            passReqToCallback: false,\n        });\n    }\n\n    validate(payload: IJwtPayload): IJwtPayload {\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: undefined})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account.'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: undefined, type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    Put,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { ITokens } from './dto/response';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {\n        this.authService = authService;\n    }\n\n    @Public()\n    @Post('signup')\n    @ApiOperation({ summary: 'Create new user account.' })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n        type: SignupDto,\n    })\n    async signupLocal(@Body() dto: SignupDto): Promise {\n        return this.authService.signupLocal(dto);\n    }\n\n    @Public()\n    @Post('signin')\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Login to user account' })\n    async signinLocal(@Body() dto: LoginDto): Promise {\n        return this.authService.signinLocal(dto);\n    }\n\n    @Post('logout')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Logout user account (user)' })\n    async logout(@GetCurrentUserId() userId: string): Promise {\n        return this.authService.logout(userId);\n    }\n\n    @Post('refresh')\n    @ApiBearerAuth()\n    @UseGuards(RtGuard)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Logout account on all devices' })\n    async refreshToken(\n        @GetCurrentUserId() userId: string,\n        @GetCurrentUser('refreshToken') refreshToken: string,\n    ): Promise {\n        return this.authService.refreshToken(userId, refreshToken);\n    }\n\n    @Put('password')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Update user password' })\n    async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n        return this.authService.updatePassWord(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n    imports: [\n        PrismaModule,\n        JwtModule,\n        // HttpModule,\n        // JwtModule.registerAsync({\n        //   imports: [ConfigModule],\n        //   useFactory: async (configService: ConfigService) => ({\n        //     secret: configService.get(\"APP_SECRET\"),\n        //     signOptions: { expiresIn: configService.get(\"EXPIRE_AT_TIME\") },\n        //   }),\n        //   inject: [ConfigService],\n        // })\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, AtStrategy, RtStrategy],\n    exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ConflictException,\n    ForbiddenException,\n    Inject,\n    Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport { ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { AUTH_ERROR, SYSTEM_ERROR, USER_ERROR } from 'src/core/constants';\nimport { comparePassword, hashPassword } from 'src/core/helpers';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(ConfigService)\n        private configService: ConfigService,\n        private prismaService: PrismaService,\n        private jwtService: JwtService,\n    ) {}\n\n    async getTokens(userId: string, email: string): Promise {\n        const [at, rt] = await Promise.all([\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n                },\n            ),\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n                },\n            ),\n        ]);\n        return { accessToken: at, refreshToken: rt };\n    }\n\n    async updateRtHash(userId: string, rt: string) {\n        const hash = await hashPassword(rt);\n        await this.prismaService.user.update({\n            where: {\n                id: userId,\n            },\n            data: {\n                hashedRefreshToken: hash,\n            },\n        });\n    }\n\n    async signupLocal(dto: SignupDto): Promise {\n        const hash = await hashPassword(dto.password);\n\n        const userExist = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ email: dto.email }, { username: dto.username }],\n            },\n        });\n\n        if (userExist.length > 0)\n            throw new ConflictException(USER_ERROR.DUPLICATE);\n\n        const newUser = await this.prismaService.user.create({\n            data: {\n                email: dto.email,\n                password: hash,\n                username: dto.username,\n            },\n        });\n\n        const tokens = await this.getTokens(newUser.id, newUser.email);\n        await this.updateRtHash(newUser.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async signinLocal(dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const passwordMatches = await comparePassword(\n            dto.password,\n            user.password,\n        );\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async logout(userId: string): Promise {\n        await this.prismaService.user.updateMany({\n            where: {\n                id: userId,\n                hashedRefreshToken: {\n                    not: null,\n                },\n            },\n            data: { hashedRefreshToken: null },\n        });\n    }\n\n    async refreshToken(userId: string, refreshToken: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n        if (!user || !user.hashedRefreshToken)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const hashMatches = await comparePassword(\n            refreshToken,\n            user.hashedRefreshToken,\n        );\n        if (!hashMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async updatePassWord(dto: UpdatePasswordDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n\n        const passwordMatches = await comparePassword(\n            dto.oldPassword,\n            user.password,\n        );\n\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (dto.newPassword === dto.oldPassword)\n            throw new ForbiddenException(AUTH_ERROR.SAME_PASSWORD);\n\n        if (passwordMatches) {\n            await this.prismaService.user.update({\n                where: { email: dto.email },\n                data: {\n                    password: await hashPassword(dto.newPassword),\n                },\n            });\n        }\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\n\nexport class CommentEntity {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  reactions: number[];\n\n  @IsJSON()\n  @IsNotEmpty()\n  replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ConversationEntity {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty({ required: false, nullable: true })\n  description: string | null;\n\n  @ApiProperty()\n  avatar: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  @ApiProperty()\n  members: string[];\n\n  @ApiProperty()\n  creator: string;\n\n  @ApiProperty()\n  admins: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { ConversationsService } from './conversations.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetAllConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n    constructor(private readonly conversationsService: ConversationsService) {\n        this.conversationsService = conversationsService;\n    }\n\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create a new conversation (user)' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({\n        type: ConversationEntity,\n        description: 'The new conversation has been created.',\n    })\n    async createConversation(@Body() dto: CreateConversationDto) {\n        return await this.conversationsService.createConversation(dto);\n    }\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        isArray: true,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllConversations(@Body() dto: GetAllConversationDto) {\n        return this.conversationsService.getAllConversations(dto);\n    }\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        type: ConversationEntity,\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getConversationById(\n        @Param('id') id: string,\n        @Body() dto: GetOneConversationDto,\n    ) {\n        return this.conversationsService.getConversationById(id, dto);\n    }\n\n    @Patch(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update one conversation information of current user (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    updateConversationById(\n        @Param('id') id: string,\n        @Body() dto: UpdateConversationDto,\n    ) {\n        return this.conversationsService.updateConversationById(id, dto);\n    }\n\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Delete one conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteConversationById(\n        @Param('id') id: string,\n        @Body() dto: DeleteConversationDto,\n    ) {\n        return this.conversationsService.deleteConversationById(id, dto);\n    }\n\n    @Patch(':conversationId/updateMembers')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Update members list of current conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateMembersConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateMembersConversationDto,\n    ) {\n        return this.conversationsService.updateMembersConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/deleteAdmins')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Delete one admin of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteOneAdminConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: DeleteOneAdminConversationDto,\n    ) {\n        return this.conversationsService.deleteOneAdminConversation(\n            conversationId,\n            dto,\n        );\n    }\n\n    @Patch(':conversationId/updateRoles')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary:\n            'Change role of any member of current conversation by creator-conversation (user)',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateRolesConversation(\n        @Param('conversationId') conversationId: string,\n        @Body() dto: UpdateRolesConversationDto,\n    ) {\n        return this.conversationsService.updateRolesConversation(\n            conversationId,\n            dto,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_ConversationsModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [ConversationsController],\n    providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreateConversationDto,\n    DeleteConversationDto,\n    DeleteOneAdminConversationDto,\n    GetAllConversationDto,\n    GetOneConversationDto,\n    UpdateConversationDto,\n    UpdateMembersConversationDto,\n    UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\nimport { CONVERSATION_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class ConversationsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createConversation(dto: CreateConversationDto) {\n        const newConversation = await this.prismaService.conversation.create({\n            data: {\n                id: uuid(),\n                name: dto.name,\n                description: dto.description,\n                avatar: '',\n                members: dto.members,\n                admins: dto.admins,\n                creator: dto.creator,\n            },\n        });\n        return newConversation;\n    }\n\n    async getAllConversations(dto: GetAllConversationDto) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.userId,\n                    },\n                    {\n                        admins: {\n                            has: dto.userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: dto.userId,\n                        },\n                    },\n                ],\n            },\n            select: {\n                id: true,\n                name: true,\n                avatar: true,\n            },\n        });\n        return list;\n    }\n\n    async getConversationById(id: string, dto: GetOneConversationDto) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.userId,\n                    },\n                    {\n                        admins: {\n                            has: dto.userId,\n                        },\n                    },\n                    {\n                        members: {\n                            has: dto.userId,\n                        },\n                    },\n                ],\n                AND: {\n                    id: id,\n                },\n            },\n        });\n        return list;\n    }\n\n    updateConversationById(id: string, dto: UpdateConversationDto) {\n        const updated = this.prismaService.conversation.update({\n            where: {\n                id: id,\n            },\n            data: {\n                name: dto.name,\n                description: dto.description,\n                avatar: dto.avatar,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteConversationById(id: string, dto: DeleteConversationDto) {\n        const list = await this.prismaService.conversation.findUnique({\n            where: {\n                id: id,\n            },\n        });\n        if (list['creator'] === dto.userId) {\n            await this.prismaService.conversation.delete({\n                where: {\n                    id: id,\n                },\n            });\n            return '';\n        }\n        return false;\n    }\n\n    async updateMembersConversation(\n        conversationId: string,\n        dto: UpdateMembersConversationDto,\n    ) {\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n\n    async deleteOneAdminConversation(\n        conversationId: string,\n        dto: DeleteOneAdminConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n        const updated = list[0]['admins'].filter(\n            (admin) => admin !== dto.userId,\n        );\n\n        await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: updated,\n            },\n        });\n        return updated;\n    }\n\n    async updateRolesConversation(\n        conversationId: string,\n        dto: UpdateRolesConversationDto,\n    ) {\n        const list = await this.prismaService.conversation.findMany({\n            where: {\n                OR: [\n                    {\n                        creator: dto.creator,\n                    },\n                ],\n                AND: {\n                    id: conversationId,\n                },\n            },\n        });\n        if (list.length === 0) {\n            return CONVERSATION_ERROR.NOT_CREATOR;\n        }\n\n        const updated = await this.prismaService.conversation.update({\n            where: {\n                id: conversationId,\n            },\n            data: {\n                admins: dto.admins,\n                members: dto.members,\n            },\n        });\n        return updated;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'creator01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01', required: false, nullable: true})@IsString()@IsNotEmpty()@Length(3, 120)@MinLength(2, {message: 'Description is too short, must be at least 3 characters!'})@MaxLength(121, {message: 'Description is too long, must be at most 120 characters!'})@Validate(usenameValidator, {message: 'Description must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01'})@IsString()@IsNotEmpty()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class CreateConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Name must be not begin with number!',\n  })\n  name: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n    required: false,\n    nullable: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 120)\n  @MinLength(2, {\n    message: 'Description is too short, must be at least 3 characters!',\n  })\n  @MaxLength(121, {\n    message: 'Description is too long, must be at most 120 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Description must be not begin with number!',\n  })\n  description?: string;\n\n  @ApiProperty({\n    type: String,\n    example: ['user01', 'user02'],\n  })\n  @IsArray()\n  members: string[];\n\n  @ApiProperty({\n    type: String,\n    example: ['admin01', 'admin02'],\n  })\n  @IsArray()\n  admins: string[];\n\n  @ApiProperty({\n    type: String,\n    example: 'creator01',\n  })\n  @IsString()\n  creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels } from '@nestjs/swagger';\n\n@ApiExtraModels()\nexport class CreateMessageDto {\n  id: string;\n  senderId: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetAllConversationDto } from './get-conversation.dto';\n\nexport class DeleteConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/errors.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/errors.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    BadGatewayException,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(\n                catchError((err) =>\n                    throwError(() => new BadGatewayException('Bad request...')),\n                ),\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionFilter.html":{"url":"classes/ExceptionFilter.html","title":"class - ExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/filters/rpc-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            RpcExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: RpcException)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/filters/rpc-exception.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            RpcException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, RpcExceptionFilter } from '@nestjs/common';\nimport { RpcException } from '@nestjs/microservices';\nimport { Observable, throwError } from 'rxjs';\n\n@Catch(RpcException)\nexport class ExceptionFilter implements RpcExceptionFilter {\n    catch(exception: RpcException): Observable {\n        return throwError(() => exception.getError());\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/null.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next\n            .handle()\n            .pipe(map((value) => (value === null ? '' : value)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n    constructor(private prismaService: PrismaService) {}\n\n    async use(req: Request, res: Response, next: NextFunction) {\n        const userId = req.params.userId;\n        const userExist = await this.prismaService.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n            },\n        });\n        if (\n            userExist === null ||\n            userExist === undefined ||\n            userExist.id === ''\n        ) {\n            throw new NotFoundException('User not found');\n        }\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/facebook.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (err: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/facebook.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-facebook';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.FACEBOOK,\n) {\n    constructor() {\n        super({\n            clientID: process.env.FACEBOOK_CLIENT_ID,\n            clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\n            callbackURL: process.env.FACEBOOK_CALLBACK_URL,\n            scope: 'email',\n            profileFields: ['emails', 'name'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: Profile,\n        done: (err: any, user: any, info?: any) => void,\n    ): Promise {\n        const { name, emails } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n        };\n        const payload = {\n            user,\n            accessToken,\n        };\n\n        done(null, payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    UploadedFile,\n    UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport {\n    ArrayFieldDecorator,\n    SingleFieldDecorator,\n    MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('files')\nexport class FileController {\n    constructor(private readonly fileService: FilesService) {}\n\n    @Post('avatar')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/avatars')\n    async uploadAvatar(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadAvatar(file);\n    }\n\n    @Post('cover')\n    @ApiOperation({ summary: 'Upload cover file form data (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @SingleFieldDecorator('./public/covers')\n    async uploadCover(\n        @UploadedFile() file: Express.Multer.File,\n    ): Promise {\n        return this.fileService.uploadCover(file);\n    }\n\n    @Post('posts')\n    @ApiOperation({ summary: 'Upload post with multi images (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ArrayFieldDecorator('files', true, 10, './public/posts')\n    async uploadPosts(\n        @UploadedFiles() files: Array,\n    ): Promise {\n        return this.fileService.uploadPosts(files);\n    }\n\n    @Post('multi')\n    @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @MultiFieldDecorator(\n        [\n            { name: 'item_1', maxCount: 1, required: true },\n            { name: 'item_2', maxCount: 1 },\n            { name: 'item_3', maxCount: 1 },\n            { name: 'item_4', maxCount: 1 },\n            { name: 'item_5', maxCount: 1 },\n        ],\n        './public/multi',\n    )\n    async uploadMulti(\n        @UploadedFiles() files: Express.Multer.File[],\n    ): Promise {\n        return this.fileService.uploadMulti(files);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileService.html":{"url":"classes/FileService.html","title":"class - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/services/file.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadAvatar\n                            \n                            \n                                uploadCover\n                            \n                            \n                                uploadPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \nuploadAvatar(data: UploadAvatarDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadCover\n                        \n                    \n                \n            \n            \n                \nuploadCover(data: UploadCoverDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPost\n                        \n                    \n                \n            \n            \n                \nuploadPost(data: UploadPostsDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/services/file.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadPostsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { UploadAvatarDto, UploadCoverDto, UploadPostsDto } from '@/dto';\nimport axiosConfig from './axios.config';\n\nconst ENDPOINT = '/files';\n\nexport class FileService {\n    uploadAvatar(data: UploadAvatarDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/avatar`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadCover(data: UploadCoverDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/cover`;\n\n        const formData = new FormData();\n        formData.append('file', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n\n    uploadPost(data: UploadPostsDto, onUploadProgress: any) {\n        const url = `${ENDPOINT}/posts`;\n\n        const formData = new FormData();\n        formData.append('files', data);\n\n        return axiosConfig.post(url, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/get-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/google.strategy.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/google.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\nimport { Injectable } from '@nestjs/common';\nimport { ESTRATEGY } from 'src/core/constants';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.GOOGLE,\n) {\n    constructor() {\n        super({\n            clientID: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: process.env.GOOGLE_CALLBACK_URL,\n            scope: ['email', 'profile'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: any,\n        done: VerifyCallback,\n    ): Promise {\n        const { name, emails, photos } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n            picture: photos[0].value,\n            accessToken,\n        };\n        done(null, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                readiness\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        readiness\n                        \n                    \n                \n            \n            \n                \n                    \n                    readiness()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Health check for server system'})@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n    DiskHealthIndicator,\n    HealthCheck,\n    HealthCheckResult,\n    HealthCheckService,\n    MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Health')\n@Public()\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private memory: MemoryHealthIndicator,\n        private disk: DiskHealthIndicator,\n    ) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Health check for server system' })\n    @HealthCheck()\n    async readiness(): Promise {\n        return await this.health.check([\n            async () => await this.memory.checkRSS('mem_rss', 768 * 2 ** 20),\n            async () =>\n                await this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n            async () =>\n                await this.disk.checkStorage('storage', {\n                    path: '/',\n                    thresholdPercent: 0.5,\n                }),\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/http-cache.interceptor.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n    trackBy(context: ExecutionContext): string | undefined {\n        const request = context.switchToHttp().getRequest();\n        const { httpAdapter } = this.httpAdapterHost;\n\n        const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';\n        const excludePaths = [];\n        if (\n            !isGetRequest ||\n            (isGetRequest &&\n                excludePaths.includes(httpAdapter.getRequestUrl(request)))\n        ) {\n            return undefined;\n        }\n        return httpAdapter.getRequestUrl(request);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IApp.html":{"url":"interfaces/IApp.html","title":"interface - IApp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IApp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/helpers/app.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ThemeManager } from './theme';\n\nexport interface IApp {\n    name: string;\n    author: {\n        name: string;\n        link: string;\n    };\n}\n\nexport function AppSetup() {\n    const app: IApp = {\n        name: 'Nuxt 3 Awesome Starter',\n        author: {\n            name: 'viandwi24',\n            link: 'https://github.com/viandwi24',\n        },\n    };\n    useState('app', () => app);\n\n    const themeManager = ThemeManager();\n\n    // vue transition bug handle\n    const messages = [\n        \"Uncaught NotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\",\n        'NotFoundError: The object can not be found here.',\n    ];\n    if (typeof window !== 'undefined') {\n        window.addEventListener('error', (ev) => {\n            if (messages.includes(ev.message)) {\n                ev.preventDefault();\n                window.location.reload();\n            }\n        });\n    }\n\n    return {\n        app,\n        themeManager,\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\nimport { ErrorsInterceptor } from './errors.interceptor';\nimport { ExcludeNullInterceptor } from './null.interceptor';\nimport { TimeoutInterceptor } from './timeout.interceptor';\n\n@Module({\n    providers: [\n        { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ExcludeNullInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: TimeoutInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: ErrorsInterceptor },\n    ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MathController.html":{"url":"controllers/MathController.html","title":"controller - MathController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MathController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                math\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                execute\n                            \n                            \n                                sum\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Calculate check sum pattern'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sum\n                        \n                    \n                \n            \n            \n                \nsum(data: number[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'sum'})\n                \n            \n\n            \n                \n                    Defined in src/abstraction/microservices/math/math.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus, Inject } from '@nestjs/common';\nimport { ClientProxy, MessagePattern } from '@nestjs/microservices';\nimport {\n    ApiConflictResponse,\n    ApiInternalServerErrorResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\nimport { Public } from 'src/infrastructure/auth/decorators';\nimport { MATH_SERVICE } from '../constants/math.constant';\n\n@ApiTags('Microservices')\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('math')\nexport class MathController {\n    constructor(@Inject(MATH_SERVICE) private readonly client: ClientProxy) {}\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    @ApiOperation({ summary: 'Calculate check sum pattern' })\n    execute(): Observable {\n        const pattern = { cmd: 'sum' };\n        const data = [1, 2, 3, 4, 5];\n        return this.client.send(pattern, data);\n    }\n\n    @MessagePattern({ cmd: 'sum' })\n    sum(data: number[]): number {\n        return (data || []).reduce((a, b) => a + b);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MathModule.html":{"url":"modules/MathModule.html","title":"module - MathModule","body":"\n                   \n\n\n\n\n    Modules\n    MathModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/microservices/math/math.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            MathController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { MATH_SERVICE } from '../constants/math.constant';\nimport { MathController } from './math.controller';\n\n@Module({\n    imports: [\n        ClientsModule.register([\n            { name: MATH_SERVICE, transport: Transport.TCP },\n        ]),\n    ],\n    controllers: [MathController],\n})\nexport class MathModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesGateway.html":{"url":"classes/MessagesGateway.html","title":"class - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                typing\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(conversationId: string, createMessageDto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinConversation')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(conversationId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\n\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n  @WebSocketServer() server: Server;\n  constructor(private readonly messagesService: MessagesService) {}\n\n  @SubscribeMessage('joinConversation')\n  joinConversation(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('senderId') senderId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    return this.messagesService.joinConversation(\n      conversationId,\n      senderId,\n      client.id,\n    );\n  }\n\n  @SubscribeMessage('findAllMessages')\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\n    return this.messagesService.findAllMessages(conversationId);\n  }\n\n  @SubscribeMessage('createMessage')\n  async createMessage(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody() createMessageDto: CreateMessageDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const message = await this.messagesService.createMessage(\n      conversationId,\n      createMessageDto,\n      client.id,\n    );\n    this.server.emit('message', message);\n    return message;\n  }\n\n  @SubscribeMessage('typing')\n  async typing(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('isTyping') isTyping: boolean,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const name = await this.messagesService.getMember(\n      conversationId,\n      client.id,\n    );\n\n    client.broadcast.emit('typing', { senderId: name, isTyping });\n  }\n\n  @SubscribeMessage('updateMessage')\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n\n  @SubscribeMessage('removeMessage')\n  async remove(@MessageBody() message: string) {\n    const refresh = await this.messagesService.remove(message);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                getMember\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMessage\n                        \n                    \n                \n            \n            \n                \ncreateMessage(conversationId: string, createMessageDto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: any; senderId: any; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMember\n                        \n                    \n                \n            \n            \n                \ngetMember(conversationId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class MessagesService {\n  conversations = [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ];\n\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\n    this.conversations.find((element) => element.id === conversationId).members[\n      clientId\n    ] = senderId;\n    return Object.values(\n      this.conversations.find((element) => element.id === conversationId)\n        .members,\n    );\n  }\n\n  findAllMessages(conversationId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .messages;\n  }\n\n  getMember(conversationId: string, clientId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .members[clientId];\n  }\n\n  createMessage(\n    conversationId: string,\n    createMessageDto: CreateMessageDto,\n    clientId: string,\n  ) {\n    const message = {\n      id: uuid(),\n      senderId: this.getMember(conversationId, clientId),\n      text: createMessageDto.text,\n    };\n    this.conversations\n      .find((element) => element.id === conversationId)\n      .messages.push(message);\n    return message;\n  }\n\n  updateMessage(updateMessageDto: UpdateMessageDto) {\n    this.conversations.forEach((element) => {\n      if (element.id === updateMessageDto['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === updateMessageDto['messageId']) {\n            item.text = updateMessageDto['text'];\n          }\n        });\n      }\n    });\n    return this.findAllMessages(updateMessageDto['conversationId']);\n  }\n\n  async remove(message: string) {\n    this.conversations.forEach((element) => {\n      if (element.id === message['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === message['messageId']) {\n            element.messages.splice(element.messages.indexOf(item), 1);\n          }\n        });\n      }\n    });\n\n    return this.findAllMessages(message['conversationId']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NatsStrategy.html":{"url":"classes/NatsStrategy.html","title":"class - NatsStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NatsStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ServerNats\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bindEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        bindEvents\n                        \n                    \n                \n            \n            \n                \nbindEvents(client: any)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/microservices/strategies/nats.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NatsSubscriber.html":{"url":"interfaces/NatsSubscriber.html","title":"interface - NatsSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NatsSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/microservices/strategies/nats.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ServerNats } from '@nestjs/microservices';\n\nexport interface NatsSubscriber {\n    key: string;\n    value: {\n        pattern: string;\n        queue: string;\n    };\n}\n\nexport class NatsStrategy extends ServerNats {\n    bindEvents(client: any) {\n        const patterns = [...this.messageHandlers.keys()];\n        const handlers = patterns.map((item) => ({\n            key: item,\n            value: JSON.parse(item),\n        })) as NatsSubscriber[];\n\n        handlers.forEach(({ key, value }) =>\n            client.subscribe(\n                value.pattern,\n                { queue: value.queue },\n                this.getMessageHandler(key).bind(this),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OauthController.html":{"url":"controllers/OauthController.html","title":"controller - OauthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OauthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookAuthRedirect\n                            \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                githubAuthRedirect\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookAuthRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Facebook account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubAuthRedirect(req: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/redirect')@ApiOperation({summary: 'Create login callback with your Github account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Google account (not execute directly here).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthRedirect(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Google account (not execute directly here).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Query,\n    Req,\n    UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants';\nimport { Public } from '../auth/decorators';\nimport { OauthService } from './oauth.service';\nimport { Request } from 'express';\n\n@ApiTags('OAuth')\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('oauth')\nexport class OauthController {\n    constructor(private readonly oauthService: OauthService) {}\n\n    @Get('facebook')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Connect to your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async facebookLogin(): Promise {\n        return HttpStatus.OK;\n    }\n\n    @Get('facebook/redirect')\n    @UseGuards(AuthGuard('facebook'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Facebook account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async facebookAuthRedirect(@Req() req: Request): Promise {\n        return this.oauthService.facebookLogin(req);\n    }\n\n    @Get('google')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary: 'Connect to your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async googleAuth(@Req() req: Request): Promise {\n        return req;\n    }\n\n    @Get('google/redirect')\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Google account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async googleAuthRedirect(@Req() req: Request): Promise {\n        return this.oauthService.googleLogin(req);\n    }\n\n    @Get('github/redirect')\n    @ApiOperation({\n        summary:\n            'Create login callback with your Github account (not execute directly here).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    async githubAuthRedirect(@Query() req: string) {\n        return this.oauthService.githubRedirect(req);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OauthModule.html":{"url":"modules/OauthModule.html","title":"module - OauthModule","body":"\n                   \n\n\n\n\n    Modules\n    OauthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OauthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OauthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OauthService } from './oauth.service';\nimport { OauthController } from './oauth.controller';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { AuthModule } from '../auth/auth.module';\nimport { FacebookStrategy } from './strategies/facebook.strategy';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [AuthModule, UsersModule],\n    controllers: [OauthController],\n    providers: [OauthService, GoogleStrategy, FacebookStrategy],\n    exports: [OauthService],\n})\nexport class OauthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OauthService.html":{"url":"injectables/OauthService.html","title":"injectable - OauthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OauthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                githubRedirect\n                            \n                            \n                                    Async\n                                githubSuccess\n                            \n                            \n                                    Async\n                                googleLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/oauth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        facebookLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubRedirect\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubRedirect(req: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubSuccess(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { axiosRequest } from 'src/core/helpers';\nimport { AuthService } from '../auth/auth.service';\nimport { SignupDto } from '../auth/dto/request';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class OauthService {\n    constructor(\n        private readonly authService: AuthService,\n        private readonly usersService: UsersService,\n    ) {}\n\n    async facebookLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from facebook!';\n        }\n\n        const payload = {\n            email: req.user.user.email,\n            password: req.user.user.email,\n            username: req.user.user.email,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n\n    async googleLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from Google!';\n        }\n\n        const payload = {\n            email: req.user.email,\n            password: req.user.email,\n            username: req.user.email,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n\n    async githubRedirect(req: string) {\n        // client must request to this url https://github.com/login/oauth/authorize?client_id=358d96685bac18841a23&scope=user:email\n        if (!req) {\n            return 'Not found user from Github!';\n        }\n\n        const requestToken = req['code'];\n\n        const data = await axiosRequest(\n            'post',\n            `https://github.com/login/oauth/access_token?client_id=${process.env.GITHUB_CLIENT_ID}&client_secret=${process.env.GITHUB_SECRET}&code=${requestToken}`,\n            { accept: 'application/json' },\n        );\n        return await this.githubSuccess(data.access_token);\n    }\n\n    async githubSuccess(token: string) {\n        const data = await axiosRequest('get', 'https://api.github.com/user', {\n            Authorization: 'token ' + token,\n        });\n        const payload = {\n            email: data.email || `${data.login}@gmail.com`,\n            password: data.id.toString(),\n            username: data.login,\n        } as SignupDto;\n\n        const identify = await this.usersService.getUserByEmail(payload.email);\n        if (!identify) {\n            return await this.authService.signupLocal(payload);\n        }\n        return await this.authService.signinLocal(payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                limit\n                            \n                            \n                                order\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 1, nullable: true, description: 'Page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 10, nullable: true, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, description: 'asc, desc', example: 'asc', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class PaginationDto {\n    @IsString()\n    @IsOptional()\n    @ApiProperty({\n        type: Number,\n        example: 1,\n        nullable: true,\n        description: 'Page number',\n    })\n    current: string;\n\n    @IsString()\n    @IsOptional()\n    @ApiProperty({\n        type: Number,\n        example: 10,\n        nullable: true,\n        description: 'Number of items per page',\n    })\n    limit: string;\n\n    @IsString()\n    @IsOptional()\n    @ApiProperty({\n        type: String,\n        description: 'asc, desc',\n        example: 'asc',\n        nullable: true,\n    })\n    order: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                published\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class PostEntity {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  files: string[];\n\n  @IsBoolean()\n  @IsNotEmpty()\n  published: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Patch,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n    ParseUUIDPipe,\n    Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    UpdatePostDto,\n    ReactionsPost,\n} from './dto/post/request';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiPayloadTooLargeResponse,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n    ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Posts')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n    description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('posts')\nexport class PostsController {\n    constructor(private postsService: PostsService) {}\n\n    @Post()\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Get all posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    @ApiCreatedResponse({ description: 'Create new post successfuly' })\n    async createPost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreatePostDto,\n    ): Promise {\n        return this.postsService.createPost(userId, dto);\n    }\n\n    @Post('private/all')\n    @ApiBearerAuth()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({\n        summary: 'Get all public and private posts of user',\n    })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPostsOfUser(\n        @GetCurrentUserId() userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPostsOfUser(userId);\n    }\n\n    @Get(':userId/all')\n    @Public()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Get all public posts of user by user-id' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllPublicPosts(\n        @Param('userId', new ParseUUIDPipe()) userId: string,\n    ): Promise | null {\n        return this.postsService.getAllPublicPosts(userId);\n    }\n\n    @Get(':postId')\n    @Public()\n    @ApiOperation({ summary: 'Get one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getOnePostById(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        return this.postsService.getOnePostById(postId);\n    }\n\n    @Patch('update')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updatePost(@Body() dto: UpdatePostDto): Promise {\n        return this.postsService.updatePost(dto);\n    }\n\n    @Delete('delete')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete one post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deletePost(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: DeleteOnePost,\n    ): Promise {\n        return this.postsService.deletePost(userId, dto);\n    }\n\n    @Post('reaction')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'React to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async reactionPost(@Body() dto: ReactionsPost): Promise {\n        return this.postsService.reactionPost(dto);\n    }\n\n    @Public()\n    @Get(':postId/comments')\n    @ApiOperation({ summary: 'Get all comments of the post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getAllComments(\n        @Param('postId', new ParseUUIDPipe()) postId: string,\n    ): Promise {\n        console.log(postId);\n        return this.postsService.getAllComments(postId);\n    }\n\n    @Post('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Add a new comment to post of user' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async addComment(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: CreateCommentDto,\n    ): Promise {\n        return this.postsService.addComment(userId, dto);\n    }\n\n    @Put('comments/update/text')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateComment(\n        @Body() dto: UpdateCommentTextDto,\n    ): Promise {\n        return this.postsService.updateComment(dto);\n    }\n\n    @Delete('comments')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete a comment in post' })\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async deleteComment(@Body() dto: DeleteCommentDto): Promise {\n        return this.postsService.deleteComment(dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../../abstraction/prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [PrismaModule, UsersModule],\n    controllers: [PostsController],\n    providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../../abstraction/prisma/prisma.service';\nimport {\n    CreatePostDto,\n    DeleteOnePost,\n    ReactionsPost,\n    UpdatePostDto,\n} from './dto/post/request';\nimport {\n    CreateCommentDto,\n    DeleteCommentDto,\n    UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n    ICreatePost,\n    IGetPostOfUser,\n    IGetPublicPost,\n    IUpdatePost,\n    IUpdateReaction,\n} from './dto/post/response';\nimport {\n    ICreateComment,\n    IGetComment,\n    IUpdateComment,\n} from './dto/comment/response';\nimport { POST_ERROR, RESPONSES_MESSAGE, USER_ERROR } from 'src/core/constants';\n\n@Injectable()\nexport class PostsService {\n    constructor(private prismaService: PrismaService) {}\n\n    async createPost(userId: string, dto: CreatePostDto): Promise {\n        const post = await this.prismaService.post.create({\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                authorId: userId,\n                // categories: {\n                //   create: [\n                //     {\n                //       createAt: new Date(),\n                //       category: {\n                //         create: {\n                //           id: uuid(),\n                //           name: 'New category',\n                //         },\n                //       },\n                //     },\n                //   ],\n                // },\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n            },\n        });\n        return post;\n    }\n\n    async getAllPostsOfUser(userId: string): Promise | null {\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                published: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllPublicPosts(userId: string): Promise | null {\n        const list = await this.prismaService.user.findMany({\n            where: {\n                id: userId,\n            },\n            select: {\n                writtenPosts: {\n                    select: {\n                        id: true,\n                    },\n                },\n            },\n        });\n        if (!list) {\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        }\n        if (list.length === 0) {\n            throw new NotFoundException(POST_ERROR.EMPTY);\n        }\n        return await this.prismaService.post.findMany({\n            where: {\n                authorId: userId,\n                published: true,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async getOnePostById(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                id: true,\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                authorId: true,\n                createdAt: true,\n                reactions: true,\n            },\n        });\n    }\n\n    async updatePost(dto: UpdatePostDto): Promise {\n        const list = await this.getOnePostById(dto.postId);\n\n        if (!list) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (list.authorId !== dto.authorId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        return await this.prismaService.post.update({\n            where: {\n                id: dto.postId,\n            },\n            data: {\n                title: dto.title,\n                description: dto.description,\n                files: dto.files,\n                published: dto.published,\n            },\n            select: {\n                title: true,\n                description: true,\n                published: true,\n                files: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deletePost(userId: string, dto: DeleteOnePost): Promise {\n        const identify = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                authorId: true,\n            },\n        });\n\n        if (!identify) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n\n        if (identify.authorId !== userId) {\n            throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n        }\n\n        await this.prismaService.post.delete({\n            where: {\n                id: dto.postId,\n            },\n        });\n        return 'This post has been deleted!';\n    }\n\n    async reactionPost(dto: ReactionsPost): Promise {\n        const checkExist = await this.prismaService.reaction.findMany({\n            where: {\n                postId: dto.postId,\n                userId: dto.favouritorId,\n            },\n        });\n\n        if (checkExist.length > 0) {\n            throw new BadRequestException('You already reacted to this post');\n        }\n        await this.prismaService.reaction.create({\n            data: {\n                userId: dto.favouritorId,\n                postId: dto.postId,\n                type: dto.reactionType,\n            },\n        });\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n            select: {\n                reactions: true,\n            },\n        });\n    }\n\n    async getAllComments(postId: string): Promise {\n        return await this.prismaService.post.findUnique({\n            where: {\n                id: postId,\n            },\n            select: {\n                comments: true,\n            },\n        });\n    }\n\n    async addComment(\n        userId: string,\n        dto: CreateCommentDto,\n    ): Promise {\n        const checkPost = await this.prismaService.post.findUnique({\n            where: {\n                id: dto.postId,\n            },\n        });\n\n        if (!checkPost) {\n            throw new NotFoundException(POST_ERROR.NOT_FOUND);\n        }\n        return this.prismaService.comment.create({\n            data: {\n                text: dto.text,\n                postId: dto.postId,\n                authorId: userId,\n            },\n        });\n    }\n\n    async updateComment(dto: UpdateCommentTextDto): Promise {\n        return await this.prismaService.comment.update({\n            where: {\n                id: dto.id,\n            },\n            data: {\n                text: dto.text,\n            },\n            select: {\n                text: true,\n                updatedAt: true,\n            },\n        });\n    }\n\n    async deleteComment(dto: DeleteCommentDto): Promise {\n        await this.prismaService.comment.delete({\n            where: {\n                id: dto.id,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_COMMENT;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n    providers: [PrismaService, ConfigModule],\n    exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/abstraction/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/abstraction/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/abstraction/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    INestApplication,\n    Injectable,\n    OnModuleDestroy,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n    extends PrismaClient\n    implements OnModuleInit, OnModuleDestroy\n{\n    constructor() {\n        super({\n            datasources: {\n                db: {\n                    url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n                    // url: process.env.DATABASE_URL,\n                },\n            },\n        });\n    }\n\n    async onModuleInit() {\n        await this.$connect();\n    }\n\n    async onModuleDestroy() {\n        await this.$disconnect();\n    }\n\n    async enableShutdownHooks(app: INestApplication) {\n        this.$on('beforeExit', async () => {\n            await app.close();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { EROLE } from '../constants';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    canActivate(context: ExecutionContext): boolean {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            'roles',\n            [context.getHandler(), context.getClass()],\n        );\n        if (!requiredRoles) {\n            return true;\n        }\n        // return false;\n        const { request } = context.switchToHttp().getRequest();\n        const user = request.user;\n        const hasRole = () =>\n            user.roles.some((role) => user.roles.includes(role));\n\n        return user && user.roles && hasRole();\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:4\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ESTRATEGY } from 'src/core/constants';\n\nexport class RtGuard extends AuthGuard(ESTRATEGY.JWT_REFRESH) {\n    constructor() {\n        super();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ESTRATEGY } from 'src/core/constants';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(\n    Strategy,\n    ESTRATEGY.JWT_REFRESH,\n) {\n    constructor(\n        @Inject(ConfigService)\n        private config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            passReqToCallback: true,\n        });\n    }\n\n    validate(req: Request, payload: any) {\n        const refreshToken = req\n            .get('authorization')\n            .replace('Bearer', '')\n            .trim();\n        return {\n            ...payload,\n            refreshToken,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(5000),\n            catchError((err) => {\n                if (err instanceof TimeoutError) {\n                    return throwError(() => new RequestTimeoutException());\n                }\n                return throwError(() => err);\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(\n  CreateMessageDto,\n) {\n  id: string;\n  conversationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from 'src/infrastructure/users/entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, [\n  'email',\n  'oldPassword',\n  'newPassword',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAvatarDto.html":{"url":"classes/UpdateUserAvatarDto.html","title":"class - UpdateUserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCoverDto.html":{"url":"classes/UpdateUserCoverDto.html","title":"class - UpdateUserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:75\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:101\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:111\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:88\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:51\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:65\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:58\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:83\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Param,\n    Patch,\n    Put,\n    Query,\n} from '@nestjs/common';\nimport {\n    ApiBearerAuth,\n    ApiConflictResponse,\n    ApiForbiddenResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n    ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport { UsersService } from './users.service';\nimport {\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { STATUS_MESSAGE, SYSTEM_ERROR } from 'src/core/constants';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('users')\nexport class UsersController {\n    constructor(private usersService: UsersService) {\n        this.usersService = usersService;\n    }\n\n    @Public()\n    @Get('profile/:userIdOrUsername')\n    @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getPublicUserByIdOrUsername(\n        @Param('userIdOrUsername') userIdOrUsername: string,\n    ): Promise {\n        return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n    }\n\n    @Public()\n    @Get('find/:email')\n    @ApiOperation({ summary: 'Find user account by email' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async getUserByEmail(\n        @Param('email') email: string,\n    ): Promise {\n        return this.usersService.getUserByEmail(email);\n    }\n\n    @Get()\n    @ApiBearerAuth()\n    @ApiOperation({\n        summary: 'Get user profile by user-id (all)',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async getUserProfile(\n        @GetCurrentUserId() userId: string,\n    ): Promise {\n        return this.usersService.getUserProfile(userId);\n    }\n\n    @Patch('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user profile by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async updateUsersProfile(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserProfileDto,\n    ): Promise {\n        return this.usersService.updateUsersProfile(userId, dto);\n    }\n\n    @Put('profile/avatar')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersAvatar(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserAvatarDto,\n    ): Promise {\n        return this.usersService.updateUsersAvatar(userId, dto);\n    }\n\n    @Put('profile/cover')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Update user cover image by user id' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({\n        description: STATUS_MESSAGE.SUCCESS,\n    })\n    async updateUsersCover(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: UpdateUserCoverDto,\n    ): Promise {\n        return this.usersService.updateUsersCover(userId, dto);\n    }\n\n    @Delete('profile')\n    @ApiBearerAuth()\n    @ApiOperation({ summary: 'Delete user profile by email & password' })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async deleteUser(\n        @GetCurrentUserId() userId: string,\n        @Body() dto: LoginDto,\n    ): Promise {\n        return this.usersService.deleteUser(userId, dto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/abstraction/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n    imports: [PrismaModule, AuthModule],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        // consumer\n        //   .apply(ExistedUserMiddleware)\n        //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotAcceptableException,\n    NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/abstraction/prisma/prisma.service';\nimport {\n    UpdateUserAvatarDto,\n    UpdateUserCoverDto,\n    UpdateUserProfileDto,\n} from './dto/request';\nimport {\n    IAllUsers,\n    IFindUserByEmail,\n    IGetUserProfile,\n    IPublicUser,\n    IUpdateAvatar,\n    IUpdateCover,\n} from './dto/response';\nimport { PaginationDto } from 'src/core/common/dto/pagination.dto';\nimport {\n    AUTH_ERROR,\n    EORDER,\n    RESPONSES_MESSAGE,\n    SYSTEM_ERROR,\n    USER_ERROR,\n} from 'src/core/constants';\n\n@Injectable()\nexport class UsersService {\n    constructor(private prismaService: PrismaService) {}\n\n    async getAllUsers(dto: PaginationDto): Promise {\n        const total = await this.prismaService.user.count();\n        const users = await this.prismaService.user.findMany({\n            // skip: Number(dto.limit) * (Number(dto.current) - 1),\n            take: Number(dto.limit) || 10,\n            orderBy: {\n                id: dto.order as any,\n            },\n            select: {\n                id: true,\n                email: true,\n                username: true,\n                createdAt: true,\n            },\n        });\n        return {\n            total,\n            orderBy: dto.order || EORDER.ASC,\n            pageItems: users.length,\n            pageLimit: Number(dto.limit) || 10,\n            pageCurrent: Number(dto.current) || 1,\n            users: users,\n        };\n    }\n\n    async getPublicUserByIdOrUsername(\n        userIdOrUsername: string,\n    ): Promise {\n        const identify = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n            },\n        });\n        if (identify.length === 0)\n            throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify[0];\n    }\n\n    async getUserByEmail(email: string): Promise {\n        const identify = await this.prismaService.user.findUnique({\n            where: {\n                email: email,\n            },\n            select: {\n                username: true,\n                email: true,\n            },\n        });\n\n        if (!identify) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return identify;\n    }\n\n    async getUserProfile(userId: string): Promise {\n        const profile = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                id: true,\n                username: true,\n                email: true,\n                profile: true,\n                createdAt: true,\n                updatedAt: true,\n            },\n        });\n\n        if (!profile) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n        return profile;\n    }\n\n    async updateUsersProfile(\n        userId: string,\n        dto: UpdateUserProfileDto,\n    ): Promise {\n        await this.prismaService.userProfile.upsert({\n            where: {\n                userId: userId,\n            },\n            create: {\n                ...dto,\n                userId: userId,\n            },\n            update: {\n                ...dto,\n            },\n        });\n        const newProfile = await this.getPublicUserByIdOrUsername(userId);\n        return newProfile;\n    }\n\n    async updateUsersAvatar(\n        userId: string,\n        dto: UpdateUserAvatarDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newAvatar = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        avatar: true,\n                    },\n                },\n            },\n        });\n        return newAvatar;\n    }\n\n    async updateUsersCover(\n        userId: string,\n        dto: UpdateUserCoverDto,\n    ): Promise {\n        await this.prismaService.user.update({\n            where: { id: userId },\n            data: {\n                profile: {\n                    update: {\n                        ...dto,\n                    },\n                },\n            },\n        });\n        const newCover = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                profile: {\n                    select: {\n                        cover: true,\n                    },\n                },\n            },\n        });\n        return newCover;\n    }\n\n    async deleteUser(userId: string, dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n            select: {\n                email: true,\n                password: true,\n            },\n        });\n\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const matchEmail: number = dto.password.localeCompare(user.password);\n        const matchPassword: boolean = await comparePassword(\n            dto.password,\n            user.password,\n        );\n\n        if (matchEmail === 0 || !matchPassword)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (!matchPassword)\n            throw new NotAcceptableException(AUTH_ERROR.PASSWORD_NOT_MATCH);\n\n        await this.prismaService.userProfile.delete({\n            where: {\n                userId: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n\n    async deleteUserById(userId: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n\n        if (!user) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n\n        await this.prismaService.user.delete({\n            where: {\n                id: userId,\n            },\n        });\n        return RESPONSES_MESSAGE.DELETE_USER;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n1.5.0 - 2022-09-03\nAdded\n\nPosts endpoints module\nCreate comment for post\nUpdate README document\nGenerate Nest documentation\nCreate admin module\n\nSource code (.zip)\nSource code (.tar.gz)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/composables/count.ts\n            \n            function\n            useCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/useSticky.ts\n            \n            variable\n            useSticky\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/composables/user.ts\n            \n            variable\n            useUserStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            interface\n            IApp\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/helpers/app.ts\n            \n            function\n            AppSetup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/str.ts\n            \n            function\n            capitalize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            function\n            ThemeManager\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/helpers/theme.ts\n            \n            variable\n            availableThemes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            count\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/server/api/pageview.ts\n            \n            variable\n            startAt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            class\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                client/services/auth.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/axios.config.ts\n            \n            variable\n            axiosConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            class\n            ConversationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                client/services/conversations.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            class\n            FileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                client/services/file.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            class\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                client/services/posts.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            class\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                client/services/user.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            Alert\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            interface\n            AlertOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/stores/AlertsStore.ts\n            \n            variable\n            useAlertsStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/constants/math.constant.ts\n            \n            variable\n            MATH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/filters/rpc-exception.filter.ts\n            \n            class\n            ExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/math/math.controller.ts\n            \n            controller\n            MathController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            class\n            NatsStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/abstraction/microservices/strategies/nats.strategy.ts\n            \n            interface\n            NatsSubscriber\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/abstraction/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/setup.config.ts\n            \n            function\n            setup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.config.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            AUTH_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            CONVERSATION_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            POST_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            RESPONSES_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            STATUS_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            SYSTEM_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.enum.ts\n            \n            variable\n            USER_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/axios.ts\n            \n            variable\n            axiosRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/errors.interceptor.ts\n            \n            injectable\n            ErrorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            randomInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            class\n            MessagesGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.controller.ts\n            \n            controller\n            OauthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.service.ts\n            \n            injectable\n            OauthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            nodeExternals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.2.1\n        \n            @types/passport-facebook : ^2.1.11\n        \n            @types/passport-jwt : ^3.0.6\n        \n            axios : ^0.27.2\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : ^4.2.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EORDER   (src/.../options.enum.ts)\n                        \n                        \n                            EROLE   (src/.../options.enum.ts)\n                        \n                        \n                            ESTRATEGY   (src/.../options.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/options.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EORDER\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ESTRATEGY\n                    \n                \n                        \n                            \n                                 JWT\n                            \n                        \n                        \n                            \n                                Value : jwt\n                            \n                        \n                        \n                            \n                                 JWT_REFRESH\n                            \n                        \n                        \n                            \n                                Value : jwt-refresh\n                            \n                        \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppSetup   (client/.../app.ts)\n                        \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                        \n                            capitalize   (client/.../str.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            randomInt   (src/.../random.ts)\n                        \n                        \n                            setup   (src/.../setup.config.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            ThemeManager   (client/.../theme.ts)\n                        \n                        \n                            useCount   (client/.../count.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/helpers/app.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppSetup\n                        \n                    \n                \n            \n            \n                \nAppSetup()\n                \n            \n\n\n\n\n        \n    \n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    client/helpers/str.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInt\n                        \n                    \n                \n            \n            \n                \nrandomInt(min: number, max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/configs/setup.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setup\n                        \n                    \n                \n            \n            \n                \nsetup(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ThemeManager\n                        \n                    \n                \n            \n            \n                \nThemeManager()\n                \n            \n\n\n\n\n        \n    \n    client/composables/count.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useCount\n                        \n                    \n                \n            \n            \n                \nuseCount()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\nProject documentation\n\nDatabase diagram\n\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAdmin\nAuth\n\n\n\n\n✅ Get list all users\n✅ Signup\n\n\n✅ Get user profile by id\n✅ Signin\n\n\n✅ Update user profile\n✅ Signout\n\n\n✅ Delete user by user-id\n✅ Refresh access-token\n\n\n\n✅  Update password\n\n\n\n\n\n\nOAuth\nFiles\n\n\n\n\n✅ Google signin\n✅ Upload single file (avatar, cover)\n\n\n✅ Facebook signin\n✅ Upload multi files\n\n\n✅ Github signin\n✅ Upload array-field files (post, sample_image)\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅ Create a new post\n\n\n✅ Find user account by email\n✅ Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅ Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅ Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅ Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅ Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\nWebpack hot-reload auto recompile the entire project each time a change occurs\ngRPC support to run in any environment across data centers based on the concept of defining a service in terms of functions (methods) that called remotely\nSession store information about the user across multiple requests, which is particularly useful for MVC applications.\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nPostgre x Heroku\nNest x Prisma\ngRPC for Microservice\n\n\n\nExample templates\n\nNest example\nNest awesome\nNest structure\nNest auth example\nNest social login\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nnpm run prisma:pull\n\n# generate the Prisma Client\nnpm run prisma:generate\n\n# Create env and migrate db\nnpm run prisma:migrate\n\n# Sync migrate change to db\nnpm run prisma:push# Open prisma studio\nnpm run prisma:studioRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MathModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OauthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_exports\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMathModule\n\nMathModule\n\nAppModule -->\n\nMathModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nOauthService \n\nOauthService \n\nOauthService  -->\n\nOauthModule->OauthService \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nOauthModule -->\n\nFacebookStrategy->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    48 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.6.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github, chat, socket, passport, jwt, oauth2\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlertStyle   (client/.../AlertsStore.ts)\n                        \n                        \n                            CreateNewConversationDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteConversationAdminsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteOnePostDto   (client/.../posts.dto.ts)\n                        \n                        \n                            DeleteUserProfile   (client/.../users.dto.ts)\n                        \n                        \n                            GetAllConversationsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            GetAllPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicUsersDto   (client/.../users.dto.ts)\n                        \n                        \n                            GetUserProfileDto   (client/.../users.dto.ts)\n                        \n                        \n                            ITheme   (client/.../theme.ts)\n                        \n                        \n                            IThemeSettingOptions   (client/.../theme.ts)\n                        \n                        \n                            SignUpLocalDto   (client/.../auth.dto.ts)\n                        \n                        \n                            UpdateConversationMembersDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateConversationRoles   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateOneConversationByIdDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdatePostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            UploadAvatarDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadCoverDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            UploadPostsDto   (client/.../files.dto.ts)\n                        \n                        \n                            UpsertReactPostDto   (client/.../posts.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/stores/AlertsStore.ts\n    \n    \n        \n            \n                \n                    \n                    AlertStyle\n                \n            \n            \n                \n                        \"error\" | \"success\" | \"warning\" | \"info\" | \"none\"\n\n                \n            \n        \n    \n    client/dto/conversations.dto.ts\n    \n    \n        \n            \n                \n                    \n                    CreateNewConversationDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteConversationAdminsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllConversationsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationMembersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationRoles\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateOneConversationByIdDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/posts.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteOnePostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdatePostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpsertReactPostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/users.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteUserProfile\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicUsersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetUserProfileDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/helpers/theme.ts\n    \n    \n        \n            \n                \n                    \n                    ITheme\n                \n            \n            \n                \n                        \"dark\" | \"light\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IThemeSettingOptions\n                \n            \n            \n                \n                        \"dark\" | \"light\" | \"system\" | \"realtime\"\n\n                \n            \n        \n    \n    client/dto/auth.dto.ts\n    \n    \n        \n            \n                \n                    \n                    SignUpLocalDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/dto/files.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UploadAvatarDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadCoverDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            availableThemes   (client/.../theme.ts)\n                        \n                        \n                            axiosConfig   (client/.../axios.config.ts)\n                        \n                        \n                            axiosRequest   (src/.../axios.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            CONVERSATION_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            count   (client/.../pageview.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            defaultOptions   (client/.../AlertsStore.ts)\n                        \n                        \n                            ENDPOINT   (client/.../auth.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../conversations.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../file.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../posts.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../user.service.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.config.ts)\n                        \n                        \n                            MATH_SERVICE   (src/.../math.constant.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            nodeExternals   (webpack-hmr.config.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            POST_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSES_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            startAt   (client/.../pageview.ts)\n                        \n                        \n                            STATUS_MESSAGE   (src/.../status-message.enum.ts)\n                        \n                        \n                            SYSTEM_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                               (webpack-hmr.config.ts)\n                        \n                        \n                            useAlertsStore   (client/.../AlertsStore.ts)\n                        \n                        \n                            USER_ERROR   (src/.../status-message.enum.ts)\n                        \n                        \n                            useSticky   (client/.../useSticky.ts)\n                        \n                        \n                            useUserStore   (client/.../user.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/status-message.enum.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SAME_PASSWORD: 'New password must be different from old password',\n    PASSWORD_NOT_MATCH: 'Password does not match',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CONVERSATION_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Conversation not found',\n    NOT_CREATOR: 'You are not creator of this conversation',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'Post not found',\n    EMPTY: 'User not have post',\n    DUPLICATE: 'Post already exist',\n    NOT_AUTHOR: 'You are not author of this post',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSES_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CREATE_USER: 'The new account has been created.',\n    DELETE_USER: 'The user account has been deleted.',\n    DELETE_COMMENT: 'The comment has been deleted.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATUS_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SUCCESS: 'Success.',\n    ERROR: 'Errors.',\n    WARNING: 'Warning.',\n    INFO: 'Info.',\n    UNKNOWN: 'Unknown.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    FORBIDDEN: 'Access denied',\n    NOT_FOUND: 'Not found',\n    INTERNAL_SERVER_ERROR: 'Internal server error',\n    BAD_REQUEST: 'Bad request',\n    UNAUTHORIZED: 'Unauthorized',\n    CONFLICT: 'Conflict',\n    TOO_MANY_REQUESTS: 'Too many requests',\n    METHOD_NOT_ALLOWED: 'Method not allowed',\n    NOT_ACCEPTABLE: 'Provided fields are not acceptable',\n    REQUEST_TIMEOUT: 'Request timeout',\n    PAYLOAD_TOO_LARGE: 'Payload too large',\n    UNSUPPORTED_MEDIA_TYPE: 'Unsupported media type',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    NOT_FOUND: 'User not found',\n    DUPLICATE: 'User already exist',\n}\n                    \n                \n\n\n        \n    \n\n    client/helpers/theme.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        availableThemes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { key: 'light', text: 'Light' },\n    { key: 'dark', text: 'Dark' },\n    { key: 'system', text: 'System' },\n    { key: 'realtime', text: 'Realtime' },\n]\n                    \n                \n\n\n        \n    \n\n    client/services/axios.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                \n                    \n                        Default value : axios.create({\n    baseURL: import.meta.env.VITE_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n    },\n}) as AxiosInstance\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/axios.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    method: string,\n    url: string,\n    headers?: any,\n) => {\n    return await axios({\n        method: method,\n        url: url,\n        headers: headers,\n    }).then(async (response: any) => await response.data);\n}\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    client/server/api/pageview.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startAt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Date.now()\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    client/stores/AlertsStore.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n    closable: true,\n    html: false,\n    timeout: 3000,\n    style: 'info',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        useAlertsStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('AlertsStore', {\n    state: () => ({\n        items: [] as Alert[],\n    }),\n\n    actions: {\n        notify(message: string, style: AlertStyle, options?: AlertOptions) {\n            options = { ...defaultOptions, style, ...options };\n\n            const id = uuid();\n            this.items.push({\n                message,\n                id,\n                ...options,\n            });\n\n            if (options.timeout !== false) {\n                setTimeout(() => {\n                    this.remove(id);\n                }, options.timeout);\n            }\n        },\n\n        success(message: string, options?: AlertOptions) {\n            this.notify(message, 'success', options);\n        },\n\n        error(message: string, options?: AlertOptions) {\n            this.notify(message, 'error', options);\n        },\n\n        warning(message: string, options?: AlertOptions) {\n            this.notify(message, 'warning', options);\n        },\n\n        info(message: string, options?: AlertOptions) {\n            this.notify(message, 'info', options);\n        },\n\n        remove(id: string) {\n            const index = this.items.findIndex((item) => item.id === id);\n            if (index > -1) {\n                this.items.splice(index, 1);\n            }\n        },\n    },\n})\n                    \n                \n\n\n        \n    \n\n    client/services/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/auth'\n                    \n                \n\n\n        \n    \n\n    client/services/conversations.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/conversations'\n                    \n                \n\n\n        \n    \n\n    client/services/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/files'\n                    \n                \n\n\n        \n    \n\n    client/services/posts.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/posts'\n                    \n                \n\n\n        \n    \n\n    client/services/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/users'\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n    const config: ConfigService = app.get(ConfigService);\n\n    const swaggerConfig = new DocumentBuilder()\n        .setTitle('Teneno API')\n        .setDescription(\n            `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n        )\n        .setContact(\n            'Thuong Truong',\n            'https://github.com/thuongtruong1009',\n            'ititiu19228@student.hcmiu.edu.vn',\n        )\n        .setLicense(\n            'License - MIT',\n            'https://github.com/thuongtruong1009/teneno-api/blob/main/LICENSE',\n        )\n        .addServer(config.get('BASE_URL'))\n        .addServer(config.get('HOST_URL'))\n        .setVersion('1.6.0')\n        // .addTag('cats', 'default description')\n        .addBearerAuth({\n            type: 'http',\n            scheme: 'Bearer',\n            bearerFormat: 'JWT',\n            description: 'Paste a valid access token here.',\n            in: 'Header',\n        })\n        .addOAuth2({\n            type: 'oauth2',\n            description: 'Login with Google account',\n            flows: {\n                implicit: {\n                    authorizationUrl: config.get('GOOGLE_CALLBACK_URL'),\n                    scopes: {\n                        'user:write': 'create your account',\n                        'user:read': 'read your account',\n                    },\n                },\n            },\n        })\n        .addCookieAuth('optional-session-id')\n        .addBasicAuth()\n        .addSecurity('api_key', {\n            type: 'apiKey',\n            name: 'api_key',\n            in: 'header',\n        })\n        .build();\n\n    const options: ISwaggerOptions = {\n        operationIdFactory: (controllerKey: string, methodKey: string) =>\n            methodKey,\n    };\n    const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n    SwaggerModule.setup('api', app, document, {\n        swaggerOptions: {\n            persistAuthorization: true,\n        },\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/abstraction/microservices/constants/math.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MATH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'MATH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    webpack-hmr.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodeExternals\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('webpack-node-externals')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('run-script-webpack-plugin')\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: EROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    client/composables/useSticky.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useSticky\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (el: HTMLElement, offset: number) => {\n    const onScroll = () => {\n        const scrollTop =\n            window.pageYOffset || document.documentElement.scrollTop;\n        if (scrollTop > offset) el.classList.add('sticky');\n        else el.classList.remove('sticky');\n    };\n\n    // lifecycle hooks\n    window.addEventListener('scroll', onScroll);\n    onUnmounted(() => {\n        window.removeEventListener('scroll', onScroll);\n    });\n\n    return {\n        onScroll,\n    };\n}\n                    \n                \n\n\n        \n    \n\n    client/composables/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useUserStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore('user', () => {\n    /**\n     * Current named of the user.\n     */\n    const savedName = ref('');\n    const previousNames = ref(new Set());\n\n    const usedNames = computed(() => Array.from(previousNames.value));\n    const otherNames = computed(() =>\n        usedNames.value.filter((name) => name !== savedName.value),\n    );\n\n    /**\n     * Changes the current name of the user and saves the one that was used\n     * before.\n     *\n     * @param name - new name to set\n     */\n    function setNewName(name: string) {\n        if (savedName.value) previousNames.value.add(savedName.value);\n\n        savedName.value = name;\n    }\n\n    return {\n        setNewName,\n        otherNames,\n        savedName,\n    };\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
