var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.214,1,2.319]],["body/classes/Admin.html",[0,0.336,1,4.222,2,1.375,3,0.189,4,0.189,5,0.171,6,5.93,7,0.206,8,0.01,9,0.009,10,0.009]],["title/controllers/AdminController.html",[11,1.591,12,3.18]],["body/controllers/AdminController.html",[0,0.261,1,2.835,3,0.147,4,0.147,5,0.133,7,0.161,8,0.01,9,0.008,10,0.008,11,1.945,12,4.969,13,2.004,14,4.616,15,2.523,16,0.265,17,0.861,18,4.158,19,3.96,20,4.158,21,3.96,22,3.96,23,3.96,24,3.96,25,3.96,26,2.835,27,3.96,28,4.158,29,1.322,30,3.252,31,3.887,32,4.616,33,4.616,34,2.533,35,4.199,36,4.199,37,3.43,38,0.506,39,3.48,40,3.43,41,4.199,42,3.887,43,3.887,44,4.616,45,3.887,46,2.618,47,3.887,48,4.199,49,4.616,50,4.199,51,3.887,52,3.887,53,3.252,54,4.616,55,4.616]],["title/modules/AdminModule.html",[56,1.418,57,2.976]],["body/modules/AdminModule.html",[0,0.272,1,2.951,3,0.153,4,0.153,5,0.139,7,0.167,8,0.01,9,0.008,10,0.008,12,5.581,13,2.628,16,0.293,17,0.896,56,2.273,57,5.926,58,2.447,59,3.192,60,4.805,61,4.805,62,4.805,63,4.694,64,5.77,65,3.569,66,2.833,67,2.626,68,5.465,69,3.308,70,5.581,71,4.062,72,5.465,73,5.465,74,4.045,75,4.805]],["title/injectables/AdminService.html",[64,2.976,76,0.704]],["body/injectables/AdminService.html",[0,0.305,3,0.172,4,0.172,5,0.156,7,0.187,8,0.01,9,0.009,10,0.009,16,0.265,17,1.004,38,0.591,64,5.119,76,1.211,77,2.022,78,5.387,79,2.411,80,4.245,81,4.439,82,0.656,83,6.127,84,1.216,85,0.896,86,1.121,87,4.899,88,2.487]],["title/controllers/AdminUsersController.html",[11,1.591,70,3.18]],["body/controllers/AdminUsersController.html",[0,0.127,1,1.376,3,0.071,4,0.071,5,0.065,7,0.078,8,0.01,9,0.005,10,0.005,11,0.944,13,0.973,15,1.225,16,0.251,17,0.418,18,3.767,19,2.36,20,2.479,21,2.36,22,2.36,23,2.36,24,2.36,25,2.36,26,1.376,27,2.36,28,2.479,29,0.642,30,1.579,31,1.887,32,2.241,33,2.241,34,2.338,35,2.038,36,2.038,37,1.665,38,0.651,39,2.074,40,1.665,41,2.038,42,1.887,43,1.887,44,2.241,45,1.887,46,1.271,47,1.887,48,2.038,49,2.241,50,2.038,51,1.887,52,1.887,53,1.579,54,2.241,55,2.241,70,2.962,82,0.691,84,1.281,85,0.944,86,1.181,88,1.035,89,5.934,90,2.241,91,0.246,92,0.752,93,2.464,94,3.518,95,3.518,96,3.95,97,4.452,98,3.95,99,3.95,100,2.241,101,1.528,102,2.255,103,2.549,104,3.422,105,2.656,106,3.518,107,6.701,108,2.549,109,2.986,110,1.181,111,3.662,112,2.241,113,3.877,114,2.549,115,2.614,116,2.922,117,2.549,118,2.549,119,3.901,120,2.038,121,2.549,122,3.227,123,2.549,124,2.549,125,3.301,126,2.549,127,2.549,128,2.549,129,2.038,130,3.301,131,2.549,132,1.792,133,4.001,134,2.549,135,2.038,136,3.301,137,2.549,138,2.255,139,2.549,140,3.877,141,1.503,142,1.376,143,3.657,144,1.887,145,1.887,146,2.038,147,4.181,148,3.803,149,2.241,150,2.038,151,2.549,152,2.241,153,2.038,154,2.038,155,2.038,156,2.038,157,2.549,158,3.06,159,2.549,160,1.579,161,2.549,162,3.637,163,1.579,164,3.807,165,2.549,166,1.462,167,2.549,168,2.549,169,1.249,170,3.518,171,2.241,172,2.549,173,2.241,174,2.549,175,2.962,176,2.241,177,2.549,178,2.241,179,2.549,180,2.549,181,2.549]],["title/classes/AllExceptionsFilter.html",[0,0.214,182,3.435]],["body/classes/AllExceptionsFilter.html",[0,0.18,2,0.737,3,0.101,4,0.101,5,0.092,7,0.111,8,0.01,9,0.006,10,0.006,16,0.219,17,0.593,38,0.644,39,4.303,46,3.878,52,3.856,53,3.227,79,1.424,82,0.715,84,1.325,85,0.977,86,1.222,88,1.469,91,0.349,92,0.98,110,1.117,142,1.953,182,4.166,183,3.18,184,2.05,185,5.368,186,5.872,187,4.155,188,5.209,189,4.229,190,6.105,191,3.18,192,4.137,193,3.617,194,3.403,195,4.58,196,6.578,197,5.368,198,5.872,199,3.617,200,7.158,201,4.816,202,5.209,203,3.617,204,3.617,205,4.341,206,3.617,207,5.209,208,3.617,209,3.617,210,1.875,211,1.96,212,3.18,213,3.18,214,3.18,215,3.18,216,3.617,217,3.617,218,2.473,219,6.679,220,3.617,221,3.617,222,3.617,223,6.105,224,5.872,225,3.617,226,3.617,227,3.18,228,3.18,229,1.516,230,3.18,231,3.617,232,2.241,233,3.18,234,3.617]],["title/controllers/AppController.html",[11,1.591,235,3.18]],["body/controllers/AppController.html",[0,0.251,3,0.141,4,0.141,5,0.128,7,0.155,8,0.01,9,0.008,10,0.008,11,2.426,13,1.928,15,2.427,16,0.276,17,0.828,26,2.728,29,1.272,34,2.273,37,4.278,82,0.541,88,2.051,91,0.487,92,1.231,101,1.265,102,1.765,110,0.925,116,3.146,141,2.98,142,2.728,148,3.69,160,3.13,162,2.847,164,2.98,166,1.145,218,2.288,235,4.847,236,4.442,237,6.758,238,5.052,239,4.537,240,5.052,241,5.758,242,5.758,243,3.536,244,3.395,245,4.537,246,5.237,247,5.052,248,6.549,249,5.052,250,7.266,251,4.747,252,4.442,253,4.442,254,5.052,255,4.442,256,5.758,257,5.052]],["title/modules/AppModule.html",[56,1.418,258,3.18]],["body/modules/AppModule.html",[0,0.15,3,0.084,4,0.084,5,0.077,7,0.092,8,0.01,9,0.005,10,0.006,13,1.739,16,0.305,17,0.494,38,0.291,40,3.587,46,1.504,56,1.504,57,4.784,58,1.351,59,2.112,63,3.892,65,2.362,66,1.564,67,1.45,69,2.189,71,2.688,82,0.323,84,0.599,85,0.441,86,0.552,92,0.567,110,0.552,116,2.189,163,2.823,184,1.187,189,2.09,201,2.977,232,3.789,235,4.064,251,4.511,252,2.653,258,6.376,259,2.653,260,2.653,261,2.653,262,4.278,263,4.784,264,4.784,265,4.784,266,4.784,267,4.784,268,4.784,269,3.892,270,3.017,271,2.653,272,4.006,273,5.378,274,3.017,275,2.653,276,4.556,277,5.49,278,2.09,279,3.017,280,3.017,281,3.373,282,3.017,283,3.017,284,3.017,285,3.017,286,2.413,287,1.971,288,4.556,289,2.413,290,3.017,291,2.233,292,3.017,293,3.017,294,3.017,295,3.017,296,3.017,297,2.233,298,3.017,299,3.017,300,2.653,301,3.017,302,3.373,303,3.017,304,3.017,305,2.653,306,3.017,307,3.017,308,1.264,309,4.556,310,4.006,311,3.017,312,3.017,313,3.017,314,4.556,315,3.017,316,4.556,317,2.413,318,3.017,319,3.017,320,4.556,321,2.233,322,3.017,323,3.017,324,3.017,325,2.413,326,3.017,327,4.006,328,4.006,329,3.017,330,4.006,331,3.017,332,3.017,333,4.006,334,3.373,335,4.556,336,4.006,337,2.413,338,4.556,339,3.017,340,3.017,341,1.869]],["title/injectables/AppService.html",[76,0.704,251,2.806]],["body/injectables/AppService.html",[0,0.279,3,0.157,4,0.157,5,0.143,7,0.172,8,0.01,9,0.008,10,0.008,16,0.274,17,0.92,38,0.541,76,1.148,77,1.853,79,2.209,82,0.749,84,1.114,85,0.821,86,1.027,91,0.541,92,1.317,101,1.353,110,1.027,166,1.272,187,3.163,191,4.935,192,4.95,194,4.985,237,7.025,239,3.888,241,4.935,245,3.888,246,5.599,251,4.574,342,4.935,343,5.612,344,5.612,345,5.612,346,5.612,347,5.612,348,5.612]],["title/injectables/AtGuard.html",[76,0.704,281,3.18]],["body/injectables/AtGuard.html",[0,0.258,3,0.145,4,0.145,5,0.132,7,0.158,8,0.01,9,0.008,10,0.008,16,0.264,17,0.849,38,0.642,76,1.09,77,1.709,79,2.038,82,0.712,84,1.32,85,0.973,86,1.218,88,2.102,91,0.499,92,1.251,110,0.948,116,3.532,166,1.508,211,1.662,278,3.587,281,4.925,308,2.788,325,6.568,349,4.552,350,5.85,351,4.552,352,5.178,353,5.85,354,4.576,355,5.178,356,3.054,357,3.833,358,2.918,359,1.531,360,4.552,361,3.207,362,5.178,363,4.141,364,4.141,365,5.178,366,5.178,367,6.653,368,5.178,369,4.552,370,4.552,371,5.178]],["title/injectables/AtStrategy.html",[76,0.704,372,2.976]],["body/injectables/AtStrategy.html",[0,0.255,3,0.143,4,0.143,5,0.13,7,0.157,8,0.01,9,0.008,10,0.008,16,0.287,17,0.839,38,0.637,76,1.083,77,1.69,79,2.015,82,0.707,84,1.311,85,0.966,86,1.209,88,2.079,91,0.494,92,1.242,110,0.937,166,1.161,287,3.346,358,2.886,359,1.514,361,3.172,372,4.577,373,4.503,374,3.174,375,4.503,376,5.353,377,5.121,378,4.316,379,6.606,380,8.189,381,5.121,382,5.283,383,3.791,384,4.503,385,3.791,386,3.172,387,4.316,388,3.548,389,3.791,390,4.503,391,4.503,392,5.808,393,4.503,394,4.503,395,5.121,396,3.425,397,4.503]],["title/controllers/AuthController.html",[11,1.591,398,3.18]],["body/controllers/AuthController.html",[0,0.142,3,0.08,4,0.08,5,0.072,7,0.087,8,0.01,9,0.005,10,0.005,11,1.055,13,1.087,15,1.368,16,0.26,17,0.467,18,3.678,19,2.572,20,2.701,21,2.572,22,2.572,23,2.572,24,2.572,25,2.572,26,1.537,27,2.572,28,2.701,29,0.717,34,2.389,38,0.699,39,1.476,82,0.685,84,1.27,85,0.936,86,1.171,88,1.156,91,0.275,92,0.82,93,2.455,97,2.701,101,1.436,102,2.359,105,2.575,109,2.411,110,1.171,111,3.644,116,2.546,119,3.367,140,1.973,141,1.679,142,1.537,145,2.108,147,4.183,148,3.805,160,1.764,162,3.607,164,3.502,166,1.451,218,0.995,229,1.827,334,2.108,388,1.973,398,3.228,399,2.503,400,5.937,401,5.202,402,3.834,403,3.834,404,3.834,405,2.503,406,2.847,407,5.299,408,4.591,409,2.847,410,2.503,411,2.847,412,2.847,413,4.36,414,2.847,415,2.503,416,3.678,417,2.847,418,3.228,419,2.847,420,2.503,421,4.678,422,2.847,423,2.095,424,2.847,425,2.503,426,1.537,427,2.847,428,2.503,429,4.114,430,2.847,431,2.354,432,2.847,433,1.764,434,2.503,435,3.228,436,3.678,437,2.503,438,2.277,439,3.021,440,2.108,441,2.503,442,2.108,443,2.503,444,1.86,445,1.679,446,1.537,447,1.42,448,2.847,449,1.973,450,1.973,451,1.86,452,1.86,453,1.86,454,1.86,455,1.86,456,1.86,457,1.86,458,2.847,459,2.847,460,2.847,461,2.108,462,4.182,463,2.503,464,2.847,465,2.847,466,2.847,467,2.847,468,2.847,469,2.847,470,2.847,471,2.847,472,2.847,473,2.847,474,2.847,475,2.847,476,2.847,477,2.847,478,2.847]],["title/modules/AuthModule.html",[56,1.418,262,2.661]],["body/modules/AuthModule.html",[0,0.23,3,0.129,4,0.129,5,0.117,7,0.141,8,0.01,9,0.007,10,0.007,13,2.355,16,0.285,17,0.757,56,2.037,58,2.067,59,2.861,65,3.199,66,2.393,67,2.218,69,2.965,71,4.1,93,1.402,262,5.346,269,4.484,286,3.691,372,5.513,376,4.816,398,5.146,436,5.314,437,4.059,479,4.059,480,4.059,481,4.616,482,4.059,483,5.513,484,4.616,485,4.568,486,4.059,487,4.616,488,4.616,489,6.171,490,3.691,491,4.616,492,4.616,493,4.616,494,4.059,495,4.616,496,4.616,497,4.059,498,4.616,499,3.691]],["title/injectables/AuthService.html",[76,0.704,436,2.661]],["body/injectables/AuthService.html",[0,0.116,3,0.065,4,0.065,5,0.059,7,0.071,8,0.01,9,0.004,10,0.004,16,0.243,17,0.381,38,0.652,76,0.61,77,0.767,79,1.464,81,3.375,82,0.724,84,1.342,85,0.989,86,1.238,91,0.224,92,0.699,93,2.473,101,1.573,105,1.974,109,2.832,110,1.192,111,3.576,119,2.319,166,1.317,169,1.452,187,2.62,211,2.488,218,0.812,229,2.729,244,2.755,287,1.518,376,4.296,388,1.61,400,3.27,401,4.82,402,3.27,403,3.27,404,3.27,405,3.27,410,3.27,415,3.27,416,3.292,420,3.27,421,3.682,428,3.27,429,3.682,431,2.008,436,2.304,442,1.72,443,2.043,446,1.255,447,1.159,490,1.859,494,3.27,497,3.27,499,1.859,500,2.043,501,3.719,502,3.719,503,2.324,504,6.511,505,2.324,506,3.719,507,4.194,508,2.324,509,2.324,510,2.324,511,2.324,512,2.324,513,2.324,514,3.719,515,5.813,516,2.324,517,2.324,518,1.859,519,1.859,520,3.934,521,1.859,522,2.043,523,1.72,524,1.61,525,2.043,526,4.266,527,2.324,528,3.719,529,3.719,530,3.719,531,2.324,532,2.324,533,1.72,534,4.25,535,2.324,536,3.27,537,4.65,538,2.324,539,2.043,540,1.859,541,5.813,542,2.304,543,3.719,544,2.324,545,1.255,546,4.033,547,2.324,548,2.324,549,2.324,550,5.948,551,2.324,552,2.324,553,2.324,554,5.314,555,3.718,556,5.111,557,5.813,558,2.043,559,3.27,560,4.65,561,4.65,562,4.65,563,2.324,564,2.304,565,3.719,566,3.719,567,3.719,568,2.324,569,2.324,570,2.324]],["title/classes/CommentEntity.html",[0,0.214,571,2.806]],["body/classes/CommentEntity.html",[0,0.324,2,1.021,3,0.14,4,0.14,5,0.127,7,0.153,8,0.01,9,0.007,10,0.007,16,0.18,38,0.785,82,0.871,91,0.483,101,1.624,102,2.845,109,2.938,169,2.26,571,4.256,572,4.406,573,2.15,574,4.079,575,6.364,576,7.238,577,3.908,578,5.012,579,5.012,580,5.788,581,5.012,582,3.249,583,4.406,584,5.012,585,5.012,586,5.012,587,5.012,588,5.012,589,4.513,590,6.514,591,4.134,592,5.012,593,3.817,594,1.856]],["title/classes/ConversationEntity.html",[0,0.214,595,3.18]],["body/classes/ConversationEntity.html",[0,0.224,2,0.918,3,0.126,4,0.126,5,0.115,7,0.138,8,0.01,9,0.007,10,0.007,16,0.162,29,1.135,34,2.03,38,0.802,82,0.89,85,1.004,91,0.435,101,1.67,102,2.907,132,3.075,169,2.144,308,2.544,396,3.147,564,3.761,573,2.004,595,4.494,596,3.961,597,4.253,598,5.491,599,3.707,600,3.707,601,5.491,602,4.554,603,4.505,604,4.505,605,5.09,606,4.505,607,4.505,608,4.505,609,4.855,610,4.505,611,4.505,612,4.505,613,4.505,614,4.505,615,3.121]],["title/controllers/ConversationsController.html",[11,1.591,616,3.18]],["body/controllers/ConversationsController.html",[0,0.104,1,1.85,3,0.059,4,0.059,5,0.053,7,0.064,8,0.01,9,0.004,10,0.004,11,0.778,13,0.802,15,1.009,16,0.212,17,0.344,18,2.123,19,2.021,20,2.123,21,2.021,22,2.021,23,2.021,24,2.021,25,2.021,26,1.134,27,2.021,28,2.123,29,0.529,30,2.123,34,2.364,38,0.698,39,1.089,82,0.697,84,1.292,85,0.952,86,1.192,88,0.853,91,0.203,92,0.644,93,2.43,97,3.103,101,1.51,102,2.275,104,3.823,105,2.538,110,1.192,115,2.239,119,4.149,140,4.326,141,1.239,142,1.134,143,1.554,144,1.554,147,4.173,148,3.796,160,1.301,162,3.67,164,3.683,166,1.476,169,1.848,218,0.734,229,2.099,308,1.436,423,1.646,426,3.371,433,2.123,435,2.536,445,1.239,446,1.134,447,1.047,449,1.455,450,1.455,451,1.372,452,1.372,453,1.372,454,1.372,455,1.372,456,1.372,457,1.372,461,1.554,462,4.254,526,1.089,589,2.374,595,4.622,599,3.196,600,1.85,616,2.536,617,1.846,618,3.213,619,3.013,620,3.816,621,3.816,622,3.013,623,3.816,624,3.816,625,3.816,626,3.816,627,1.846,628,2.823,629,2.1,630,6.437,631,5.92,632,2.1,633,3.013,634,2.1,635,3.371,636,1.846,637,3.47,638,2.1,639,4.82,640,2.1,641,1.846,642,2.954,643,2.1,644,5.013,645,2.1,646,4.667,647,1.846,648,3.103,649,2.1,650,3.427,651,2.1,652,1.846,653,3.272,654,2.1,655,4.005,656,2.1,657,1.846,658,2.954,659,2.1,660,2.1,661,1.846,662,2.954,663,2.1,664,2.1,665,1.846,666,2.954,667,2.1,668,3.013,669,3.427,670,2.1,671,3.272,672,1.846,673,2.1,674,2.1,675,2.1,676,2.1,677,2.1,678,2.1,679,2.1,680,2.1,681,2.1,682,2.1,683,4.341,684,2.1,685,2.1,686,2.1,687,2.1,688,2.1,689,2.1,690,4.341,691,2.1,692,2.1,693,2.1,694,2.1,695,2.1]],["title/modules/ConversationsModule.html",[56,1.418,263,2.976]],["body/modules/ConversationsModule.html",[0,0.268,3,0.151,4,0.151,5,0.137,7,0.165,8,0.01,9,0.008,10,0.008,13,2.604,16,0.291,17,0.883,56,2.252,58,2.412,59,3.163,63,4.677,65,3.537,66,2.792,67,2.588,69,3.278,71,4.025,74,3.987,263,6.009,269,4.677,616,5.543,671,5.421,672,4.736,696,4.736,697,4.736,698,5.386,699,5.386,700,5.386,701,4.736]],["title/injectables/ConversationsService.html",[76,0.704,671,2.806]],["body/injectables/ConversationsService.html",[0,0.116,1,1.256,3,0.065,4,0.065,5,0.059,7,0.071,8,0.011,9,0.004,10,0.004,16,0.209,17,0.381,34,1.101,38,0.673,76,0.61,77,0.768,79,0.916,80,1.612,81,3.216,82,0.747,84,1.385,85,1.088,86,1.277,87,1.861,88,0.945,91,0.224,92,0.7,93,2.473,101,1.541,110,1.239,115,4.256,119,4.06,132,2.084,166,1.657,169,2.49,211,2.298,218,0.813,244,3.015,308,1.95,396,1.206,447,1.16,526,3.711,545,2.01,597,3.603,599,3.14,600,3.35,619,3.273,620,3.273,621,4.091,622,3.273,623,3.273,624,3.273,625,4.091,626,4.091,627,3.273,628,2.997,635,3.517,636,3.273,637,3.684,641,2.046,642,3.137,646,5.065,647,3.273,648,3.294,652,3.273,653,3.474,657,3.273,658,3.137,661,2.046,662,3.137,665,2.046,666,3.137,671,2.432,702,2.046,703,2.327,704,2.327,705,2.327,706,2.327,707,2.327,708,2.327,709,2.327,710,2.327,711,2.327,712,2.046,713,3.445,714,1.861,715,3.723,716,2.327,717,3.723,718,3.273,719,5.318,720,3.723,721,4.653,722,5.318,723,6.768,724,1.723,725,6.136,726,5.318,727,2.327,728,2.327,729,2.327,730,2.327,731,3.273,732,3.723,733,2.327]],["title/classes/CreateCommentDto.html",[0,0.214,734,2.976]],["body/classes/CreateCommentDto.html",[0,0.316,2,1.295,3,0.178,4,0.178,5,0.162,7,0.194,8,0.01,9,0.009,10,0.009,16,0.271,29,1.601,359,1.879,571,4.152,574,3.582,577,3.431,734,5.232,735,5.588,736,4.705,737,3.169,738,5.082,739,5.082]],["title/classes/CreateConversationDto.html",[0,0.214,628,2.421]],["body/classes/CreateConversationDto.html",[0,0.259,2,0.737,3,0.101,4,0.101,5,0.092,7,0.111,8,0.01,9,0.006,10,0.006,16,0.219,29,0.911,34,2.342,38,0.775,82,0.758,85,1.158,86,0.953,91,0.349,101,1.666,102,2.473,218,2.874,308,1.516,374,1.738,396,2.7,573,1.72,582,3.331,589,4.229,591,3.044,593,3.209,594,1.34,597,3.782,599,3.296,600,3.296,602,3.822,609,4.166,615,3.609,628,2.936,740,6.482,741,2.039,742,4.175,743,3.863,744,4.166,745,3.617,746,3.617,747,3.617,748,6.105,749,3.617,750,3.617,751,4.944,752,4.944,753,3.617,754,4.944,755,6.105,756,4.58,757,4.944,758,3.617,759,3.617,760,3.617,761,3.18,762,3.18,763,4.882,764,3.617,765,3.617,766,3.18,767,3.18,768,2.893,769,2.893,770,2.893,771,2.506,772,2.506,773,2.893,774,4.166,775,4.166,776,4.944,777,3.18,778,4.58,779,3.617,780,3.617,781,3.617,782,3.617,783,3.617,784,3.617]],["title/classes/CreateMessageDto.html",[0,0.214,785,2.806]],["body/classes/CreateMessageDto.html",[0,0.292,2,1.198,3,0.165,4,0.165,5,0.149,7,0.18,8,0.01,9,0.008,10,0.008,16,0.211,29,1.48,38,0.751,82,0.834,91,0.567,101,1.638,169,2.432,573,2.378,577,4.206,785,4.706,786,7.14,787,4.699,788,6.229,789,5.877,790,5.877,791,5.167,792,7.204]],["title/classes/CreatePostDto.html",[0,0.214,793,2.976]],["body/classes/CreatePostDto.html",[0,0.315,2,1.291,3,0.177,4,0.177,5,0.161,7,0.194,8,0.01,9,0.009,10,0.009,16,0.27,29,1.595,34,1.873,359,1.873,737,3.159,793,5.222,794,5.569,795,4.388,796,4.138,797,5.065,798,5.065,799,4.388,800,3.283]],["title/classes/DeleteCommentDto.html",[0,0.214,801,2.976]],["body/classes/DeleteCommentDto.html",[0,0.316,2,1.295,3,0.178,4,0.178,5,0.162,7,0.194,8,0.01,9,0.009,10,0.009,16,0.271,29,1.601,169,1.984,359,1.879,571,4.152,574,3.582,736,4.705,737,3.169,738,5.082,739,5.082,801,5.232,802,5.588]],["title/classes/DeleteConversationDto.html",[0,0.214,637,2.976]],["body/classes/DeleteConversationDto.html",[0,0.301,2,1.233,3,0.169,4,0.169,5,0.154,7,0.185,8,0.01,9,0.008,10,0.008,16,0.217,38,0.583,82,0.647,91,0.583,101,1.416,102,2.113,105,2.053,109,2.976,169,1.888,359,2.167,573,2.42,637,5.078,648,5.08,741,3.408,742,3.567,743,2.906,803,5.317,804,3.265,805,3.746,806,4.477,807,4.836,808,5.317,809,4.19]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.214,642,2.534]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.391,2,0.987,3,0.136,4,0.136,5,0.123,7,0.231,8,0.01,9,0.007,10,0.007,16,0.255,29,1.22,34,1.432,38,0.687,82,0.682,85,0.708,91,0.467,101,1.678,102,1.692,105,2.163,109,2.89,132,2.169,169,1.989,359,2.236,423,2.327,573,2.103,591,3.177,593,3.061,594,1.794,597,3,599,4.083,600,3.439,602,3.302,628,4.262,642,3.758,658,2.857,662,2.857,666,2.857,741,2.729,742,2.857,743,3.061,804,3.439,805,3.946,806,3.585,809,3.355,810,4.932,811,4.843,812,4.843,813,5.239,814,3.585,815,3.164]],["title/classes/DeleteOnePost.html",[0,0.214,816,2.976]],["body/classes/DeleteOnePost.html",[0,0.368,2,1.253,3,0.172,4,0.172,5,0.156,7,0.188,8,0.01,9,0.009,10,0.009,16,0.221,38,0.593,82,0.658,91,0.593,101,1.43,102,2.148,573,2.444,574,4.477,580,4.915,591,3.692,593,3.557,594,2.277,795,4.258,816,5.129,817,6.509,818,6.147]],["title/injectables/ErrorsIntereptor.html",[76,0.704,819,3.435]],["body/injectables/ErrorsIntereptor.html",[0,0.27,3,0.152,4,0.152,5,0.138,7,0.166,8,0.01,9,0.008,10,0.008,16,0.246,17,0.89,38,0.524,76,1.124,77,1.794,82,0.582,84,1.078,85,0.794,86,0.994,91,0.524,92,1.29,110,0.994,142,2.933,166,1.231,184,2.138,196,4.345,218,1.898,229,2.277,354,4.659,356,3.205,819,5.486,820,4.777,821,4.753,822,5.078,823,4.892,824,5.471,825,5.433,826,5.209,827,4.753,828,5.433,829,6.86,830,3.55,831,4.777,832,5.433,833,5.433,834,5.433,835,5.433]],["title/injectables/ExistedUserMiddleware.html",[76,0.704,836,3.18]],["body/injectables/ExistedUserMiddleware.html",[0,0.235,3,0.132,4,0.132,5,0.12,7,0.145,8,0.01,9,0.007,10,0.007,16,0.253,17,0.776,37,3.092,38,0.605,46,3.737,76,1.028,77,1.562,79,1.863,80,3.279,81,4.154,82,0.672,84,1.245,85,0.917,86,1.148,88,1.921,91,0.456,92,1.18,93,2.138,109,2.547,110,0.866,169,1.959,184,1.863,205,4.046,210,2.453,211,2.014,229,1.984,308,1.984,426,2.555,519,3.785,526,2.453,539,6.188,546,2.932,555,3.785,564,2.932,724,3.503,823,4.643,836,4.644,837,5.628,838,4.161,839,4.644,840,4.733,841,5.516,842,5.628,843,7.495,844,4.733,845,3.092,846,5.516,847,3.785,848,4.733,849,4.733,850,4.733]],["title/controllers/FileController.html",[11,1.591,851,3.18]],["body/controllers/FileController.html",[0,0.14,3,0.079,4,0.079,5,0.188,7,0.086,8,0.01,9,0.005,10,0.005,11,1.045,13,1.077,15,1.356,16,0.259,17,0.462,18,2.682,19,2.554,20,2.682,21,2.554,22,2.554,23,2.554,24,2.554,25,2.554,26,1.523,27,2.554,28,2.682,29,0.711,34,2.385,38,0.615,39,1.463,43,3.205,45,4.98,82,0.633,84,1.173,85,1.084,86,1.082,88,1.145,91,0.272,92,0.814,93,2.372,102,2.227,105,1.47,110,1.082,111,3.473,132,1.939,138,2.44,141,1.664,142,1.523,147,3.949,148,3.593,160,1.748,162,3.33,164,3.486,166,1.339,210,2.731,218,0.986,243,3.442,244,3.488,308,1.815,426,3.442,433,3.264,445,1.664,446,1.523,447,1.407,449,1.955,450,1.955,451,1.843,452,1.843,453,1.843,454,1.843,455,1.843,456,1.843,457,1.843,462,3.861,615,1.955,800,3.305,851,3.205,852,2.481,853,4.213,854,4.213,855,4.633,856,4.633,857,2.481,858,6.517,859,2.821,860,6.355,861,2.821,862,2.821,863,2.821,864,2.481,865,2.821,866,2.481,867,2.821,868,2.821,869,2.481,870,2.821,871,5.196,872,3.807,873,2.821,874,4.33,875,2.821,876,2.481,877,3.442,878,2.821,879,4.33,880,2.821,881,2.829,882,4.33,883,2.821,884,5.269,885,5.269,886,2.481,887,3.807,888,3.807,889,2.256,890,2.256,891,3.462,892,2.829,893,2.481,894,2.481,895,2.481,896,1.955,897,2.821,898,2.481,899,2.481,900,2.821,901,2.089,902,2.821,903,2.821,904,2.821,905,2.821,906,2.821,907,2.821,908,2.821,909,2.821,910,2.821,911,2.821,912,2.821,913,5.605,914,2.821,915,2.821,916,2.821,917,2.821,918,2.821]],["title/classes/FileService.html",[0,0.214,901,3.18]],["body/classes/FileService.html",[0,0.214,2,0.878,3,0.121,4,0.121,5,0.11,7,0.132,8,0.01,9,0.007,10,0.007,16,0.211,38,0.77,82,0.718,84,1.332,85,0.981,86,1.228,91,0.416,92,1.107,110,1.228,119,2.148,166,1.521,211,2.562,229,2.812,244,4.273,800,2.233,853,4.71,854,4.71,901,4.36,919,3.445,920,5.889,921,5.889,922,6.342,923,8.484,924,4.308,925,5.889,926,6.342,927,4.308,928,5.889,929,6.342,930,4.308,931,3.445,932,4.308,933,3.445,934,5.366,935,4.308,936,8.242,937,5.889,938,6.71,939,5.366,940,5.366,941,6.71,942,4.308,943,4.308,944,4.308]],["title/modules/FilesModule.html",[56,1.418,264,2.976]],["body/modules/FilesModule.html",[0,0.291,3,0.163,4,0.163,5,0.148,7,0.179,8,0.01,9,0.008,10,0.008,13,2.739,16,0.279,17,0.957,56,2.369,58,2.615,59,3.327,65,3.72,66,3.027,67,2.806,69,2.806,71,4.233,264,5.866,851,5.75,892,5.604,893,5.135,945,5.135,946,5.135,947,5.84,948,5.84]],["title/classes/FilesService.html",[0,0.214,892,2.806]],["body/classes/FilesService.html",[0,0.22,2,0.901,3,0.124,4,0.124,5,0.173,7,0.135,8,0.01,9,0.007,10,0.007,16,0.159,38,0.703,82,0.78,84,1.447,85,1.066,86,1.334,91,0.426,92,1.127,93,2.588,110,1.334,111,3.928,166,1.727,800,3.95,853,4.792,854,4.792,855,5.269,856,5.269,857,5.269,858,7.286,864,5.269,869,5.269,876,5.269,877,4.442,892,3.915,894,3.886,895,3.886,896,3.062,949,3.886,950,4.42,951,4.42,952,4.42,953,4.42,954,6.8,955,6.8,956,6.8,957,6.8,958,6.8,959,6.8,960,4.42]],["title/classes/GetAllConversationDto.html",[0,0.214,648,2.661]],["body/classes/GetAllConversationDto.html",[0,0.38,2,1.147,3,0.158,4,0.158,5,0.143,7,0.215,8,0.01,9,0.008,10,0.008,16,0.252,29,1.418,38,0.677,82,0.603,91,0.543,101,1.545,102,1.967,105,2.382,109,3.102,169,2.19,359,1.664,573,2.315,591,3.498,593,3.37,594,2.085,602,3.636,648,4.734,653,3.678,741,3.172,742,3.321,743,3.37,804,3.787,805,4.345,806,4.167,815,3.678,961,5.609,962,5.629]],["title/classes/GetOneConversationDto.html",[0,0.214,653,2.806]],["body/classes/GetOneConversationDto.html",[0,0.379,2,1.137,3,0.156,4,0.156,5,0.142,7,0.213,8,0.01,9,0.008,10,0.008,16,0.25,29,1.405,38,0.673,82,0.597,91,0.538,101,1.54,102,1.949,105,2.369,109,3.09,169,2.178,359,2.062,573,2.303,591,3.478,593,3.352,594,2.067,602,3.616,648,4.939,653,4.557,741,3.144,742,3.291,743,3.352,804,3.766,805,4.321,806,4.13,807,4.461,808,4.905,815,3.645,961,4.461]],["title/injectables/GithubGuard.html",[76,0.704,963,3.18]],["body/injectables/GithubGuard.html",[0,0.321,3,0.18,4,0.18,5,0.164,7,0.197,8,0.01,9,0.009,10,0.009,16,0.273,17,1.056,76,1.248,77,2.127,357,4.769,358,3.631,359,1.905,963,5.636,964,5.665,965,6.443]],["title/injectables/GithubStrategy.html",[76,0.704,966,3.435]],["body/injectables/GithubStrategy.html",[0,0.234,3,0.131,4,0.131,5,0.119,7,0.144,8,0.01,9,0.007,10,0.007,16,0.279,17,0.77,38,0.602,76,1.023,77,1.551,79,1.848,82,0.668,84,1.239,85,0.913,86,1.143,88,1.907,91,0.453,92,1.174,93,2.13,101,1.545,105,2.381,110,0.86,122,5.415,166,1.064,169,1.467,211,2.004,229,1.969,358,2.647,359,1.389,361,2.91,374,3.369,378,4.078,383,3.477,385,3.477,386,2.91,389,3.477,526,2.435,533,4.621,546,2.91,635,2.536,966,4.992,967,4.13,968,4.697,969,4.954,970,4.697,971,4.13,972,7.012,973,4.697,974,4.13,975,4.13,976,6.243,977,3.756,978,4.325,979,3.756,980,4.697,981,4.13,982,4.697,983,4.13,984,4.697,985,3.756,986,4.697,987,4.697]],["title/injectables/GoogleStrategy.html",[76,0.704,988,2.976]],["body/injectables/GoogleStrategy.html",[0,0.237,3,0.134,4,0.134,5,0.121,7,0.146,8,0.01,9,0.007,10,0.007,16,0.27,17,0.782,38,0.46,76,1.033,77,1.574,79,2.78,82,0.675,84,0.946,85,0.922,86,0.873,91,0.46,92,1.186,93,2.146,101,1.552,105,2.141,110,0.873,111,3.03,122,5.107,211,2.024,358,2.688,359,1.41,361,2.954,374,3.394,378,4.12,383,3.53,385,3.53,386,2.954,389,3.53,401,5.23,507,3.554,533,5.23,971,4.193,975,4.193,979,3.814,981,4.193,983,4.193,985,3.814,988,4.369,989,4.193,990,4.769,991,7.065,992,7.517,993,4.769,994,3.906,995,4.193,996,4.769,997,4.769,998,4.769,999,4.769,1000,4.193,1001,4.769,1002,4.769,1003,4.769,1004,4.769,1005,4.769,1006,4.769,1007,4.769,1008,4.769]],["title/controllers/HealthController.html",[11,1.591,1009,3.435]],["body/controllers/HealthController.html",[0,0.24,3,0.135,4,0.135,5,0.122,7,0.147,8,0.01,9,0.007,10,0.007,11,1.785,13,1.839,15,2.315,16,0.271,17,0.79,26,2.601,29,1.214,53,3.933,79,1.896,82,0.516,91,0.465,92,1.194,93,2.447,102,1.683,110,0.882,111,3.05,116,3.05,148,3.578,162,2.715,166,1.092,187,4.002,232,2.985,253,4.236,289,3.853,526,3.912,763,3.853,1009,5.077,1010,4.236,1011,7.547,1012,7.547,1013,4.818,1014,6.349,1015,4.818,1016,4.818,1017,6.349,1018,6.349,1019,4.818,1020,6.349,1021,6.349,1022,4.818,1023,4.818,1024,4.818,1025,4.818,1026,4.818,1027,4.818,1028,4.818,1029,4.818,1030,3.148,1031,4.818,1032,3.853,1033,6.349,1034,4.818,1035,4.818,1036,4.818]],["title/classes/HttpExceptionFilter.html",[0,0.214,1037,3.435]],["body/classes/HttpExceptionFilter.html",[0,0.265,2,1.085,3,0.149,4,0.149,5,0.135,7,0.163,8,0.01,9,0.008,10,0.008,16,0.243,17,0.873,38,0.514,46,3.378,82,0.57,84,1.057,85,0.779,86,0.975,91,0.514,92,1.274,110,0.975,184,2.666,185,6.549,186,6.549,195,5.955,196,6.269,197,6.549,198,6.893,200,4.682,201,3.479,205,3.657,210,2.76,211,2.517,212,4.682,213,4.682,214,4.682,215,4.682,224,4.682,227,4.682,228,4.682,229,2.232,230,4.682,232,3.299,233,4.682,256,5.955,1037,5.417,1038,4.682,1039,5.325,1040,5.325,1041,5.325]],["title/interfaces/ISwaggerOptions.html",[1042,2.806,1043,3.18]],["body/interfaces/ISwaggerOptions.html",[3,0.119,4,0.119,5,0.109,7,0.131,8,0.01,9,0.007,10,0.007,15,2.812,38,0.726,40,3.823,58,3.482,86,1.523,91,0.412,101,1.29,115,3.823,308,3.011,573,1.932,896,2.957,1042,2.789,1043,4.332,1044,3.753,1045,7.185,1046,7.185,1047,7.185,1048,8.109,1049,6.837,1050,3.877,1051,6.318,1052,5.853,1053,4.332,1054,5.853,1055,6.002,1056,5.853,1057,5.853,1058,5.853,1059,5.853,1060,5.146,1061,7.185,1062,5.853,1063,5.146,1064,5.853,1065,5.146,1066,5.853,1067,4.332,1068,2.518,1069,5.853,1070,5.853,1071,5.146,1072,5.146,1073,5.853,1074,5.146,1075,5.872,1076,5.872]],["title/modules/InterceptorModule.html",[56,1.418,265,2.976]],["body/modules/InterceptorModule.html",[0,0.296,3,0.167,4,0.167,5,0.151,7,0.182,8,0.01,9,0.008,10,0.008,16,0.293,17,0.975,56,2.396,58,2.665,69,2.86,265,5.029,278,4.123,327,6.383,328,6.383,1077,5.951,1078,7.833,1079,5.374,1080,5.951,1081,5.029,1082,5.951]],["title/injectables/LoggerContextMiddleware.html",[76,0.704,291,3.18]],["body/injectables/LoggerContextMiddleware.html",[0,0.272,3,0.153,4,0.153,5,0.139,7,0.167,8,0.01,9,0.008,10,0.008,16,0.247,17,0.896,38,0.664,46,3.947,76,1.129,77,1.804,82,0.585,84,1.084,85,0.799,86,1,91,0.527,92,1.295,110,1,166,1.238,184,2.151,201,5.17,205,4.273,210,2.833,291,5.097,823,4.903,839,5.097,841,6.054,842,6.329,845,4.498,846,6.054,1055,4.045,1083,6.054,1084,4.805,1085,5.465,1086,5.465,1087,5.465]],["title/classes/LoggerModule.html",[0,0.214,297,3.18]],["body/classes/LoggerModule.html",[0,0.285,2,1.168,3,0.16,4,0.16,5,0.146,7,0.175,8,0.01,9,0.008,10,0.008,16,0.276,17,0.94,56,1.892,69,2.754,82,0.614,91,0.553,92,1.334,110,1.049,166,1.299,189,5.338,192,4.773,211,1.84,297,5.703,485,4.244,1088,5.04,1089,8.05,1090,5.733,1091,7.704,1092,5.673,1093,5.733,1094,5.733,1095,7.704]],["title/injectables/LoggerService.html",[76,0.704,192,2.661]],["body/injectables/LoggerService.html",[0,0.191,3,0.108,4,0.108,5,0.098,7,0.118,8,0.01,9,0.006,10,0.006,15,4.231,16,0.138,17,0.631,38,0.746,39,2.822,76,0.892,77,1.27,82,0.828,84,1.493,85,1.1,86,1.446,91,0.371,92,1.024,101,1.704,110,1.377,187,3.56,192,3.372,194,4.127,201,4.916,218,2.703,359,1.61,573,1.797,985,4.353,1096,3.383,1097,5.444,1098,5.444,1099,5.444,1100,5.444,1101,5.444,1102,5.444,1103,3.848,1104,7.526,1105,5.444,1106,6.869,1107,3.848,1108,5.444,1109,3.848,1110,5.444,1111,3.848,1112,5.444,1113,3.848,1114,5.444,1115,3.848,1116,3.848,1117,3.848,1118,6.318,1119,5.444,1120,3.848,1121,3.848,1122,3.848,1123,3.848,1124,3.848]],["title/injectables/LoggingInterceptor.html",[76,0.704,1079,3.18]],["body/injectables/LoggingInterceptor.html",[0,0.269,3,0.151,4,0.151,5,0.137,7,0.165,8,0.01,9,0.008,10,0.008,16,0.269,17,0.885,38,0.521,76,1.12,77,1.783,82,0.578,84,1.072,85,0.79,86,0.989,91,0.521,92,1.285,110,0.989,166,1.224,184,2.126,211,1.734,354,4.649,356,3.186,821,4.735,822,5.06,823,4.882,824,5.46,826,5.195,827,4.735,830,3.529,831,4.75,1079,5.06,1125,4.75,1126,5.402,1127,5.402,1128,3.999,1129,5.402,1130,5.402,1131,5.402,1132,5.402,1133,6.01,1134,5.402,1135,5.402,1136,5.402]],["title/classes/LoginDto.html",[0,0.214,416,2.661]],["body/classes/LoginDto.html",[0,0.319,2,1.309,3,0.18,4,0.18,5,0.163,7,0.196,8,0.01,9,0.009,10,0.009,16,0.273,29,1.617,359,1.898,416,4.707,431,3.467,507,3.619,737,3.202,1137,5.645,1138,4.195,1139,5.645,1140,5.135]],["title/classes/MessagesGateway.html",[0,0.214,1141,3.18]],["body/classes/MessagesGateway.html",[0,0.154,2,0.63,3,0.087,4,0.087,5,0.079,7,0.095,8,0.01,9,0.005,10,0.005,16,0.238,38,0.717,53,4.318,79,1.217,82,0.796,84,1.435,85,1.112,86,1.323,88,1.255,91,0.298,92,0.873,93,2.311,101,1.617,102,2.526,110,1.276,119,1.542,160,1.915,166,1.504,211,1.988,218,2.319,317,6.082,526,2.888,573,1.532,635,2.506,646,5.45,785,4.858,788,5.307,1050,2.779,1141,3.436,1142,2.718,1143,4.899,1144,4.081,1145,4.899,1146,4.081,1147,5.572,1148,4.081,1149,3.092,1150,4.553,1151,4.641,1152,5.572,1153,2.718,1154,6.812,1155,4.641,1156,3.092,1157,2.718,1158,4.641,1159,3.092,1160,2.718,1161,4.641,1162,3.092,1163,2.718,1164,4.641,1165,3.092,1166,3.092,1167,6.193,1168,4.641,1169,3.092,1170,2.718,1171,4.829,1172,4.641,1173,3.092,1174,4.641,1175,3.092,1176,4.641,1177,6.193,1178,2.718,1179,2.718,1180,2.472,1181,2.718,1182,2.472,1183,2.718,1184,5.572,1185,3.092,1186,3.092,1187,5.572,1188,3.092,1189,3.092,1190,3.092,1191,3.092,1192,3.092,1193,3.092,1194,3.092,1195,3.092,1196,5.159,1197,3.092,1198,4.641,1199,3.092,1200,3.092]],["title/modules/MessagesModule.html",[56,1.418,266,2.976]],["body/modules/MessagesModule.html",[0,0.295,3,0.166,4,0.166,5,0.151,7,0.181,8,0.01,9,0.008,10,0.008,16,0.281,17,0.972,56,2.392,58,2.657,59,3.359,65,3.756,66,3.075,67,2.85,69,3.481,266,5.888,1141,5.363,1150,5.552,1179,5.216,1201,5.216,1202,5.216,1203,5.933,1204,5.933]],["title/injectables/MessagesService.html",[76,0.704,1150,2.806]],["body/injectables/MessagesService.html",[0,0.14,3,0.079,4,0.079,5,0.071,7,0.086,8,0.011,9,0.005,10,0.005,16,0.188,17,0.46,38,0.675,76,0.707,77,0.927,82,0.749,84,1.333,85,1.105,86,1.229,91,0.271,92,0.811,93,1.596,101,1.656,110,1.229,119,1.401,166,1.522,169,2.36,211,0.902,218,1.836,243,3.776,245,2.989,246,3.45,573,1.424,577,3.626,600,3.435,618,3.889,635,1.516,646,5.128,712,2.47,713,3.889,785,4.569,788,5.37,979,6.148,1030,2.819,1067,2.079,1068,1.657,1143,4.62,1144,3.794,1145,3.794,1146,3.794,1148,3.794,1150,2.819,1153,2.47,1157,3.794,1160,3.794,1163,3.794,1170,3.794,1171,4.407,1205,2.47,1206,4.315,1207,2.809,1208,2.809,1209,4.315,1210,2.809,1211,2.809,1212,2.809,1213,2.809,1214,5.593,1215,3.794,1216,3.794,1217,3.45,1218,4.315,1219,4.315,1220,4.315,1221,2.809,1222,5.896,1223,6.994,1224,2.809,1225,2.809,1226,2.809,1227,2.809,1228,2.809,1229,2.809,1230,2.809,1231,2.809,1232,4.315,1233,2.809,1234,4.315,1235,4.315,1236,2.809,1237,2.809,1238,2.809,1239,2.809,1240,2.809,1241,2.809,1242,2.809,1243,2.809]],["title/controllers/OauthController.html",[11,1.591,1244,3.18]],["body/controllers/OauthController.html",[0,0.163,3,0.092,4,0.092,5,0.083,7,0.1,8,0.01,9,0.006,10,0.006,11,1.213,13,1.25,15,1.574,16,0.277,17,0.537,19,2.858,21,2.858,22,2.858,23,2.858,24,2.858,25,2.858,26,1.768,27,2.858,29,0.825,34,2.284,38,0.467,39,1.698,46,3.178,79,1.289,82,0.682,84,1.144,85,0.843,86,1.055,91,0.316,92,0.911,93,2.163,102,2.227,105,1.645,110,1.166,116,2.328,141,1.932,142,1.768,147,3.001,148,3.25,150,2.619,160,3.001,162,2.731,164,1.932,166,1.444,187,2.731,205,3.44,210,1.698,211,1.555,218,1.145,308,1.373,357,2.425,358,1.846,408,4.163,418,3.587,423,2.328,426,2.616,434,2.88,435,3.587,436,3.572,444,2.14,445,1.932,446,1.768,447,1.633,451,2.14,452,2.14,453,2.14,454,2.14,455,2.14,456,2.14,457,2.14,461,2.425,462,2.14,463,2.88,533,3.587,564,2.029,635,2.616,842,5.438,845,5.046,963,2.425,969,3.572,977,2.619,978,2.269,994,3.947,1244,3.587,1245,2.88,1246,2.88,1247,6.372,1248,5.767,1249,4.845,1250,4.845,1251,3.276,1252,3.276,1253,3.276,1254,3.276,1255,3.276,1256,4.845,1257,3.276,1258,3.276,1259,4.26,1260,6.372,1261,3.276,1262,3.276,1263,3.276,1264,3.276,1265,4.26,1266,3.276,1267,3.276,1268,3.276,1269,3.276,1270,3.276,1271,3.276,1272,3.276,1273,3.276,1274,3.276,1275,4.845,1276,4.26,1277,3.276,1278,3.276,1279,3.276,1280,3.276,1281,3.276,1282,3.276,1283,4.845,1284,3.276,1285,3.276,1286,3.276,1287,3.276,1288,3.276,1289,2.88,1290,3.276,1291,3.276,1292,3.276]],["title/modules/OauthModule.html",[56,1.418,267,2.976]],["body/modules/OauthModule.html",[0,0.258,3,0.145,4,0.145,5,0.132,7,0.159,8,0.01,9,0.008,10,0.008,13,2.544,16,0.295,17,0.851,56,2.2,58,2.325,59,3.09,63,4.632,65,3.455,66,2.692,67,2.495,69,3.202,71,3.931,74,3.843,262,5.092,267,6.047,969,5.092,977,4.152,988,5.694,1244,5.449,1293,4.565,1294,4.565,1295,5.192,1296,5.192,1297,5.192,1298,5.192,1299,5.192]],["title/injectables/OauthService.html",[76,0.704,969,2.661]],["body/injectables/OauthService.html",[0,0.217,3,0.122,4,0.122,5,0.111,7,0.134,8,0.01,9,0.007,10,0.007,16,0.213,17,0.716,37,4.74,38,0.652,76,0.974,77,1.442,82,0.723,84,1.341,85,0.988,86,1.237,91,0.421,92,1.118,93,2.053,101,1.466,105,2.839,109,1.773,110,1.237,166,1.72,169,1.364,218,2.535,635,2.359,655,5.405,804,2.359,845,4.74,969,3.683,978,4.682,994,4.187,1000,3.841,1068,2.577,1215,3.841,1216,3.841,1289,5.227,1300,3.841,1301,5.945,1302,5.945,1303,5.945,1304,5.945,1305,6.379,1306,7.255,1307,4.368,1308,5.945,1309,4.368,1310,5.945,1311,4.368,1312,4.368,1313,4.368,1314,4.368,1315,4.368,1316,4.368,1317,4.368,1318,4.368,1319,4.368,1320,4.368,1321,4.368]],["title/classes/PaginationDto.html",[0,0.214,113,2.976]],["body/classes/PaginationDto.html",[0,0.312,2,0.962,3,0.132,4,0.132,5,0.12,7,0.144,8,0.01,9,0.007,10,0.007,16,0.225,29,1.189,34,2.368,38,0.772,82,0.752,91,0.455,101,1.603,102,2.456,113,4.339,243,3.382,308,3.356,573,2.068,582,4.138,593,3.597,594,1.749,602,3.881,609,6.404,644,4.87,743,3.848,881,4.092,1322,4.151,1323,7.029,1324,7.029,1325,7.029,1326,6.583,1327,4.721,1328,6.264,1329,6.264,1330,4.721,1331,5.987,1332,5.507,1333,4.721,1334,6.583]],["title/injectables/ParseIntPipe.html",[76,0.704,1335,3.435]],["body/injectables/ParseIntPipe.html",[0,0.276,3,0.155,4,0.155,5,0.141,7,0.17,8,0.01,9,0.008,10,0.008,16,0.199,17,0.909,38,0.535,76,1.139,77,1.831,82,0.594,84,1.101,85,0.811,86,1.015,91,0.535,92,1.307,93,2.306,101,1.466,110,1.015,166,1.257,184,2.182,211,1.78,229,2.324,546,3.435,635,2.994,881,3.623,1068,3.271,1335,5.557,1336,6.11,1337,4.876,1338,5.557,1339,6.11,1340,6.069,1341,6.995,1342,5.546,1343,4.435,1344,6.11,1345,6.95,1346,5.546,1347,5.546,1348,4.876,1349,4.876]],["title/classes/PostEntity.html",[0,0.214,796,2.806]],["body/classes/PostEntity.html",[0,0.301,2,0.914,3,0.126,4,0.126,5,0.114,7,0.137,8,0.01,9,0.007,10,0.007,16,0.161,34,2.025,38,0.802,82,0.89,91,0.432,101,1.669,102,2.904,109,2.781,573,1.997,574,3.86,580,6.31,582,3.018,583,3.942,589,4.192,591,4.189,593,3.875,594,1.661,796,3.953,799,4.745,800,3.551,1050,3.018,1350,3.942,1351,5.07,1352,5.477,1353,5.07,1354,5.477,1355,4.484,1356,4.484,1357,4.484,1358,4.484,1359,4.484,1360,4.484,1361,4.484,1362,4.484,1363,4.484,1364,4.484,1365,4.484,1366,6.051,1367,5.32]],["title/controllers/PostsController.html",[11,1.591,1368,3.18]],["body/controllers/PostsController.html",[0,0.092,3,0.052,4,0.052,5,0.047,7,0.057,8,0.01,9,0.004,10,0.004,11,0.688,13,0.709,15,0.893,16,0.231,17,0.305,18,3.988,19,1.827,20,1.919,21,1.827,22,1.827,23,1.827,24,1.827,25,1.827,26,1.003,27,1.827,28,1.919,29,0.468,34,2.343,38,0.673,39,0.963,82,0.73,84,1.353,85,0.997,86,1.248,88,0.754,91,0.179,92,0.583,93,2.521,97,2.879,101,1.509,102,2.383,104,3.578,105,2.456,109,2.697,110,1.248,111,3.782,116,2.979,119,3.865,140,3.578,141,1.096,142,1.003,143,1.376,144,1.376,145,1.376,147,4.321,148,3.931,150,1.486,162,3.843,164,1.827,166,1.546,169,0.967,170,1.634,187,1.746,218,0.649,229,2.48,423,1.488,425,1.634,426,3.586,433,4.664,435,2.293,439,3.578,445,1.096,446,1.003,447,0.927,449,1.287,450,1.287,451,1.214,452,1.214,453,1.214,454,1.214,455,1.214,456,1.214,457,1.214,461,1.376,462,4.455,564,2.879,574,2.619,639,4.129,734,3.22,793,3.22,801,3.22,816,3.22,887,2.724,888,2.724,898,1.634,899,1.634,1368,2.293,1369,1.634,1370,4.732,1371,3.502,1372,3.502,1373,2.724,1374,3.502,1375,3.502,1376,3.502,1377,3.502,1378,3.502,1379,2.724,1380,3.502,1381,2.724,1382,1.634,1383,1.858,1384,2.724,1385,4.461,1386,5.579,1387,1.858,1388,1.634,1389,1.858,1390,3.098,1391,3.098,1392,1.858,1393,1.634,1394,1.858,1395,3.984,1396,1.858,1397,1.634,1398,1.858,1399,1.858,1400,1.634,1401,1.858,1402,2.477,1403,1.858,1404,1.634,1405,1.858,1406,1.858,1407,1.634,1408,1.858,1409,1.858,1410,1.634,1411,1.858,1412,1.858,1413,1.634,1414,3.036,1415,1.858,1416,3.098,1417,1.858,1418,1.634,1419,3.22,1420,1.858,1421,1.858,1422,1.634,1423,3.036,1424,1.858,1425,1.858,1426,4.648,1427,2.602,1428,1.634,1429,1.634,1430,1.634,1431,1.634,1432,1.634,1433,1.634,1434,1.634,1435,1.634,1436,1.634,1437,1.634,1438,1.634,1439,1.634,1440,1.634,1441,1.858,1442,1.858,1443,1.858,1444,1.858,1445,1.858,1446,1.858,1447,1.858,1448,1.858,1449,3.098,1450,1.858,1451,1.858,1452,1.858,1453,1.858,1454,1.858,1455,1.858,1456,1.858,1457,1.858,1458,1.858,1459,1.858,1460,1.858,1461,1.858,1462,1.858,1463,1.858,1464,1.858,1465,1.858,1466,1.858,1467,1.858,1468,1.858]],["title/modules/PostsModule.html",[56,1.418,268,2.976]],["body/modules/PostsModule.html",[0,0.268,3,0.151,4,0.151,5,0.137,7,0.165,8,0.01,9,0.008,10,0.008,13,2.604,16,0.291,17,0.883,56,2.252,58,2.412,59,3.163,63,4.677,65,3.537,66,2.792,67,2.588,69,3.278,71,4.025,74,3.987,268,6.009,269,4.677,701,4.736,1368,5.543,1427,5.421,1428,4.736,1469,4.736,1470,5.386,1471,4.736,1472,5.386,1473,5.386]],["title/injectables/PostsService.html",[76,0.704,1427,2.806]],["body/injectables/PostsService.html",[0,0.09,3,0.051,4,0.051,5,0.046,7,0.055,8,0.01,9,0.003,10,0.003,16,0.209,17,0.296,34,1.726,38,0.68,76,0.495,77,0.596,79,0.71,80,1.25,81,2.849,82,0.74,84,1.371,85,1.031,86,1.265,87,1.443,88,0.733,91,0.174,92,0.568,93,2.51,101,1.5,109,2.913,110,1.236,111,3.76,115,2.981,119,3.516,166,1.53,169,2.306,211,1.764,218,0.63,229,2.755,244,2.634,308,3.548,423,1.452,433,2.827,444,1.179,447,0.9,518,1.443,524,1.25,526,3.829,540,1.443,545,1.632,546,3.793,564,2.827,574,3.29,575,4.012,577,2.106,598,3.649,601,2.417,605,1.25,713,1.336,718,2.658,724,4.999,731,1.587,734,3.161,793,3.161,799,4.045,800,3.026,801,3.161,816,3.161,847,1.443,1343,1.443,1351,4.712,1353,4.069,1371,3.429,1372,2.658,1373,2.658,1374,2.658,1375,2.658,1376,2.658,1377,2.658,1378,2.658,1379,2.658,1380,2.658,1381,2.658,1382,1.587,1388,2.658,1393,2.658,1397,2.658,1400,2.658,1402,1.443,1404,2.658,1407,2.658,1410,2.658,1413,2.658,1414,2.981,1418,2.658,1419,3.161,1422,2.658,1423,2.981,1427,1.975,1429,1.587,1430,1.587,1431,1.587,1432,1.587,1433,1.587,1434,1.587,1435,1.587,1436,1.587,1437,1.587,1438,1.587,1439,1.587,1440,1.587,1474,1.587,1475,1.804,1476,1.804,1477,1.804,1478,1.804,1479,1.804,1480,1.804,1481,1.804,1482,1.804,1483,1.804,1484,1.804,1485,1.804,1486,1.804,1487,1.443,1488,1.804,1489,3.023,1490,3.023,1491,1.804,1492,1.804,1493,2.658,1494,3.023,1495,1.804,1496,1.587,1497,1.804,1498,5.081,1499,1.804,1500,3.901,1501,1.804,1502,1.804,1503,3.023,1504,1.804,1505,6.123,1506,1.804,1507,2.658,1508,1.804,1509,1.804,1510,1.587,1511,1.804,1512,1.804,1513,3.023,1514,1.804,1515,1.804,1516,1.587,1517,1.804,1518,1.804,1519,1.804,1520,3.023,1521,1.804,1522,3.023,1523,1.804,1524,3.023,1525,1.804,1526,1.804]],["title/modules/PrismaModule.html",[56,1.418,269,2.421]],["body/modules/PrismaModule.html",[0,0.283,3,0.16,4,0.16,5,0.145,7,0.174,8,0.01,9,0.008,10,0.008,16,0.276,17,0.934,56,2.333,58,2.552,59,3.276,65,3.664,66,2.954,67,2.738,69,3.396,81,4.582,269,4.809,286,5.652,287,3.722,485,5.232,1063,6.214,1527,5.01,1528,5.01,1529,5.01,1530,5.698,1531,5.698]],["title/injectables/PrismaService.html",[76,0.704,81,2.227]],["body/injectables/PrismaService.html",[0,0.243,3,0.137,4,0.137,5,0.124,7,0.15,8,0.01,9,0.007,10,0.007,16,0.23,17,0.802,38,0.472,76,1.051,77,1.615,79,2.816,81,3.325,82,0.813,84,0.971,85,0.715,86,0.896,91,0.472,92,1.206,93,2.593,110,1.309,184,1.926,359,1.896,361,3.031,526,3.709,934,5.129,1532,4.303,1533,7.155,1534,6.414,1535,8.089,1536,8.089,1537,4.894,1538,6.414,1539,6.072,1540,4.894,1541,3.622,1542,4.894,1543,4.894,1544,3.913,1545,4.894,1546,4.303,1547,4.894,1548,4.894,1549,4.894,1550,4.894,1551,4.894,1552,4.894]],["title/classes/ProfileEntity.html",[0,0.214,1553,2.806]],["body/classes/ProfileEntity.html",[0,0.251,2,0.536,3,0.074,4,0.074,5,0.067,7,0.08,8,0.01,9,0.005,10,0.005,16,0.204,29,0.663,34,1.213,38,0.808,82,0.809,85,0.956,91,0.254,101,1.648,102,2.642,132,2.764,138,3.479,218,2.806,243,3.687,245,3.945,374,1.264,408,1.719,426,1.421,545,2.215,573,1.354,582,3.83,589,2.842,591,2.514,593,3.394,594,0.975,602,3.982,605,3.493,742,4.378,743,4.059,744,2.104,751,3.037,752,3.037,754,4.841,757,3.037,768,2.104,769,2.104,770,2.104,773,2.104,774,2.104,775,2.104,776,4.841,804,2.215,934,3.28,1030,2.68,1032,3.28,1217,2.104,1334,2.313,1367,4.433,1553,2.68,1554,2.313,1555,6.005,1556,4.433,1557,6.005,1558,4.032,1559,4.433,1560,4.032,1561,4.433,1562,4.433,1563,4.936,1564,3.607,1565,3.607,1566,3.607,1567,2.313,1568,5.006,1569,2.631,1570,2.313,1571,3.607,1572,5.006,1573,2.313,1574,4.032,1575,2.631,1576,3.607,1577,2.631,1578,4.433,1579,2.313,1580,2.631,1581,2.313,1582,3.607,1583,3.607,1584,2.313,1585,2.631,1586,2.631,1587,2.313,1588,2.313,1589,4.215,1590,2.313,1591,4.433,1592,2.313,1593,2.631,1594,3.28,1595,3.28,1596,2.313,1597,2.631,1598,2.631,1599,2.313,1600,2.631,1601,2.313,1602,3.607,1603,2.631,1604,1.948,1605,4.102,1606,2.313,1607,1.948,1608,1.948,1609,2.631,1610,2.631,1611,2.104,1612,2.313,1613,2.631,1614,2.631,1615,2.313,1616,2.631,1617,2.631,1618,2.631,1619,2.631,1620,2.631,1621,2.631,1622,2.631,1623,2.631,1624,2.631,1625,2.631]],["title/classes/ReactionsPost.html",[0,0.214,1414,2.806]],["body/classes/ReactionsPost.html",[0,0.365,2,1.233,3,0.169,4,0.169,5,0.154,7,0.224,8,0.01,9,0.008,10,0.008,16,0.263,29,1.523,34,1.788,359,2.167,574,4.131,737,3.016,795,4.19,796,3.951,797,4.836,798,5.862,799,4.19,800,3.135,1351,4.477,1352,4.836,1353,4.477,1354,4.836,1414,4.789,1423,3.951,1626,4.836]],["title/interfaces/Response.html",[205,2.319,1042,2.806]],["body/interfaces/Response.html",[0,0.281,3,0.158,4,0.158,5,0.144,7,0.215,8,0.01,9,0.008,10,0.008,16,0.275,17,0.925,38,0.545,76,1.152,91,0.545,166,1.28,184,2.222,205,3.794,244,4.27,354,4.145,356,3.331,573,2.32,821,3.912,823,3.498,824,4.869,826,4.869,827,4.869,830,3.689,896,3.912,1042,3.689,1081,3.912,1128,4.18,1627,4.515,1628,6.728,1629,4.964,1630,4.964]],["title/guards/RolesGuard.html",[302,3.18,1631,3.435]],["body/guards/RolesGuard.html",[0,0.246,3,0.138,4,0.138,5,0.126,7,0.151,8,0.01,9,0.007,10,0.007,16,0.258,17,0.811,30,3.063,38,0.623,46,2.466,76,1.058,79,1.946,82,0.691,84,1.282,85,0.944,86,1.182,88,2.008,91,0.477,92,1.214,105,2.193,110,0.905,166,1.63,184,1.946,211,2.447,278,3.426,302,4.781,308,2.073,325,6.487,350,6.703,351,4.348,353,5.678,354,4.497,356,2.917,369,4.348,370,4.348,396,2.564,441,4.348,1050,3.22,1632,4.348,1633,4.945,1634,4.945,1635,4.945,1636,6.458,1637,4.945,1638,4.348,1639,4.348,1640,6.458,1641,4.945,1642,4.945,1643,4.945]],["title/classes/RtGuard.html",[0,0.214,440,3.18]],["body/classes/RtGuard.html",[0,0.316,2,1.295,3,0.178,4,0.178,5,0.162,7,0.194,8,0.01,9,0.009,10,0.009,16,0.228,79,3.171,82,0.68,357,4.705,358,3.582,359,1.879,360,5.588,361,3.937,440,5.59,1196,4.705,1644,5.588,1645,6.355]],["title/injectables/RtStrategy.html",[76,0.704,483,2.976]],["body/injectables/RtStrategy.html",[0,0.245,3,0.138,4,0.138,5,0.125,7,0.15,8,0.01,9,0.007,10,0.007,16,0.283,17,0.806,38,0.621,46,3.794,76,1.055,77,1.624,79,2.533,82,0.689,84,1.277,85,0.941,86,1.178,91,0.474,92,1.21,110,0.9,166,1.115,187,2.772,210,2.55,211,1.579,287,3.214,308,2.062,358,2.772,359,1.454,361,3.047,374,3.092,375,4.325,376,5.271,378,4.205,382,6.084,383,3.642,384,4.325,385,3.642,386,3.047,387,4.205,389,3.642,390,4.325,391,4.325,392,5.659,393,4.325,394,4.325,397,4.325,401,4.764,483,4.459,499,3.934,525,4.325,845,4.205,1196,3.642,1646,4.325,1647,4.919,1648,6.436,1649,4.919,1650,4.919,1651,4.919,1652,4.919]],["title/classes/SignupDto.html",[0,0.214,421,2.976]],["body/classes/SignupDto.html",[0,0.316,2,1.295,3,0.178,4,0.178,5,0.162,7,0.194,8,0.01,9,0.009,10,0.009,16,0.271,29,1.601,359,1.879,421,5.232,431,3.431,507,3.582,542,3.937,737,3.169,1138,4.152,1139,5.588,1140,5.082,1653,5.588]],["title/injectables/TimeoutInterceptor.html",[76,0.704,1654,3.435]],["body/injectables/TimeoutInterceptor.html",[0,0.281,3,0.158,4,0.158,5,0.144,7,0.173,8,0.01,9,0.008,10,0.008,16,0.275,17,0.925,38,0.545,47,4.18,76,1.152,77,1.864,82,0.604,84,1.12,85,0.826,86,1.033,91,0.545,92,1.322,110,1.033,166,1.28,184,2.222,354,4.723,356,3.331,821,4.869,822,5.202,823,4.74,824,5.547,826,5.301,827,4.869,830,3.689,1128,4.18,1654,5.62,1655,4.964,1656,5.646,1657,5.646]],["title/injectables/TransformInterceptor.html",[76,0.704,1081,2.976]],["body/injectables/TransformInterceptor.html",[0,0.27,3,0.152,4,0.152,5,0.138,7,0.21,8,0.01,9,0.008,10,0.008,16,0.27,17,0.89,38,0.524,76,1.124,77,1.794,82,0.582,84,1.078,85,0.794,86,0.994,91,0.524,92,1.29,110,0.994,166,1.231,184,2.138,205,2.933,244,3.556,354,4.659,356,4.047,821,5.209,822,4.022,823,4.658,824,5.471,826,5.209,827,4.753,830,3.55,1042,3.55,1081,4.753,1128,4.022,1627,4.345,1628,4.777,1629,4.777,1630,4.777,1658,5.433]],["title/classes/UpdateCommentTextDto.html",[0,0.214,1419,2.976]],["body/classes/UpdateCommentTextDto.html",[0,0.316,2,1.295,3,0.178,4,0.178,5,0.162,7,0.194,8,0.01,9,0.009,10,0.009,16,0.271,29,1.601,169,1.984,359,1.879,571,4.152,577,3.431,736,4.705,737,3.169,738,5.082,739,5.082,1419,5.232,1659,5.588]],["title/classes/UpdateConversationDto.html",[0,0.214,658,2.534]],["body/classes/UpdateConversationDto.html",[0,0.39,2,0.977,3,0.134,4,0.134,5,0.122,7,0.23,8,0.01,9,0.007,10,0.007,16,0.254,29,1.207,34,2.094,38,0.726,82,0.758,85,1.036,86,1.472,91,0.462,101,1.676,105,1.628,109,1.946,132,3.172,169,1.497,359,2.227,423,2.303,573,2.089,591,3.155,593,3.04,594,1.776,597,2.969,599,3.416,600,3.416,602,3.28,628,4.245,642,2.827,658,3.732,662,2.827,666,2.827,741,2.701,743,2.303,804,2.588,805,2.969,809,3.321,810,5.218,813,5.218,814,3.548,815,3.132,1660,4.793,1661,4.793,1662,4.793]],["title/classes/UpdateMembersConversationDto.html",[0,0.214,662,2.534]],["body/classes/UpdateMembersConversationDto.html",[0,0.397,2,1.035,3,0.142,4,0.142,5,0.129,7,0.236,8,0.01,9,0.008,10,0.008,16,0.261,29,1.279,34,1.502,38,0.634,82,0.544,85,0.743,91,0.49,101,1.671,105,1.725,109,2.062,132,2.275,169,1.586,359,2.277,423,2.441,573,2.169,591,3.277,593,3.157,594,1.882,597,3.147,599,3.548,600,4.159,602,3.407,628,4.341,642,2.996,658,2.996,662,3.876,666,2.996,741,2.863,743,2.441,804,2.742,805,3.147,809,3.519,810,4.553,813,5.336,814,3.76,815,3.318,1663,5.08]],["title/classes/UpdateMessageDto.html",[0,0.214,1171,2.976]],["body/classes/UpdateMessageDto.html",[0,0.292,2,1.198,3,0.165,4,0.165,5,0.149,7,0.18,8,0.01,9,0.008,10,0.008,16,0.258,38,0.695,82,0.771,91,0.567,101,1.569,169,2.432,359,1.737,423,2.824,573,2.378,646,5.397,785,4.706,787,4.699,791,5.167,813,4.991,1171,4.991,1664,6.849,1665,5.877,1666,5.167,1667,4.35,1668,5.877]],["title/classes/UpdatePasswordDto.html",[0,0.214,429,2.976]],["body/classes/UpdatePasswordDto.html",[0,0.316,2,1.295,3,0.178,4,0.178,5,0.162,7,0.194,8,0.01,9,0.009,10,0.009,16,0.271,29,1.601,359,1.879,429,5.232,507,3.582,737,3.169,1138,4.152,1140,5.082,1669,5.588,1670,6.355,1671,5.588,1672,5.588]],["title/classes/UpdatePostDto.html",[0,0.214,1423,2.806]],["body/classes/UpdatePostDto.html",[0,0.365,2,1.233,3,0.169,4,0.169,5,0.154,7,0.224,8,0.01,9,0.008,10,0.008,16,0.263,29,1.523,34,1.788,359,2.167,574,4.131,737,3.016,795,4.19,796,3.951,797,4.836,798,5.862,799,4.19,800,3.135,1351,4.477,1352,4.836,1353,4.477,1354,4.836,1414,3.951,1423,4.789,1626,4.836]],["title/classes/UpdateRolesConversationDto.html",[0,0.214,666,2.534]],["body/classes/UpdateRolesConversationDto.html",[0,0.392,2,0.992,3,0.136,4,0.136,5,0.124,7,0.232,8,0.01,9,0.007,10,0.007,16,0.256,29,1.226,34,1.439,38,0.731,82,0.764,85,0.712,91,0.47,101,1.68,105,1.653,109,1.976,132,2.18,169,1.52,359,2.24,423,2.339,573,2.11,591,3.188,593,3.071,594,1.803,597,4.421,599,4.091,600,4.091,602,3.314,628,4.271,642,2.872,658,2.872,662,2.872,666,3.77,741,2.744,743,2.339,804,2.628,805,3.016,809,3.373,810,5.25,813,5.25,814,3.604,815,3.18,1673,4.868,1674,4.868,1675,4.868]],["title/classes/UpdateUserAvatarDto.html",[0,0.214,130,2.534]],["body/classes/UpdateUserAvatarDto.html",[0,0.395,2,1.253,3,0.172,4,0.172,5,0.156,7,0.243,8,0.01,9,0.009,10,0.009,16,0.266,29,1.548,125,3.626,130,4.367,132,2.753,136,3.626,138,3.464,359,2.349,737,3.065,1553,4.836,1676,4.55,1677,4.55,1678,4.915,1679,5.92]],["title/classes/UpdateUserCoverDto.html",[0,0.214,136,2.534]],["body/classes/UpdateUserCoverDto.html",[0,0.395,2,1.253,3,0.172,4,0.172,5,0.156,7,0.243,8,0.01,9,0.009,10,0.009,16,0.266,29,1.548,125,3.626,130,3.626,132,2.753,136,4.367,138,3.464,359,2.349,737,3.065,1553,4.836,1676,4.55,1677,4.55,1678,4.915,1679,5.92]],["title/classes/UpdateUserProfileDto.html",[0,0.214,125,2.534]],["body/classes/UpdateUserProfileDto.html",[0,0.298,2,0.714,3,0.098,4,0.098,5,0.089,7,0.183,8,0.01,9,0.006,10,0.006,16,0.183,29,0.882,34,1.035,38,0.78,82,0.866,85,0.876,91,0.338,101,1.607,102,2.825,125,3.002,130,2.066,132,2.946,136,2.066,138,3.708,218,2.693,243,3.236,245,3.526,359,1.945,426,1.891,545,1.891,573,1.68,582,3.636,605,2.426,737,1.746,742,4.708,743,3.928,744,2.801,751,2.593,752,2.593,754,4.437,757,2.593,776,3.767,804,1.891,807,6.466,1030,2.288,1032,2.801,1553,5.435,1555,5.785,1556,4.474,1557,5.785,1558,4.069,1559,4.474,1560,4.069,1561,4.474,1562,4.474,1563,4.793,1564,3.079,1565,3.079,1566,3.079,1567,3.079,1568,4.474,1570,3.079,1571,3.079,1572,4.474,1573,3.079,1574,2.801,1576,4.474,1578,3.079,1579,3.079,1581,3.079,1582,3.079,1583,3.079,1584,3.079,1587,3.079,1588,3.079,1589,3.767,1590,3.079,1591,3.079,1592,3.079,1594,2.801,1595,2.801,1596,3.079,1599,3.079,1601,3.079,1602,3.079,1676,2.593,1677,2.593,1678,2.801,1679,4.069,1680,3.502,1681,3.502,1682,3.502,1683,3.502,1684,3.502,1685,3.502,1686,3.502,1687,3.502,1688,3.502,1689,3.502,1690,3.502]],["title/classes/UserEntity.html",[0,0.214,1138,2.806]],["body/classes/UserEntity.html",[0,0.252,2,0.709,3,0.097,4,0.097,5,0.088,7,0.106,8,0.01,9,0.006,10,0.006,16,0.214,29,0.876,34,2.274,38,0.769,82,0.746,85,0.959,91,0.335,101,1.658,102,2.435,218,2.852,374,1.67,431,4.235,507,3.364,542,4.316,573,1.671,582,3.269,591,3.626,593,3.15,594,1.288,602,3.77,615,5.329,639,5.383,742,2.051,743,3.829,751,4.853,752,3.747,754,4.853,756,3.056,757,3.747,761,3.056,762,4.45,763,5.572,766,4.45,767,4.45,768,2.78,769,2.78,770,2.78,771,2.408,772,2.408,773,2.78,774,2.78,775,2.78,776,4.853,777,4.45,778,3.056,1138,3.307,1671,5.248,1672,5.248,1691,3.056,1692,3.476,1693,7.692,1694,5.062,1695,3.476,1696,5.062,1697,6.968,1698,3.476,1699,3.476,1700,3.476,1701,3.476,1702,3.476,1703,5.062,1704,3.476,1705,5.062,1706,5.062,1707,5.062,1708,5.062,1709,5.062,1710,3.476,1711,3.476,1712,3.476,1713,3.476,1714,3.476,1715,3.476,1716,3.476,1717,3.476]],["title/controllers/UsersController.html",[11,1.591,1718,3.18]],["body/controllers/UsersController.html",[0,0.115,3,0.065,4,0.065,5,0.059,7,0.071,8,0.01,9,0.004,10,0.004,11,0.856,13,0.882,15,1.11,16,0.242,17,0.379,18,3.83,19,2.183,20,2.293,21,2.183,22,2.183,23,2.183,24,2.183,25,2.183,26,1.247,27,2.183,28,2.293,29,0.582,34,2.313,38,0.651,39,1.197,82,0.695,84,1.289,85,0.95,86,1.189,88,0.938,91,0.223,92,0.696,93,2.47,96,3.703,97,3.83,98,3.703,99,3.703,101,1.571,102,2.269,104,3.208,105,2.83,106,2.031,109,2.899,110,1.189,111,3.675,116,2.784,119,3.901,120,1.847,122,4.04,125,3.124,129,1.847,130,3.124,132,1.657,135,1.847,136,3.124,138,2.086,140,4.015,141,1.362,142,1.247,143,1.71,144,1.71,145,1.71,146,1.847,147,4.181,148,3.804,153,1.847,154,1.847,155,1.847,156,1.847,158,3.28,162,3.66,163,1.431,164,3.831,166,1.472,169,2.174,171,2.031,173,2.031,175,3.92,176,2.031,178,2.031,218,0.807,388,1.6,408,2.418,416,3.28,426,3.506,431,1.247,439,4.284,442,1.71,445,1.362,446,1.247,447,1.152,449,1.6,450,1.6,451,1.509,452,1.509,453,1.509,454,1.509,455,1.509,456,1.509,457,1.509,462,4.243,507,3.266,542,2.293,866,3.254,872,3.254,1718,2.74,1719,2.031,1720,4.071,1721,4.071,1722,4.071,1723,4.071,1724,2.031,1725,2.31,1726,2.31,1727,2.31,1728,2.031,1729,2.31,1730,2.31,1731,3.254,1732,2.031,1733,2.31,1734,3.254,1735,2.31,1736,2.31,1737,2.31,1738,2.31,1739,2.31,1740,2.31,1741,2.31,1742,2.31,1743,2.031,1744,2.31,1745,2.31,1746,2.31,1747,2.031,1748,2.031,1749,2.031,1750,2.31,1751,2.31,1752,2.31,1753,2.31,1754,2.31,1755,2.31,1756,2.31,1757,2.31,1758,2.31,1759,2.31,1760,2.31,1761,2.31,1762,2.31,1763,2.31]],["title/modules/UsersModule.html",[56,1.418,63,2.421]],["body/modules/UsersModule.html",[0,0.232,3,0.131,4,0.131,5,0.119,7,0.143,8,0.01,9,0.007,10,0.007,13,2.371,16,0.286,17,0.764,38,0.45,40,3.046,56,2.05,58,2.088,59,2.88,63,4.808,65,3.22,66,2.417,67,2.24,69,2.985,71,3.664,75,4.099,82,0.499,84,0.925,85,0.682,86,0.853,92,0.877,110,0.853,116,2.985,158,5.322,163,2.888,201,4.058,232,2.888,262,4.943,269,4.497,271,4.099,272,5.462,273,6.55,275,5.462,330,4.099,333,4.099,485,4.598,486,4.099,836,3.451,837,3.728,1718,5.171,1748,4.099,1764,4.099,1765,4.099,1766,4.099,1767,4.662,1768,4.662,1769,4.662,1770,4.662,1771,4.662,1772,4.662,1773,4.662]],["title/injectables/UsersService.html",[76,0.704,158,2.661]],["body/injectables/UsersService.html",[0,0.1,3,0.056,4,0.056,5,0.051,7,0.061,8,0.01,9,0.004,10,0.004,16,0.23,17,0.329,38,0.658,76,0.542,77,0.663,79,0.791,80,1.392,81,3.005,82,0.731,84,1.355,85,0.998,86,1.249,88,0.816,91,0.194,92,0.622,93,2.492,94,2.906,95,2.906,96,2.643,97,2.608,98,3.367,99,3.367,100,2.906,101,1.561,105,1.656,109,3.262,110,1.213,111,3.72,112,2.906,113,3.379,119,3.823,120,2.643,122,4.332,125,2.877,129,1.607,130,2.877,132,0.9,135,1.607,136,2.877,138,1.133,149,1.767,152,1.767,153,1.607,154,1.607,155,1.607,156,1.607,158,2.048,163,2.608,166,1.503,169,2.271,211,2.293,218,0.702,229,2.568,243,1.785,244,1.714,308,3.325,388,1.392,416,3.022,423,0.966,431,1.085,442,1.488,444,1.313,446,1.085,447,1.002,507,3.607,518,1.607,519,1.607,520,2.447,522,1.767,523,1.488,524,1.392,526,3.931,536,2.906,540,2.643,542,3.339,545,1.785,546,3.796,555,4.636,556,2.906,558,1.767,559,1.767,582,1.002,598,3.367,601,1.607,724,4.908,847,1.607,881,2.159,1050,1.002,1331,1.607,1496,4.289,1507,4.289,1720,2.906,1721,3.702,1722,2.906,1723,3.702,1724,2.906,1728,1.767,1731,4.289,1732,2.906,1743,1.767,1747,1.767,1749,1.767,1774,1.767,1775,2.01,1776,2.01,1777,2.01,1778,2.01,1779,2.01,1780,2.01,1781,2.01,1782,2.01,1783,2.01,1784,2.01,1785,2.01,1786,3.306,1787,2.01,1788,2.01,1789,4.21,1790,3.306,1791,2.01,1792,3.306,1793,3.306,1794,2.01,1795,2.01,1796,2.01,1797,2.01,1798,2.01,1799,2.01,1800,2.01,1801,3.306,1802,2.01,1803,3.306,1804,3.306,1805,3.306,1806,2.01,1807,4.21,1808,2.01,1809,2.01,1810,3.306,1811,2.01]],["title/injectables/ValidationPipe.html",[76,0.704,1812,3.435]],["body/injectables/ValidationPipe.html",[0,0.347,3,0.13,4,0.13,5,0.118,7,0.142,8,0.01,9,0.007,10,0.007,16,0.25,17,0.76,38,0.785,76,1.015,77,1.531,82,0.663,84,1.229,85,0.905,86,1.133,91,0.447,92,1.164,93,2.117,101,0.896,110,1.133,166,1.579,184,1.826,187,3.927,211,2.387,229,1.944,374,2.229,526,2.405,545,2.505,546,2.874,582,2.313,594,1.718,635,2.505,877,3.031,1050,3.475,1068,4.386,1338,4.951,1339,5.443,1340,5.946,1341,6.537,1343,3.71,1344,5.443,1348,4.079,1349,4.079,1604,3.434,1667,3.434,1812,4.951,1813,4.079,1814,6.191,1815,6.191,1816,4.639,1817,7.435,1818,4.639,1819,4.639,1820,4.639,1821,4.951,1822,4.639,1823,4.079,1824,4.639,1825,4.639,1826,4.639]],["title/coverage.html",[1827,4.7]],["body/coverage.html",[0,0.422,1,0.917,5,0.043,6,1.493,8,0.01,9,0.003,10,0.003,11,2.38,12,1.257,14,1.493,31,1.257,38,0.164,56,0.561,64,1.176,70,1.257,76,1.285,78,1.493,81,0.88,89,1.493,90,1.493,105,0.577,113,1.176,116,0.816,125,1.002,130,1.002,136,1.002,158,1.779,182,1.358,183,1.493,192,1.052,194,1.109,205,0.917,229,0.712,235,1.257,236,1.493,251,1.109,281,1.257,291,1.257,297,1.257,302,1.257,337,1.358,341,2.719,342,1.493,349,1.493,372,1.176,373,1.493,398,1.257,399,1.493,416,1.052,421,1.176,429,1.176,436,1.779,438,1.358,439,1.176,440,1.257,444,1.109,445,1.002,446,0.917,447,2.829,483,1.176,500,1.493,520,1.257,521,1.358,523,1.257,524,1.176,545,4.856,571,1.109,572,1.493,595,1.257,596,1.493,616,1.257,617,1.493,628,0.957,637,1.176,642,1.002,644,1.99,648,1.052,653,1.109,658,1.002,662,1.002,666,1.002,671,1.876,702,1.493,714,1.358,734,1.176,735,1.493,736,2.763,740,1.493,741,3.361,771,1.176,772,1.176,785,1.109,786,1.493,787,2.297,793,1.176,794,1.493,795,3.041,796,1.109,801,1.176,802,1.493,803,1.493,810,3.041,816,1.176,817,1.493,819,1.358,820,1.493,836,1.257,837,1.358,838,1.493,851,1.257,852,1.493,889,1.358,890,1.358,891,1.358,892,1.109,901,1.257,919,2.297,931,1.358,933,3.925,949,1.493,961,2.297,963,1.257,964,1.493,966,1.358,967,1.493,969,1.052,988,1.176,989,1.493,1009,1.358,1010,1.493,1037,1.358,1038,1.493,1042,1.876,1043,1.257,1044,1.493,1055,5.015,1079,1.257,1081,1.176,1083,1.493,1084,1.493,1088,1.493,1092,1.358,1096,1.493,1125,1.493,1137,1.493,1138,1.109,1141,1.257,1142,1.493,1150,1.109,1171,1.176,1205,1.493,1244,1.257,1245,1.493,1300,1.493,1322,1.493,1335,1.358,1336,1.493,1337,1.493,1350,1.493,1368,1.257,1369,1.493,1414,1.109,1419,1.176,1423,1.109,1427,1.876,1474,1.493,1487,1.358,1532,1.493,1541,1.257,1553,1.109,1554,1.493,1607,1.257,1608,1.257,1626,2.297,1627,2.297,1631,1.358,1632,1.493,1644,1.493,1646,1.493,1653,1.493,1654,1.358,1655,1.493,1659,1.493,1664,1.493,1669,1.493,1676,2.763,1677,2.763,1691,1.493,1718,1.257,1719,1.493,1774,1.493,1812,1.358,1813,1.493,1827,1.358,1828,1.257,1829,1.698,1830,1.698,1831,1.493,1832,8.275,1833,8.677,1834,1.493,1835,2.525,1836,4.389,1837,1.493,1838,2.525,1839,4.389,1840,5.327,1841,2.525,1842,4.389,1843,2.525,1844,3.732,1845,1.493,1846,1.493,1847,7.45,1848,7.269,1849,2.525,1850,1.493,1851,1.493,1852,1.698,1853,1.698,1854,1.493,1855,1.358,1856,1.493,1857,1.493,1858,4.988,1859,4.908,1860,1.493,1861,1.493,1862,3.281,1863,1.493,1864,2.297,1865,1.493,1866,3.281,1867,1.493,1868,1.493,1869,1.493,1870,1.493,1871,1.493,1872,1.493,1873,1.493,1874,2.297,1875,2.297,1876,1.358,1877,1.358,1878,2.297,1879,2.297,1880,2.297,1881,2.525,1882,1.493,1883,1.493,1884,1.493,1885,3.732,1886,1.493,1887,2.984,1888,1.358,1889,1.493,1890,3.732,1891,1.698,1892,1.698,1893,2.297,1894,2.525,1895,1.493,1896,2.297,1897,2.525,1898,1.493,1899,1.698,1900,1.698]],["title/dependencies.html",[59,2.397,1901,3.148]],["body/dependencies.html",[0,0.312,8,0.01,9,0.007,10,0.007,17,0.774,29,1.189,59,2.189,189,3.271,210,3.247,278,3.271,287,3.084,289,3.775,300,4.151,358,2.661,378,3.084,386,4.638,387,4.092,490,3.775,594,1.749,713,3.495,830,3.084,886,5.507,974,4.151,994,2.924,995,4.151,1178,4.151,1181,5.507,1182,3.775,1340,3.775,1544,3.775,1604,3.495,1666,4.151,1667,3.495,1902,4.721,1903,6.264,1904,4.721,1905,4.721,1906,7.791,1907,4.721,1908,6.264,1909,4.721,1910,4.721,1911,4.721,1912,6.264,1913,4.721,1914,4.721,1915,4.151,1916,4.721,1917,4.721,1918,4.721,1919,4.151,1920,4.721,1921,4.151,1922,4.151,1923,4.721,1924,4.721,1925,4.151,1926,4.721,1927,4.151,1928,4.721,1929,4.151,1930,4.721,1931,4.721,1932,4.721,1933,4.721,1934,4.721,1935,3.775,1936,4.721,1937,4.721,1938,4.721,1939,4.721,1940,4.721,1941,4.721,1942,6.264,1943,4.721,1944,4.151,1945,4.721,1946,4.721]],["title/miscellaneous/enumerations.html",[1947,2.112,1948,4.546]],["body/miscellaneous/enumerations.html",[1,3.76,8,0.01,9,0.006,10,0.006,30,3.448,34,1.645,91,0.383,105,2.365,218,1.945,994,3.448,1068,5.322,1331,4.451,1332,4.893,1560,4.451,1594,4.451,1595,3.175,1611,4.451,1947,2.342,1948,3.491,1949,5.566,1950,8.292,1951,5.566,1952,5.566,1953,5.566,1954,5.566,1955,5.566,1956,5.566,1957,5.566,1958,5.566,1959,5.566,1960,5.566,1961,3.97,1962,3.97,1963,3.97,1964,3.97,1965,5.566,1966,5.566,1967,5.566,1968,5.566,1969,5.566,1970,5.566,1971,5.566,1972,3.97,1973,5.566,1974,5.566,1975,4.451,1976,5.566,1977,5.566,1978,5.566,1979,5.566,1980,5.566,1981,3.97,1982,3.491,1983,6.426,1984,4.893,1985,5.566,1986,5.566,1987,5.566,1988,3.97,1989,3.97,1990,5.566,1991,5.566,1992,3.97]],["title/classes/fullNameValidator.html",[0,0.214,1607,3.18]],["body/classes/fullNameValidator.html",[0,0.332,2,1.061,3,0.146,4,0.146,5,0.132,7,0.159,8,0.01,9,0.008,10,0.008,16,0.187,38,0.644,82,0.715,84,1.325,85,1.137,86,1.222,91,0.502,92,1.256,93,1.582,101,1.502,110,1.222,166,1.513,184,2.628,211,1.671,341,3.225,374,3.208,396,2.699,577,2.811,594,1.929,1050,3.33,1589,3.854,1607,4.943,1874,4.164,1993,5.106,1994,4.626,1995,4.626,1996,5.794,1997,5.207,1998,5.699,1999,4.943,2000,5.207,2001,4.626,2002,4.164,2003,3.854,2004,3.854,2005,3.607]],["title/miscellaneous/functions.html",[1947,2.112,2006,4.546]],["body/miscellaneous/functions.html",[8,0.01,9,0.007,10,0.007,15,3.426,38,0.79,84,1.626,85,1.198,86,1.5,91,0.404,101,1.653,110,1.369,111,3.179,192,3.581,194,4.322,232,4.634,582,4.026,615,4.005,877,2.739,889,4.622,890,4.622,891,4.622,913,5.082,1050,2.882,1067,3.103,1068,2.473,1092,5.29,1217,4.622,1305,3.686,1539,4.622,1541,3.103,1606,3.686,1854,3.686,1855,4.622,1864,3.352,1866,3.686,1867,5.082,1868,5.082,1870,3.686,1871,5.082,1872,3.686,1873,5.082,1886,3.686,1887,6.184,1888,3.352,1889,3.686,1893,3.352,1894,6.799,1895,3.686,1947,2.473,2006,3.686,2007,4.192,2008,3.686,2009,4.192,2010,6.616,2011,3.686,2012,3.686,2013,4.192,2014,4.192,2015,4.192,2016,4.192,2017,4.192,2018,4.192,2019,4.192,2020,4.192,2021,4.192,2022,4.192,2023,3.686,2024,4.192,2025,4.192,2026,4.192,2027,4.192,2028,4.192]],["title/classes/imageValidator.html",[0,0.214,1876,3.435]],["body/classes/imageValidator.html",[0,0.322,2,1.011,3,0.139,4,0.139,5,0.126,7,0.152,8,0.01,9,0.007,10,0.007,16,0.178,38,0.624,82,0.692,84,1.284,85,1.053,86,1.184,91,0.478,92,1.217,93,1.506,101,1.529,110,1.184,111,3.108,166,1.466,175,5.33,184,2.546,211,2.077,308,2.078,374,3.46,396,3.354,564,3.072,594,1.837,1050,3.226,1875,3.965,1876,5.173,1877,3.965,1993,4.989,1994,4.482,1995,4.482,1996,5.729,1998,5.624,2001,4.482,2005,3.435,2029,4.958,2030,4.958,2031,4.958,2032,4.36,2033,4.958,2034,7.201,2035,4.958]],["title/index.html",[91,0.345,2036,3.148,2037,3.148]],["body/index.html",[0,0.205,1,1.739,4,0.055,5,0.122,8,0.01,9,0.004,10,0.004,13,0.743,30,1.206,34,0.952,45,1.441,46,0.971,51,1.441,53,1.206,59,1.493,67,0.936,69,0.936,85,0.285,92,0.366,97,3.743,104,4.186,105,2.556,110,0.356,115,2.104,116,0.936,122,3.462,132,1.442,138,1.097,146,1.557,163,2.551,169,2.108,175,1.441,189,2.231,194,1.272,205,1.051,210,1.009,218,1.439,229,2.649,239,3.671,242,3.62,243,1.051,244,1.009,305,3.62,310,1.712,317,1.557,321,2.384,334,2.384,336,3.62,363,2.575,364,1.557,386,1.206,387,2.104,408,1.272,418,1.441,423,2.546,431,1.739,433,4.383,507,1.815,534,1.557,542,1.206,550,1.712,594,0.721,599,1.739,600,1.051,618,2.384,630,5.4,639,1.441,644,3.315,655,2.575,668,3.62,725,1.712,743,2.299,800,2.135,839,1.441,860,5.019,871,1.712,877,1.272,939,1.557,940,1.557,978,2.231,994,1.206,1051,1.712,1065,2.831,1071,1.712,1072,4.207,1074,1.712,1180,1.557,1182,2.575,1196,1.441,1214,3.62,1246,1.712,1259,2.831,1276,1.712,1326,1.712,1338,1.557,1370,2.575,1384,1.712,1385,3.293,1402,1.557,1493,1.712,1544,1.557,1546,2.831,1589,1.441,1604,1.441,1611,3.293,1612,1.712,1667,1.441,1734,2.831,1821,3.293,1827,1.557,1828,1.441,1855,1.557,1896,1.557,1915,1.712,1919,1.712,1921,3.62,1922,2.831,1927,1.712,1929,1.712,1935,5.24,1944,1.712,1975,1.557,1982,1.712,1984,1.712,2038,1.947,2039,1.712,2040,2.831,2041,1.947,2042,3.22,2043,4.785,2044,1.947,2045,1.712,2046,1.712,2047,1.947,2048,1.947,2049,1.947,2050,1.947,2051,1.947,2052,1.947,2053,1.947,2054,1.947,2055,3.22,2056,1.947,2057,1.947,2058,1.947,2059,1.947,2060,3.22,2061,1.947,2062,3.22,2063,1.947,2064,1.947,2065,1.947,2066,4.785,2067,1.947,2068,1.947,2069,1.947,2070,1.947,2071,1.947,2072,1.947,2073,1.947,2074,3.22,2075,1.947,2076,3.22,2077,3.22,2078,1.947,2079,1.947,2080,1.947,2081,1.947,2082,1.947,2083,6.553,2084,1.712,2085,1.947,2086,1.712,2087,1.947,2088,3.22,2089,1.947,2090,4.118,2091,1.947,2092,1.947,2093,3.22,2094,1.712,2095,1.947,2096,1.947,2097,1.947,2098,1.947,2099,1.712,2100,1.947,2101,1.947,2102,1.947,2103,1.947,2104,1.947,2105,1.947,2106,1.947,2107,3.22,2108,1.947,2109,1.947,2110,1.947,2111,1.947,2112,1.947,2113,1.947,2114,1.947,2115,1.947,2116,1.947,2117,1.947,2118,1.947,2119,3.22,2120,1.947,2121,3.22,2122,1.947,2123,1.947,2124,1.712,2125,1.947,2126,3.62,2127,1.947,2128,1.947,2129,1.947,2130,1.947,2131,1.947,2132,2.831,2133,1.947,2134,1.947,2135,1.947,2136,1.947,2137,1.947,2138,1.947,2139,1.947,2140,1.947,2141,1.947,2142,1.947,2143,1.947,2144,1.947,2145,1.712,2146,1.947,2147,1.947,2148,3.22,2149,1.947,2150,1.947,2151,4.659,2152,1.947,2153,1.947,2154,1.947,2155,1.947,2156,1.947,2157,1.947,2158,1.947,2159,3.22,2160,1.947,2161,1.947,2162,1.947,2163,1.947,2164,1.947,2165,1.947,2166,1.947,2167,1.947,2168,1.947,2169,1.947,2170,1.947,2171,5.299,2172,1.947,2173,1.947,2174,1.947,2175,1.947,2176,1.947,2177,1.947,2178,1.947,2179,1.712,2180,1.712,2181,1.712,2182,1.947,2183,1.947,2184,1.947,2185,1.947,2186,1.712,2187,1.712,2188,1.947,2189,1.712,2190,3.22,2191,1.947,2192,1.947,2193,1.947,2194,7.209,2195,3.22,2196,1.947,2197,3.22,2198,1.947,2199,1.947,2200,6.925,2201,1.947,2202,1.947,2203,3.22,2204,1.947,2205,1.947,2206,1.947,2207,3.22,2208,1.947,2209,1.947,2210,1.947,2211,1.947,2212,1.947,2213,3.22,2214,1.947,2215,3.22,2216,1.947,2217,1.947,2218,1.947,2219,3.62,2220,3.22,2221,1.947,2222,1.947,2223,1.947,2224,1.947,2225,1.947,2226,1.947,2227,3.22,2228,3.22,2229,1.947,2230,1.947,2231,1.947,2232,2.575,2233,1.947,2234,1.947,2235,1.947,2236,3.22,2237,1.947,2238,1.947,2239,1.947,2240,1.947,2241,1.947,2242,1.712,2243,1.947,2244,1.947,2245,1.947,2246,1.947,2247,1.947,2248,1.947,2249,1.947,2250,1.947,2251,1.947,2252,1.947,2253,1.947,2254,1.947,2255,1.947,2256,1.947,2257,3.22,2258,3.22,2259,1.947,2260,1.947,2261,1.947,2262,1.947,2263,1.947,2264,1.947,2265,1.947,2266,1.947,2267,1.947,2268,1.947,2269,3.22,2270,3.22,2271,1.947,2272,1.947,2273,1.947,2274,3.22,2275,1.947,2276,1.947,2277,3.22,2278,1.947,2279,1.947,2280,1.947,2281,1.947,2282,1.947,2283,1.947,2284,1.947,2285,3.22,2286,3.22,2287,3.22,2288,3.22,2289,1.947,2290,1.947,2291,1.947,2292,1.947,2293,1.947,2294,2.384,2295,1.947,2296,1.947,2297,1.712,2298,1.947,2299,1.712]],["title/license.html",[2036,3.148,2037,3.148,2294,2.65]],["body/license.html",[8,0.008,9,0.008,10,0.008,42,3.822,67,2.481,210,2.677,800,2.677,839,4.916,1060,4.54,1615,4.54,1828,3.822,2045,4.54,2232,4.129,2294,3.822,2297,6.455,2299,4.54,2300,4.54,2301,4.54,2302,4.129,2303,4.129,2304,6.641,2305,5.164,2306,5.164,2307,5.164,2308,5.164,2309,5.164,2310,5.164,2311,6.641,2312,8.543,2313,5.164,2314,5.164,2315,7.342,2316,5.164,2317,6.641,2318,5.164,2319,5.164,2320,5.164,2321,5.164,2322,5.164,2323,5.164,2324,5.164,2325,5.164,2326,5.164,2327,6.641,2328,5.164,2329,5.164,2330,5.164,2331,5.164,2332,5.164,2333,5.164,2334,5.164,2335,6.641,2336,6.641,2337,5.164,2338,5.164,2339,5.164,2340,5.164,2341,5.164,2342,5.164,2343,5.164,2344,5.164,2345,5.164,2346,5.164,2347,5.164,2348,5.164,2349,5.164,2350,5.164,2351,5.164,2352,5.164,2353,5.164,2354,5.164,2355,5.164,2356,5.164,2357,5.164,2358,5.164,2359,5.164,2360,5.164,2361,5.164,2362,5.164]],["title/modules.html",[58,2.632]],["body/modules.html",[8,0.008,9,0.008,10,0.008,57,4.021,58,2.599,63,3.271,258,4.296,262,3.595,263,4.021,264,4.021,265,4.021,266,4.021,267,4.021,268,4.021,269,3.271,2126,7.715,2145,5.103,2363,8.775,2364,8.775,2365,8.821,2366,5.804]],["title/overview.html",[2367,5.168]],["body/overview.html",[2,0.749,8,0.01,9,0.006,10,0.006,13,1.402,57,5.288,58,1.645,59,2.442,60,3.23,61,3.23,62,3.23,63,4.726,64,4.267,65,2.731,66,1.905,67,1.765,77,1.213,81,3.957,158,4.728,243,1.984,251,4.023,258,6.474,259,3.23,260,3.23,261,3.23,262,5.195,263,5.508,264,4.934,265,4.267,266,4.934,267,5.658,268,5.508,269,4.547,372,4.267,436,4.728,479,3.23,480,3.23,482,3.23,483,4.267,671,4.023,696,3.23,697,3.23,881,2.4,892,4.023,896,2.545,945,3.23,946,3.23,969,3.815,988,4.267,1030,2.4,1150,4.023,1201,3.23,1202,3.23,1293,3.23,1294,3.23,1427,4.023,1469,3.23,1471,3.23,1527,3.23,1528,3.23,1529,3.23,1631,2.938,1764,3.23,1765,3.23,1766,3.23,2367,3.23,2368,3.674,2369,3.674,2370,3.674]],["title/classes/passwordValidator.html",[0,0.214,771,2.976]],["body/classes/passwordValidator.html",[0,0.33,2,1.052,3,0.145,4,0.145,5,0.131,7,0.158,8,0.01,9,0.008,10,0.008,16,0.185,38,0.641,82,0.711,84,1.318,85,1.073,86,1.215,91,0.498,92,1.249,93,1.569,101,1.549,110,1.215,166,1.505,184,2.614,211,1.658,341,3.199,374,3.191,396,2.677,431,2.788,577,2.788,594,1.913,771,4.601,1050,3.312,1878,4.129,1993,5.086,1994,4.601,1995,4.601,1996,5.783,1998,5.686,1999,4.916,2001,4.601,2003,3.822,2004,3.822,2005,3.577,2371,5.164,2372,5.164,2373,4.54,2374,4.54,2375,4.54,2376,4.54]],["title/classes/phoneNumberValidator.html",[0,0.214,1608,3.18]],["body/classes/phoneNumberValidator.html",[0,0.33,2,1.052,3,0.145,4,0.145,5,0.131,7,0.158,8,0.01,9,0.008,10,0.008,16,0.185,38,0.641,82,0.711,84,1.318,85,1.073,86,1.215,91,0.498,92,1.249,93,1.569,101,1.549,110,1.215,166,1.505,184,2.614,211,1.658,341,3.199,374,3.191,396,2.677,545,2.788,577,2.788,582,2.575,594,1.913,1050,3.312,1563,4.129,1608,4.916,1879,4.129,1993,5.086,1994,4.601,1995,4.601,1996,5.783,1998,5.686,1999,4.916,2001,4.601,2003,3.822,2004,3.822,2005,3.577,2377,5.164,2378,5.164,2379,4.54,2380,4.54]],["title/properties.html",[573,1.707,1901,3.148]],["body/properties.html",[8,0.01,9,0.008,10,0.008,34,1.782,210,3.125,239,5.069,255,5.3,321,5.831,386,3.734,387,3.938,573,1.99,978,4.176,1154,5.3,1935,4.82,2039,5.3,2040,5.3,2084,5.3,2086,5.3,2187,5.3,2189,5.3,2219,5.3,2232,4.82,2294,4.462,2300,5.3,2301,5.3,2302,4.82,2303,4.82,2381,6.028,2382,6.028,2383,6.028,2384,5.3,2385,5.3,2386,7.316,2387,6.028,2388,5.3]],["title/miscellaneous/typealiases.html",[1947,2.112,2389,5.17]],["body/miscellaneous/typealiases.html",[8,0.008,9,0.008,10,0.008,38,0.859,91,0.485,922,5.738,926,5.738,929,5.738,1887,5.218,1888,4.018,1947,2.964,2012,4.418,2023,5.738,2390,5.025,2391,6.526,2392,8.148,2393,6.526,2394,6.526,2395,7.95,2396,6.526,2397,7.247,2398,6.526,2399,6.526,2400,6.526,2401,6.526,2402,6.526,2403,6.526,2404,5.025,2405,6.526,2406,6.526,2407,6.526,2408,6.526,2409,7.247,2410,6.526,2411,5.025,2412,8.884,2413,5.025,2414,5.025,2415,5.025,2416,5.025]],["title/classes/usenameValidator.html",[0,0.214,772,2.976]],["body/classes/usenameValidator.html",[0,0.332,2,1.061,3,0.146,4,0.146,5,0.132,7,0.159,8,0.01,9,0.008,10,0.008,16,0.187,38,0.644,82,0.715,84,1.325,85,1.078,86,1.222,91,0.502,92,1.256,93,1.582,101,1.553,110,1.222,166,1.513,184,2.628,211,1.671,341,3.225,374,3.208,396,2.699,542,3.225,577,2.811,594,1.929,772,4.626,1050,3.33,1880,4.164,1993,5.106,1994,4.626,1995,4.626,1996,5.794,1998,5.699,1999,4.943,2001,4.626,2002,4.164,2003,3.854,2004,3.854,2005,3.607,2417,5.207,2418,5.207]],["title/miscellaneous/variables.html",[1947,2.112,2419,4.546]],["body/miscellaneous/variables.html",[3,0.087,8,0.01,9,0.004,10,0.004,30,1.153,31,2.297,34,1.179,35,2.481,36,1.489,37,3.04,38,0.754,39,1.608,40,1.216,41,1.489,42,1.378,43,1.378,46,2.321,47,1.378,48,2.481,50,1.489,51,1.378,52,1.378,53,1.153,56,1.024,85,0.583,91,0.18,101,1.348,105,1.896,107,2.728,116,1.491,163,1.153,166,1.055,169,0.969,211,1.992,229,2.34,232,1.922,239,2.15,243,1.005,244,2.68,308,1.672,321,2.953,334,1.378,337,2.481,341,3.843,354,1.83,356,1.83,363,2.481,364,1.489,376,1.29,378,1.216,382,1.489,387,1.216,396,0.965,408,3.378,418,1.378,423,0.895,426,1.675,431,2.154,433,2.883,438,2.481,439,2.15,444,2.027,445,1.83,446,1.675,447,0.928,520,2.297,521,2.481,523,2.297,524,2.15,534,2.481,545,1.675,582,1.989,599,1.005,605,1.29,618,1.378,630,2.481,633,1.637,635,1.675,644,3.224,714,2.481,800,0.965,845,1.216,877,1.216,881,1.216,919,1.489,931,2.481,933,5.316,939,1.489,940,1.489,994,1.153,1030,1.216,1043,1.378,1049,1.637,1053,1.378,1055,1.378,1067,6.199,1068,4.926,1075,1.637,1076,2.728,1133,1.637,1180,1.489,1183,2.728,1265,1.637,1370,1.489,1385,1.489,1487,2.481,1510,2.728,1516,2.728,1539,1.489,1541,3.445,1558,1.489,1574,1.489,1638,2.728,1639,1.637,1821,4.736,1823,1.637,1828,2.297,1831,1.637,1834,1.637,1835,1.637,1837,1.637,1838,1.637,1841,1.637,1843,1.637,1845,1.637,1846,2.728,1849,1.637,1850,2.728,1851,2.728,1856,1.637,1857,2.728,1858,5.455,1860,1.637,1861,2.728,1862,1.637,1863,3.507,1864,1.489,1865,2.728,1869,1.637,1874,1.489,1875,1.489,1877,2.481,1878,1.489,1879,1.489,1880,1.489,1881,2.728,1882,2.728,1883,2.728,1884,1.637,1893,1.489,1896,3.721,1897,3.507,1898,2.728,1925,1.637,1947,1.098,1975,1.489,2002,2.481,2008,1.637,2011,1.637,2032,1.637,2046,1.637,2094,2.728,2099,2.728,2124,2.728,2132,1.637,2151,1.637,2179,1.637,2180,1.637,2181,1.637,2186,2.728,2242,1.637,2302,1.489,2303,1.489,2373,1.637,2374,1.637,2375,1.637,2376,1.637,2379,1.637,2380,1.637,2384,1.637,2385,1.637,2388,1.637,2419,1.637,2420,1.862,2421,5.922,2422,1.862,2423,3.989,2424,3.103,2425,1.862,2426,1.862,2427,1.862,2428,1.862,2429,1.862,2430,1.862,2431,3.103,2432,1.862,2433,1.862,2434,1.862,2435,1.862,2436,1.862,2437,1.862,2438,1.862,2439,1.862,2440,1.862,2441,1.862,2442,1.862,2443,1.862,2444,1.862,2445,1.862,2446,4.654,2447,1.862,2448,1.862,2449,3.103,2450,3.103,2451,1.862,2452,1.862,2453,1.862,2454,1.862,2455,3.103,2456,1.862,2457,1.862,2458,1.862,2459,1.862,2460,1.862,2461,1.862,2462,1.862,2463,1.862,2464,1.862,2465,1.862,2466,1.862,2467,1.862,2468,1.862,2469,1.862,2470,3.103,2471,1.862,2472,1.862,2473,1.862,2474,3.103,2475,1.862,2476,1.862,2477,1.862,2478,4.654,2479,1.862,2480,1.862,2481,1.862,2482,1.862,2483,1.862,2484,1.862,2485,1.862,2486,1.862,2487,1.862,2488,3.103,2489,1.862,2490,1.862,2491,1.862,2492,3.103,2493,1.862,2494,1.862,2495,1.862,2496,1.862,2497,1.862,2498,1.862,2499,1.862,2500,1.862,2501,1.862,2502,1.862,2503,1.862,2504,1.862,2505,1.862,2506,1.862,2507,1.862,2508,1.862,2509,1.862,2510,1.862,2511,1.862,2512,1.862,2513,1.862,2514,1.862,2515,1.862,2516,1.862,2517,1.862,2518,1.862,2519,1.862,2520,1.862,2521,1.862,2522,1.862,2523,1.862,2524,1.862,2525,1.862,2526,1.862,2527,1.862,2528,1.862,2529,1.862,2530,1.862,2531,1.862,2532,1.862,2533,1.862,2534,1.862,2535,1.862,2536,1.862,2537,1.862,2538,1.862,2539,1.862,2540,1.862,2541,1.862,2542,3.103,2543,1.862,2544,1.862,2545,1.862,2546,3.103,2547,3.103,2548,1.862,2549,1.862,2550,1.862,2551,1.862,2552,1.862,2553,1.862]],["title/routes.html",[1053,4.351]],["body/routes.html",[8,0.009,9,0.009,10,0.009,1053,5.16]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.12",{"_index":1932,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1937,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1918,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1036,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":1917,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1931,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1833,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1885,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1892,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1890,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1891,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1847,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1848,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1840,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1859,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1836,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1844,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1842,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1839,"title":{},"body":{"coverage.html":{}}}],["02t05:01:03.938z",{"_index":1619,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1584,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["07",{"_index":1583,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["09999999999",{"_index":1617,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1601,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1",{"_index":243,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.17.3",{"_index":1926,"title":{},"body":{"dependencies.html":{}}}],["1.18.0",{"_index":1945,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1923,"title":{},"body":{"dependencies.html":{}}}],["1.6.0",{"_index":2382,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":1920,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":881,"title":{},"body":{"controllers/FileController.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1568,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1024",{"_index":1033,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2368,"title":{},"body":{"overview.html":{}}}],["120",{"_index":755,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["120)@minlength(2",{"_index":750,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["123",{"_index":804,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/OauthService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["150",{"_index":1032,"title":{},"body":{"controllers/HealthController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["17.0.3",{"_index":1903,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1571,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["19",{"_index":1620,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":2487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@min(17",{"_index":1570,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1596,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2",{"_index":1030,"title":{},"body":{"controllers/HealthController.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":1933,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1907,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":1924,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":763,"title":{},"body":{"classes/CreateConversationDto.html":{},"controllers/HealthController.html":{},"classes/UserEntity.html":{}}}],["20)@minlength(2",{"_index":761,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["200",{"_index":241,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":1582,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2022",{"_index":2299,"title":{},"body":{"index.html":{},"license.html":{}}}],["21",{"_index":1714,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":1702,"title":{},"body":{"classes/UserEntity.html":{}}}],["24",{"_index":2369,"title":{},"body":{"overview.html":{}}}],["3",{"_index":752,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["3.0.0",{"_index":1909,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1939,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1914,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1291,"title":{},"body":{"controllers/OauthController.html":{}}}],["4.0.0",{"_index":1934,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":1912,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":1941,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":248,"title":{},"body":{"controllers/AppController.html":{}}}],["42195",{"_index":1313,"title":{},"body":{"injectables/OauthService.html":{}}}],["45",{"_index":1591,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1588,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["456",{"_index":805,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["46",{"_index":2370,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1916,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1853,"title":{},"body":{"coverage.html":{}}}],["6.0.0",{"_index":1928,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1910,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":1943,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1940,"title":{},"body":{"dependencies.html":{}}}],["768",{"_index":1029,"title":{},"body":{"controllers/HealthController.html":{}}}],["789",{"_index":815,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":806,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["8",{"_index":1703,"title":{},"body":{"classes/UserEntity.html":{}}}],["8.0.1",{"_index":1930,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1946,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1852,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1906,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":1908,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1911,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2380,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2379,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../docs",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["_refreshtoken",{"_index":972,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["ab*cd",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1578,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1587,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["above",{"_index":2334,"title":{},"body":{"license.html":{}}}],["accept",{"_index":2475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["acceptable",{"_index":2463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":363,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":1256,"title":{},"body":{"controllers/OauthController.html":{}}}],["accesstoken",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{}}}],["account",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"classes/ProfileEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1579,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["account.'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":2356,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":1384,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":2521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1371,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(userid",{"_index":1382,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcookieauth('optional",{"_index":2520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":1056,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["addoauth2",{"_index":2512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1555,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin.controller",{"_index":73,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":72,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin01",{"_index":782,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admin02",{"_index":783,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":57,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":597,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":64,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":70,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["age",{"_index":1556,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["agedate",{"_index":2484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alcohol",{"_index":1986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":2390,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":861,"title":{},"body":{"controllers/FileController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":866,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":182,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(request",{"_index":217,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["already",{"_index":1516,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":2237,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":2164,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2325,"title":{},"body":{"license.html":{}}}],["another",{"_index":365,"title":{},"body":{"injectables/AtGuard.html":{}}}],["api",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2387,"title":{},"body":{"properties.html":{}}}],["api:latest",{"_index":2222,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":2038,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":792,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioauth2",{"_index":1268,"title":{},"body":{"controllers/OauthController.html":{}}}],["apioauth2(['user:read",{"_index":1274,"title":{},"body":{"controllers/OauthController.html":{}}}],["apioauth2(['user:write",{"_index":1279,"title":{},"body":{"controllers/OauthController.html":{}}}],["apiokresponse",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":887,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":602,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({example",{"_index":1581,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apiproperty({required",{"_index":608,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({type",{"_index":742,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["apipropertyoptional",{"_index":765,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":250,"title":{},"body":{"controllers/AppController.html":{}}}],["apiresponse({status",{"_index":247,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":2100,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":674,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":897,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('health",{"_index":1022,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('home",{"_index":254,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('oauth",{"_index":1271,"title":{},"body":{"controllers/OauthController.html":{}}}],["apitags('posts",{"_index":1441,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1750,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":888,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["app",{"_index":1541,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1552,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":252,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":1078,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":235,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2040,"title":{},"body":{"index.html":{},"properties.html":{}}}],["application/json",{"_index":2474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":2082,"title":{},"body":{"index.html":{}}}],["apply",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":1773,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":258,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps",{"_index":2128,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":251,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":2288,"title":{},"body":{"index.html":{}}}],["args",{"_index":1998,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1341,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":198,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2360,"title":{},"body":{"license.html":{}}}],["array",{"_index":877,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":889,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":909,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":2017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":1331,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":2313,"title":{},"body":{"license.html":{}}}],["async",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["atguard",{"_index":281,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":372,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":487,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":1299,"title":{},"body":{"modules/OauthModule.html":{}}}],["auth/auth.service",{"_index":1269,"title":{},"body":{"controllers/OauthController.html":{}}}],["auth/decorators",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["auth_error",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":398,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":2117,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":357,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/GithubGuard.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{}}}],["authguard('github",{"_index":965,"title":{},"body":{"injectables/GithubGuard.html":{}}}],["authguard('jwt",{"_index":360,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authmodule",{"_index":262,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OauthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2388,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":1351,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authorizationurl",{"_index":2515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":2349,"title":{},"body":{"license.html":{}}}],["authprovider",{"_index":1306,"title":{},"body":{"injectables/OauthService.html":{}}}],["authservice",{"_index":436,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/OauthController.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":2088,"title":{},"body":{"index.html":{}}}],["available",{"_index":2366,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["await",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GithubStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["awesome",{"_index":2192,"title":{},"body":{"index.html":{}}}],["axios.config",{"_index":932,"title":{},"body":{"classes/FileService.html":{}}}],["axios.create",{"_index":2471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosconfig",{"_index":931,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosconfig.post(url",{"_index":938,"title":{},"body":{"classes/FileService.html":{}}}],["axiosinstance",{"_index":2470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b",{"_index":1565,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["backend",{"_index":2059,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2238,"title":{},"body":{"index.html":{}}}],["bad",{"_index":2459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request",{"_index":2458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":1343,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1348,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1515,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2185,"title":{},"body":{"index.html":{}}}],["based",{"_index":1074,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["baseurl",{"_index":2472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":1915,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2276,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2247,"title":{},"body":{"index.html":{}}}],["begin",{"_index":757,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["begining",{"_index":2263,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2278,"title":{},"body":{"index.html":{}}}],["better",{"_index":2290,"title":{},"body":{"index.html":{}}}],["bio",{"_index":1557,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birthdate",{"_index":1558,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["bodies",{"_index":2131,"title":{},"body":{"index.html":{}}}],["body",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1050,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"classes/MessagesGateway.html":{},"classes/PostEntity.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["bootstrap",{"_index":1894,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2365,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2363,"title":{},"body":{"modules.html":{}}}],["buddhism",{"_index":1979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["build",{"_index":2179,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":2087,"title":{},"body":{"index.html":{}}}],["building",{"_index":2078,"title":{},"body":{"index.html":{}}}],["built",{"_index":2167,"title":{},"body":{"index.html":{}}}],["c",{"_index":1615,"title":{},"body":{"classes/ProfileEntity.html":{},"license.html":{}}}],["c\",\"accesstoken\":\"ya29.a0ava9y1sarvwmvs4qatf0xfnnwghlqrkgosvwqlhc4bwozr4dgr2c6xckc",{"_index":1319,"title":{},"body":{"injectables/OauthService.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1567,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["call",{"_index":2146,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1265,"title":{},"body":{"controllers/OauthController.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":983,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["callhandler",{"_index":824,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":350,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":353,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canceled",{"_index":1978,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["card",{"_index":2286,"title":{},"body":{"index.html":{}}}],["catch",{"_index":186,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":195,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1040,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":828,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["catcherror((err",{"_index":833,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["categories",{"_index":1491,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1493,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["change",{"_index":668,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["character",{"_index":1709,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":776,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(121",{"_index":753,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["characters!'})@maxlength(21",{"_index":762,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1590,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1592,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1704,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":756,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["charge",{"_index":2308,"title":{},"body":{"license.html":{}}}],["chat",{"_index":2189,"title":{},"body":{"index.html":{},"properties.html":{}}}],["chats",{"_index":2071,"title":{},"body":{"index.html":{}}}],["check",{"_index":1014,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkexist",{"_index":1511,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1514,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1520,"title":{},"body":{"injectables/PostsService.html":{}}}],["children",{"_index":1985,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["city",{"_index":1564,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["claim",{"_index":2352,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":2175,"title":{},"body":{"index.html":{}}}],["client",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"classes/MessagesGateway.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1194,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.id",{"_index":1187,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client/.../auth.dto.ts",{"_index":2404,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../auth.service.ts",{"_index":2426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../axios.config.ts",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../conversations.dto.ts",{"_index":2392,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../conversations.service.ts",{"_index":2427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../counter.ts",{"_index":2441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../file.service.ts",{"_index":2428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../files.dto.ts",{"_index":2409,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../index.ts",{"_index":2440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../main.ts",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../posts.dto.ts",{"_index":2395,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/.../posts.service.ts",{"_index":2429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../user.service.ts",{"_index":2430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/.../users.dto.ts",{"_index":2397,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/auth.dto.ts",{"_index":2415,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/conversations.dto.ts",{"_index":2411,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/files.dto.ts",{"_index":2416,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/posts.dto.ts",{"_index":2413,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/dto/users.dto.ts",{"_index":2414,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client/src/main.ts",{"_index":1831,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/router/index.ts",{"_index":1834,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/auth.service.ts",{"_index":1835,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/axios.config.ts",{"_index":1837,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/conversations.service.ts",{"_index":1838,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/file.service.ts",{"_index":919,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/file.service.ts:21",{"_index":927,"title":{},"body":{"classes/FileService.html":{}}}],["client/src/services/file.service.ts:35",{"_index":930,"title":{},"body":{"classes/FileService.html":{}}}],["client/src/services/file.service.ts:7",{"_index":924,"title":{},"body":{"classes/FileService.html":{}}}],["client/src/services/posts.service.ts",{"_index":1841,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/services/user.service.ts",{"_index":1843,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/src/stores/counter.ts",{"_index":1845,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":979,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/MessagesService.html":{}}}],["clientsecret",{"_index":981,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["cluster_adminmodule",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":479,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":480,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":481,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":482,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":696,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":698,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":697,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":945,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":946,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1201,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1202,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_oauthmodule",{"_index":1293,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_oauthmodule_imports",{"_index":1295,"title":{},"body":{"modules/OauthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":1294,"title":{},"body":{"modules/OauthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1469,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1470,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1471,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1527,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1529,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1528,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1764,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1766,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1767,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1765,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":242,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["college",{"_index":1970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comment",{"_index":1385,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":736,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":571,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1402,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commitlint",{"_index":2173,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":1902,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":1904,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2291,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["compatible",{"_index":2116,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":2150,"title":{},"body":{"index.html":{}}}],["component",{"_index":2542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compose",{"_index":2224,"title":{},"body":{"index.html":{}}}],["compress",{"_index":2130,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1919,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computer",{"_index":2287,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2333,"title":{},"body":{"license.html":{}}}],["config",{"_index":378,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('app_secret",{"_index":393,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["config.get('google_callback_url",{"_index":2516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":376,"title":{},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"app_secret",{"_index":495,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"expire_at_time",{"_index":498,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(user_error.duplicate",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1259,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["connectedsocket",{"_index":1177,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["connection",{"_index":2361,"title":{},"body":{"license.html":{}}}],["console.log",{"_index":1287,"title":{},"body":{"controllers/OauthController.html":{}}}],["console.log('before",{"_index":1129,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":1130,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1135,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":1086,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":1087,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(postid",{"_index":1460,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":211,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@logger('appservice",{"_index":347,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(config",{"_index":375,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":191,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(messagesservice",{"_index":1149,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["constructor(oauthservice",{"_index":968,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["constructor(prismaservice",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":88,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"injectables/GithubStrategy.html":{},"classes/MessagesGateway.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":351,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1705,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2223,"title":{},"body":{"index.html":{}}}],["content",{"_index":940,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":356,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":370,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1131,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":369,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1084,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1085,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1638,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["continuous",{"_index":2168,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2357,"title":{},"body":{"license.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":55,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":675,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":900,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('health",{"_index":1023,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('oauth",{"_index":1272,"title":{},"body":{"controllers/OauthController.html":{}}}],["controller('posts",{"_index":1442,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1751,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":1075,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":1069,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":1905,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":2159,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":630,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversation.dto",{"_index":809,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":741,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:11",{"_index":962,"title":{},"body":{"classes/GetAllConversationDto.html":{}}}],["conversation.dto.ts:14",{"_index":1663,"title":{},"body":{"classes/UpdateMembersConversationDto.html":{}}}],["conversation.dto.ts:20",{"_index":811,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:27",{"_index":812,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:32",{"_index":764,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:33",{"_index":1674,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:34",{"_index":1673,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:35",{"_index":1675,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:52",{"_index":758,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:59",{"_index":759,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1662,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:66",{"_index":745,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1661,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:73",{"_index":747,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1660,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation_error",{"_index":714,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversation_error.not_creator",{"_index":732,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationentity",{"_index":595,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"coverage.html":{}}}],["conversationid",{"_index":646,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{}}}],["conversationid).members",{"_index":1224,"title":{},"body":{"injectables/MessagesService.html":{}}}],["conversations",{"_index":618,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/MessagesService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversations.controller",{"_index":700,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":672,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":616,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":263,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":671,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":1921,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":2119,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2327,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2311,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2297,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":345,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":346,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["correct",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["cors",{"_index":1182,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":1850,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["counter",{"_index":2546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["country",{"_index":1566,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["course",{"_index":2268,"title":{},"body":{"index.html":{}}}],["cover",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coverage",{"_index":1827,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create_user",{"_index":2452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createapp(app",{"_index":2442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createat",{"_index":1492,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":734,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":619,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":678,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":627,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":628,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":633,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":598,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":1867,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":2019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":1092,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1143,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(conversationid",{"_index":1153,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":785,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.text",{"_index":1228,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createnewconversationdto",{"_index":2391,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["createparamdecorator",{"_index":2488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1372,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":1388,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":793,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createrouter",{"_index":2538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createwebhistory(import.meta.env.base_url",{"_index":2540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creator",{"_index":599,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creator01",{"_index":784,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["creator01'})@isstring",{"_index":746,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["criteria",{"_index":2115,"title":{},"body":{"index.html":{}}}],["crud",{"_index":2180,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":212,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":214,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":215,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":644,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":1861,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":1070,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customeimage",{"_index":2033,"title":{},"body":{"classes/imageValidator.html":{}}}],["customtext",{"_index":2003,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["damages",{"_index":2353,"title":{},"body":{"license.html":{}}}],["data",{"_index":244,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data\":{\"message\":\"user",{"_index":1317,"title":{},"body":{"injectables/OauthService.html":{}}}],["database",{"_index":2043,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1545,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":605,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":230,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1133,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1546,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2314,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2362,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1097,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1102,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":2105,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":2107,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":1045,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":1067,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1994,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":1995,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defined",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definestore",{"_index":2545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["definition",{"_index":2096,"title":{},"body":{"index.html":{}}}],["delete",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":687,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":638,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1466,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1394,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1454,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1398,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":1762,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":1725,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":179,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete_comment",{"_index":2454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_user",{"_index":2453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecomment",{"_index":1373,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1467,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1393,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":801,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationadminsdto",{"_index":2393,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deleteconversationbyid",{"_index":620,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":636,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":637,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1510,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["deleteoneadminconversation",{"_index":621,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":641,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":642,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":816,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteonepostdto",{"_index":2394,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deletepost",{"_index":1374,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(userid",{"_index":1397,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":1720,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1724,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":180,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserprofile",{"_index":2396,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["denied",{"_index":2456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":59,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":2144,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1332,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":2095,"title":{},"body":{"index.html":{}}}],["description",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":2114,"title":{},"body":{"index.html":{}}}],["design",{"_index":2098,"title":{},"body":{"index.html":{}}}],["development",{"_index":2212,"title":{},"body":{"index.html":{}}}],["devices",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":2044,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":2444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directly",{"_index":1276,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["directly).'})@httpcode(httpstatus.created)@apicreatedresponse({description",{"_index":1266,"title":{},"body":{"controllers/OauthController.html":{}}}],["directly).'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1261,"title":{},"body":{"controllers/OauthController.html":{}}}],["disk",{"_index":1025,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1017,"title":{},"body":{"controllers/HealthController.html":{}}}],["displayname",{"_index":1315,"title":{},"body":{"injectables/OauthService.html":{}}}],["distribute",{"_index":2323,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2295,"title":{},"body":{"index.html":{}}}],["divorced",{"_index":1974,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["docker",{"_index":2219,"title":{},"body":{"index.html":{},"properties.html":{}}}],["docs",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["document",{"_index":2099,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":1828,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doe",{"_index":1216,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/OauthService.html":{}}}],["done",{"_index":991,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":1008,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":975,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["doublecount",{"_index":2549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":119,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/FileService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":720,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1502,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":727,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.creator",{"_index":721,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":718,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1513,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1490,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1524,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.members",{"_index":719,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":717,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1793,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":1806,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1505,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.published",{"_index":1506,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1519,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.text",{"_index":1522,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.title",{"_index":1489,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.userid",{"_index":723,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.username",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment/request",{"_index":1430,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/comment/response",{"_index":1440,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/request",{"_index":1429,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/response",{"_index":1436,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/request",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/response",{"_index":388,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":2449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":1091,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2254,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":2229,"title":{},"body":{"index.html":{}}}],["each",{"_index":2156,"title":{},"body":{"index.html":{}}}],["ealcohol",{"_index":1949,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["easily",{"_index":2056,"title":{},"body":{"index.html":{}}}],["education",{"_index":1990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eeducation",{"_index":1951,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":2079,"title":{},"body":{"index.html":{}}}],["egender",{"_index":1952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["element.id",{"_index":1223,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.foreach((item",{"_index":1234,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.splice(element.messages.indexof(item",{"_index":1242,"title":{},"body":{"injectables/MessagesService.html":{}}}],["email",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1735,"title":{},"body":{"controllers/UsersController.html":{}}}],["emails",{"_index":999,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":1001,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emaritalstatus",{"_index":1953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["empty",{"_index":2448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":2092,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1534,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1538,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2258,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":933,"title":{},"body":{"classes/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2181,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["endpoint}/avatar",{"_index":935,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/cover",{"_index":942,"title":{},"body":{"classes/FileService.html":{}}}],["endpoint}/posts",{"_index":943,"title":{},"body":{"classes/FileService.html":{}}}],["enhance",{"_index":2256,"title":{},"body":{"index.html":{}}}],["enotification",{"_index":1954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enter",{"_index":362,"title":{},"body":{"injectables/AtGuard.html":{}}}],["entire",{"_index":2155,"title":{},"body":{"index.html":{}}}],["entities",{"_index":673,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["entities/comment.entity",{"_index":738,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/profile.entity",{"_index":1678,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["enumerations",{"_index":1948,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2142,"title":{},"body":{"index.html":{}}}],["eorder",{"_index":1955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eotpstatus",{"_index":1956,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ereligion",{"_index":1957,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":1105,"title":{},"body":{"injectables/LoggerService.html":{}}}],["errors",{"_index":1823,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors.length",{"_index":1825,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsintereptor",{"_index":819,"title":{"injectables/ErrorsIntereptor.html":{}},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["eslint",{"_index":2163,"title":{},"body":{"index.html":{}}}],["esocial",{"_index":1958,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eupdateuserprofile",{"_index":1959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["euserroles",{"_index":1960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eval",{"_index":2133,"title":{},"body":{"index.html":{}}}],["event",{"_index":2348,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":2049,"title":{},"body":{"index.html":{}}}],["example",{"_index":743,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["example@gmail.com",{"_index":1694,"title":{},"body":{"classes/UserEntity.html":{}}}],["exception",{"_index":200,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":226,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":227,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":221,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":185,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["execute",{"_index":1260,"title":{},"body":{"controllers/OauthController.html":{}}}],["executes",{"_index":2138,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":354,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":2450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existed",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["existedusermiddleware",{"_index":836,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["experiences",{"_index":2053,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":497,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":485,"title":{},"body":{"modules/AuthModule.html":{},"classes/LoggerModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":210,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":858,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":2121,"title":{},"body":{"index.html":{}}}],["extends",{"_index":359,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["externals",{"_index":2531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1057,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extractjwt",{"_index":384,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":391,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":1046,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":1984,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["failed",{"_index":1349,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":396,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1352,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":2064,"title":{},"body":{"index.html":{}}}],["feels",{"_index":2051,"title":{},"body":{"index.html":{}}}],["femail",{"_index":1972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["female",{"_index":1595,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["field",{"_index":2068,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":1887,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":2018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":957,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":955,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":959,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":851,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":956,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":800,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.controller",{"_index":948,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":960,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":893,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":901,"title":{"classes/FileService.html":{}},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"coverage.html":{}}}],["filesmodule",{"_index":264,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":892,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":2005,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["find",{"_index":1734,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["find((element",{"_index":1230,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findallmessages",{"_index":1144,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findallmessages(@messagebody('conversationid",{"_index":1188,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["findallmessages(conversationid",{"_index":1157,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findorcreate",{"_index":1301,"title":{},"body":{"injectables/OauthService.html":{}}}],["findorcreate(userid",{"_index":1304,"title":{},"body":{"injectables/OauthService.html":{}}}],["firstname",{"_index":1002,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2345,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2183,"title":{},"body":{"index.html":{}}}],["flip",{"_index":2285,"title":{},"body":{"index.html":{}}}],["flows",{"_index":2513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fo",{"_index":2283,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2248,"title":{},"body":{"index.html":{}}}],["following",{"_index":2332,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(auth_error.same_password",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(post_error.not_author",{"_index":1503,"title":{},"body":{"injectables/PostsService.html":{}}}],["forbiddenexception(system_error.forbidden",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["form",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"index.html":{}}}],["format",{"_index":2097,"title":{},"body":{"index.html":{}}}],["formattedmessage",{"_index":1119,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":2162,"title":{},"body":{"index.html":{}}}],["formdata",{"_index":936,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('file",{"_index":937,"title":{},"body":{"classes/FileService.html":{}}}],["formdata.append('files",{"_index":944,"title":{},"body":{"classes/FileService.html":{}}}],["forroot",{"_index":1089,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/OauthService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":2077,"title":{},"body":{"index.html":{}}}],["free",{"_index":2307,"title":{},"body":{"license.html":{}}}],["front",{"_index":2257,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2042,"title":{},"body":{"index.html":{}}}],["full",{"_index":1589,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1559,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1607,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":1055,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":2006,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2330,"title":{},"body":{"license.html":{}}}],["game",{"_index":2274,"title":{},"body":{"index.html":{}}}],["gender",{"_index":1560,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["generate",{"_index":1072,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["generated",{"_index":2089,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":682,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":654,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1448,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1411,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1459,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1446,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1408,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('authorization",{"_index":1650,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["get('find/:email",{"_index":1756,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('github",{"_index":1282,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('github')@useguards(githubguard",{"_index":1251,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('github/redirect",{"_index":1284,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('github/redirect')@useguards(githubguard",{"_index":1254,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google",{"_index":1273,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google')@apioauth2(['user:read'])@useguards(undefined)@apioperation({summary",{"_index":1258,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect",{"_index":1278,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('google/redirect')@apioauth2(['user:write'])@useguards(undefined)@apioperation({summary",{"_index":1264,"title":{},"body":{"controllers/OauthController.html":{}}}],["get('profile/:useridorusername",{"_index":1753,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1737,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":1013,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":649,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1375,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(postid",{"_index":1400,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":648,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversationdto:11",{"_index":808,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["getallconversations",{"_index":622,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@body",{"_index":680,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(dto",{"_index":647,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversationsdto",{"_index":2398,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsdto",{"_index":2399,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpostsofuser",{"_index":1376,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(userid",{"_index":1404,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1377,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(userid",{"_index":1407,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicpostsdto",{"_index":2400,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallpublicusersdto",{"_index":2401,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallusers",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getconversationbyid",{"_index":623,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":652,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":237,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember",{"_index":1206,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmember(conversationid",{"_index":1209,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getoneconversationdto",{"_index":653,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1378,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(postid",{"_index":1410,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":1721,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":1728,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getters",{"_index":2548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":2036,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyemail",{"_index":1722,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1732,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofiledto",{"_index":2402,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["gitbox",{"_index":2262,"title":{},"body":{"index.html":{}}}],["github",{"_index":978,"title":{},"body":{"injectables/GithubStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"index.html":{},"properties.html":{}}}],["github2",{"_index":974,"title":{},"body":{"injectables/GithubStrategy.html":{},"dependencies.html":{}}}],["githubauth",{"_index":1247,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect",{"_index":1248,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubauthredirect(req",{"_index":1253,"title":{},"body":{"controllers/OauthController.html":{}}}],["githubguard",{"_index":963,"title":{"injectables/GithubGuard.html":{}},"body":{"injectables/GithubGuard.html":{},"controllers/OauthController.html":{},"coverage.html":{}}}],["githublogin",{"_index":1302,"title":{},"body":{"injectables/OauthService.html":{}}}],["githublogin(req",{"_index":1308,"title":{},"body":{"injectables/OauthService.html":{}}}],["githubstrategy",{"_index":966,"title":{"injectables/GithubStrategy.html":{}},"body":{"injectables/GithubStrategy.html":{},"coverage.html":{}}}],["global",{"_index":1063,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["god",{"_index":1980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["google",{"_index":994,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["google\",\"user\":{\"email\":\"testershopee9@gmail.com\",\"firstname\":\"commerce\",\"lastname\":\"shopee\",\"picture\":\"https://lh3.googleusercontent.com/a/aitbvmneb57zobrqvxfglijsvy0ebphcmbfsqafgqpnn=s96",{"_index":1318,"title":{},"body":{"injectables/OauthService.html":{}}}],["googleauth",{"_index":1249,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(@req",{"_index":1277,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauth(req",{"_index":1257,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect",{"_index":1250,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(@req",{"_index":1280,"title":{},"body":{"controllers/OauthController.html":{}}}],["googleauthredirect(req",{"_index":1263,"title":{},"body":{"controllers/OauthController.html":{}}}],["googlelogin",{"_index":1303,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlelogin(req",{"_index":1310,"title":{},"body":{"injectables/OauthService.html":{}}}],["googlestrategy",{"_index":988,"title":{"injectables/GoogleStrategy.html":{}},"body":{"injectables/GoogleStrategy.html":{},"modules/OauthModule.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2306,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2145,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group01",{"_index":748,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["group01'})@isstring()@isnotempty()@length(3",{"_index":760,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["grow",{"_index":2234,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1631,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["guards/github.guard",{"_index":1270,"title":{},"body":{"controllers/OauthController.html":{}}}],["hand",{"_index":366,"title":{},"body":{"injectables/AtGuard.html":{}}}],["handle",{"_index":831,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":188,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":202,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse",{"_index":190,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(request",{"_index":204,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hash",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1640,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":2124,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":939,"title":{},"body":{"classes/FileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":1011,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheck",{"_index":1018,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckresult",{"_index":1019,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1020,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1009,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["height",{"_index":1987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":245,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["helmet",{"_index":1927,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["help",{"_index":2103,"title":{},"body":{"index.html":{}}}],["here",{"_index":2242,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["hereby",{"_index":2305,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2188,"title":{},"body":{"index.html":{}}}],["high_school",{"_index":1969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["history",{"_index":2539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hmr.config.ts",{"_index":1897,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["holders",{"_index":2350,"title":{},"body":{"license.html":{}}}],["home",{"_index":2541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["homepage",{"_index":255,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":240,"title":{},"body":{"controllers/AppController.html":{}}}],["host",{"_index":197,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":209,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":213,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":2152,"title":{},"body":{"index.html":{}}}],["http",{"_index":1180,"title":{},"body":{"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpargumentshost",{"_index":207,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcode",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":196,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorsIntereptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception('new",{"_index":834,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpexceptionfilter",{"_index":1037,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":491,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://avatars.githubusercontent.com/u/28536201",{"_index":1316,"title":{},"body":{"injectables/OauthService.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2386,"title":{},"body":{"properties.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":676,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":835,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpstatus.internal_server_error",{"_index":225,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["husky",{"_index":1929,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iarrayfile",{"_index":894,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["icreatecomment",{"_index":1437,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["icreatepost",{"_index":1431,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["id",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubStrategy.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiokresponse({description",{"_index":1390,"title":{},"body":{"controllers/PostsController.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id.decorator.ts",{"_index":1882,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":2245,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1829,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1507,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.authorid",{"_index":1508,"title":{},"body":{"injectables/PostsService.html":{}}}],["identify.length",{"_index":1798,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":1799,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifinduserbyemail",{"_index":1749,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetcomment",{"_index":1438,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpostofuser",{"_index":1432,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpublicpost",{"_index":1433,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetuserprofile",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":1062,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreexpiration",{"_index":395,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["ignoreglobalprefix",{"_index":1047,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ijwtpayload",{"_index":380,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":2035,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":879,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":1876,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["impact",{"_index":2293,"title":{},"body":{"index.html":{}}}],["implements",{"_index":184,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implicit",{"_index":2514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implied",{"_index":2341,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["import('../views/about.vue",{"_index":2544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('../views/home.vue",{"_index":2543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import.meta.env.vite_base_url",{"_index":2473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imported",{"_index":1054,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":71,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":2061,"title":{},"body":{"index.html":{}}}],["include",{"_index":1048,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":1060,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2317,"title":{},"body":{"license.html":{}}}],["increment",{"_index":2552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":91,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1539,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":655,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/OauthService.html":{},"index.html":{}}}],["informations",{"_index":2261,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":280,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":253,"title":{},"body":{"controllers/AppController.html":{},"controllers/HealthController.html":{}}}],["infrastructure/auth/guards",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/oauth/oauth.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/prisma/prisma.module",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":807,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["init",{"_index":2197,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":1857,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":499,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":76,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputs",{"_index":2139,"title":{},"body":{"index.html":{}}}],["inspect",{"_index":2143,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":1059,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2246,"title":{},"body":{"index.html":{}}}],["install",{"_index":2195,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2193,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2111,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":219,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["int.pipe.ts",{"_index":1337,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1342,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2211,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2169,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2141,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":821,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":822,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":265,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1561,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["interface",{"_index":1042,"title":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interface/provider",{"_index":1312,"title":{},"body":{"injectables/OauthService.html":{}}}],["interfaces",{"_index":896,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":52,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["internal_server_error",{"_index":2457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":1602,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["ipublicuser",{"_index":154,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":766,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isarray",{"_index":589,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray()@isnotempty",{"_index":583,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["isboolean",{"_index":1366,"title":{},"body":{"classes/PostEntity.html":{}}}],["isboolean()@isnotempty",{"_index":1360,"title":{},"body":{"classes/PostEntity.html":{}}}],["isdate",{"_index":1605,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":767,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isglobal",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":895,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":590,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isjson()@isnotempty",{"_index":585,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":2034,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1347,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":591,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1700,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":1692,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isstring",{"_index":578,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1696,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnumber",{"_index":1367,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isnumber()@isnotempty",{"_index":1362,"title":{},"body":{"classes/PostEntity.html":{}}}],["isobject",{"_index":592,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isoptional",{"_index":1334,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":367,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":593,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":580,"title":{},"body":{"classes/CommentEntity.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":1325,"title":{},"body":{"classes/PaginationDto.html":{}}}],["istyping",{"_index":1167,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":1043,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item.id",{"_index":1235,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item.text",{"_index":1237,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item1item2",{"_index":2072,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":912,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":914,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":915,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":916,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":917,"title":{},"body":{"controllers/FileController.html":{}}}],["items",{"_index":1328,"title":{},"body":{"classes/PaginationDto.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecomment",{"_index":1439,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatecover",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatepost",{"_index":1434,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatereaction",{"_index":1435,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["java",{"_index":2277,"title":{},"body":{"index.html":{}}}],["john",{"_index":1215,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/OauthService.html":{}}}],["join",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["joinconversation",{"_index":1145,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["joinconversation(conversationid",{"_index":1160,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["jpeg|jpg|gif|png",{"_index":2032,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["json.stringify",{"_index":1290,"title":{},"body":{"controllers/OauthController.html":{}}}],["json.stringify(exception.getresponse",{"_index":220,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":387,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":390,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":489,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":492,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["keywords",{"_index":2383,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2340,"title":{},"body":{"license.html":{}}}],["large",{"_index":2466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":1004,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["latest",{"_index":2250,"title":{},"body":{"index.html":{}}}],["league",{"_index":2282,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2270,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2266,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2284,"title":{},"body":{"index.html":{}}}],["length",{"_index":768,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(3",{"_index":774,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":1713,"title":{},"body":{"classes/UserEntity.html":{}}}],["letter",{"_index":1707,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":2354,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2351,"title":{},"body":{"license.html":{}}}],["library",{"_index":2102,"title":{},"body":{"index.html":{}}}],["license",{"_index":2294,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2233,"title":{},"body":{"index.html":{}}}],["life",{"_index":2057,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1323,"title":{},"body":{"classes/PaginationDto.html":{}}}],["limitation",{"_index":2318,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2342,"title":{},"body":{"license.html":{}}}],["linter",{"_index":2174,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":2172,"title":{},"body":{"index.html":{}}}],["list",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["list.authorid",{"_index":1501,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":731,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list['creator",{"_index":729,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter((admin",{"_index":733,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["literal",{"_index":2412,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":1052,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2210,"title":{},"body":{"index.html":{}}}],["log",{"_index":1098,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":1108,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":194,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":2021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":1093,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":1094,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":291,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":1868,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":2020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":297,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":192,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1079,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logindto",{"_index":416,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":754,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["looking",{"_index":2289,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2135,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":2055,"title":{},"body":{"index.html":{}}}],["male",{"_index":1594,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["many",{"_index":50,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":1629,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marital_status",{"_index":1988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maritalstatus",{"_index":1989,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["marriagestatus",{"_index":1562,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["married",{"_index":1973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["master",{"_index":2269,"title":{},"body":{"index.html":{}}}],["match",{"_index":1975,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["matchemail",{"_index":1805,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["matchpassword",{"_index":1807,"title":{},"body":{"injectables/UsersService.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1217,"title":{},"body":{"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1622,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1625,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxcount",{"_index":913,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":769,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1616,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(121",{"_index":779,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["maxlength(151",{"_index":1623,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":777,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["maxlength(46",{"_index":1609,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["media",{"_index":2469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1220,"title":{},"body":{"injectables/MessagesService.html":{}}}],["member",{"_index":669,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["members",{"_index":600,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["members[clientid",{"_index":1226,"title":{},"body":{"injectables/MessagesService.html":{}}}],["memory",{"_index":1024,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1021,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":2344,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2321,"title":{},"body":{"license.html":{}}}],["message",{"_index":218,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["message.dto",{"_index":1668,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":787,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:5",{"_index":789,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":790,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":791,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1665,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.ts",{"_index":1858,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["message['conversationid",{"_index":1240,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message['messageid",{"_index":1241,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagebody",{"_index":1176,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1184,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1192,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1185,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messages",{"_index":1214,"title":{},"body":{"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1204,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.push(message",{"_index":1231,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages.service",{"_index":1179,"title":{},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1141,"title":{"classes/MessagesGateway.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":266,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1150,"title":{"injectables/MessagesService.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2260,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1340,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1817,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["method_not_allowed",{"_index":2461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodkey",{"_index":1076,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["middleware",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2203,"title":{},"body":{"index.html":{}}}],["min",{"_index":1606,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["min(0",{"_index":1624,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(17",{"_index":1621,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minlength",{"_index":770,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(2",{"_index":775,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":1715,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":1947,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2232,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":2215,"title":{},"body":{"index.html":{}}}],["models",{"_index":1058,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2320,"title":{},"body":{"license.html":{}}}],["module",{"_index":56,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":58,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2241,"title":{},"body":{"index.html":{}}}],["ms",{"_index":2028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":2122,"title":{},"body":{"index.html":{}}}],["multi",{"_index":871,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":891,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":2022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multipart/form",{"_index":941,"title":{},"body":{"classes/FileService.html":{}}}],["music",{"_index":1612,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mustermann",{"_index":1218,"title":{},"body":{"injectables/MessagesService.html":{}}}],["name",{"_index":85,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":1005,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":1003,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["nest",{"_index":2083,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":827,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":2384,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":208,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":490,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1666,"title":{},"body":{"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":358,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":886,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1178,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":846,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":2047,"title":{},"body":{"index.html":{}}}],["never",{"_index":1966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["new",{"_index":229,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/FileService.html":{},"injectables/GithubStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":1803,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":715,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":1804,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":1672,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["newprofile",{"_index":1801,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":823,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1630,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(timeout(1000",{"_index":1657,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["nextfunction",{"_index":843,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2301,"title":{},"body":{"license.html":{},"properties.html":{}}}],["nice",{"_index":1219,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node",{"_index":2530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.js",{"_index":2118,"title":{},"body":{"index.html":{}}}],["nodeexternals",{"_index":1898,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":2076,"title":{},"body":{"index.html":{}}}],["non",{"_index":1982,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["non_religions",{"_index":1981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":2347,"title":{},"body":{"license.html":{}}}],["not_acceptable",{"_index":2462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_author",{"_index":2451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_creator",{"_index":2447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":2446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notacceptableexception",{"_index":1785,"title":{},"body":{"injectables/UsersService.html":{}}}],["notacceptableexception(auth_error.password_not_match",{"_index":1808,"title":{},"body":{"injectables/UsersService.html":{}}}],["notedev",{"_index":2265,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":847,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":850,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["notfoundexception(post_error.empty",{"_index":1497,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(post_error.not_found",{"_index":1500,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(user_error.not_found",{"_index":1496,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2335,"title":{},"body":{"license.html":{}}}],["now",{"_index":1132,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1136,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2194,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2198,"title":{},"body":{"index.html":{}}}],["ntg",{"_index":1320,"title":{},"body":{"injectables/OauthService.html":{}}}],["null",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/imageValidator.html":{}}}],["nullable",{"_index":609,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{}}}],["number",{"_index":582,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1790,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1789,"title":{},"body":{"injectables/UsersService.html":{}}}],["oauth",{"_index":1246,"title":{},"body":{"controllers/OauthController.html":{},"index.html":{}}}],["oauth.controller",{"_index":1297,"title":{},"body":{"modules/OauthModule.html":{}}}],["oauth.service",{"_index":977,"title":{},"body":{"injectables/GithubStrategy.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{}}}],["oauth2",{"_index":2385,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":995,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["oauthcontroller",{"_index":1244,"title":{"controllers/OauthController.html":{}},"body":{"controllers/OauthController.html":{},"modules/OauthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":267,"title":{"modules/OauthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OauthModule.html":{},"modules.html":{},"overview.html":{}}}],["oauthservice",{"_index":969,"title":{"injectables/OauthService.html":{}},"body":{"injectables/GithubStrategy.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"coverage.html":{},"overview.html":{}}}],["object",{"_index":1821,"title":{},"body":{"injectables/ValidationPipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.values",{"_index":1225,"title":{},"body":{"injectables/MessagesService.html":{}}}],["observable",{"_index":826,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2310,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":2158,"title":{},"body":{"index.html":{}}}],["official",{"_index":2039,"title":{},"body":{"index.html":{},"properties.html":{}}}],["old",{"_index":1574,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["old!'})@max(101",{"_index":1573,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["oldpassword",{"_index":1671,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["one",{"_index":639,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":1535,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1536,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onuploadprogress",{"_index":923,"title":{},"body":{"classes/FileService.html":{}}}],["oop",{"_index":2275,"title":{},"body":{"index.html":{}}}],["open",{"_index":2207,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":1073,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":1049,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":2161,"title":{},"body":{"index.html":{}}}],["option",{"_index":2478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":86,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":2094,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1324,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":1792,"title":{},"body":{"injectables/UsersService.html":{}}}],["oriented",{"_index":2271,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1183,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":954,"title":{},"body":{"classes/FilesService.html":{}}}],["otherwise",{"_index":2359,"title":{},"body":{"license.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2367,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p8ysbsesj1g23uspzznnz1elpkykzlrnel2sv1c8sbmzc6wkpyilnzvyb2i7lsi5qisqm2ra608q1uwi3nqla6xzmt_mbgacgykatasatasfqe65dr8salwp_aaxzkflweuahgpga0163",{"_index":1321,"title":{},"body":{"injectables/OauthService.html":{}}}],["package",{"_index":1901,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1326,"title":{},"body":{"classes/PaginationDto.html":{},"index.html":{}}}],["pagecurrent",{"_index":1797,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":1794,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":1796,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":113,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('conversationid",{"_index":690,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":1757,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":683,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('postid",{"_index":1449,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["param('useridorusername",{"_index":1754,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":84,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":2123,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1346,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1335,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":1922,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1426,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":2120,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":813,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createconversationdto",{"_index":814,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2346,"title":{},"body":{"license.html":{}}}],["parttern",{"_index":1877,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":386,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["passportstrategy",{"_index":383,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":389,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":397,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passthrough",{"_index":1285,"title":{},"body":{"controllers/OauthController.html":{}}}],["password",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1726,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":1697,"title":{},"body":{"classes/UserEntity.html":{}}}],["password123'})@length(8",{"_index":1701,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_not_match",{"_index":2445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":2104,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":771,"title":{"classes/passwordValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":692,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":643,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":689,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":663,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":694,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":667,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":685,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":659,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":1759,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":1744,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1451,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1424,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":2004,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["payload",{"_index":382,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["payload_too_large",{"_index":2465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pending",{"_index":1976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":1329,"title":{},"body":{"classes/PaginationDto.html":{}}}],["perform",{"_index":2108,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2304,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2328,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2309,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2329,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1563,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1608,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["photos",{"_index":1000,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/OauthService.html":{}}}],["photos[0].value",{"_index":1007,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picktype",{"_index":737,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/LoginDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(commententity",{"_index":739,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(postentity",{"_index":798,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":1679,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(userentity",{"_index":1140,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["picture",{"_index":1006,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pipe",{"_index":832,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["pipe(tap",{"_index":1134,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":2170,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1344,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":2110,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":1819,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1822,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":2048,"title":{},"body":{"index.html":{}}}],["playground",{"_index":2176,"title":{},"body":{"index.html":{}}}],["please",{"_index":2240,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":2534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugins",{"_index":2075,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2338,"title":{},"body":{"license.html":{}}}],["post",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiokresponse({description",{"_index":1395,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('avatar",{"_index":902,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":859,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1462,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1383,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":905,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":865,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":911,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":870,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":908,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":878,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1444,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1405,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1456,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1415,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1389,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":629,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":795,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:6",{"_index":818,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post_error",{"_index":1487,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postentity",{"_index":796,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2187,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1547,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":574,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2184,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1370,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":1473,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1428,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1368,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":268,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1427,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":2058,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2280,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":1095,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":1865,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":1944,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":2041,"title":{},"body":{"index.html":{}}}],["primary",{"_index":1967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["print",{"_index":2134,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":1935,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1531,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1544,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/prisma.module",{"_index":701,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["prisma/prisma.service",{"_index":87,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["prisma:generate",{"_index":2202,"title":{},"body":{"index.html":{}}}],["prisma:migrate",{"_index":2204,"title":{},"body":{"index.html":{}}}],["prisma:pull",{"_index":2201,"title":{},"body":{"index.html":{}}}],["prisma:push",{"_index":2206,"title":{},"body":{"index.html":{}}}],["prisma:studiorunning",{"_index":2209,"title":{},"body":{"index.html":{}}}],["prisma@latest",{"_index":2196,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1533,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":269,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":81,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":187,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/LoggerService.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":2166,"title":{},"body":{"index.html":{}}}],["process.env.app_secret",{"_index":394,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["process.env.database_url",{"_index":1548,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.github_callback_url",{"_index":984,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["process.env.github_client_id",{"_index":980,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["process.env.github_secret",{"_index":982,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["process.env.google_callback_url",{"_index":998,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_client_id",{"_index":996,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":997,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.white_list",{"_index":2481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2217,"title":{},"body":{"index.html":{}}}],["profile",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profileentity",{"_index":1553,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["profileentity:101",{"_index":1681,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:111",{"_index":1683,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:121",{"_index":1687,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:35",{"_index":1686,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:43",{"_index":1682,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:51",{"_index":1685,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:58",{"_index":1689,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:65",{"_index":1688,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:75",{"_index":1680,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:83",{"_index":1690,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:88",{"_index":1684,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["programming",{"_index":2062,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2249,"title":{},"body":{"index.html":{}}}],["project",{"_index":2151,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":573,"title":{"properties.html":{}},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["property",{"_index":1693,"title":{},"body":{"classes/UserEntity.html":{}}}],["provide",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":1305,"title":{},"body":{"injectables/OauthService.html":{},"miscellaneous/functions.html":{}}}],["providerid",{"_index":1314,"title":{},"body":{"injectables/OauthService.html":{}}}],["providers",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1401,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":1733,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":1729,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get('users/all')@apioperation({summary",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":238,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":874,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":882,"title":{},"body":{"controllers/FileController.html":{}}}],["public_profile",{"_index":986,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["publish",{"_index":2322,"title":{},"body":{"license.html":{}}}],["published",{"_index":1353,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["pull",{"_index":2220,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":2045,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposeid",{"_index":1991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["put",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1464,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1420,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":1760,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":1739,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":1761,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":1741,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":131,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["query",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["quickly",{"_index":2165,"title":{},"body":{"index.html":{}}}],["randomint",{"_index":1873,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomint(min",{"_index":2024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rapidy",{"_index":2182,"title":{},"body":{"index.html":{}}}],["reach",{"_index":2292,"title":{},"body":{"index.html":{}}}],["react",{"_index":1416,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1517,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":2070,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1379,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1457,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1413,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":575,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1414,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1354,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":2132,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["readiness",{"_index":1012,"title":{},"body":{"controllers/HealthController.html":{}}}],["readonly",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/OauthController.html":{}}}],["recompile",{"_index":2154,"title":{},"body":{"index.html":{}}}],["references",{"_index":2177,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1936,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1196,"title":{},"body":{"classes/MessagesGateway.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{}}}],["refreshtoken",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["religion",{"_index":1983,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["reload",{"_index":2153,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1146,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["remove(@messagebody",{"_index":1199,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["remove(message",{"_index":1163,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":2136,"title":{},"body":{"index.html":{}}}],["replace('bearer",{"_index":1651,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["replies",{"_index":576,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":2086,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":845,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.params.userid",{"_index":848,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["req.user",{"_index":1289,"title":{},"body":{"controllers/OauthController.html":{},"injectables/OauthService.html":{}}}],["req.user['data",{"_index":1286,"title":{},"body":{"controllers/OauthController.html":{}}}],["request",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":233,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1639,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_timeout",{"_index":2464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod",{"_index":1770,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":51,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["require('run",{"_index":2532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('webpack",{"_index":2529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":615,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{}}}],["requiredroles",{"_index":1636,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":842,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":205,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"controllers/OauthController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["response.status(status).json",{"_index":1041,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":234,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":223,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responses_message",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responses_message.create_user",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["responses_message.delete_comment",{"_index":1526,"title":{},"body":{"injectables/PostsService.html":{}}}],["responses_message.delete_user",{"_index":1810,"title":{},"body":{"injectables/UsersService.html":{}}}],["rest",{"_index":2496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2316,"title":{},"body":{"license.html":{}}}],["result",{"_index":2140,"title":{},"body":{"index.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["return",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GithubStrategy.html":{},"controllers/HealthController.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2319,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1938,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roledecorator",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(role.admin",{"_index":54,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roles",{"_index":2186,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["roles.enum",{"_index":1635,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":302,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":1053,"title":{"routes.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["rt",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":440,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":483,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2200,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":830,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1128,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":1863,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["same_password",{"_index":2443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sample_image",{"_index":2069,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":2080,"title":{},"body":{"index.html":{}}}],["scale",{"_index":2101,"title":{},"body":{"index.html":{}}}],["schema",{"_index":2090,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":985,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1117,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scopes",{"_index":2517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":2533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secondary",{"_index":1968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secret",{"_index":494,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":392,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":2127,"title":{},"body":{"index.html":{}}}],["see",{"_index":2073,"title":{},"body":{"index.html":{}}}],["select",{"_index":724,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2326,"title":{},"body":{"license.html":{}}}],["senderid",{"_index":788,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["serialize",{"_index":2113,"title":{},"body":{"index.html":{}}}],["serve",{"_index":2148,"title":{},"body":{"index.html":{}}}],["server",{"_index":53,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/HealthController.html":{},"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servestaticmodule",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":1925,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":1064,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setcontact",{"_index":2499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":1066,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setmetadata('ispublic",{"_index":2536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":1099,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1110,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setting",{"_index":2129,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1855,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["setup(app",{"_index":2025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.6.0",{"_index":2504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2336,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":2050,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":2255,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2252,"title":{},"body":{"index.html":{}}}],["short",{"_index":751,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["side",{"_index":2081,"title":{},"body":{"index.html":{}}}],["signed",{"_index":2125,"title":{},"body":{"index.html":{}}}],["signin",{"_index":2066,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":496,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":2067,"title":{},"body":{"index.html":{}}}],["signup",{"_index":2065,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":421,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocaldto",{"_index":2403,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["single",{"_index":1611,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1599,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["singlefielddecorator",{"_index":890,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":903,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":906,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":2026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":958,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":2060,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1788,"title":{},"body":{"injectables/UsersService.html":{}}}],["snake",{"_index":2273,"title":{},"body":{"index.html":{}}}],["social",{"_index":2190,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1154,"title":{},"body":{"classes/MessagesGateway.html":{},"properties.html":{}}}],["socket.io",{"_index":1181,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2312,"title":{},"body":{"license.html":{}}}],["sometime",{"_index":1964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sometimes",{"_index":1963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubGuard.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"modules/OauthModule.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":2149,"title":{},"body":{"index.html":{}}}],["special",{"_index":1708,"title":{},"body":{"classes/UserEntity.html":{}}}],["specification",{"_index":1061,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2236,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1613,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":2425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":2007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../cors.config.ts",{"_index":2424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":2016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../enum.ts",{"_index":1950,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../fullname.validator.ts",{"_index":2434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.validator.ts",{"_index":2433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":2011,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":2010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2008,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../multi",{"_index":2012,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../password.validator.ts",{"_index":2435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":2013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../repl.ts",{"_index":2009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":2439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../setup.config.ts",{"_index":2014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../single",{"_index":2015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":236,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":249,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":270,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:65",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":342,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":343,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":344,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/common/pagination.dto",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/common/pagination.dto.ts",{"_index":1322,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/core/common/pagination.dto.ts:13",{"_index":1327,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/pagination.dto.ts:23",{"_index":1330,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/pagination.dto.ts:33",{"_index":1333,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/configs/cors.config.ts",{"_index":1849,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":1044,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/setup.config.ts",{"_index":1854,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/configs/swagger.config.ts",{"_index":1856,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants/enum.ts",{"_index":1962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":183,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":193,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":199,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:26",{"_index":203,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:38",{"_index":206,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":1038,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":1039,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers/age.ts",{"_index":1860,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":1862,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/exception.interceptor.ts",{"_index":820,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["src/core/interceptors/exception.interceptor.ts:13",{"_index":825,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":1077,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":1080,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1125,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1126,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1655,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1656,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":1082,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1627,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1658,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":1864,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":1088,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":1090,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":1866,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":1096,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1109,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1107,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1115,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1103,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1113,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1116,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1111,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":837,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/logger",{"_index":1083,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1336,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":1813,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":1818,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":1816,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":1869,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.enum.ts",{"_index":1992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1632,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:6",{"_index":1633,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:9",{"_index":1634,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/utils/delay.ts",{"_index":1870,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random.ts",{"_index":1872,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":773,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":1874,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":2000,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":1997,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":1875,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":2031,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":2029,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":1878,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2372,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2371,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":1879,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2378,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2377,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":1880,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2418,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2417,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/health.controller.ts",{"_index":1010,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:25",{"_index":1016,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/infrastructure/admin/admin",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":83,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:111",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:71",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:80",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:89",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:99",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1772,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":484,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:111",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:123",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:143",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:20",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:28",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:54",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:66",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:91",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1746,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":1881,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":1884,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto/request",{"_index":1747,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":1669,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1137,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":1653,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":349,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:12",{"_index":355,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:6",{"_index":352,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1644,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:3",{"_index":1645,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":373,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:19",{"_index":381,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:8",{"_index":377,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1646,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:21",{"_index":1649,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:8",{"_index":1647,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":617,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:107",{"_index":656,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:122",{"_index":660,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:137",{"_index":640,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:152",{"_index":664,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:171",{"_index":645,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:190",{"_index":670,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:82",{"_index":634,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:94",{"_index":651,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":699,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":702,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:104",{"_index":705,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:121",{"_index":710,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:136",{"_index":706,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:169",{"_index":711,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:17",{"_index":703,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:20",{"_index":704,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:35",{"_index":707,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:63",{"_index":708,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:89",{"_index":709,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":740,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":803,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":961,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":810,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":596,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:11",{"_index":610,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:14",{"_index":604,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:17",{"_index":606,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":614,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:23",{"_index":612,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:26",{"_index":607,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:29",{"_index":603,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:5",{"_index":611,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:8",{"_index":613,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":1886,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":1888,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":1889,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":852,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:115",{"_index":875,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:73",{"_index":863,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:84",{"_index":868,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:95",{"_index":883,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":947,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":949,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":951,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":953,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":952,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":950,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/create",{"_index":786,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/update",{"_index":1664,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1142,"title":{},"body":{"classes/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:15",{"_index":1151,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:19",{"_index":1162,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1159,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:37",{"_index":1156,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:52",{"_index":1169,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:66",{"_index":1173,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:73",{"_index":1165,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1203,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1205,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:32",{"_index":1211,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:42",{"_index":1208,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:47",{"_index":1210,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:52",{"_index":1207,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:68",{"_index":1213,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1221,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:81",{"_index":1212,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/oauth/guards/github.guard.ts",{"_index":964,"title":{},"body":{"injectables/GithubGuard.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts",{"_index":1245,"title":{},"body":{"controllers/OauthController.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:69",{"_index":1262,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:84",{"_index":1267,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:91",{"_index":1252,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.controller.ts:97",{"_index":1255,"title":{},"body":{"controllers/OauthController.html":{}}}],["src/infrastructure/oauth/oauth.module.ts",{"_index":1296,"title":{},"body":{"modules/OauthModule.html":{}}}],["src/infrastructure/oauth/oauth.service.ts",{"_index":1300,"title":{},"body":{"injectables/OauthService.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:17",{"_index":1309,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:28",{"_index":1307,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/oauth.service.ts:6",{"_index":1311,"title":{},"body":{"injectables/OauthService.html":{}}}],["src/infrastructure/oauth/strategies/github.strategy.ts",{"_index":967,"title":{},"body":{"injectables/GithubStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/github.strategy.ts:10",{"_index":970,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["src/infrastructure/oauth/strategies/github.strategy.ts:20",{"_index":973,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts",{"_index":989,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:19",{"_index":993,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/oauth/strategies/google.strategy.ts:9",{"_index":990,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/infrastructure/posts/dto/comment/request/create",{"_index":735,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/delete",{"_index":802,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/update",{"_index":1659,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":794,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":817,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1626,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":572,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:12",{"_index":579,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":587,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:20",{"_index":588,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:24",{"_index":581,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:28",{"_index":584,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:32",{"_index":586,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":797,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1350,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:12",{"_index":1364,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:16",{"_index":1356,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:20",{"_index":1358,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:24",{"_index":1361,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:28",{"_index":1355,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:32",{"_index":1359,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:36",{"_index":1357,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:40",{"_index":1363,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:44",{"_index":1365,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1369,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:113",{"_index":1406,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:126",{"_index":1409,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:138",{"_index":1412,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:150",{"_index":1425,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:160",{"_index":1399,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:173",{"_index":1417,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:183",{"_index":1403,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:196",{"_index":1387,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:209",{"_index":1421,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:221",{"_index":1396,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:97",{"_index":1392,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1472,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1474,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:129",{"_index":1483,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:147",{"_index":1486,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:178",{"_index":1479,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:204",{"_index":1484,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:232",{"_index":1480,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:243",{"_index":1476,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:265",{"_index":1485,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:280",{"_index":1478,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:38",{"_index":1475,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:41",{"_index":1477,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:75",{"_index":1481,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:93",{"_index":1482,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/prisma/prisma.module",{"_index":486,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/infrastructure/prisma/prisma.module.ts",{"_index":1530,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/infrastructure/prisma/prisma.service",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts",{"_index":1532,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:13",{"_index":1537,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:25",{"_index":1543,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:29",{"_index":1542,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:33",{"_index":1540,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/users/dto/request/update",{"_index":1676,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1554,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:101",{"_index":1575,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:111",{"_index":1580,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:121",{"_index":1597,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:35",{"_index":1593,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:43",{"_index":1577,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:51",{"_index":1586,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:58",{"_index":1600,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:65",{"_index":1598,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:75",{"_index":1569,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:83",{"_index":1603,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:88",{"_index":1585,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/user.entity",{"_index":1670,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/users/entities/user.entity.ts",{"_index":1691,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:22",{"_index":1695,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:41",{"_index":1710,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:50",{"_index":1699,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:59",{"_index":1698,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:78",{"_index":1712,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1719,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:106",{"_index":1738,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:117",{"_index":1745,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:131",{"_index":1740,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:145",{"_index":1742,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:157",{"_index":1727,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:80",{"_index":1730,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:93",{"_index":1736,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1768,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":1769,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1774,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:114",{"_index":1784,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:134",{"_index":1782,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:163",{"_index":1783,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:192",{"_index":1776,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:225",{"_index":1777,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:32",{"_index":1775,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:35",{"_index":1778,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:60",{"_index":1779,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:80",{"_index":1780,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:95",{"_index":1781,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":1893,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/repl.ts",{"_index":1895,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":2213,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2216,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":2218,"title":{},"body":{"index.html":{}}}],["started",{"_index":2037,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":2085,"title":{},"body":{"index.html":{}}}],["state",{"_index":2547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.counter",{"_index":2550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1830,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":189,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":256,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["status_message",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["status_message.success",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":224,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":2243,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":488,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/google.strategy",{"_index":1298,"title":{},"body":{"modules/OauthModule.html":{}}}],["strategy",{"_index":385,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":2074,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2208,"title":{},"body":{"index.html":{}}}],["style",{"_index":2253,"title":{},"body":{"index.html":{}}}],["sub",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2331,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2324,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1175,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1155,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1158,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('joinconversation",{"_index":1161,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1164,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1168,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('updatemessage",{"_index":1172,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["substantial",{"_index":2337,"title":{},"body":{"license.html":{}}}],["success",{"_index":107,"title":{},"body":{"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["successfuly",{"_index":1391,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":361,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":371,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1123,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1121,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1120,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1124,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1122,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":2126,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2364,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1051,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2205,"title":{},"body":{"index.html":{}}}],["system",{"_index":1026,"title":{},"body":{"controllers/HealthController.html":{}}}],["system'})@healthcheck",{"_index":1015,"title":{},"body":{"controllers/HealthController.html":{}}}],["system_error",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["system_error.conflict",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.forbidden",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.internal_server_error",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.method_not_allowed",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_acceptable",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_found",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.payload_too_large",{"_index":898,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["system_error.request_timeout",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.too_many_requests",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unauthorized",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unsupported_media_type",{"_index":899,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["t",{"_index":1628,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1900,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1899,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":2091,"title":{},"body":{"index.html":{}}}],["take",{"_index":1791,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":2137,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1127,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["templates",{"_index":2191,"title":{},"body":{"index.html":{}}}],["teneno",{"_index":239,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":2147,"title":{},"body":{"index.html":{}}}],["terminusmodule",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":2228,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2231,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2230,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2227,"title":{},"body":{"index.html":{}}}],["text",{"_index":577,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateMessageDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["thanks",{"_index":2235,"title":{},"body":{"index.html":{}}}],["thinking",{"_index":2063,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":2052,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1549,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1550,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1551,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":257,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(user",{"_index":1292,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.authservice.signuplocal(dto",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(dto",{"_index":478,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('app_secret",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversations",{"_index":1229,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.find((element",{"_index":1222,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.foreach((element",{"_index":1232,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversationsservice",{"_index":677,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":679,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":688,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":693,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(dto",{"_index":681,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":684,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":686,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":691,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":695,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.counter",{"_index":2553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.disk.checkstorage('storage",{"_index":1034,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":904,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":907,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":918,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":910,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findallmessages(message['conversationid",{"_index":1243,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.findallmessages(updatemessagedto['conversationid",{"_index":1239,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmember(conversationid",{"_index":1227,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1499,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":1802,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens(newuser.id",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.githubauthredirect.name",{"_index":1288,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.handlemessage(exception",{"_index":216,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.health.check",{"_index":1027,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.signasync",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":222,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":348,"title":{},"body":{"injectables/AppService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":1031,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('mem_rss",{"_index":1028,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagesservice.createmessage",{"_index":1190,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.findallmessages(conversationid",{"_index":1189,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.getmember",{"_index":1193,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.joinconversation",{"_index":1186,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.remove(message",{"_index":1200,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.updatemessage(updatemessagedto",{"_index":1197,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.oauthservice.findorcreate(id",{"_index":987,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["this.oauthservice.googlelogin(req",{"_index":1281,"title":{},"body":{"controllers/OauthController.html":{}}}],["this.postsservice.addcomment(userid",{"_index":1463,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(userid",{"_index":1443,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1468,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":1455,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1461,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(userid",{"_index":1445,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1447,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1450,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1458,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1465,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1453,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1118,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1521,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1525,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1523,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":716,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":730,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":722,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":728,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.update",{"_index":726,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.post.create",{"_index":1488,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1509,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1494,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1498,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1504,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1518,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1512,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1787,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":1811,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":1809,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":1800,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":368,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":1637,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server.emit('message",{"_index":1191,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.server.emit('refresh",{"_index":1198,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.tovalidate(metatype",{"_index":1820,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1752,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":1763,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":181,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":1755,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":1758,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["thresholdpercent",{"_index":1035,"title":{},"body":{"controllers/HealthController.html":{}}}],["through",{"_index":1065,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/GithubStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":829,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["thuong",{"_index":2302,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2298,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2221,"title":{},"body":{"index.html":{}}}],["time",{"_index":2157,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["timeoutinterceptor",{"_index":1654,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":228,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":2178,"title":{},"body":{"index.html":{}}}],["title",{"_index":799,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":2054,"title":{},"body":{"index.html":{}}}],["token",{"_index":364,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["too_many_requests",{"_index":2460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":2160,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2358,"title":{},"body":{"license.html":{}}}],["total",{"_index":1786,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2244,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1814,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1815,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1106,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trading",{"_index":2251,"title":{},"body":{"index.html":{}}}],["training",{"_index":2279,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2300,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1338,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1339,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1604,"title":{},"body":{"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":1081,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["travel",{"_index":1614,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":1652,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"controllers/OauthController.html":{},"classes/PaginationDto.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty()@length(3",{"_index":749,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["truong",{"_index":2303,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["tslint",{"_index":1942,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":2199,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2272,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2259,"title":{},"body":{"index.html":{}}}],["type",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2389,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1667,"title":{},"body":{"classes/UpdateMessageDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":1826,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":1913,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2084,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1147,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["typing(conversationid",{"_index":1166,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["ui/ux",{"_index":2281,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":976,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["undefined",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"controllers/OauthController.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apicreatedresponse({description",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["undefined})@apicreatedresponse({type",{"_index":632,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["undefined})@apioperation({summary",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@arrayfielddecorator('files",{"_index":880,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":744,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["undefined})@multifielddecorator(['undefined",{"_index":873,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/avatars",{"_index":862,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/covers",{"_index":867,"title":{},"body":{"controllers/FileController.html":{}}}],["under",{"_index":2296,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2226,"title":{},"body":{"index.html":{}}}],["university",{"_index":1971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unknown",{"_index":635,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/GithubStrategy.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":2468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported_media_type",{"_index":2467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["update(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1380,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(dto",{"_index":1418,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1419,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":624,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":657,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":658,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updateconversationmembersdto",{"_index":2405,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updateconversationroles",{"_index":2406,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updated",{"_index":725,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":601,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":625,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":661,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":662,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updatemessage",{"_index":1148,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@messagebody",{"_index":1195,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["updatemessage(updatemessagedto",{"_index":1170,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":1171,"title":{"classes/UpdateMessageDto.html":{}},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto['conversationid",{"_index":1233,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['messageid",{"_index":1236,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['text",{"_index":1238,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updateoneconversationbyiddto",{"_index":2407,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updatepassword",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":429,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1381,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1452,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1422,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1423,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostsdto",{"_index":2408,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updaterolesconversation",{"_index":626,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":665,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":666,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuseravatardto",{"_index":130,"title":{"classes/UpdateUserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusercoverdto",{"_index":136,"title":{"classes/UpdateUserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":125,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusersavatar",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1723,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1743,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":860,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":853,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadavatar(data",{"_index":921,"title":{},"body":{"classes/FileService.html":{}}}],["uploadavatar(file",{"_index":857,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatardto",{"_index":922,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadcover",{"_index":854,"title":{},"body":{"controllers/FileController.html":{},"classes/FileService.html":{},"classes/FilesService.html":{}}}],["uploadcover(data",{"_index":925,"title":{},"body":{"classes/FileService.html":{}}}],["uploadcover(file",{"_index":864,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcoverdto",{"_index":926,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadedfile",{"_index":884,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":885,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":2023,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":855,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":869,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpost",{"_index":920,"title":{},"body":{"classes/FileService.html":{}}}],["uploadpost(data",{"_index":928,"title":{},"body":{"classes/FileService.html":{}}}],["uploadposts",{"_index":856,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":876,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadpostsdto",{"_index":929,"title":{},"body":{"classes/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":1706,"title":{},"body":{"classes/UserEntity.html":{}}}],["upsertreactpostdto",{"_index":2410,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uptest",{"_index":2225,"title":{},"body":{"index.html":{}}}],["url",{"_index":934,"title":{},"body":{"classes/FileService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{}}}],["url'})@isstring()@isnotempty",{"_index":1576,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["use",{"_index":839,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":841,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["useclass",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["usecounterstore",{"_index":1846,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":1071,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["usefactory",{"_index":493,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OauthController.html":{}}}],["useguards(authguard('google",{"_index":1275,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(githubguard",{"_index":1283,"title":{},"body":{"controllers/OauthController.html":{}}}],["useguards(rtguard",{"_index":473,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenamevalidator",{"_index":772,"title":{"classes/usenameValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"controllers/OauthController.html":{},"injectables/OauthService.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiokresponse({description",{"_index":1386,"title":{},"body":{"controllers/PostsController.html":{}}}],["user)'})@apiokresponse({description",{"_index":631,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":650,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":872,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1883,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":1771,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":838,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":840,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":844,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1643,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.includes(role",{"_index":1642,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1641,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user01",{"_index":780,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user02",{"_index":781,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user:read",{"_index":2519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user:write",{"_index":2518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_error",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":1138,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":849,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/OauthService.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":1731,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1717,"title":{},"body":{"classes/UserEntity.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1711,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":75,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:108",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:122",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:136",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:72",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:83",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:94",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.dto.ts",{"_index":1677,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["users.length",{"_index":1795,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":1748,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/request",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":157,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/entities/user.entity",{"_index":1139,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["users/users.module",{"_index":74,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["userscontroller",{"_index":1718,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":63,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":158,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usually",{"_index":1965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uuid",{"_index":713,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["v4",{"_index":712,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["val",{"_index":1345,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":374,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/CreateConversationDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(accesstoken",{"_index":971,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(fullnamevalidator",{"_index":1610,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":2030,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":1824,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1716,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":379,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1618,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":1648,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":1999,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":778,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["validation",{"_index":2109,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":1996,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":1812,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":594,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":2001,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":1993,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":1068,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"injectables/OauthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1832,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2419,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":2093,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":1100,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1112,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":2106,"title":{},"body":{"index.html":{}}}],["verifycallback",{"_index":992,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["versa",{"_index":2112,"title":{},"body":{"index.html":{}}}],["version",{"_index":2381,"title":{},"body":{"properties.html":{}}}],["view",{"_index":2498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":201,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":2264,"title":{},"body":{"index.html":{}}}],["wait",{"_index":1871,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":2027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":1101,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1114,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":2455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":2343,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2339,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2214,"title":{},"body":{"index.html":{}}}],["web",{"_index":2267,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":2046,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":1896,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["websocketgateway",{"_index":1174,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["websocketserver",{"_index":1152,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["whether",{"_index":2355,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":1851,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":2315,"title":{},"body":{"license.html":{}}}],["world",{"_index":246,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{}}}],["writtenposts",{"_index":1495,"title":{},"body":{"injectables/PostsService.html":{}}}],["x",{"_index":2171,"title":{},"body":{"index.html":{}}}],["years",{"_index":1572,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["yes",{"_index":1104,"title":{},"body":{"injectables/LoggerService.html":{}}}],["you'd",{"_index":2239,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2376,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2373,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2374,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":2002,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2375,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/OauthModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ROLE, RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@RoleDecorator(ROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n  constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { PaginationDto } from 'src/core/common/pagination.dto';\nimport { ROLE, RoleDecorator } from 'src/core/roles';\nimport { Public } from '../auth/decorators';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from '../users/dto/request';\nimport {\n  IAllUsers,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@RoleDecorator(ROLE.ADMIN)\n@Controller('admin')\nexport class AdminUsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Get('users/all')\n  @ApiOperation({ summary: 'Get list all public users' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getAllUsers(@Query() dto: PaginationDto): Promise {\n    return this.usersService.getAllUsers(dto);\n  }\n\n  @Public()\n  @Get('users/:userId')\n  @ApiOperation({\n    summary: 'Get user profile by user-id',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getUserProfile(\n    @Param('userId') userId: string,\n  ): Promise {\n    return this.usersService.getUserProfile(userId);\n  }\n\n  @Patch('users/profile/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async update(\n    @Param('userId') userId: string,\n    @Body() dto: UpdateUserProfileDto,\n  ): Promise {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('users/avatar/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersAvatar(\n    @Param() userId: string,\n    @Body() dto: UpdateUserAvatarDto,\n  ): Promise {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('users/cover/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersCover(\n    @Param() userId: string,\n    @Body() dto: UpdateUserCoverDto,\n  ): Promise {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('users/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user by user-id' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deleteUserById(@Param('userId') userId: string): Promise {\n    return this.usersService.deleteUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(request, response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    request: Request,\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        timestamp: new Date().toISOString(),\n        message: exception.stack,\n        path: request.url,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: '{code: 1, data: {Hello world}, message: \"\"'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@Controller('/')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Teneno homepage' })\n  @ApiResponse({\n    status: 200,\n    description: '{code: 1, data: {Hello world}, message: \"\"',\n  })\n  @ApiResponse({ status: 404, description: 'Not found' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            OauthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './infrastructure/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\nimport { OauthModule } from './infrastructure/oauth/oauth.module';\nimport { join } from 'path';\n\n@Module({\n    imports: [\n        InterceptorModule,\n        ConfigModule.forRoot({\n            isGlobal: true,\n            // envFilePath: ['.env'],\n            // envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n        }),\n        LoggerModule.forRoot(),\n        ServeStaticModule.forRoot({\n            // rootPath: `${__dirname}/../docs`, // join(__dirname, '..', 'client'),\n            rootPath: join(__dirname, '..', 'docs'),\n            renderPath: '/',\n            // exclude: ['/api*'],\n        }),\n        PrismaModule,\n        TerminusModule,\n        AuthModule,\n        OauthModule,\n        AdminModule,\n        UsersModule,\n        FilesModule,\n        PostsModule,\n        ConversationsModule,\n        MessagesModule,\n    ],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n        {\n            provide: APP_GUARD,\n            useClass: AtGuard,\n        },\n        {\n            provide: APP_GUARD,\n            useClass: RolesGuard,\n        },\n    ],\n})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer): void {\n        consumer.apply(LoggerContextMiddleware).forRoutes('*');\n        //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n        //   .forRoutes(UsersController);\n        // .forRoutes('users');\n        // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n        // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\nexport class AppService {\n  constructor(@Logger('AppService') private logger: LoggerService) {}\n\n  getHello(): string {\n    this.logger.log('Hello World', '200');\n    return 'Hello World from Teneno!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    // if true will enter with access-token , and another hand\n    public canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride('isPublic', [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n        if (isPublic) return true;\n\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(private config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            ignoreExpiration: false,\n            passReqToCallback: false,\n        });\n    }\n\n    validate(payload: IJwtPayload): IJwtPayload {\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: undefined})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account.'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: undefined, type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { ITokens } from './dto/response';\nimport {\n  RESPONSES_MESSAGE,\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {\n    this.authService = authService;\n  }\n\n  @Public()\n  @Post('signup')\n  @ApiOperation({ summary: 'Create new user account.' })\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiCreatedResponse({\n    description: RESPONSES_MESSAGE.CREATE_USER,\n    type: SignupDto,\n  })\n  async signupLocal(@Body() dto: SignupDto): Promise {\n    return this.authService.signupLocal(dto);\n  }\n\n  @Public()\n  @Post('signin')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Login to user account' })\n  async signinLocal(@Body() dto: LoginDto): Promise {\n    return this.authService.signinLocal(dto);\n  }\n\n  @Post('logout')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Logout user account (user)' })\n  async logout(@GetCurrentUserId() userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @Post('refresh')\n  @ApiBearerAuth()\n  @UseGuards(RtGuard)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Logout account on all devices' })\n  async refreshToken(\n    @GetCurrentUserId() userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    return this.authService.refreshToken(userId, refreshToken);\n  }\n\n  @Put('password')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Update user password' })\n  async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n    return this.authService.updatePassWord(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n    imports: [\n        PrismaModule,\n        JwtModule,\n        // HttpModule,\n        // JwtModule.registerAsync({\n        //   imports: [ConfigModule],\n        //   useFactory: async (configService: ConfigService) => ({\n        //     secret: configService.get(\"APP_SECRET\"),\n        //     signOptions: { expiresIn: configService.get(\"EXPIRE_AT_TIME\") },\n        //   }),\n        //   inject: [ConfigService],\n        // })\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, AtStrategy, RtStrategy],\n    exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ConflictException,\n    ForbiddenException,\n    Inject,\n    Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport { ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { comparePassword, hashPassword } from 'src/core/helpers/hash';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport {\n    AUTH_ERROR,\n    SYSTEM_ERROR,\n    USER_ERROR,\n} from 'src/core/constants/status-message';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(ConfigService)\n        private configService: ConfigService,\n        private prismaService: PrismaService,\n        private jwtService: JwtService,\n    ) {}\n\n    async getTokens(userId: string, email: string): Promise {\n        const [at, rt] = await Promise.all([\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n                },\n            ),\n            this.jwtService.signAsync(\n                {\n                    sub: userId,\n                    email: email,\n                },\n                {\n                    secret: this.configService.get('APP_SECRET'),\n                    expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n                },\n            ),\n        ]);\n        return { accessToken: at, refreshToken: rt };\n    }\n\n    async updateRtHash(userId: string, rt: string) {\n        const hash = await hashPassword(rt);\n        await this.prismaService.user.update({\n            where: {\n                id: userId,\n            },\n            data: {\n                hashedRefreshToken: hash,\n            },\n        });\n    }\n\n    async signupLocal(dto: SignupDto): Promise {\n        const hash = await hashPassword(dto.password);\n\n        const userExist = await this.prismaService.user.findMany({\n            where: {\n                OR: [{ email: dto.email }, { username: dto.username }],\n            },\n        });\n\n        if (userExist.length > 0)\n            throw new ConflictException(USER_ERROR.DUPLICATE);\n\n        const newUser = await this.prismaService.user.create({\n            data: {\n                email: dto.email,\n                password: hash,\n                username: dto.username,\n            },\n        });\n\n        const tokens = await this.getTokens(newUser.id, newUser.email);\n        await this.updateRtHash(newUser.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async signinLocal(dto: LoginDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n        if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const passwordMatches = await comparePassword(\n            dto.password,\n            user.password,\n        );\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async logout(userId: string): Promise {\n        await this.prismaService.user.updateMany({\n            where: {\n                id: userId,\n                hashedRefreshToken: {\n                    not: null,\n                },\n            },\n            data: { hashedRefreshToken: null },\n        });\n    }\n\n    async refreshToken(userId: string, refreshToken: string): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: userId,\n            },\n        });\n        if (!user || !user.hashedRefreshToken)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const hashMatches = await comparePassword(\n            refreshToken,\n            user.hashedRefreshToken,\n        );\n        if (!hashMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n\n    async updatePassWord(dto: UpdatePasswordDto): Promise {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email: dto.email,\n            },\n        });\n\n        const passwordMatches = await comparePassword(\n            dto.oldPassword,\n            user.password,\n        );\n\n        if (!passwordMatches)\n            throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n        if (dto.newPassword === dto.oldPassword)\n            throw new ForbiddenException(AUTH_ERROR.SAME_PASSWORD);\n\n        if (passwordMatches) {\n            await this.prismaService.user.update({\n                where: { email: dto.email },\n                data: {\n                    password: await hashPassword(dto.newPassword),\n                },\n            });\n        }\n\n        const tokens = await this.getTokens(user.id, user.email);\n        await this.updateRtHash(user.id, tokens.refreshToken);\n        return tokens;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\n\nexport class CommentEntity {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  reactions: number[];\n\n  @IsJSON()\n  @IsNotEmpty()\n  replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ConversationEntity {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty({ required: false, nullable: true })\n  description: string | null;\n\n  @ApiProperty()\n  avatar: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  @ApiProperty()\n  members: string[];\n\n  @ApiProperty()\n  creator: string;\n\n  @ApiProperty()\n  admins: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\nimport { ConversationsService } from './conversations.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n  constructor(private readonly conversationsService: ConversationsService) {\n    this.conversationsService = conversationsService;\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new conversation (user)' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  @ApiCreatedResponse({\n    type: ConversationEntity,\n    description: 'The new conversation has been created.',\n  })\n  async createConversation(@Body() dto: CreateConversationDto) {\n    return await this.conversationsService.createConversation(dto);\n  }\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    isArray: true,\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllConversations(@Body() dto: GetAllConversationDto) {\n    return this.conversationsService.getAllConversations(dto);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getConversationById(\n    @Param('id') id: string,\n    @Body() dto: GetOneConversationDto,\n  ) {\n    return this.conversationsService.getConversationById(id, dto);\n  }\n\n  @Patch(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  updateConversationById(\n    @Param('id') id: string,\n    @Body() dto: UpdateConversationDto,\n  ) {\n    return this.conversationsService.updateConversationById(id, dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Delete one conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteConversationById(\n    @Param('id') id: string,\n    @Body() dto: DeleteConversationDto,\n  ) {\n    return this.conversationsService.deleteConversationById(id, dto);\n  }\n\n  @Patch(':conversationId/updateMembers')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update members list of current conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateMembersConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateMembersConversationDto,\n  ) {\n    return this.conversationsService.updateMembersConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/deleteAdmins')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Delete one admin of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteOneAdminConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: DeleteOneAdminConversationDto,\n  ) {\n    return this.conversationsService.deleteOneAdminConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/updateRoles')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Change role of any member of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateRolesConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateRolesConversationDto,\n  ) {\n    return this.conversationsService.updateRolesConversation(\n      conversationId,\n      dto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_ConversationsModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [ConversationsController],\n  providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\nimport { CONVERSATION_ERROR } from 'src/core/constants/status-message';\n\n@Injectable()\nexport class ConversationsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createConversation(dto: CreateConversationDto) {\n    const newConversation = await this.prismaService.conversation.create({\n      data: {\n        id: uuid(),\n        name: dto.name,\n        description: dto.description,\n        avatar: '',\n        members: dto.members,\n        admins: dto.admins,\n        creator: dto.creator,\n      },\n    });\n    return newConversation;\n  }\n\n  async getAllConversations(dto: GetAllConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n      },\n      select: {\n        id: true,\n        name: true,\n        avatar: true,\n      },\n    });\n    return list;\n  }\n\n  async getConversationById(id: string, dto: GetOneConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n        AND: {\n          id: id,\n        },\n      },\n    });\n    return list;\n  }\n\n  updateConversationById(id: string, dto: UpdateConversationDto) {\n    const updated = this.prismaService.conversation.update({\n      where: {\n        id: id,\n      },\n      data: {\n        name: dto.name,\n        description: dto.description,\n        avatar: dto.avatar,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteConversationById(id: string, dto: DeleteConversationDto) {\n    const list = await this.prismaService.conversation.findUnique({\n      where: {\n        id: id,\n      },\n    });\n    if (list['creator'] === dto.userId) {\n      await this.prismaService.conversation.delete({\n        where: {\n          id: id,\n        },\n      });\n      return '';\n    }\n    return false;\n  }\n\n  async updateMembersConversation(\n    conversationId: string,\n    dto: UpdateMembersConversationDto,\n  ) {\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteOneAdminConversation(\n    conversationId: string,\n    dto: DeleteOneAdminConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n\n    if (list.length === 0) {\n      return CONVERSATION_ERROR.NOT_CREATOR;\n    }\n    const updated = list[0]['admins'].filter((admin) => admin !== dto.userId);\n\n    await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: updated,\n      },\n    });\n    return updated;\n  }\n\n  async updateRolesConversation(\n    conversationId: string,\n    dto: UpdateRolesConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n    if (list.length === 0) {\n      return CONVERSATION_ERROR.NOT_CREATOR;\n    }\n\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: dto.admins,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'creator01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01', required: false, nullable: true})@IsString()@IsNotEmpty()@Length(3, 120)@MinLength(2, {message: 'Description is too short, must be at least 3 characters!'})@MaxLength(121, {message: 'Description is too long, must be at most 120 characters!'})@Validate(usenameValidator, {message: 'Description must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01'})@IsString()@IsNotEmpty()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class CreateConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Name must be not begin with number!',\n  })\n  name: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n    required: false,\n    nullable: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 120)\n  @MinLength(2, {\n    message: 'Description is too short, must be at least 3 characters!',\n  })\n  @MaxLength(121, {\n    message: 'Description is too long, must be at most 120 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Description must be not begin with number!',\n  })\n  description?: string;\n\n  @ApiProperty({\n    type: String,\n    example: ['user01', 'user02'],\n  })\n  @IsArray()\n  members: string[];\n\n  @ApiProperty({\n    type: String,\n    example: ['admin01', 'admin02'],\n  })\n  @IsArray()\n  admins: string[];\n\n  @ApiProperty({\n    type: String,\n    example: 'creator01',\n  })\n  @IsString()\n  creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels } from '@nestjs/swagger';\n\n@ApiExtraModels()\nexport class CreateMessageDto {\n  id: string;\n  senderId: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetAllConversationDto } from './get-conversation.dto';\n\nexport class DeleteConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsIntereptor.html":{"url":"injectables/ErrorsIntereptor.html","title":"injectable - ErrorsIntereptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsIntereptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/exception.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable()\nexport class ErrorsIntereptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError((err) =>\n          throwError(\n            () => new HttpException('New message', HttpStatus.BAD_GATEWAY),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n    constructor(private prismaService: PrismaService) {}\n\n    async use(req: Request, res: Response, next: NextFunction) {\n        const userId = req.params.userId;\n        const userExist = await this.prismaService.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n            },\n        });\n        if (\n            userExist === null ||\n            userExist === undefined ||\n            userExist.id === ''\n        ) {\n            throw new NotFoundException('User not found');\n        }\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UploadedFile,\n  UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiPayloadTooLargeResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n  ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\nimport {\n  ArrayFieldDecorator,\n  SingleFieldDecorator,\n  MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n  description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('files')\nexport class FileController {\n  constructor(private readonly fileService: FilesService) {}\n\n  @Post('avatar')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @SingleFieldDecorator('./public/avatars')\n  async uploadAvatar(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadAvatar(file);\n  }\n\n  @Post('cover')\n  @ApiOperation({ summary: 'Upload cover file form data (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @SingleFieldDecorator('./public/covers')\n  async uploadCover(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadCover(file);\n  }\n\n  @Post('posts')\n  @ApiOperation({ summary: 'Upload post with multi images (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ArrayFieldDecorator('files', true, 10, './public/posts')\n  async uploadPosts(\n    @UploadedFiles() files: Array,\n  ): Promise {\n    return this.fileService.uploadPosts(files);\n  }\n\n  @Post('multi')\n  @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @MultiFieldDecorator(\n    [\n      { name: 'item_1', maxCount: 1, required: true },\n      { name: 'item_2', maxCount: 1 },\n      { name: 'item_3', maxCount: 1 },\n      { name: 'item_4', maxCount: 1 },\n      { name: 'item_5', maxCount: 1 },\n    ],\n    './public/multi',\n  )\n  async uploadMulti(\n    @UploadedFiles() files: Express.Multer.File[],\n  ): Promise {\n    return this.fileService.uploadMulti(files);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileService.html":{"url":"classes/FileService.html","title":"class - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            client/src/services/file.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadAvatar\n                            \n                            \n                                uploadCover\n                            \n                            \n                                uploadPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \nuploadAvatar(data: UploadAvatarDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/src/services/file.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadCover\n                        \n                    \n                \n            \n            \n                \nuploadCover(data: UploadCoverDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/src/services/file.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadPost\n                        \n                    \n                \n            \n            \n                \nuploadPost(data: UploadPostsDto, onUploadProgress: any)\n                \n            \n\n\n            \n                \n                    Defined in client/src/services/file.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UploadPostsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    onUploadProgress\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { UploadAvatarDto, UploadCoverDto, UploadPostsDto } from '@/dto';\nimport axiosConfig from './axios.config';\n\nconst ENDPOINT = '/files';\n\nexport class FileService {\n  uploadAvatar(data: UploadAvatarDto, onUploadProgress: any) {\n    const url = `${ENDPOINT}/avatar`;\n\n    const formData = new FormData();\n    formData.append('file', data);\n\n    return axiosConfig.post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress,\n    });\n  }\n\n  uploadCover(data: UploadCoverDto, onUploadProgress: any) {\n    const url = `${ENDPOINT}/cover`;\n\n    const formData = new FormData();\n    formData.append('file', data);\n\n    return axiosConfig.post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress,\n    });\n  }\n\n  uploadPost(data: UploadPostsDto, onUploadProgress: any) {\n    const url = `${ENDPOINT}/posts`;\n\n    const formData = new FormData();\n    formData.append('files', data);\n\n    return axiosConfig.post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/get-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubGuard.html":{"url":"injectables/GithubGuard.html","title":"injectable - GithubGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/guards/github.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GithubGuard extends AuthGuard('github') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubStrategy.html":{"url":"injectables/GithubStrategy.html","title":"injectable - GithubStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/github.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oauthService: OauthService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/github.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oauthService\n                                                  \n                                                        \n                                                                        OauthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, _refreshToken: string, profile: Profile)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/github.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-github2';\nimport { config } from 'dotenv';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { OauthService } from '../oauth.service';\n\nconfig();\n\n@Injectable()\nexport class GithubStrategy extends PassportStrategy(Strategy, 'github') {\n    constructor(private oauthService: OauthService) {\n        super({\n            clientID: process.env.GITHUB_CLIENT_ID,\n            clientSecret: process.env.GITHUB_SECRET,\n            callbackURL: process.env.GITHUB_CALLBACK_URL,\n            scope: ['public_profile'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        _refreshToken: string,\n        profile: Profile,\n    ) {\n        const { id } = profile;\n        const user = await this.oauthService.findOrCreate(id, 'github');\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/oauth/strategies/google.strategy.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/strategies/google.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\nimport { Injectable } from '@nestjs/common';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n    constructor() {\n        super({\n            clientID: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: process.env.GOOGLE_CALLBACK_URL,\n            scope: ['email', 'profile'],\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: any,\n        done: VerifyCallback,\n    ): Promise {\n        const { name, emails, photos } = profile;\n        const user = {\n            email: emails[0].value,\n            firstName: name.givenName,\n            lastName: name.familyName,\n            picture: photos[0].value,\n            accessToken,\n        };\n        done(null, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                readiness\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        readiness\n                        \n                    \n                \n            \n            \n                \n                    \n                    readiness()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Health check for server system'})@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport {\n    DiskHealthIndicator,\n    HealthCheck,\n    HealthCheckResult,\n    HealthCheckService,\n    MemoryHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Health')\n@Public()\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private memory: MemoryHealthIndicator,\n        private disk: DiskHealthIndicator,\n    ) {}\n\n    @Get()\n    @ApiOperation({ summary: 'Health check for server system' })\n    @HealthCheck()\n    async readiness(): Promise {\n        return await this.health.check([\n            async () => await this.memory.checkRSS('mem_rss', 768 * 2 ** 20),\n            async () =>\n                await this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n            async () =>\n                await this.disk.checkStorage('storage', {\n                    path: '/',\n                    thresholdPercent: 0.5,\n                }),\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesGateway.html":{"url":"classes/MessagesGateway.html","title":"class - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                typing\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(conversationId: string, createMessageDto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinConversation')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(conversationId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\n\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n  @WebSocketServer() server: Server;\n  constructor(private readonly messagesService: MessagesService) {}\n\n  @SubscribeMessage('joinConversation')\n  joinConversation(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('senderId') senderId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    return this.messagesService.joinConversation(\n      conversationId,\n      senderId,\n      client.id,\n    );\n  }\n\n  @SubscribeMessage('findAllMessages')\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\n    return this.messagesService.findAllMessages(conversationId);\n  }\n\n  @SubscribeMessage('createMessage')\n  async createMessage(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody() createMessageDto: CreateMessageDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const message = await this.messagesService.createMessage(\n      conversationId,\n      createMessageDto,\n      client.id,\n    );\n    this.server.emit('message', message);\n    return message;\n  }\n\n  @SubscribeMessage('typing')\n  async typing(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('isTyping') isTyping: boolean,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const name = await this.messagesService.getMember(\n      conversationId,\n      client.id,\n    );\n\n    client.broadcast.emit('typing', { senderId: name, isTyping });\n  }\n\n  @SubscribeMessage('updateMessage')\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n\n  @SubscribeMessage('removeMessage')\n  async remove(@MessageBody() message: string) {\n    const refresh = await this.messagesService.remove(message);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                getMember\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMessage\n                        \n                    \n                \n            \n            \n                \ncreateMessage(conversationId: string, createMessageDto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: any; senderId: any; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMember\n                        \n                    \n                \n            \n            \n                \ngetMember(conversationId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class MessagesService {\n  conversations = [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ];\n\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\n    this.conversations.find((element) => element.id === conversationId).members[\n      clientId\n    ] = senderId;\n    return Object.values(\n      this.conversations.find((element) => element.id === conversationId)\n        .members,\n    );\n  }\n\n  findAllMessages(conversationId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .messages;\n  }\n\n  getMember(conversationId: string, clientId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .members[clientId];\n  }\n\n  createMessage(\n    conversationId: string,\n    createMessageDto: CreateMessageDto,\n    clientId: string,\n  ) {\n    const message = {\n      id: uuid(),\n      senderId: this.getMember(conversationId, clientId),\n      text: createMessageDto.text,\n    };\n    this.conversations\n      .find((element) => element.id === conversationId)\n      .messages.push(message);\n    return message;\n  }\n\n  updateMessage(updateMessageDto: UpdateMessageDto) {\n    this.conversations.forEach((element) => {\n      if (element.id === updateMessageDto['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === updateMessageDto['messageId']) {\n            item.text = updateMessageDto['text'];\n          }\n        });\n      }\n    });\n    return this.findAllMessages(updateMessageDto['conversationId']);\n  }\n\n  async remove(message: string) {\n    this.conversations.forEach((element) => {\n      if (element.id === message['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === message['messageId']) {\n            element.messages.splice(element.messages.indexOf(item), 1);\n          }\n        });\n      }\n    });\n\n    return this.findAllMessages(message['conversationId']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OauthController.html":{"url":"controllers/OauthController.html","title":"controller - OauthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OauthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                githubAuth\n                            \n                            \n                                githubAuthRedirect\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                googleAuthRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubAuth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github')@UseGuards(GithubGuard)\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        githubAuthRedirect\n                        \n                    \n                \n            \n            \n                \ngithubAuthRedirect(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/redirect')@UseGuards(GithubGuard)\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { access_token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@ApiOAuth2(['user:read'])@UseGuards(undefined)@ApiOperation({summary: 'Connect to your Google account (not execute directly).'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        googleAuthRedirect\n                        \n                    \n                \n            \n            \n                \ngoogleAuthRedirect(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@ApiOAuth2(['user:write'])@UseGuards(undefined)@ApiOperation({summary: 'Create login callback with your Google account (not execute directly).'})@HttpCode(HttpStatus.CREATED)@ApiCreatedResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    HttpCode,\n    HttpStatus,\n    Req,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n    ApiConflictResponse,\n    ApiCreatedResponse,\n    ApiInternalServerErrorResponse,\n    ApiMethodNotAllowedResponse,\n    ApiNotAcceptableResponse,\n    ApiNotFoundResponse,\n    ApiOAuth2,\n    ApiOkResponse,\n    ApiOperation,\n    ApiRequestTimeoutResponse,\n    ApiTags,\n    ApiTooManyRequestsResponse,\n} from '@nestjs/swagger';\nimport {\n    RESPONSES_MESSAGE,\n    STATUS_MESSAGE,\n    SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\nimport { AuthService } from '../auth/auth.service';\nimport { Public } from '../auth/decorators';\nimport { GithubGuard } from './guards/github.guard';\nimport { OauthService } from './oauth.service';\nimport { Request, Response } from 'express';\n\n@ApiTags('OAuth')\n@ApiNotFoundResponse({\n    description: SYSTEM_ERROR.NOT_FOUND,\n    type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n    description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n    description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n    description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Public()\n@Controller('oauth')\nexport class OauthController {\n    constructor(\n        private readonly oauthService: OauthService,\n        private readonly authService: AuthService,\n    ) {}\n\n    @Get('google')\n    @ApiOAuth2(['user:read'])\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary: 'Connect to your Google account (not execute directly).',\n    })\n    @HttpCode(HttpStatus.OK)\n    @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n    async googleAuth(@Req() req) {\n        return req;\n    }\n\n    @Get('google/redirect')\n    @ApiOAuth2(['user:write'])\n    @UseGuards(AuthGuard('google'))\n    @ApiOperation({\n        summary:\n            'Create login callback with your Google account (not execute directly).',\n    })\n    @HttpCode(HttpStatus.CREATED)\n    @ApiCreatedResponse({\n        description: RESPONSES_MESSAGE.CREATE_USER,\n    })\n    googleAuthRedirect(@Req() req) {\n        return this.oauthService.googleLogin(req);\n    }\n\n    // ------------------------------------------------------\n    @Get('github')\n    @UseGuards(GithubGuard)\n    async githubAuth() {\n        return 'github';\n    }\n\n    @Get('github/redirect')\n    @UseGuards(GithubGuard)\n    githubAuthRedirect(\n        @Req() req: Request,\n        @Res({ passthrough: true }) res: Response,\n    ) {\n        const user = req.user['data'];\n\n        console.log(\n            `${this.githubAuthRedirect.name}(): req.user = ${JSON.stringify(\n                user,\n                null,\n                4,\n            )}`,\n        );\n\n        const accessToken = this.authService.signinLocal(user);\n        return { access_token: accessToken };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OauthModule.html":{"url":"modules/OauthModule.html","title":"module - OauthModule","body":"\n                   \n\n\n\n\n    Modules\n    OauthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_OauthModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleStrategy\n                        \n                        \n                            OauthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OauthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OauthService } from './oauth.service';\nimport { OauthController } from './oauth.controller';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { AuthModule } from '../auth/auth.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n    imports: [AuthModule, UsersModule],\n    controllers: [OauthController],\n    providers: [OauthService, GoogleStrategy],\n})\nexport class OauthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OauthService.html":{"url":"injectables/OauthService.html","title":"injectable - OauthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OauthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOrCreate\n                            \n                            \n                                githubLogin\n                            \n                            \n                                googleLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(userId: string, provider: AuthProvider)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    provider\n                                    \n                                            AuthProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        githubLogin\n                        \n                    \n                \n            \n            \n                \ngithubLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     \"Not found user from github\" | { message: string; user: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        googleLogin\n                        \n                    \n                \n            \n            \n                \ngoogleLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/oauth/oauth.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     \"Not found user from google\" | { message: string; user: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthProvider } from './interface/provider';\n\n@Injectable()\nexport class OauthService {\n    googleLogin(req: any) {\n        if (!req.user) {\n            return 'Not found user from google';\n        }\n\n        return {\n            message: 'User information from google',\n            user: req.user,\n        };\n    }\n\n    githubLogin(req: any) {\n        if (!req) {\n            return 'Not found user from github';\n        }\n\n        return {\n            message: 'User information from github',\n            user: req,\n        };\n    }\n\n    async findOrCreate(userId: string, provider: AuthProvider) {\n        return {\n            id: '42195',\n            provider,\n            providerId: '123',\n            displayName: 'John Doe',\n            photos: [\n                { value: 'https://avatars.githubusercontent.com/u/28536201' },\n            ],\n        };\n    }\n}\n\n// {\"data\":{\"message\":\"User information from google\",\"user\":{\"email\":\"testershopee9@gmail.com\",\"firstName\":\"Commerce\",\"lastName\":\"Shopee\",\"picture\":\"https://lh3.googleusercontent.com/a/AItbvmnEB57ZObrQvXfgLIjSVy0EBphcmbFSqAfgqPNN=s96-c\",\"accessToken\":\"ya29.A0AVA9y1saRvWMVS4qatf0XfNnWghlqrkgOsvWQlhC4bWoZR4dGR2C6XckC-NTg-P8ySbSEsJ1G23UsPZzNNZ1eLpKykZLRnel2Sv1c8SbMZc6wKPyIlNzVyb2I7Lsi5qISqM2rA608q1uwI3nQLa6xZMT_MbGaCgYKATASATASFQE65dr8salWp_aAxzkflweuaHgpGA0163\"}}}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                limit\n                            \n                            \n                                order\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 1, nullable: true, description: 'Page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 10, nullable: true, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, description: 'asc, desc', example: 'asc', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    example: 1,\n    nullable: true,\n    description: 'Page number',\n  })\n  current: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    example: 10,\n    nullable: true,\n    description: 'Number of items per page',\n  })\n  limit: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    description: 'asc, desc',\n    example: 'asc',\n    nullable: true,\n  })\n  order: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                published\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class PostEntity {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  files: string[];\n\n  @IsBoolean()\n  @IsNotEmpty()\n  published: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n  ParseUUIDPipe,\n  Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  UpdatePostDto,\n  ReactionsPost,\n} from './dto/post/request';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiPayloadTooLargeResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n  ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n  ICreatePost,\n  IGetPostOfUser,\n  IGetPublicPost,\n  IUpdatePost,\n  IUpdateReaction,\n} from './dto/post/response';\nimport {\n  ICreateComment,\n  IGetComment,\n  IUpdateComment,\n} from './dto/comment/response';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Posts')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n  description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('posts')\nexport class PostsController {\n  constructor(private postsService: PostsService) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Get all posts of user by user-id' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  @ApiCreatedResponse({ description: 'Create new post successfuly' })\n  async createPost(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: CreatePostDto,\n  ): Promise {\n    return this.postsService.createPost(userId, dto);\n  }\n\n  @Post('private/all')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get all public and private posts of user',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllPostsOfUser(\n    @GetCurrentUserId() userId: string,\n  ): Promise | null {\n    return this.postsService.getAllPostsOfUser(userId);\n  }\n\n  @Get(':userId/all')\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all public posts of user by user-id' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllPublicPosts(\n    @Param('userId', new ParseUUIDPipe()) userId: string,\n  ): Promise | null {\n    return this.postsService.getAllPublicPosts(userId);\n  }\n\n  @Get(':postId')\n  @Public()\n  @ApiOperation({ summary: 'Get one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getOnePostById(\n    @Param('postId', new ParseUUIDPipe()) postId: string,\n  ): Promise {\n    return this.postsService.getOnePostById(postId);\n  }\n\n  @Patch('update')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updatePost(@Body() dto: UpdatePostDto): Promise {\n    return this.postsService.updatePost(dto);\n  }\n\n  @Delete('delete')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deletePost(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: DeleteOnePost,\n  ): Promise {\n    return this.postsService.deletePost(userId, dto);\n  }\n\n  @Post('reaction')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'React to post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async reactionPost(@Body() dto: ReactionsPost): Promise {\n    return this.postsService.reactionPost(dto);\n  }\n\n  @Public()\n  @Get(':postId/comments')\n  @ApiOperation({ summary: 'Get all comments of the post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllComments(\n    @Param('postId', new ParseUUIDPipe()) postId: string,\n  ): Promise {\n    console.log(postId);\n    return this.postsService.getAllComments(postId);\n  }\n\n  @Post('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Add a new comment to post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async addComment(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: CreateCommentDto,\n  ): Promise {\n    return this.postsService.addComment(userId, dto);\n  }\n\n  @Put('comments/update/text')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update a comment in post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateComment(\n    @Body() dto: UpdateCommentTextDto,\n  ): Promise {\n    return this.postsService.updateComment(dto);\n  }\n\n  @Delete('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete a comment in post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteComment(@Body() dto: DeleteCommentDto): Promise {\n    return this.postsService.deleteComment(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:243\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  ReactionsPost,\n  UpdatePostDto,\n} from './dto/post/request';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n  ICreatePost,\n  IGetPostOfUser,\n  IGetPublicPost,\n  IUpdatePost,\n  IUpdateReaction,\n} from './dto/post/response';\nimport {\n  ICreateComment,\n  IGetComment,\n  IUpdateComment,\n} from './dto/comment/response';\nimport {\n  POST_ERROR,\n  RESPONSES_MESSAGE,\n  USER_ERROR,\n} from 'src/core/constants/status-message';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createPost(userId: string, dto: CreatePostDto): Promise {\n    const post = await this.prismaService.post.create({\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        authorId: userId,\n        // categories: {\n        //   create: [\n        //     {\n        //       createAt: new Date(),\n        //       category: {\n        //         create: {\n        //           id: uuid(),\n        //           name: 'New category',\n        //         },\n        //       },\n        //     },\n        //   ],\n        // },\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        published: true,\n        authorId: true,\n        createdAt: true,\n      },\n    });\n    return post;\n  }\n\n  async getAllPostsOfUser(userId: string): Promise | null {\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        published: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllPublicPosts(userId: string): Promise | null {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    }\n    if (list.length === 0) {\n      throw new NotFoundException(POST_ERROR.EMPTY);\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n        published: true,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getOnePostById(postId: string): Promise {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        published: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async updatePost(dto: UpdatePostDto): Promise {\n    const list = await this.getOnePostById(dto.postId);\n\n    if (!list) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n\n    if (list.authorId !== dto.authorId) {\n      throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n    }\n\n    return await this.prismaService.post.update({\n      where: {\n        id: dto.postId,\n      },\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        published: dto.published,\n      },\n      select: {\n        title: true,\n        description: true,\n        published: true,\n        files: true,\n        updatedAt: true,\n      },\n    });\n  }\n\n  async deletePost(userId: string, dto: DeleteOnePost): Promise {\n    const identify = await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n      select: {\n        authorId: true,\n      },\n    });\n\n    if (!identify) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n\n    if (identify.authorId !== userId) {\n      throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n    }\n\n    await this.prismaService.post.delete({\n      where: {\n        id: dto.postId,\n      },\n    });\n    return 'This post has been deleted!';\n  }\n\n  async reactionPost(dto: ReactionsPost): Promise {\n    const checkExist = await this.prismaService.reaction.findMany({\n      where: {\n        postId: dto.postId,\n        userId: dto.favouritorId,\n      },\n    });\n\n    if (checkExist.length > 0) {\n      throw new BadRequestException('You already reacted to this post');\n    }\n    await this.prismaService.reaction.create({\n      data: {\n        userId: dto.favouritorId,\n        postId: dto.postId,\n        type: dto.reactionType,\n      },\n    });\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n      select: {\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllComments(postId: string): Promise {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n      select: {\n        comments: true,\n      },\n    });\n  }\n\n  async addComment(\n    userId: string,\n    dto: CreateCommentDto,\n  ): Promise {\n    const checkPost = await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n    });\n\n    if (!checkPost) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n    return this.prismaService.comment.create({\n      data: {\n        text: dto.text,\n        postId: dto.postId,\n        authorId: userId,\n      },\n    });\n  }\n\n  async updateComment(dto: UpdateCommentTextDto): Promise {\n    return await this.prismaService.comment.update({\n      where: {\n        id: dto.id,\n      },\n      data: {\n        text: dto.text,\n      },\n      select: {\n        text: true,\n        updatedAt: true,\n      },\n    });\n  }\n\n  async deleteComment(dto: DeleteCommentDto): Promise {\n    await this.prismaService.comment.delete({\n      where: {\n        id: dto.id,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_COMMENT;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService, ConfigModule],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    super({\n      datasources: {\n        db: {\n          url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n          // url: process.env.DATABASE_URL,\n        },\n      },\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE } from './roles.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    // return false;\n    const { request } = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () => user.roles.some((role) => user.roles.includes(role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n    constructor(\n        @Inject(ConfigService)\n        private config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            // secretOrKey: config.get('APP_SECRET'),\n            secretOrKey: process.env.APP_SECRET,\n            passReqToCallback: true,\n        });\n    }\n\n    validate(req: Request, payload: any) {\n        const refreshToken = req\n            .get('authorization')\n            .replace('Bearer', '')\n            .trim();\n        return {\n            ...payload,\n            refreshToken,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(timeout(1000));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n    data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n    implements NestInterceptor>\n{\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable> {\n        return next.handle().pipe(map((data) => ({ data })));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(\n  CreateMessageDto,\n) {\n  id: string;\n  conversationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from 'src/infrastructure/users/entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, [\n  'email',\n  'oldPassword',\n  'newPassword',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAvatarDto.html":{"url":"classes/UpdateUserAvatarDto.html","title":"class - UpdateUserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCoverDto.html":{"url":"classes/UpdateUserCoverDto.html","title":"class - UpdateUserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:75\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:101\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:111\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:88\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:51\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:65\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:58\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:83\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from './dto/request';\nimport { UsersService } from './users.service';\nimport {\n  IFindUserByEmail,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from './dto/response';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {\n    this.usersService = usersService;\n  }\n\n  @Public()\n  @Get('profile/:userIdOrUsername')\n  @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getPublicUserByIdOrUsername(\n    @Param('userIdOrUsername') userIdOrUsername: string,\n  ): Promise {\n    return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n  }\n\n  @Public()\n  @Get('find/:email')\n  @ApiOperation({ summary: 'Find user account by email' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getUserByEmail(\n    @Param('email') email: string,\n  ): Promise {\n    return this.usersService.getUserByEmail(email);\n  }\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Get user profile by user-id (all)',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async getUserProfile(\n    @GetCurrentUserId() userId: string,\n  ): Promise {\n    return this.usersService.getUserProfile(userId);\n  }\n\n  @Patch('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async updateUsersProfile(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserProfileDto,\n  ): Promise {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('profile/avatar')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateUsersAvatar(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserAvatarDto,\n  ): Promise {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('profile/cover')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image by user id' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateUsersCover(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserCoverDto,\n  ): Promise {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user profile by email & password' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async deleteUser(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: LoginDto,\n  ): Promise {\n    return this.usersService.deleteUser(userId, dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [PrismaModule, AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    // consumer\n    //   .apply(ExistedUserMiddleware)\n    //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  NotAcceptableException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from './dto/request';\nimport {\n  IAllUsers,\n  IFindUserByEmail,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from './dto/response';\nimport { PaginationDto } from 'src/core/common/pagination.dto';\nimport {\n  AUTH_ERROR,\n  RESPONSES_MESSAGE,\n  SYSTEM_ERROR,\n  USER_ERROR,\n} from 'src/core/constants/status-message';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prismaService: PrismaService) {}\n\n  async getAllUsers(dto: PaginationDto): Promise {\n    const total = await this.prismaService.user.count();\n    const users = await this.prismaService.user.findMany({\n      // skip: Number(dto.limit) * (Number(dto.current) - 1),\n      take: Number(dto.limit) || 10,\n      orderBy: {\n        id: dto.order as any,\n      },\n      select: {\n        id: true,\n        email: true,\n        username: true,\n        createdAt: true,\n      },\n    });\n    return {\n      total,\n      orderBy: dto.order || 'asc',\n      pageItems: users.length,\n      pageLimit: Number(dto.limit) || 10,\n      pageCurrent: Number(dto.current) || 1,\n      users: users,\n    };\n  }\n\n  async getPublicUserByIdOrUsername(\n    userIdOrUsername: string,\n  ): Promise {\n    const identify = await this.prismaService.user.findMany({\n      where: {\n        OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n      },\n    });\n    if (identify.length === 0)\n      throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return identify[0];\n  }\n\n  async getUserByEmail(email: string): Promise {\n    const identify = await this.prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n      select: {\n        username: true,\n        email: true,\n      },\n    });\n\n    if (!identify) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return identify;\n  }\n\n  async getUserProfile(userId: string): Promise {\n    const profile = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n\n    if (!profile) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return profile;\n  }\n\n  async updateUsersProfile(\n    userId: string,\n    dto: UpdateUserProfileDto,\n  ): Promise {\n    await this.prismaService.userProfile.upsert({\n      where: {\n        userId: userId,\n      },\n      create: {\n        ...dto,\n        userId: userId,\n      },\n      update: {\n        ...dto,\n      },\n    });\n    const newProfile = await this.getPublicUserByIdOrUsername(userId);\n    return newProfile;\n  }\n\n  async updateUsersAvatar(\n    userId: string,\n    dto: UpdateUserAvatarDto,\n  ): Promise {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newAvatar = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        profile: {\n          select: {\n            avatar: true,\n          },\n        },\n      },\n    });\n    return newAvatar;\n  }\n\n  async updateUsersCover(\n    userId: string,\n    dto: UpdateUserCoverDto,\n  ): Promise {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newCover = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        profile: {\n          select: {\n            cover: true,\n          },\n        },\n      },\n    });\n    return newCover;\n  }\n\n  async deleteUser(userId: string, dto: LoginDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        email: true,\n        password: true,\n      },\n    });\n\n    if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    const matchEmail: number = dto.password.localeCompare(user.password);\n    const matchPassword: boolean = await comparePassword(\n      dto.password,\n      user.password,\n    );\n\n    if (matchEmail === 0 || !matchPassword)\n      throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    if (!matchPassword)\n      throw new NotAcceptableException(AUTH_ERROR.PASSWORD_NOT_MATCH);\n\n    await this.prismaService.userProfile.delete({\n      where: {\n        userId: userId,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_USER;\n  }\n\n  async deleteUserById(userId: string): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n\n    await this.prismaService.user.delete({\n      where: {\n        id: userId,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_USER;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/src/main.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/router/index.ts\n            \n            variable\n            router\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/auth.service.ts\n            \n            class\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                client/src/services/auth.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/axios.config.ts\n            \n            variable\n            axiosConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/conversations.service.ts\n            \n            class\n            ConversationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                client/src/services/conversations.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/file.service.ts\n            \n            class\n            FileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                client/src/services/file.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/posts.service.ts\n            \n            class\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                client/src/services/posts.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/services/user.service.ts\n            \n            class\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                client/src/services/user.service.ts\n            \n            variable\n            ENDPOINT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/src/stores/counter.ts\n            \n            variable\n            useCounterStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/setup.config.ts\n            \n            function\n            setup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.config.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            AUTH_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            CONVERSATION_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            POST_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            RESPONSES_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            STATUS_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            SYSTEM_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            USER_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/exception.interceptor.ts\n            \n            injectable\n            ErrorsIntereptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            randomInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            class\n            MessagesGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/guards/github.guard.ts\n            \n            injectable\n            GithubGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.controller.ts\n            \n            controller\n            OauthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/oauth.service.ts\n            \n            injectable\n            OauthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/github.strategy.ts\n            \n            injectable\n            GithubStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/oauth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repl.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            nodeExternals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/terminus : ^9.1.1\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            express-session : ^1.17.3\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : ^4.2.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EAlcohol   (src/.../enum.ts)\n                        \n                        \n                            EEducation   (src/.../enum.ts)\n                        \n                        \n                            EGender   (src/.../enum.ts)\n                        \n                        \n                            EMaritalStatus   (src/.../enum.ts)\n                        \n                        \n                            ENotification   (src/.../enum.ts)\n                        \n                        \n                            EOrder   (src/.../enum.ts)\n                        \n                        \n                            EOtpStatus   (src/.../enum.ts)\n                        \n                        \n                            EReligion   (src/.../enum.ts)\n                        \n                        \n                            ESocial   (src/.../enum.ts)\n                        \n                        \n                            EUpdateUserProfile   (src/.../enum.ts)\n                        \n                        \n                            EUserRoles   (src/.../enum.ts)\n                        \n                        \n                            ROLE   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EAlcohol\n                    \n                \n                        \n                            \n                                 SOMETIMES\n                            \n                        \n                        \n                            \n                                Value : sometime\n                            \n                        \n                        \n                            \n                                 USUALLY\n                            \n                        \n                        \n                            \n                                Value : usually\n                            \n                        \n                        \n                            \n                                 NEVER\n                            \n                        \n                        \n                            \n                                Value : never\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EEducation\n                    \n                \n                        \n                            \n                                 PRIMARY\n                            \n                        \n                        \n                            \n                                Value : primary\n                            \n                        \n                        \n                            \n                                 SECONDARY\n                            \n                        \n                        \n                            \n                                Value : secondary\n                            \n                        \n                        \n                            \n                                 HIGH_SCHOOL\n                            \n                        \n                        \n                            \n                                Value : high_school\n                            \n                        \n                        \n                            \n                                 COLLEGE\n                            \n                        \n                        \n                            \n                                Value : college\n                            \n                        \n                        \n                            \n                                 UNIVERSITY\n                            \n                        \n                        \n                            \n                                Value : university\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EGender\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : femail\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EMaritalStatus\n                    \n                \n                        \n                            \n                                 SINGLE\n                            \n                        \n                        \n                            \n                                Value : single\n                            \n                        \n                        \n                            \n                                 MARRIED\n                            \n                        \n                        \n                            \n                                Value : married\n                            \n                        \n                        \n                            \n                                 DIVORCED\n                            \n                        \n                        \n                            \n                                Value : divorced\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ENotification\n                    \n                \n                        \n                            \n                                 LIKE\n                            \n                        \n                        \n                            \n                                Value : like\n                            \n                        \n                        \n                            \n                                 MESSAGE\n                            \n                        \n                        \n                            \n                                Value : message\n                            \n                        \n                        \n                            \n                                 MATCH\n                            \n                        \n                        \n                            \n                                Value : match\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EOrder\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EOtpStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : approved\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EReligion\n                    \n                \n                        \n                            \n                                 BUDDHISM\n                            \n                        \n                        \n                            \n                                Value : buddhism\n                            \n                        \n                        \n                            \n                                 GOD\n                            \n                        \n                        \n                            \n                                Value : god\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 NON_RELIGIONS\n                            \n                        \n                        \n                            \n                                Value : non-religion\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ESocial\n                    \n                \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EUpdateUserProfile\n                    \n                \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 GENDER\n                            \n                        \n                        \n                            \n                                Value : gender\n                            \n                        \n                        \n                            \n                                 DESCRIPTION\n                            \n                        \n                        \n                            \n                                Value : description\n                            \n                        \n                        \n                            \n                                 CHILDREN\n                            \n                        \n                        \n                            \n                                Value : children\n                            \n                        \n                        \n                            \n                                 ALCOHOL\n                            \n                        \n                        \n                            \n                                Value : alcohol\n                            \n                        \n                        \n                            \n                                 RELIGION\n                            \n                        \n                        \n                            \n                                Value : religion\n                            \n                        \n                        \n                            \n                                 HEIGHT\n                            \n                        \n                        \n                            \n                                Value : height\n                            \n                        \n                        \n                            \n                                 MARITAL_STATUS\n                            \n                        \n                        \n                            \n                                Value : maritalStatus\n                            \n                        \n                        \n                            \n                                 EDUCATION\n                            \n                        \n                        \n                            \n                                Value : education\n                            \n                        \n                        \n                            \n                                 PURPOSEID\n                            \n                        \n                        \n                            \n                                Value : purposeId\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EUserRoles\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    src/core/roles/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../repl.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            randomInt   (src/.../random.ts)\n                        \n                        \n                            setup   (src/.../setup.config.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/repl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInt\n                        \n                    \n                \n            \n            \n                \nrandomInt(min: number, max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/configs/setup.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setup\n                        \n                    \n                \n            \n            \n                \nsetup(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\n\n\nDatabase diagram\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAdmin\nAuth\n\n\n\n\n✅ Get list all users\n✅ Signup\n\n\n✅ Get user profile by id\n✅ Signin\n\n\n✅ Update user profile\n✅ Signout\n\n\n✅ Delete user by user-id\n✅ Refresh access-token\n\n\n\n✅  Update password\n\n\n\n\n\n\nOAuth\nFiles\n\n\n\n\n✅ Google signin\n✅ Upload single file (avatar, cover)\n\n\n⬜️ Facebook signin\n✅ Upload multi files\n\n\n⬜️ Github signin\n✅ Upload array-field files (post, sample_image)\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅ Create a new post\n\n\n✅ Find user account by email\n✅ Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅ Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅ Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅ Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅ Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\nWebpack hot-reload auto recompile the entire project each time a change occurs\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nPostgre x Heroku\nNest x Prisma\nDatabase for chat\nDatabase for social\n\nExample templates\n\nNest example\nNest awesome\nNest structure\nNest auth example\nNest social login\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nnpm run prisma:pull\n\n# generate the Prisma Client\nnpm run prisma:generate\n\n# Create env and migrate db\nnpm run prisma:migrate\n\n# Sync migrate change to db\nnpm run prisma:push# Open prisma studio\nnpm run prisma:studioRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OauthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_OauthModule\n\n\n\ncluster_OauthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nOauthModule\n\nOauthModule\n\nOauthModule -->\n\nUsersModule->OauthModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nOauthModule -->\n\nAuthModule->OauthModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nOauthModule->AppModule\n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nOauthModule -->\n\nGoogleStrategy->OauthModule\n\n\n\n\n\nOauthService\n\nOauthService\n\nOauthModule -->\n\nOauthService->OauthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    46 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.6.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github, chat, socket, passport, jwt, oauth2\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CreateNewConversationDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteConversationAdminsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            DeleteOnePostDto   (client/.../posts.dto.ts)\n                        \n                        \n                            DeleteUserProfile   (client/.../users.dto.ts)\n                        \n                        \n                            GetAllConversationsDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            GetAllPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicPostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            GetAllPublicUsersDto   (client/.../users.dto.ts)\n                        \n                        \n                            GetUserProfileDto   (client/.../users.dto.ts)\n                        \n                        \n                            SignUpLocalDto   (client/.../auth.dto.ts)\n                        \n                        \n                            UpdateConversationMembersDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateConversationRoles   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdateOneConversationByIdDto   (client/.../conversations.dto.ts)\n                        \n                        \n                            UpdatePostsDto   (client/.../posts.dto.ts)\n                        \n                        \n                            UploadAvatarDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadCoverDto   (client/.../files.dto.ts)\n                        \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            UploadPostsDto   (client/.../files.dto.ts)\n                        \n                        \n                            UpsertReactPostDto   (client/.../posts.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/src/dto/conversations.dto.ts\n    \n    \n        \n            \n                \n                    \n                    CreateNewConversationDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteConversationAdminsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllConversationsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationMembersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateConversationRoles\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateOneConversationByIdDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/src/dto/posts.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteOnePostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdatePostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpsertReactPostDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/src/dto/users.dto.ts\n    \n    \n        \n            \n                \n                    \n                    DeleteUserProfile\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetAllPublicUsersDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetUserProfileDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/src/dto/auth.dto.ts\n    \n    \n        \n            \n                \n                    \n                    SignUpLocalDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    client/src/dto/files.dto.ts\n    \n    \n        \n            \n                \n                    \n                    UploadAvatarDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadCoverDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UploadPostsDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            app   (client/.../main.ts)\n                        \n                        \n                            AUTH_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            axiosConfig   (client/.../axios.config.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            CONVERSATION_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            ENDPOINT   (client/.../auth.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../conversations.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../file.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../posts.service.ts)\n                        \n                        \n                            ENDPOINT   (client/.../user.service.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.config.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            nodeExternals   (webpack-hmr.config.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            POST_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSES_MESSAGE   (src/.../status-message.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            router   (client/.../index.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            STATUS_MESSAGE   (src/.../status-message.ts)\n                        \n                        \n                            SYSTEM_ERROR   (src/.../status-message.ts)\n                        \n                        \n                               (webpack-hmr.config.ts)\n                        \n                        \n                            useCounterStore   (client/.../counter.ts)\n                        \n                        \n                            USER_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createApp(App)\n                    \n                \n\n\n        \n    \n\n    src/core/constants/status-message.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SAME_PASSWORD: 'New password must be different from old password',\n  PASSWORD_NOT_MATCH: 'Password does not match',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CONVERSATION_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'Conversation not found',\n  NOT_CREATOR: 'You are not creator of this conversation',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'Post not found',\n  EMPTY: 'User not have post',\n  DUPLICATE: 'Post already exist',\n  NOT_AUTHOR: 'You are not author of this post',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSES_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  CREATE_USER: 'The new account has been created.',\n  DELETE_USER: 'The user account has been deleted.',\n  DELETE_COMMENT: 'The comment has been deleted.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATUS_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SUCCESS: 'Success.',\n  ERROR: 'Errors.',\n  WARNING: 'Warning.',\n  INFO: 'Info.',\n  UNKNOWN: 'Unknown.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  FORBIDDEN: 'Access denied',\n  NOT_FOUND: 'Not found',\n  INTERNAL_SERVER_ERROR: 'Internal server error',\n  BAD_REQUEST: 'Bad request',\n  UNAUTHORIZED: 'Unauthorized',\n  CONFLICT: 'Conflict',\n  TOO_MANY_REQUESTS: 'Too many requests',\n  METHOD_NOT_ALLOWED: 'Method not allowed',\n  NOT_ACCEPTABLE: 'Provided fields are not acceptable',\n  REQUEST_TIMEOUT: 'Request timeout',\n  PAYLOAD_TOO_LARGE: 'Payload too large',\n  UNSUPPORTED_MEDIA_TYPE: 'Unsupported media type',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'User not found',\n  DUPLICATE: 'User already exist',\n}\n                    \n                \n\n\n        \n    \n\n    client/src/services/axios.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        axiosConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                \n                    \n                        Default value : axios.create({\n  baseURL: import.meta.env.VITE_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n  },\n}) as AxiosInstance\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    client/src/services/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/auth'\n                    \n                \n\n\n        \n    \n\n    client/src/services/conversations.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/conversations'\n                    \n                \n\n\n        \n    \n\n    client/src/services/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/files'\n                    \n                \n\n\n        \n    \n\n    client/src/services/posts.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/posts'\n                    \n                \n\n\n        \n    \n\n    client/src/services/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/users'\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n    const config: ConfigService = app.get(ConfigService);\n\n    const swaggerConfig = new DocumentBuilder()\n        .setTitle('Teneno API')\n        .setDescription(\n            `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n        )\n        .setContact(\n            'Thuong Truong',\n            'https://github.com/thuongtruong1009',\n            'ititiu19228@student.hcmiu.edu.vn',\n        )\n        .addServer(config.get('BASE_URL'))\n        .addServer(config.get('HOST_URL'))\n        .setVersion('1.6.0')\n        .addTag('cats', 'default description')\n        .addBearerAuth({\n            type: 'http',\n            scheme: 'Bearer',\n            bearerFormat: 'JWT',\n            description: 'Paste a valid access token here.',\n            in: 'Header',\n        })\n        .addOAuth2({\n            type: 'oauth2',\n            description: 'Login with Google account',\n            flows: {\n                implicit: {\n                    authorizationUrl: config.get('GOOGLE_CALLBACK_URL'),\n                    scopes: {\n                        'user:write': 'create your account',\n                        'user:read': 'read your account',\n                    },\n                },\n            },\n        })\n        .addCookieAuth('optional-session-id')\n        .addBasicAuth()\n        .addSecurity('api_key', {\n            type: 'apiKey',\n            name: 'api_key',\n            in: 'header',\n        })\n        .build();\n\n    const options: ISwaggerOptions = {\n        operationIdFactory: (controllerKey: string, methodKey: string) =>\n            methodKey,\n    };\n    const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n    SwaggerModule.setup('api', app, document, {\n        swaggerOptions: {\n            persistAuthorization: true,\n        },\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    webpack-hmr.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodeExternals\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('webpack-node-externals')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('run-script-webpack-plugin')\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: ROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    client/src/router/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: () => import('../views/home.vue'),\n    },\n    {\n      path: '/about',\n      name: 'about',\n      component: () => import('../views/about.vue'),\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n\n    client/src/stores/counter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        useCounterStore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defineStore({\n  id: 'counter',\n  state: () => ({\n    counter: 0,\n  }),\n  getters: {\n    doubleCount: (state) => state.counter * 2,\n  },\n  actions: {\n    increment() {\n      this.counter++;\n    },\n  },\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
